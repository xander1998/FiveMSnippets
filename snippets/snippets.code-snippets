{
  "0": {
      "prefix": "CanPlayerStartCommerceSession",
      "body": [
          "CanPlayerStartCommerceSession(${1:char* playerSrc})${0}"
      ],
      "description": "Returns whether or not the specified player has enough information to start a commerce session for."
  },
  "1": {
      "prefix": "CancelEvent",
      "body": [
          "CancelEvent()${0}"
      ],
      "description": "Cancels the currently executing event."
  },
  "2": {
      "prefix": "AddTextEntryByHash",
      "body": [
          "AddTextEntryByHash(${1:Hash* entryKey}, ${2:char* entryText})${0}"
      ],
      "description": ""
  },
  "3": {
      "prefix": "AddReplaceTexture",
      "body": [
          "AddReplaceTexture(${1:char* origTxd}, ${2:char* origTxn}, ${3:char* newTxd}, ${4:char* newTxn})${0}"
      ],
      "description": "Experimental natives, please do not use in a live environment."
  },
  "4": {
      "prefix": "AddTextEntry",
      "body": [
          "AddTextEntry(${1:char* entryKey}, ${2:char* entryText})${0}"
      ],
      "description": ""
  },
  "5": {
      "prefix": "CallMinimapScaleformFunction",
      "body": [
          "CallMinimapScaleformFunction(${1:int* miniMap}, ${2:char* fnName})${0}"
      ],
      "description": "This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay."
  },
  "6": {
      "prefix": "AddAudioSubmixOutput",
      "body": [
          "AddAudioSubmixOutput(${1:int* submixId}, ${2:int* outputSubmixId})${0}"
      ],
      "description": "Adds an output for the specified audio submix."
  },
  "7": {
      "prefix": "AddMinimapOverlay",
      "body": [
          "AddMinimapOverlay(${1:char* name})${0}"
      ],
      "description": "Loads a minimap overlay from a GFx file in the current resource."
  },
  "8": {
      "prefix": "CommitRuntimeTexture",
      "body": [
          "CommitRuntimeTexture(${1:long* tex})${0}"
      ],
      "description": "Commits the backing pixels to the specified runtime texture."
  },
  "9": {
      "prefix": "CreateAudioSubmix",
      "body": [
          "CreateAudioSubmix(${1:char* name})${0}"
      ],
      "description": "Creates an audio submix with the specified name, or gets the existing audio submix by that name."
  },
  "10": {
      "prefix": "CreateRuntimeTextureFromDuiHandle",
      "body": [
          "CreateRuntimeTextureFromDuiHandle(${1:long* txd}, ${2:char* txn}, ${3:char* duiHandle})${0}"
      ],
      "description": "Creates a runtime texture from a DUI handle."
  },
  "11": {
      "prefix": "CreateRuntimeTexture",
      "body": [
          "CreateRuntimeTexture(${1:long* txd}, ${2:char* txn}, ${3:int* width}, ${4:int* height})${0}"
      ],
      "description": "Creates a blank runtime texture."
  },
  "12": {
      "prefix": "ExecuteCommand",
      "body": [
          "ExecuteCommand(${1:char* commandString})${0}"
      ],
      "description": ""
  },
  "13": {
      "prefix": "ExperimentalSaveCloneSync",
      "body": [
          "ExperimentalSaveCloneSync(${1:Entity* entity})${0}"
      ],
      "description": "This native is not implemented."
  },
  "14": {
      "prefix": "FindFirstObject",
      "body": [
          "FindFirstObject(${1:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "15": {
      "prefix": "CreateDui",
      "body": [
          "CreateDui(${1:char* url}, ${2:int* width}, ${3:int* height})${0}"
      ],
      "description": "Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."
  },
  "16": {
      "prefix": "ExperimentalLoadCloneCreate",
      "body": [
          "ExperimentalLoadCloneCreate(${1:char* data}, ${2:int* objectId}, ${3:char* tree})${0}"
      ],
      "description": "This native is not implemented."
  },
  "17": {
      "prefix": "ExperimentalLoadCloneSync",
      "body": [
          "ExperimentalLoadCloneSync(${1:Entity* entity}, ${2:char* data})${0}"
      ],
      "description": "This native is not implemented."
  },
  "18": {
      "prefix": "DeleteEntity",
      "body": [
          "DeleteEntity(${1:Entity* entity})${0}"
      ],
      "description": "Deletes the specified entity."
  },
  "19": {
      "prefix": "EndFindVehicle",
      "body": [
          "EndFindVehicle(${1:int* findHandle})${0}"
      ],
      "description": ""
  },
  "20": {
      "prefix": "ExperimentalSaveCloneCreate",
      "body": [
          "ExperimentalSaveCloneCreate(${1:Entity* entity})${0}"
      ],
      "description": "This native is not implemented."
  },
  "21": {
      "prefix": "CreateRuntimeTxd",
      "body": [
          "CreateRuntimeTxd(${1:char* name})${0}"
      ],
      "description": "Creates a runtime texture dictionary with the specified name.\r\nExample:\n\n```lua\nlocal txd = CreateRuntimeTxd('meow')\n```"
  },
  "22": {
      "prefix": "CreateRuntimeTextureFromImage",
      "body": [
          "CreateRuntimeTextureFromImage(${1:long* txd}, ${2:char* txn}, ${3:char* fileName})${0}"
      ],
      "description": "Creates a runtime texture from the specified file in the current resource."
  },
  "23": {
      "prefix": "FindFirstPed",
      "body": [
          "FindFirstPed(${1:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "24": {
      "prefix": "EnsureEntityStateBag",
      "body": [
          "EnsureEntityStateBag(${1:Entity* entity})${0}"
      ],
      "description": "Internal function for ensuring an entity has a state bag."
  },
  "25": {
      "prefix": "DeleteFunctionReference",
      "body": [
          "DeleteFunctionReference(${1:char* referenceIdentity})${0}"
      ],
      "description": ""
  },
  "26": {
      "prefix": "FindFirstPickup",
      "body": [
          "FindFirstPickup(${1:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "27": {
      "prefix": "FindFirstVehicle",
      "body": [
          "FindFirstVehicle(${1:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "28": {
      "prefix": "FindKvp",
      "body": [
          "FindKvp(${1:int* handle})${0}"
      ],
      "description": ""
  },
  "29": {
      "prefix": "DeleteResourceKvp",
      "body": [
          "DeleteResourceKvp(${1:char* key})${0}"
      ],
      "description": ""
  },
  "30": {
      "prefix": "DeleteResourceKvpNoSync",
      "body": [
          "DeleteResourceKvpNoSync(${1:char* key})${0}"
      ],
      "description": "Nonsynchronous [DELETE_RESOURCE_KVP](#\\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A)."
  },
  "31": {
      "prefix": "FindNextObject",
      "body": [
          "FindNextObject(${1:int* findHandle}, ${2:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "32": {
      "prefix": "GetEntityHealth",
      "body": [
          "GetEntityHealth(${1:Entity* entity})${0}"
      ],
      "description": "Currently it only works with peds."
  },
  "33": {
      "prefix": "GetEntityMaxHealth",
      "body": [
          "GetEntityMaxHealth(${1:Entity* entity})${0}"
      ],
      "description": "Currently it only works with peds."
  },
  "34": {
      "prefix": "GetEntityArchetypeName",
      "body": [
          "GetEntityArchetypeName(${1:Entity* entity})${0}"
      ],
      "description": "Returns entity's archetype name, if available."
  },
  "35": {
      "prefix": "DestroyDui",
      "body": [
          "DestroyDui(${1:long* duiObject})${0}"
      ],
      "description": "Destroys a DUI browser."
  },
  "36": {
      "prefix": "GetEntityCoords",
      "body": [
          "GetEntityCoords(${1:Entity* entity})${0}"
      ],
      "description": "Gets the current coordinates for a specified entity. This native is used server side when using OneSync.\n\nSee [GET_ENTITY_COORDS](#\\_0x3FEF770D40960D5A) for client side."
  },
  "37": {
      "prefix": "GetCurrentResourceName",
      "body": [
          "GetCurrentResourceName()${0}"
      ],
      "description": "Returns the name of the currently executing resource."
  },
  "38": {
      "prefix": "GetEntityHeading",
      "body": [
          "GetEntityHeading(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "39": {
      "prefix": "GetDuiHandle",
      "body": [
          "GetDuiHandle(${1:long* duiObject})${0}"
      ],
      "description": "Returns the NUI window handle for a specified DUI browser object."
  },
  "40": {
      "prefix": "FindNextPickup",
      "body": [
          "FindNextPickup(${1:int* findHandle}, ${2:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "41": {
      "prefix": "DoesEntityExist",
      "body": [
          "DoesEntityExist(${1:Object* entity})${0}"
      ],
      "description": ""
  },
  "42": {
      "prefix": "FindNextVehicle",
      "body": [
          "FindNextVehicle(${1:int* findHandle}, ${2:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "43": {
      "prefix": "FindNextPed",
      "body": [
          "FindNextPed(${1:int* findHandle}, ${2:Entity* outEntity})${0}"
      ],
      "description": ""
  },
  "44": {
      "prefix": "GetEntityModel",
      "body": [
          "GetEntityModel(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "45": {
      "prefix": "GetCurrentServerEndpoint",
      "body": [
          "GetCurrentServerEndpoint()${0}"
      ],
      "description": "Returns the peer address of the remote game server that the user is currently connected to."
  },
  "46": {
      "prefix": "GetEntityPopulationType",
      "body": [
          "GetEntityPopulationType(${1:Entity* entity})${0}"
      ],
      "description": "This native gets an entity's population type."
  },
  "47": {
      "prefix": "FlagServerAsPrivate",
      "body": [
          "FlagServerAsPrivate(${1:BOOL* private_})${0}"
      ],
      "description": ""
  },
  "48": {
      "prefix": "DoorSystemGetActive",
      "body": [
          "DoorSystemGetActive()${0}"
      ],
      "description": "Returns a list of door system entries: a door system hash (see [ADD_DOOR_TO_SYSTEM](#\\_0x6F8838D03D1DC226)) and its object handle.\n\nThe data returned adheres to the following layout:\n\n```\n[{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]\n```"
  },
  "49": {
      "prefix": "DoorSystemGetSize",
      "body": [
          "DoorSystemGetSize()${0}"
      ],
      "description": ""
  },
  "50": {
      "prefix": "DoesPlayerOwnSkuExt",
      "body": [
          "DoesPlayerOwnSkuExt(${1:char* playerSrc}, ${2:int* skuId})${0}"
      ],
      "description": "Requests whether or not the player owns the specified package."
  },
  "51": {
      "prefix": "EnableEnhancedHostSupport",
      "body": [
          "EnableEnhancedHostSupport(${1:BOOL* enabled})${0}"
      ],
      "description": ""
  },
  "52": {
      "prefix": "GetEntityRotation",
      "body": [
          "GetEntityRotation(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "53": {
      "prefix": "FlushResourceKvp",
      "body": [
          "FlushResourceKvp()${0}"
      ],
      "description": "Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.\n\nThis native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem."
  },
  "54": {
      "prefix": "DropPlayer",
      "body": [
          "DropPlayer(${1:char* playerSrc}, ${2:char* reason})${0}"
      ],
      "description": ""
  },
  "55": {
      "prefix": "DoesPlayerOwnSku",
      "body": [
          "DoesPlayerOwnSku(${1:char* playerSrc}, ${2:int* skuId})${0}"
      ],
      "description": "Requests whether or not the player owns the specified SKU."
  },
  "56": {
      "prefix": "GetInvokingResource",
      "body": [
          "GetInvokingResource()${0}"
      ],
      "description": ""
  },
  "57": {
      "prefix": "GetEntityRoutingBucket",
      "body": [
          "GetEntityRoutingBucket(${1:Entity* entity})${0}"
      ],
      "description": "Gets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware."
  },
  "58": {
      "prefix": "GetEntityRotationVelocity",
      "body": [
          "GetEntityRotationVelocity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "59": {
      "prefix": "GetActivePlayers",
      "body": [
          "GetActivePlayers()${0}"
      ],
      "description": "Returns all player indices for 'active' physical players known to the client.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```"
  },
  "60": {
      "prefix": "GetIsVehicleEngineRunning",
      "body": [
          "GetIsVehicleEngineRunning(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "61": {
      "prefix": "GetInteriorRoomIndexByHash",
      "body": [
          "GetInteriorRoomIndexByHash(${1:int* interiorId}, ${2:int* roomHash})${0}"
      ],
      "description": ""
  },
  "62": {
      "prefix": "GetAirDragMultiplierForPlayersVehicle",
      "body": [
          "GetAirDragMultiplierForPlayersVehicle(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "63": {
      "prefix": "GetInteriorRoomTimecycle",
      "body": [
          "GetInteriorRoomTimecycle(${1:int* interiorId}, ${2:int* roomIndex})${0}"
      ],
      "description": ""
  },
  "64": {
      "prefix": "GetEntitySpeed",
      "body": [
          "GetEntitySpeed(${1:Entity* entity})${0}"
      ],
      "description": "Gets the current speed of the entity in meters per second.\n\n```\nTo convert to MPH: speed * 2.236936\r\nTo convert to KPH: speed * 3.6\n```"
  },
  "65": {
      "prefix": "EndFindKvp",
      "body": [
          "EndFindKvp(${1:int* handle})${0}"
      ],
      "description": ""
  },
  "66": {
      "prefix": "EndFindPed",
      "body": [
          "EndFindPed(${1:int* findHandle})${0}"
      ],
      "description": ""
  },
  "67": {
      "prefix": "GetEntityScript",
      "body": [
          "GetEntityScript(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "68": {
      "prefix": "EndFindPickup",
      "body": [
          "EndFindPickup(${1:int* findHandle})${0}"
      ],
      "description": ""
  },
  "69": {
      "prefix": "GetIsVehiclePrimaryColourCustom",
      "body": [
          "GetIsVehiclePrimaryColourCustom(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "70": {
      "prefix": "DuplicateFunctionReference",
      "body": [
          "DuplicateFunctionReference(${1:char* referenceIdentity})${0}"
      ],
      "description": ""
  },
  "71": {
      "prefix": "ForceSnowPass",
      "body": [
          "ForceSnowPass(${1:BOOL* enabled})${0}"
      ],
      "description": "Forces the game snow pass to render."
  },
  "72": {
      "prefix": "EndFindObject",
      "body": [
          "EndFindObject(${1:int* findHandle})${0}"
      ],
      "description": ""
  },
  "73": {
      "prefix": "GetInteriorRoomName",
      "body": [
          "GetInteriorRoomName(${1:int* interiorId}, ${2:int* roomIndex})${0}"
      ],
      "description": ""
  },
  "74": {
      "prefix": "GetInteriorRoomExtents",
      "body": [
          "GetInteriorRoomExtents(${1:int* interiorId}, ${2:int* roomIndex}, ${3:float* bbMinX}, ${4:float* bbMinY}, ${5:float* bbMinZ}, ${6:float* bbMaxX}, ${7:float* bbMaxY}, ${8:float* bbMaxZ})${0}"
      ],
      "description": ""
  },
  "75": {
      "prefix": "GetEntityType",
      "body": [
          "GetEntityType(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "76": {
      "prefix": "GetInteriorRotation",
      "body": [
          "GetInteriorRotation(${1:int* interiorId}, ${2:float* rotx}, ${3:float* rotY}, ${4:float* rotZ}, ${5:float* rotW})${0}"
      ],
      "description": ""
  },
  "77": {
      "prefix": "GetIsVehicleSecondaryColourCustom",
      "body": [
          "GetIsVehicleSecondaryColourCustom(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "78": {
      "prefix": "GetInteriorRoomFlag",
      "body": [
          "GetInteriorRoomFlag(${1:int* interiorId}, ${2:int* roomIndex})${0}"
      ],
      "description": ""
  },
  "79": {
      "prefix": "GetAllRopes",
      "body": [
          "GetAllRopes()${0}"
      ],
      "description": "Returns all rope handles. The data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```"
  },
  "80": {
      "prefix": "GetPlayerCameraRotation",
      "body": [
          "GetPlayerCameraRotation(${1:char* playerSrc})${0}"
      ],
      "description": "Gets the current camera rotation for a specified player. This native is used server side when using OneSync."
  },
  "81": {
      "prefix": "GetAmbientVehicleRangeMultiplier",
      "body": [
          "GetAmbientVehicleRangeMultiplier()${0}"
      ],
      "description": "A getter for [SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x90B6DA738A9A25DA)."
  },
  "82": {
      "prefix": "GetPedScriptTaskStage",
      "body": [
          "GetPedScriptTaskStage(${1:Ped* ped})${0}"
      ],
      "description": "Gets the stage of the peds scripted task."
  },
  "83": {
      "prefix": "GetAllVehicles",
      "body": [
          "GetAllVehicles()${0}"
      ],
      "description": "Returns all vehicle handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```"
  },
  "84": {
      "prefix": "GetEntityVelocity",
      "body": [
          "GetEntityVelocity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "85": {
      "prefix": "GetPlayerEndpoint",
      "body": [
          "GetPlayerEndpoint(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "86": {
      "prefix": "GetMapZoomDataLevel",
      "body": [
          "GetMapZoomDataLevel(${1:int* index}, ${2:float* zoomScale}, ${3:float* zoomSpeed}, ${4:float* scrollSpeed}, ${5:float* tilesX}, ${6:float* tilesY})${0}"
      ],
      "description": "Returns the zoom level data by index from mapzoomdata.meta file."
  },
  "87": {
      "prefix": "GetCamMatrix",
      "body": [
          "GetCamMatrix(${1:Cam* camera}, ${2:Vector3* rightVector}, ${3:Vector3* forwardVector}, ${4:Vector3* upVector}, ${5:Vector3* position})${0}"
      ],
      "description": "Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse."
  },
  "88": {
      "prefix": "GetPlayerFakeWantedLevel",
      "body": [
          "GetPlayerFakeWantedLevel(${1:char* playerSrc})${0}"
      ],
      "description": "Gets the current fake wanted level for a specified player. This native is used server side when using OneSync."
  },
  "89": {
      "prefix": "GetGameBuildNumber",
      "body": [
          "GetGameBuildNumber()${0}"
      ],
      "description": "Returns the internal build number of the current game being executed.\n\nPossible values:\n\n*   FiveM\n    *   1604\n    *   2060\n    *   2189\n    *   2372\n*   RedM\n    *   1311\n    *   1355\n    *   1436\n*   LibertyM\n    *   43\n*   FXServer\n    *   0"
  },
  "90": {
      "prefix": "GetAllObjects",
      "body": [
          "GetAllObjects()${0}"
      ],
      "description": "Returns all object handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```"
  },
  "91": {
      "prefix": "GetCurrentGameName",
      "body": [
          "GetCurrentGameName()${0}"
      ],
      "description": "This native returns the currently used game's name."
  },
  "92": {
      "prefix": "GetPedSourceOfDeath",
      "body": [
          "GetPedSourceOfDeath(${1:Ped* ped})${0}"
      ],
      "description": "Get the entity that killed the ped. This native is used server side when using OneSync."
  },
  "93": {
      "prefix": "GetAmbientPedRangeMultiplier",
      "body": [
          "GetAmbientPedRangeMultiplier()${0}"
      ],
      "description": "A getter for [SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x0B919E1FB47CC4E0)."
  },
  "94": {
      "prefix": "GetConvarInt",
      "body": [
          "GetConvarInt(${1:char* varName}, ${2:int* default_})${0}"
      ],
      "description": ""
  },
  "95": {
      "prefix": "GetAllPeds",
      "body": [
          "GetAllPeds()${0}"
      ],
      "description": "Returns all peds handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```"
  },
  "96": {
      "prefix": "GetLandingGearState",
      "body": [
          "GetLandingGearState(${1:Vehicle* vehicle})${0}"
      ],
      "description": "See the client-side [GET_LANDING_GEAR_STATE](#\\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states."
  },
  "97": {
      "prefix": "GetNetworkWalkMode",
      "body": [
          "GetNetworkWalkMode()${0}"
      ],
      "description": ""
  },
  "98": {
      "prefix": "GetConsoleBuffer",
      "body": [
          "GetConsoleBuffer()${0}"
      ],
      "description": "Returns the current console output buffer."
  },
  "99": {
      "prefix": "GetNuiCursorPosition",
      "body": [
          "GetNuiCursorPosition(${1:int* x}, ${2:int* y})${0}"
      ],
      "description": ""
  },
  "100": {
      "prefix": "GetGameTimer",
      "body": [
          "GetGameTimer()${0}"
      ],
      "description": "Gets the current game timer in milliseconds."
  },
  "101": {
      "prefix": "GetConvar",
      "body": [
          "GetConvar(${1:char* varName}, ${2:char* default_})${0}"
      ],
      "description": ""
  },
  "102": {
      "prefix": "GetLastPedInVehicleSeat",
      "body": [
          "GetLastPedInVehicleSeat(${1:Vehicle* vehicle}, ${2:int* index})${0}"
      ],
      "description": "Seat indexes:\n\n*   1 = Driver\n*   2 = Front Right Passenger\n*   3 = Back Left Passenger\n*   4 = Back Right Passenger\n*   5 = Further Back Left Passenger (vehicles > 4 seats)\n*   6 = Further Back Right Passenger (vehicles > 4 seats)\n*   etc."
  },
  "103": {
      "prefix": "GetGamePool",
      "body": [
          "GetGamePool(${1:char* poolname})${0}"
      ],
      "description": "Returns all pool handles for the given pool name; the data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```\n\n### Supported Pools\n\n**1**: CPed\\\n**2**: CObject\\\n**3**: CVehicle\\\n**4**: CPickup"
  },
  "104": {
      "prefix": "GetGameName",
      "body": [
          "GetGameName()${0}"
      ],
      "description": "Returns the current game being executed.\n\nPossible values:\n\n| Return value | Meaning                        |\r\n| ------------ | ------------------------------ |\r\n| `fxserver`   | Server-side code ('Duplicity') |\r\n| `fivem`      | FiveM for GTA V                |\r\n| `libertym`   | LibertyM for GTA IV            |\r\n| `redm`       | RedM for Red Dead Redemption 2 |"
  },
  "105": {
      "prefix": "GetPedMaxHealth",
      "body": [
          "GetPedMaxHealth(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "106": {
      "prefix": "GetPedSourceOfDamage",
      "body": [
          "GetPedSourceOfDamage(${1:Ped* ped})${0}"
      ],
      "description": "Get the last entity that damaged the ped. This native is used server side when using OneSync."
  },
  "107": {
      "prefix": "GetNumPlayerIdentifiers",
      "body": [
          "GetNumPlayerIdentifiers(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "108": {
      "prefix": "GetInstanceId",
      "body": [
          "GetInstanceId()${0}"
      ],
      "description": ""
  },
  "109": {
      "prefix": "GetPedSpecificTaskType",
      "body": [
          "GetPedSpecificTaskType(${1:Ped* ped}, ${2:int* index})${0}"
      ],
      "description": "Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.\r\nA ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc."
  },
  "110": {
      "prefix": "GetPlayerWeaponDefenseModifier2",
      "body": [
          "GetPlayerWeaponDefenseModifier2(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [\\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\\_2](#\\_0xBCFDE9EDE4CF27DC)."
  },
  "111": {
      "prefix": "GetInteriorPortalCount",
      "body": [
          "GetInteriorPortalCount(${1:int* interiorId})${0}"
      ],
      "description": ""
  },
  "112": {
      "prefix": "GetPlayerFromServerId",
      "body": [
          "GetPlayerFromServerId(${1:int* serverId})${0}"
      ],
      "description": ""
  },
  "113": {
      "prefix": "GetRegisteredCommands",
      "body": [
          "GetRegisteredCommands()${0}"
      ],
      "description": "Returns all commands that are registered in the command system.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\"\r\n},\r\n{\r\n\"name\": \"command1\"\r\n}\r\n]\n```"
  },
  "114": {
      "prefix": "GetPlayerInvincible",
      "body": [
          "GetPlayerInvincible(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "115": {
      "prefix": "GetPlayerIdentifier",
      "body": [
          "GetPlayerIdentifier(${1:char* playerSrc}, ${2:int* identifier})${0}"
      ],
      "description": ""
  },
  "116": {
      "prefix": "GetNumPlayerIndices",
      "body": [
          "GetNumPlayerIndices()${0}"
      ],
      "description": ""
  },
  "117": {
      "prefix": "GetInteriorEntitiesExtents",
      "body": [
          "GetInteriorEntitiesExtents(${1:int* interiorId}, ${2:float* bbMinX}, ${3:float* bbMinY}, ${4:float* bbMinZ}, ${5:float* bbMaxX}, ${6:float* bbMaxY}, ${7:float* bbMaxZ})${0}"
      ],
      "description": ""
  },
  "118": {
      "prefix": "GetNumPlayerTokens",
      "body": [
          "GetNumPlayerTokens(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "119": {
      "prefix": "GetPlayerInvincible2",
      "body": [
          "GetPlayerInvincible2(${1:Player* player})${0}"
      ],
      "description": "Unlike [GET_PLAYER_INVINCIBLE](#\\_0xB721981B2B939E07) this native gets both [SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED](#\\_0x6BC97F4F4BB3C04B) and [SET_PLAYER_INVINCIBLE](#\\_0x239528EACDC3E7DE) invincibility state."
  },
  "120": {
      "prefix": "GetResourceKvpFloat",
      "body": [
          "GetResourceKvpFloat(${1:char* key})${0}"
      ],
      "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938)."
  },
  "121": {
      "prefix": "GetInteriorPortalFlag",
      "body": [
          "GetInteriorPortalFlag(${1:int* interiorId}, ${2:int* portalIndex})${0}"
      ],
      "description": ""
  },
  "122": {
      "prefix": "GetResourceKvpString",
      "body": [
          "GetResourceKvpString(${1:char* key})${0}"
      ],
      "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B)."
  },
  "123": {
      "prefix": "GetHashKey",
      "body": [
          "GetHashKey(${1:char* model})${0}"
      ],
      "description": "This native converts the passed string to a hash."
  },
  "124": {
      "prefix": "GetParkedVehicleDensityMultiplier",
      "body": [
          "GetParkedVehicleDensityMultiplier()${0}"
      ],
      "description": "A getter for [SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xEAE6DCC7EEE3DB1D)."
  },
  "125": {
      "prefix": "GetHostId",
      "body": [
          "GetHostId()${0}"
      ],
      "description": ""
  },
  "126": {
      "prefix": "GetInteriorPortalCornerPosition",
      "body": [
          "GetInteriorPortalCornerPosition(${1:int* interiorId}, ${2:int* portalIndex}, ${3:int* cornerIndex}, ${4:float* posX}, ${5:float* posY}, ${6:float* posZ})${0}"
      ],
      "description": ""
  },
  "127": {
      "prefix": "GetPedScriptTaskCommand",
      "body": [
          "GetPedScriptTaskCommand(${1:Ped* ped})${0}"
      ],
      "description": "Gets the script task command currently assigned to the ped."
  },
  "128": {
      "prefix": "GetInteriorRoomCount",
      "body": [
          "GetInteriorRoomCount(${1:int* interiorId})${0}"
      ],
      "description": ""
  },
  "129": {
      "prefix": "GetPlayerGuid",
      "body": [
          "GetPlayerGuid(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "130": {
      "prefix": "GetResourceKvpInt",
      "body": [
          "GetResourceKvpInt(${1:char* key})${0}"
      ],
      "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8)."
  },
  "131": {
      "prefix": "GetInteriorPortalRoomTo",
      "body": [
          "GetInteriorPortalRoomTo(${1:int* interiorId}, ${2:int* portalIndex})${0}"
      ],
      "description": ""
  },
  "132": {
      "prefix": "GetInteriorPosition",
      "body": [
          "GetInteriorPosition(${1:int* interiorId}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})${0}"
      ],
      "description": ""
  },
  "133": {
      "prefix": "GetPlayerFromIndex",
      "body": [
          "GetPlayerFromIndex(${1:int* index})${0}"
      ],
      "description": ""
  },
  "134": {
      "prefix": "GetInteriorPortalRoomFrom",
      "body": [
          "GetInteriorPortalRoomFrom(${1:int* interiorId}, ${2:int* portalIndex})${0}"
      ],
      "description": ""
  },
  "135": {
      "prefix": "GetPlayerWeaponDamageModifier",
      "body": [
          "GetPlayerWeaponDamageModifier(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\\_0xCE07B9F7817AADA3)."
  },
  "136": {
      "prefix": "GetVehicleCustomPrimaryColour",
      "body": [
          "GetVehicleCustomPrimaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "137": {
      "prefix": "GetNumResources",
      "body": [
          "GetNumResources()${0}"
      ],
      "description": ""
  },
  "138": {
      "prefix": "GetResourceByFindIndex",
      "body": [
          "GetResourceByFindIndex(${1:int* findIndex})${0}"
      ],
      "description": ""
  },
  "139": {
      "prefix": "GetVehicleDensityMultiplier",
      "body": [
          "GetVehicleDensityMultiplier()${0}"
      ],
      "description": "A getter for [SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x245A6883D966D537)."
  },
  "140": {
      "prefix": "GetPlayerMaxArmour",
      "body": [
          "GetPlayerMaxArmour(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "141": {
      "prefix": "GetVehicleDashboardColour",
      "body": [
          "GetVehicleDashboardColour(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": ""
  },
  "142": {
      "prefix": "GetVehicleDoorLockStatus",
      "body": [
          "GetVehicleDoorLockStatus(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nenum VehicleLockStatus = {\r\n    None = 0,\r\n    Unlocked = 1,\r\n    Locked = 2,\r\n    LockedForPlayer = 3,\r\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\r\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\r\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\r\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\r\n}\n```"
  },
  "143": {
      "prefix": "GetRopeTimeMultiplier",
      "body": [
          "GetRopeTimeMultiplier(${1:int* rope})${0}"
      ],
      "description": ""
  },
  "144": {
      "prefix": "GetRopeLengthChangeRate",
      "body": [
          "GetRopeLengthChangeRate(${1:int* rope})${0}"
      ],
      "description": ""
  },
  "145": {
      "prefix": "GetNumResourceMetadata",
      "body": [
          "GetNumResourceMetadata(${1:char* resourceName}, ${2:char* metadataKey})${0}"
      ],
      "description": "Gets the amount of metadata values with the specified key existing in the specified resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)"
  },
  "146": {
      "prefix": "GetRopeFlags",
      "body": [
          "GetRopeFlags(${1:int* rope})${0}"
      ],
      "description": "```cpp\nenum eRopeFlags\r\n{\r\n    DrawShadowEnabled = 2,\r\n\tBreakable = 4,\r\n\tRopeUnwindingFront = 8,\r\n\tRopeWinding = 32\r\n}\n```"
  },
  "147": {
      "prefix": "GetPlayerName",
      "body": [
          "GetPlayerName(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "148": {
      "prefix": "GetResourcePath",
      "body": [
          "GetResourcePath(${1:char* resourceName})${0}"
      ],
      "description": "Returns the physical on-disk path of the specified resource."
  },
  "149": {
      "prefix": "GetPlayerLastMsg",
      "body": [
          "GetPlayerLastMsg(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "150": {
      "prefix": "GetRandomVehicleDensityMultiplier",
      "body": [
          "GetRandomVehicleDensityMultiplier()${0}"
      ],
      "description": "A getter for [SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xB3B3359379FE77D3).\r\nSame as vehicle density multiplier."
  },
  "151": {
      "prefix": "GetPlayerMaxHealth",
      "body": [
          "GetPlayerMaxHealth(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "152": {
      "prefix": "GetPasswordHash",
      "body": [
          "GetPasswordHash(${1:char* password})${0}"
      ],
      "description": ""
  },
  "153": {
      "prefix": "GetPedEyeColor",
      "body": [
          "GetPedEyeColor(${1:Ped* ped})${0}"
      ],
      "description": "A getter for [\\_SET_PED_EYE_COLOR](#\\_0x50B56988B170AFDF). Returns -1 if fails to get."
  },
  "154": {
      "prefix": "GetPedDensityMultiplier",
      "body": [
          "GetPedDensityMultiplier()${0}"
      ],
      "description": "A getter for [SET_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x95E3D6257B166CF2)."
  },
  "155": {
      "prefix": "GetPedFaceFeature",
      "body": [
          "GetPedFaceFeature(${1:Ped* ped}, ${2:int* index})${0}"
      ],
      "description": "A getter for [\\_SET_PED_FACE_FEATURE](#\\_0x71A5C1DBA060049E). Returns 0.0 if fails to get."
  },
  "156": {
      "prefix": "GetPedCauseOfDeath",
      "body": [
          "GetPedCauseOfDeath(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "157": {
      "prefix": "GetVehicleCurrentGear",
      "body": [
          "GetVehicleCurrentGear(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "158": {
      "prefix": "GetPedDesiredHeading",
      "body": [
          "GetPedDesiredHeading(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "159": {
      "prefix": "GetVehicleNumberPlateTextIndex",
      "body": [
          "GetVehicleNumberPlateTextIndex(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "160": {
      "prefix": "GetPedArmour",
      "body": [
          "GetPedArmour(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "161": {
      "prefix": "GetVehicleSteeringAngle",
      "body": [
          "GetVehicleSteeringAngle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "162": {
      "prefix": "GetResourceState",
      "body": [
          "GetResourceState(${1:char* resourceName})${0}"
      ],
      "description": "Returns the current state of the specified resource."
  },
  "163": {
      "prefix": "GetVehiclePedIsIn",
      "body": [
          "GetVehiclePedIsIn(${1:Ped* ped}, ${2:BOOL* lastVehicle})${0}"
      ],
      "description": "Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync."
  },
  "164": {
      "prefix": "GetVehicleRadioStationIndex",
      "body": [
          "GetVehicleRadioStationIndex(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "165": {
      "prefix": "GetPlayerWeaponDefenseModifier",
      "body": [
          "GetPlayerWeaponDefenseModifier(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\\_0x2D83BC011CA14A3C)."
  },
  "166": {
      "prefix": "GetVehicleDirtLevel",
      "body": [
          "GetVehicleDirtLevel(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "167": {
      "prefix": "GetPedHairColor",
      "body": [
          "GetPedHairColor(${1:Ped* ped})${0}"
      ],
      "description": "A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get."
  },
  "168": {
      "prefix": "GetRuntimeTextureHeight",
      "body": [
          "GetRuntimeTextureHeight(${1:long* tex})${0}"
      ],
      "description": "Gets the height of the specified runtime texture."
  },
  "169": {
      "prefix": "GetVehicleExtraColours",
      "body": [
          "GetVehicleExtraColours(${1:Vehicle* vehicle}, ${2:int* pearlescentColor}, ${3:int* wheelColor})${0}"
      ],
      "description": ""
  },
  "170": {
      "prefix": "GetVehicleEngineHealth",
      "body": [
          "GetVehicleEngineHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "171": {
      "prefix": "GetVehicleDoorStatus",
      "body": [
          "GetVehicleDoorStatus(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "172": {
      "prefix": "GetVehicleDashboardSpeed",
      "body": [
          "GetVehicleDashboardSpeed(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "173": {
      "prefix": "GetResourceMetadata",
      "body": [
          "GetResourceMetadata(${1:char* resourceName}, ${2:char* metadataKey}, ${3:int* index})${0}"
      ],
      "description": "Gets the metadata value at a specified key/index from a resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)"
  },
  "174": {
      "prefix": "GetPlayerMeleeWeaponDamageModifier",
      "body": [
          "GetPlayerMeleeWeaponDamageModifier(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\\_0x4A3DC7ECCC321032)."
  },
  "175": {
      "prefix": "GetPedInVehicleSeat",
      "body": [
          "GetPedInVehicleSeat(${1:Vehicle* vehicle}, ${2:int* index})${0}"
      ],
      "description": "Seat indexes:\n\n*   1 = Driver\n*   2 = Front Right Passenger\n*   3 = Back Left Passenger\n*   4 = Back Right Passenger\n*   5 = Further Back Left Passenger (vehicles > 4 seats)\n*   6 = Further Back Right Passenger (vehicles > 4 seats)\n*   etc."
  },
  "176": {
      "prefix": "GetPlayerMeleeWeaponDefenseModifier",
      "body": [
          "GetPlayerMeleeWeaponDefenseModifier(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER](#\\_0xAE540335B4ABC4E2)."
  },
  "177": {
      "prefix": "GetPedHairHighlightColor",
      "body": [
          "GetPedHairHighlightColor(${1:Ped* ped})${0}"
      ],
      "description": "A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get."
  },
  "178": {
      "prefix": "GetVehicleEngineTemperature",
      "body": [
          "GetVehicleEngineTemperature(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "179": {
      "prefix": "GetRuntimeTexturePitch",
      "body": [
          "GetRuntimeTexturePitch(${1:long* tex})${0}"
      ],
      "description": "Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`."
  },
  "180": {
      "prefix": "GetRopeUpdateOrder",
      "body": [
          "GetRopeUpdateOrder(${1:int* rope})${0}"
      ],
      "description": ""
  },
  "181": {
      "prefix": "GetPedHeadOverlayData",
      "body": [
          "GetPedHeadOverlayData(${1:Ped* ped}, ${2:int* index}, ${3:int* overlayValue}, ${4:int* colourType}, ${5:int* firstColour}, ${6:int* secondColour}, ${7:float* overlayOpacity})${0}"
      ],
      "description": "A getter for [SET_PED_HEAD_OVERLAY](#\\_0x48F44967FA05CC1E) and [\\_SET_PED_HEAD_OVERLAY_COLOR](#\\_0x497BF74A7B9CB952) natives."
  },
  "182": {
      "prefix": "GetPlayerPed",
      "body": [
          "GetPlayerPed(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "183": {
      "prefix": "GetSelectedPedWeapon",
      "body": [
          "GetSelectedPedWeapon(${1:Ped* ped})${0}"
      ],
      "description": "Returns a hash of selected ped weapon."
  },
  "184": {
      "prefix": "GetPlayerToken",
      "body": [
          "GetPlayerToken(${1:char* playerSrc}, ${2:int* index})${0}"
      ],
      "description": "Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server."
  },
  "185": {
      "prefix": "GetVehicleRoofLivery",
      "body": [
          "GetVehicleRoofLivery(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "186": {
      "prefix": "GetVehicleNumberOfWheels",
      "body": [
          "GetVehicleNumberOfWheels(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "187": {
      "prefix": "GetVehicleCustomSecondaryColour",
      "body": [
          "GetVehicleCustomSecondaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "188": {
      "prefix": "GetPlayerServerId",
      "body": [
          "GetPlayerServerId(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "189": {
      "prefix": "GetVehicleDrawnWheelAngleMult",
      "body": [
          "GetVehicleDrawnWheelAngleMult(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered."
  },
  "190": {
      "prefix": "GetPlayerPing",
      "body": [
          "GetPlayerPing(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "191": {
      "prefix": "GetPlayerTeam",
      "body": [
          "GetPlayerTeam(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "192": {
      "prefix": "GetPlayerTimeInPursuit",
      "body": [
          "GetPlayerTimeInPursuit(${1:char* playerSrc}, ${2:BOOL* lastPursuit})${0}"
      ],
      "description": "```\nGets the amount of time player has spent evading the cops.\r\nCounter starts and increments only when cops are chasing the player.\r\nIf the player is evading, the timer will pause.\n```"
  },
  "193": {
      "prefix": "GetVehiclePetrolTankHealth",
      "body": [
          "GetVehiclePetrolTankHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "194": {
      "prefix": "GetVehicleFuelLevel",
      "body": [
          "GetVehicleFuelLevel(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "195": {
      "prefix": "GetVehicleCurrentRpm",
      "body": [
          "GetVehicleCurrentRpm(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "196": {
      "prefix": "GetPlayerRoutingBucket",
      "body": [
          "GetPlayerRoutingBucket(${1:char* playerSrc})${0}"
      ],
      "description": "Gets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware."
  },
  "197": {
      "prefix": "GetVehicleTyreSmokeColor",
      "body": [
          "GetVehicleTyreSmokeColor(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "198": {
      "prefix": "GetPlayerVehicleDamageModifier",
      "body": [
          "GetPlayerVehicleDamageModifier(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [SET_PLAYER_VEHICLE_DAMAGE_MODIFIER](#\\_0xA50E117CDDF82F0C)."
  },
  "199": {
      "prefix": "GetVehicleThrottleOffset",
      "body": [
          "GetVehicleThrottleOffset(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "200": {
      "prefix": "GetVehicleTurboPressure",
      "body": [
          "GetVehicleTurboPressure(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "201": {
      "prefix": "HasMinimapOverlayLoaded",
      "body": [
          "HasMinimapOverlayLoaded(${1:int* id})${0}"
      ],
      "description": "Returns whether or not the specific minimap overlay has loaded."
  },
  "202": {
      "prefix": "GetVehicleDoorsLockedForPlayer",
      "body": [
          "GetVehicleDoorsLockedForPlayer(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Currently it only works when set to \"all players\"."
  },
  "203": {
      "prefix": "GetVehicleWheelYRotation",
      "body": [
          "GetVehicleWheelYRotation(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": ""
  },
  "204": {
      "prefix": "InvokeFunctionReference",
      "body": [
          "InvokeFunctionReference(${1:char* referenceIdentity}, ${2:char* argsSerialized}, ${3:int* argsLength}, ${4:int* retvalLength})${0}"
      ],
      "description": ""
  },
  "205": {
      "prefix": "GetWeaponDamageModifier",
      "body": [
          "GetWeaponDamageModifier(${1:Hash* weaponHash})${0}"
      ],
      "description": "A getter for [\\_SET_WEAPON_DAMAGE_MODIFIER](#\\_0x4757F00BC6323CFE)."
  },
  "206": {
      "prefix": "GetVehicleGravityAmount",
      "body": [
          "GetVehicleGravityAmount(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "207": {
      "prefix": "GetScenarioPedDensityMultiplier",
      "body": [
          "GetScenarioPedDensityMultiplier()${0}"
      ],
      "description": "A getter for [SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x7A556143A1C03898)."
  },
  "208": {
      "prefix": "GetRuntimeTextureWidth",
      "body": [
          "GetRuntimeTextureWidth(${1:long* tex})${0}"
      ],
      "description": "Gets the width of the specified runtime texture."
  },
  "209": {
      "prefix": "GetPlayerVehicleDefenseModifier",
      "body": [
          "GetPlayerVehicleDefenseModifier(${1:Player* playerId})${0}"
      ],
      "description": "A getter for [SET_PLAYER_VEHICLE_DEFENSE_MODIFIER](#\\_0x4C60E6EFDAFF2462)."
  },
  "210": {
      "prefix": "GetVehicleType",
      "body": [
          "GetVehicleType(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns the type of the passed vehicle.\n\n### Vehicle types\n\n*   automobile\n*   bike\n*   boat\n*   heli\n*   plane\n*   submarine\n*   trailer\n*   train"
  },
  "211": {
      "prefix": "GetVehicleHandlingInt",
      "body": [
          "GetVehicleHandlingInt(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName})${0}"
      ],
      "description": "Returns the effective handling data of a vehicle as an integer value.\r\nExample: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`"
  },
  "212": {
      "prefix": "GetVehicleFlightNozzlePosition",
      "body": [
          "GetVehicleFlightNozzlePosition(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Gets the flight nozzel position for the specified vehicle. See the client-side [\\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\\_0xDA62027C8BDB326E) native for usage examples."
  },
  "213": {
      "prefix": "GetPlayerWantedCentrePosition",
      "body": [
          "GetPlayerWantedCentrePosition(${1:char* playerSrc})${0}"
      ],
      "description": "Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync."
  },
  "214": {
      "prefix": "GetPlayerWantedLevel",
      "body": [
          "GetPlayerWantedLevel(${1:char* playerSrc})${0}"
      ],
      "description": "```\nReturns given players wanted level server-side.\n```"
  },
  "215": {
      "prefix": "GetStateBagValue",
      "body": [
          "GetStateBagValue(${1:char* bagName}, ${2:char* key})${0}"
      ],
      "description": "Returns the value of a state bag key."
  },
  "216": {
      "prefix": "GetVehicleAlarmTimeLeft",
      "body": [
          "GetVehicleAlarmTimeLeft(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "217": {
      "prefix": "GetTrainDoorCount",
      "body": [
          "GetTrainDoorCount(${1:Vehicle* train})${0}"
      ],
      "description": "Gets the door count for the specified train."
  },
  "218": {
      "prefix": "GetTrainCarriageEngine",
      "body": [
          "GetTrainCarriageEngine(${1:Vehicle* train})${0}"
      ],
      "description": ""
  },
  "219": {
      "prefix": "GetVehicleOilLevel",
      "body": [
          "GetVehicleOilLevel(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "220": {
      "prefix": "GetTrainCarriageIndex",
      "body": [
          "GetTrainCarriageIndex(${1:Vehicle* train})${0}"
      ],
      "description": ""
  },
  "221": {
      "prefix": "GetVehicleBodyHealth",
      "body": [
          "GetVehicleBodyHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "222": {
      "prefix": "GetVehicleWheelFlags",
      "body": [
          "GetVehicleWheelFlags(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets the flags of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "223": {
      "prefix": "GetTrainCurrentTrackNode",
      "body": [
          "GetTrainCurrentTrackNode(${1:Vehicle* train})${0}"
      ],
      "description": ""
  },
  "224": {
      "prefix": "GetVehicleNumberPlateText",
      "body": [
          "GetVehicleNumberPlateText(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "225": {
      "prefix": "GetVehicleTopSpeedModifier",
      "body": [
          "GetVehicleTopSpeedModifier(${1:Vehicle* vehicle})${0}"
      ],
      "description": "A getter for [MODIFY_VEHICLE_TOP_SPEED](#\\_0x93A3996368C94158). Returns -1.0 if a modifier is not set."
  },
  "226": {
      "prefix": "HasVehicleBeenOwnedByPlayer",
      "body": [
          "HasVehicleBeenOwnedByPlayer(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "227": {
      "prefix": "GetVehicleWheelWidth",
      "body": [
          "GetVehicleWheelWidth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels)."
  },
  "228": {
      "prefix": "HasEntityBeenMarkedAsNoLongerNeeded",
      "body": [
          "HasEntityBeenMarkedAsNoLongerNeeded(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "229": {
      "prefix": "MumbleAddVoiceTargetChannel",
      "body": [
          "MumbleAddVoiceTargetChannel(${1:int* targetId}, ${2:int* channel})${0}"
      ],
      "description": "Adds the specified channel to the target list for the specified Mumble voice target ID."
  },
  "230": {
      "prefix": "IsEntityVisible",
      "body": [
          "IsEntityVisible(${1:Entity* entity})${0}"
      ],
      "description": "This native checks if the given entity is visible."
  },
  "231": {
      "prefix": "LoadPlayerCommerceData",
      "body": [
          "LoadPlayerCommerceData(${1:char* playerSrc})${0}"
      ],
      "description": "Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded."
  },
  "232": {
      "prefix": "MumbleAddVoiceTargetPlayerByServerId",
      "body": [
          "MumbleAddVoiceTargetPlayerByServerId(${1:int* targetId}, ${2:int* serverId})${0}"
      ],
      "description": "Adds the specified player to the target list for the specified Mumble voice target ID."
  },
  "233": {
      "prefix": "GetTrainDoorOpenRatio",
      "body": [
          "GetTrainDoorOpenRatio(${1:Vehicle* train}, ${2:int* doorIndex})${0}"
      ],
      "description": "Gets the ratio that a door is open for on a train."
  },
  "234": {
      "prefix": "LoadResourceFile",
      "body": [
          "LoadResourceFile(${1:char* resourceName}, ${2:char* fileName})${0}"
      ],
      "description": "Reads the contents of a text file in a specified resource.\r\nIf executed on the client, this file has to be included in `files` in the resource manifest.\r\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`"
  },
  "235": {
      "prefix": "GetVehicleSteeringScale",
      "body": [
          "GetVehicleSteeringScale(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "236": {
      "prefix": "GetVehicleWheelHealth",
      "body": [
          "GetVehicleWheelHealth(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": ""
  },
  "237": {
      "prefix": "GetVehicleCheatPowerIncrease",
      "body": [
          "GetVehicleCheatPowerIncrease(${1:Vehicle* vehicle})${0}"
      ],
      "description": "A getter for [SET_VEHICLE_CHEAT_POWER_INCREASE](#\\_0xB59E4BD37AE292DB)."
  },
  "238": {
      "prefix": "GetVehicleClutch",
      "body": [
          "GetVehicleClutch(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "239": {
      "prefix": "GetVehicleWheelPower",
      "body": [
          "GetVehicleWheelPower(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets power being sent to a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "240": {
      "prefix": "GetVehicleColours",
      "body": [
          "GetVehicleColours(${1:Vehicle* vehicle}, ${2:int* colorPrimary}, ${3:int* colorSecondary})${0}"
      ],
      "description": ""
  },
  "241": {
      "prefix": "IsBigmapActive",
      "body": [
          "IsBigmapActive()${0}"
      ],
      "description": "<!-- Native implemented by Disquse. 0xFFF65C63 -->\n\nReturns true if the minimap is currently expanded. False if it's the normal minimap state.\r\nUse [`IsBigmapFull`](#\\_0x66EE14B2) to check if the full map is currently revealed on the minimap."
  },
  "242": {
      "prefix": "GetVehicleHandbrake",
      "body": [
          "GetVehicleHandbrake(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "243": {
      "prefix": "IsDuiAvailable",
      "body": [
          "IsDuiAvailable(${1:long* duiObject})${0}"
      ],
      "description": "Returns whether or not a browser is created for a specified DUI browser object."
  },
  "244": {
      "prefix": "GetVehicleHandlingFloat",
      "body": [
          "GetVehicleHandlingFloat(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName})${0}"
      ],
      "description": "Returns the effective handling data of a vehicle as a floating-point value.\r\nExample: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`"
  },
  "245": {
      "prefix": "GetVehicleWheelBrakePressure",
      "body": [
          "GetVehicleWheelBrakePressure(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nNormal values around 1.0f when braking."
  },
  "246": {
      "prefix": "GetVehicleHandlingVector",
      "body": [
          "GetVehicleHandlingVector(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName})${0}"
      ],
      "description": "Returns the effective handling data of a vehicle as a vector value.\r\nExample: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`"
  },
  "247": {
      "prefix": "GetVehicleLightMultiplier",
      "body": [
          "GetVehicleLightMultiplier(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "248": {
      "prefix": "IsDuplicityVersion",
      "body": [
          "IsDuplicityVersion()${0}"
      ],
      "description": "Gets whether or not this is the CitizenFX server."
  },
  "249": {
      "prefix": "GetVehicleIndicatorLights",
      "body": [
          "GetVehicleIndicatorLights(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both"
  },
  "250": {
      "prefix": "GetVehicleHighGear",
      "body": [
          "GetVehicleHighGear(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "251": {
      "prefix": "GetVehicleHeadlightsColour",
      "body": [
          "GetVehicleHeadlightsColour(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "252": {
      "prefix": "MumbleAddVoiceChannelListen",
      "body": [
          "MumbleAddVoiceChannelListen(${1:int* channel})${0}"
      ],
      "description": "Starts listening to the specified channel, when available."
  },
  "253": {
      "prefix": "MumbleAddVoiceTargetPlayer",
      "body": [
          "MumbleAddVoiceTargetPlayer(${1:int* targetId}, ${2:Player* player})${0}"
      ],
      "description": "Adds the specified player to the target list for the specified Mumble voice target ID."
  },
  "254": {
      "prefix": "IsVehicleTyreBurst",
      "body": [
          "IsVehicleTyreBurst(${1:Vehicle* vehicle}, ${2:int* wheelID}, ${3:BOOL* completely})${0}"
      ],
      "description": ""
  },
  "255": {
      "prefix": "GetVehicleWindowTint",
      "body": [
          "GetVehicleWindowTint(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "256": {
      "prefix": "MumbleIsConnected",
      "body": [
          "MumbleIsConnected()${0}"
      ],
      "description": "This native will return true if the user succesfully connected to the voice server.\r\nIf the user disabled the voice-chat setting it will return false."
  },
  "257": {
      "prefix": "GetVehicleLightsState",
      "body": [
          "GetVehicleLightsState(${1:Vehicle* vehicle}, ${2:BOOL* lightsOn}, ${3:BOOL* highbeamsOn})${0}"
      ],
      "description": ""
  },
  "258": {
      "prefix": "IsNuiFocusKeepingInput",
      "body": [
          "IsNuiFocusKeepingInput()${0}"
      ],
      "description": "Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`."
  },
  "259": {
      "prefix": "IsBigmapFull",
      "body": [
          "IsBigmapFull()${0}"
      ],
      "description": "<!-- Native implemented by Disquse. 0x66EE14B2 -->"
  },
  "260": {
      "prefix": "GetVehicleWheelXOffset",
      "body": [
          "GetVehicleWheelXOffset(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Returns the offset of the specified wheel relative to the wheel's axle center."
  },
  "261": {
      "prefix": "GetVehicleLockOnTarget",
      "body": [
          "GetVehicleLockOnTarget(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Gets the vehicle that is locked on to for the specified vehicle."
  },
  "262": {
      "prefix": "GetVehicleWheelieState",
      "body": [
          "GetVehicleWheelieState(${1:Vehicle* vehicle})${0}"
      ],
      "description": "List of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```"
  },
  "263": {
      "prefix": "ProfilerIsRecording",
      "body": [
          "ProfilerIsRecording()${0}"
      ],
      "description": "Returns true if the profiler is active."
  },
  "264": {
      "prefix": "ProfilerEnterScope",
      "body": [
          "ProfilerEnterScope(${1:char* scopeName})${0}"
      ],
      "description": "Scope entry for profiler."
  },
  "265": {
      "prefix": "MumbleClearVoiceTargetChannels",
      "body": [
          "MumbleClearVoiceTargetChannels(${1:int* targetId})${0}"
      ],
      "description": "Clears channels from the target list for the specified Mumble voice target ID."
  },
  "266": {
      "prefix": "RegisterFontFile",
      "body": [
          "RegisterFontFile(${1:char* fileName})${0}"
      ],
      "description": "Registers a specified .gfx file as GFx font library.\r\nThe .gfx file has to be registered with the streamer already."
  },
  "267": {
      "prefix": "MumbleGetVoiceChannelFromServerId",
      "body": [
          "MumbleGetVoiceChannelFromServerId(${1:int* serverId})${0}"
      ],
      "description": "Returns the mumble voice channel from a player's server id."
  },
  "268": {
      "prefix": "IsPedAPlayer",
      "body": [
          "IsPedAPlayer(${1:Ped* ped})${0}"
      ],
      "description": "This native checks if the given ped is a player."
  },
  "269": {
      "prefix": "ProfilerExitScope",
      "body": [
          "ProfilerExitScope()${0}"
      ],
      "description": "Scope exit for profiler."
  },
  "270": {
      "prefix": "MumbleCreateChannel",
      "body": [
          "MumbleCreateChannel(${1:int* id})${0}"
      ],
      "description": "Create a permanent voice channel."
  },
  "271": {
      "prefix": "GetVehicleLivery",
      "body": [
          "GetVehicleLivery(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "272": {
      "prefix": "GetVehicleWheelRimColliderSize",
      "body": [
          "GetVehicleWheelRimColliderSize(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": ""
  },
  "273": {
      "prefix": "IsAceAllowed",
      "body": [
          "IsAceAllowed(${1:char* object})${0}"
      ],
      "description": ""
  },
  "274": {
      "prefix": "GetVehicleWheelIsPowered",
      "body": [
          "GetVehicleWheelIsPowered(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets whether the wheel is powered.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nThis is a shortcut to a flag in GET_VEHICLE_WHEEL_FLAGS."
  },
  "275": {
      "prefix": "GetVehicleNextGear",
      "body": [
          "GetVehicleNextGear(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "276": {
      "prefix": "GetVehicleHomingLockonState",
      "body": [
          "GetVehicleHomingLockonState(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Gets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\\_0xE6B0E8CFC3633BF0) native for a description of lock on states."
  },
  "277": {
      "prefix": "IsPlayerCommerceInfoLoadedExt",
      "body": [
          "IsPlayerCommerceInfoLoadedExt(${1:char* playerSrc})${0}"
      ],
      "description": "Requests whether or not the commerce data for the specified player has loaded from Tebex."
  },
  "278": {
      "prefix": "GetVehicleInteriorColour",
      "body": [
          "GetVehicleInteriorColour(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": ""
  },
  "279": {
      "prefix": "IsNuiFocused",
      "body": [
          "IsNuiFocused()${0}"
      ],
      "description": "Returns the current NUI focus state previously set with `SET_NUI_FOCUS`."
  },
  "280": {
      "prefix": "GetVehicleWheelSuspensionCompression",
      "body": [
          "GetVehicleWheelSuspensionCompression(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets the current suspension compression of a wheel.\r\nReturns a positive value. 0 means the suspension is fully extended, the wheel is off the ground.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "281": {
      "prefix": "GetVehicleWheelSteeringAngle",
      "body": [
          "GetVehicleWheelSteeringAngle(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets steering angle of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "282": {
      "prefix": "IsVehicleWanted",
      "body": [
          "IsVehicleWanted(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "283": {
      "prefix": "ResetFlyThroughWindscreenParams",
      "body": [
          "ResetFlyThroughWindscreenParams()${0}"
      ],
      "description": "Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values."
  },
  "284": {
      "prefix": "GetVehicleWheelSize",
      "body": [
          "GetVehicleWheelSize(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels)."
  },
  "285": {
      "prefix": "GetVehicleWheelRotationSpeed",
      "body": [
          "GetVehicleWheelRotationSpeed(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets the rotation speed of a wheel.\r\nThis is used internally to calcuate GET_VEHICLE_WHEEL_SPEED.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "286": {
      "prefix": "PerformHttpRequestInternalEx",
      "body": [
          "PerformHttpRequestInternalEx(${1:object* requestData})${0}"
      ],
      "description": ""
  },
  "287": {
      "prefix": "RegisterConsoleListener",
      "body": [
          "RegisterConsoleListener(${1:func* listener})${0}"
      ],
      "description": "Registers a listener for console output messages."
  },
  "288": {
      "prefix": "MumbleClearVoiceTargetPlayers",
      "body": [
          "MumbleClearVoiceTargetPlayers(${1:int* targetId})${0}"
      ],
      "description": "Clears players from the target list for the specified Mumble voice target ID."
  },
  "289": {
      "prefix": "RegisterCommand",
      "body": [
          "RegisterCommand(${1:char* commandName}, ${2:func* handler}, ${3:BOOL* restricted})${0}"
      ],
      "description": "Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\\_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)"
  },
  "290": {
      "prefix": "MumbleSetSubmixForServerId",
      "body": [
          "MumbleSetSubmixForServerId(${1:int* serverId}, ${2:int* submixId})${0}"
      ],
      "description": "Sets the audio submix ID for a specified player using Mumble 'Native Audio' functionality."
  },
  "291": {
      "prefix": "MumbleClearVoiceTarget",
      "body": [
          "MumbleClearVoiceTarget(${1:int* targetId})${0}"
      ],
      "description": "Clears the target list for the specified Mumble voice target ID."
  },
  "292": {
      "prefix": "MumbleSetAudioInputIntent",
      "body": [
          "MumbleSetAudioInputIntent(${1:Hash* intentHash})${0}"
      ],
      "description": "Use this native to disable noise suppression and high pass filters.\n\nThe possible intents for this are as follows (backticks are used to represent hashes):\n\n| Index | Description |\r\n|-|-|\r\n| \\`speech\\` | Default intent |\r\n| \\`music\\` | Disable noise suppression and high pass filter |"
  },
  "293": {
      "prefix": "LoadPlayerCommerceDataExt",
      "body": [
          "LoadPlayerCommerceDataExt(${1:char* playerSrc})${0}"
      ],
      "description": "Requests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded."
  },
  "294": {
      "prefix": "MumbleSetAudioInputDistance",
      "body": [
          "MumbleSetAudioInputDistance(${1:float* distance})${0}"
      ],
      "description": "Sets the current input distance. The player will be able to talk to other players within this distance."
  },
  "295": {
      "prefix": "MumbleRemoveVoiceChannelListen",
      "body": [
          "MumbleRemoveVoiceChannelListen(${1:int* channel})${0}"
      ],
      "description": "Stops listening to the specified channel."
  },
  "296": {
      "prefix": "IsPlayerEvadingWantedLevel",
      "body": [
          "IsPlayerEvadingWantedLevel(${1:char* playerSrc})${0}"
      ],
      "description": "```\nThis will return true if the player is evading wanted level, meaning that the wanted level stars are blink.\r\nOtherwise will return false.\r\n\r\nIf the player is not wanted, it simply returns false.\n```"
  },
  "297": {
      "prefix": "GetVehicleWheelTractionVectorLength",
      "body": [
          "GetVehicleWheelTractionVectorLength(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets the traction vector length of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "298": {
      "prefix": "ResetMapZoomDataLevel",
      "body": [
          "ResetMapZoomDataLevel(${1:int* index})${0}"
      ],
      "description": "Resets values from the zoom level data by index to defaults from mapzoomdata.meta."
  },
  "299": {
      "prefix": "RegisterRawNuiCallback",
      "body": [
          "RegisterRawNuiCallback(${1:char* callbackType}, ${2:func* callback})${0}"
      ],
      "description": ""
  },
  "300": {
      "prefix": "GetVehicleWheelSurfaceMaterial",
      "body": [
          "GetVehicleWheelSurfaceMaterial(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": ""
  },
  "301": {
      "prefix": "GetVehicleWheelType",
      "body": [
          "GetVehicleWheelType(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "302": {
      "prefix": "GetVehicleWheelTireColliderWidth",
      "body": [
          "GetVehicleWheelTireColliderWidth(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": ""
  },
  "303": {
      "prefix": "RegisterResourceBuildTaskFactory",
      "body": [
          "RegisterResourceBuildTaskFactory(${1:char* factoryId}, ${2:func* factoryFn})${0}"
      ],
      "description": "Registers a build task factory for resources.\r\nThe function should return an object (msgpack map) with the following fields:\n\n```\n{\r\n// returns whether the specific resource should be built\r\nshouldBuild = func(resourceName: string): bool,\r\n\r\n// asynchronously start building the specific resource.\r\n// call cb when completed\r\nbuild = func(resourceName: string, cb: func(success: bool, status: string): void): void\r\n}\n```"
  },
  "304": {
      "prefix": "IsPlayerCommerceInfoLoaded",
      "body": [
          "IsPlayerCommerceInfoLoaded(${1:char* playerSrc})${0}"
      ],
      "description": "Requests whether or not the commerce data for the specified player has loaded."
  },
  "305": {
      "prefix": "IsPlayerAceAllowed",
      "body": [
          "IsPlayerAceAllowed(${1:char* playerSrc}, ${2:char* object})${0}"
      ],
      "description": ""
  },
  "306": {
      "prefix": "RegisterEntities",
      "body": [
          "RegisterEntities(${1:func* factory})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of entities with the game engine. These should match `CEntityDef` class information from the game.\r\nAt this time, this function **should not be used in a live environment**."
  },
  "307": {
      "prefix": "GetVehicleWheelSpeed",
      "body": [
          "GetVehicleWheelSpeed(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "Gets speed of a wheel at the tyre.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "308": {
      "prefix": "RegisterNuiCallbackType",
      "body": [
          "RegisterNuiCallbackType(${1:char* callbackType})${0}"
      ],
      "description": ""
  },
  "309": {
      "prefix": "IsPrincipalAceAllowed",
      "body": [
          "IsPrincipalAceAllowed(${1:char* principal}, ${2:char* object})${0}"
      ],
      "description": ""
  },
  "310": {
      "prefix": "IsPlayerUsingSuperJump",
      "body": [
          "IsPlayerUsingSuperJump(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "311": {
      "prefix": "GetVehicleWheelTireColliderSize",
      "body": [
          "GetVehicleWheelTireColliderSize(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": ""
  },
  "312": {
      "prefix": "RegisterResourceAsEventHandler",
      "body": [
          "RegisterResourceAsEventHandler(${1:char* eventName})${0}"
      ],
      "description": "An internal function which allows the current resource's HLL script runtimes to receive state for the specified event."
  },
  "313": {
      "prefix": "MumbleSetVoiceTarget",
      "body": [
          "MumbleSetVoiceTarget(${1:int* targetId})${0}"
      ],
      "description": "Sets the current Mumble voice target ID to broadcast voice to."
  },
  "314": {
      "prefix": "SetConvarServerInfo",
      "body": [
          "SetConvarServerInfo(${1:char* varName}, ${2:char* value})${0}"
      ],
      "description": ""
  },
  "315": {
      "prefix": "SetCursorLocation",
      "body": [
          "SetCursorLocation(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": ""
  },
  "316": {
      "prefix": "IsVehicleEngineStarting",
      "body": [
          "IsVehicleEngineStarting(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "317": {
      "prefix": "IsVehicleExtraTurnedOn",
      "body": [
          "IsVehicleExtraTurnedOn(${1:Vehicle* vehicle}, ${2:int* extraId})${0}"
      ],
      "description": ""
  },
  "318": {
      "prefix": "SetDiscordAppId",
      "body": [
          "SetDiscordAppId(${1:char* appId})${0}"
      ],
      "description": "This native sets the app id for the discord rich presence implementation."
  },
  "319": {
      "prefix": "IsVehiclePreviouslyOwnedByPlayer",
      "body": [
          "IsVehiclePreviouslyOwnedByPlayer(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "320": {
      "prefix": "RequestPlayerCommerceSession",
      "body": [
          "RequestPlayerCommerceSession(${1:char* playerSrc}, ${2:int* skuId})${0}"
      ],
      "description": "Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance\r\nwill open the browser prompting further purchase details."
  },
  "321": {
      "prefix": "MumbleSetServerAddress",
      "body": [
          "MumbleSetServerAddress(${1:char* address}, ${2:int* port})${0}"
      ],
      "description": "Changes the Mumble server address to connect to, and reconnects to the new address."
  },
  "322": {
      "prefix": "MumbleSetAudioOutputDistance",
      "body": [
          "MumbleSetAudioOutputDistance(${1:float* distance})${0}"
      ],
      "description": "Sets the current output distance. The player will be able to hear other players talking within this distance."
  },
  "323": {
      "prefix": "RegisterFontId",
      "body": [
          "RegisterFontId(${1:char* fontName})${0}"
      ],
      "description": "Registers a specified font name for use with text draw commands."
  },
  "324": {
      "prefix": "RegisterResourceAsset",
      "body": [
          "RegisterResourceAsset(${1:char* resourceName}, ${2:char* fileName})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder."
  },
  "325": {
      "prefix": "RegisterStreamingFileFromKvs",
      "body": [
          "RegisterStreamingFileFromKvs(${1:char* kvsKey})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a KVP value as an asset with the GTA streaming module system. This function currently won't work."
  },
  "326": {
      "prefix": "SendDuiMouseUp",
      "body": [
          "SendDuiMouseUp(${1:long* duiObject}, ${2:char* button})${0}"
      ],
      "description": "Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE."
  },
  "327": {
      "prefix": "RegisterKeyMapping",
      "body": [
          "RegisterKeyMapping(${1:char* commandString}, ${2:char* description}, ${3:char* defaultMapper}, ${4:char* defaultParameter})${0}"
      ],
      "description": "Registers a key mapping for the current resource.\n\nSee the related [cookbook post](https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/) for more information."
  },
  "328": {
      "prefix": "RegisterArchetypes",
      "body": [
          "RegisterArchetypes(${1:func* factory})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game."
  },
  "329": {
      "prefix": "IsStreamingFileReady",
      "body": [
          "IsStreamingFileReady(${1:char* registerAs})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nReturns whether an asynchronous streaming file registration completed."
  },
  "330": {
      "prefix": "IsVehicleAlarmSet",
      "body": [
          "IsVehicleAlarmSet(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "331": {
      "prefix": "ScheduleResourceTick",
      "body": [
          "ScheduleResourceTick(${1:char* resourceName})${0}"
      ],
      "description": "Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate."
  },
  "332": {
      "prefix": "MumbleSetVolumeOverride",
      "body": [
          "MumbleSetVolumeOverride(${1:Player* player}, ${2:float* volume})${0}"
      ],
      "description": "Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.\n\nSet to -1.0 to reset the Volume override."
  },
  "333": {
      "prefix": "RemoveReplaceTexture",
      "body": [
          "RemoveReplaceTexture(${1:char* origTxd}, ${2:char* origTxn})${0}"
      ],
      "description": "Experimental natives, please do not use in a live environment."
  },
  "334": {
      "prefix": "IsVehicleInteriorLightOn",
      "body": [
          "IsVehicleInteriorLightOn(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "335": {
      "prefix": "ResetVehiclePedsCanStandOnTopFlag",
      "body": [
          "ResetVehiclePedsCanStandOnTopFlag(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Resets whether or not peds can stand on top of the specified vehicle.\n\nNote this flag is not replicated automatically, you will have to manually do so."
  },
  "336": {
      "prefix": "IsVehicleSirenOn",
      "body": [
          "IsVehicleSirenOn(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "337": {
      "prefix": "SetInteriorPortalRoomTo",
      "body": [
          "SetInteriorPortalRoomTo(${1:int* interiorId}, ${2:int* portalIndex}, ${3:int* roomTo})${0}"
      ],
      "description": ""
  },
  "338": {
      "prefix": "RegisterStreamingFileFromUrl",
      "body": [
          "RegisterStreamingFileFromUrl(${1:char* registerAs}, ${2:char* url})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.\n\nUse `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully."
  },
  "339": {
      "prefix": "SendLoadingScreenMessage",
      "body": [
          "SendLoadingScreenMessage(${1:char* jsonString})${0}"
      ],
      "description": "Sends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources."
  },
  "340": {
      "prefix": "IsVehicleNeedsToBeHotwired",
      "body": [
          "IsVehicleNeedsToBeHotwired(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "341": {
      "prefix": "SetInteriorRoomTimecycle",
      "body": [
          "SetInteriorRoomTimecycle(${1:int* interiorId}, ${2:int* roomIndex}, ${3:int* timecycleHash})${0}"
      ],
      "description": ""
  },
  "342": {
      "prefix": "SendNuiMessage",
      "body": [
          "SendNuiMessage(${1:char* jsonString})${0}"
      ],
      "description": ""
  },
  "343": {
      "prefix": "MumbleSetVolumeOverrideByServerId",
      "body": [
          "MumbleSetVolumeOverrideByServerId(${1:int* serverId}, ${2:float* volume})${0}"
      ],
      "description": "Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override."
  },
  "344": {
      "prefix": "SetHandlingInt",
      "body": [
          "SetHandlingInt(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:int* value})${0}"
      ],
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta."
  },
  "345": {
      "prefix": "NetworkGetFirstEntityOwner",
      "body": [
          "NetworkGetFirstEntityOwner(${1:Entity* entity})${0}"
      ],
      "description": "Returns the first owner ID of the specified entity."
  },
  "346": {
      "prefix": "SaveResourceFile",
      "body": [
          "SaveResourceFile(${1:char* resourceName}, ${2:char* fileName}, ${3:char* data}, ${4:int* dataLength})${0}"
      ],
      "description": "Writes the specified data to a file in the specified resource.\r\nUsing a length of `-1` will automatically detect the length assuming the data is a C string."
  },
  "347": {
      "prefix": "NetworkGetNetworkIdFromEntity",
      "body": [
          "NetworkGetNetworkIdFromEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "348": {
      "prefix": "SetFlashLightKeepOnWhileMoving",
      "body": [
          "SetFlashLightKeepOnWhileMoving(${1:BOOL* state})${0}"
      ],
      "description": "Allows Weapon-Flashlight beams to stay visible while moving. Normally it only stays on while aiming."
  },
  "349": {
      "prefix": "SetAudioSubmixOutputVolumes",
      "body": [
          "SetAudioSubmixOutputVolumes(${1:int* submixId}, ${2:int* outputSlot}, ${3:float* frontLeftVolume}, ${4:float* frontRightVolume}, ${5:float* rearLeftVolume}, ${6:float* rearRightVolume}, ${7:float* channel5Volume}, ${8:float* channel6Volume})${0}"
      ],
      "description": "Sets the volumes for the sound channels in a submix effect.\r\nValues can be between 0.0 and 1.0.\r\nChannel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels.\r\nOutput slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call."
  },
  "350": {
      "prefix": "SetDiscordRichPresenceAsset",
      "body": [
          "SetDiscordRichPresenceAsset(${1:char* assetName})${0}"
      ],
      "description": "This native sets the image asset for the discord rich presence implementation."
  },
  "351": {
      "prefix": "SetConvar",
      "body": [
          "SetConvar(${1:char* varName}, ${2:char* value})${0}"
      ],
      "description": ""
  },
  "352": {
      "prefix": "SetDiscordRichPresenceAssetSmall",
      "body": [
          "SetDiscordRichPresenceAssetSmall(${1:char* assetName})${0}"
      ],
      "description": "This native sets the small image asset for the discord rich presence implementation."
  },
  "353": {
      "prefix": "SendDuiMouseDown",
      "body": [
          "SendDuiMouseDown(${1:long* duiObject}, ${2:char* button})${0}"
      ],
      "description": "Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE."
  },
  "354": {
      "prefix": "SendDuiMouseWheel",
      "body": [
          "SendDuiMouseWheel(${1:long* duiObject}, ${2:int* deltaY}, ${3:int* deltaX})${0}"
      ],
      "description": "Injects a 'mouse wheel' event for a DUI object."
  },
  "355": {
      "prefix": "SetPlayerTalkingOverride",
      "body": [
          "SetPlayerTalkingOverride(${1:Player* player}, ${2:BOOL* state})${0}"
      ],
      "description": "the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.\r\nThis function doesn't need to be called every frame, it works like a switcher."
  },
  "356": {
      "prefix": "SetAudioSubmixEffectRadioFx",
      "body": [
          "SetAudioSubmixEffectRadioFx(${1:int* submixId}, ${2:int* effectSlot})${0}"
      ],
      "description": "Assigns a RadioFX effect to a submix effect slot.\n\nThe parameter values for this effect are as follows (backticks are used to represent hashes):\n\n| Index | Type | Description |\r\n|-|-|-|\r\n| \\`enabled\\` | int | Enables or disables RadioFX on this DSP. |\r\n| \\`default\\` | int | Sets default parameters for the RadioFX DSP and enables it. |\r\n| \\`freq_low\\` | float |  |\r\n| \\`freq_hi\\` | float |  |\r\n| \\`fudge\\` | float |  |\r\n| \\`rm_mod_freq\\` | float |  |\r\n| \\`rm_mix\\` | float |  |\r\n| \\`o_freq_lo\\` | float |  |\r\n| \\`o_freq_hi\\` | float |  |"
  },
  "357": {
      "prefix": "OverrideVehiclePedsCanStandOnTopFlag",
      "body": [
          "OverrideVehiclePedsCanStandOnTopFlag(${1:Vehicle* vehicle}, ${2:BOOL* can})${0}"
      ],
      "description": "Overrides whether or not peds can stand on top of the specified vehicle.\n\nNote this flag is not replicated automatically, you will have to manually do so."
  },
  "358": {
      "prefix": "SetHttpHandler",
      "body": [
          "SetHttpHandler(${1:func* handler})${0}"
      ],
      "description": ""
  },
  "359": {
      "prefix": "SetDuiUrl",
      "body": [
          "SetDuiUrl(${1:long* duiObject}, ${2:char* url})${0}"
      ],
      "description": "Navigates the specified DUI browser to a different URL."
  },
  "360": {
      "prefix": "SendDuiMouseMove",
      "body": [
          "SendDuiMouseMove(${1:long* duiObject}, ${2:int* x}, ${3:int* y})${0}"
      ],
      "description": "Injects a 'mouse move' event for a DUI object. Coordinates are in browser space."
  },
  "361": {
      "prefix": "NetworkGetVoiceProximityOverride",
      "body": [
          "NetworkGetVoiceProximityOverride(${1:char* playerSrc})${0}"
      ],
      "description": ""
  },
  "362": {
      "prefix": "NetworkGetEntityFromNetworkId",
      "body": [
          "NetworkGetEntityFromNetworkId(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "363": {
      "prefix": "SetHandlingField",
      "body": [
          "SetHandlingField(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Any* value})${0}"
      ],
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`"
  },
  "364": {
      "prefix": "NetworkGetEntityOwner",
      "body": [
          "NetworkGetEntityOwner(${1:Entity* entity})${0}"
      ],
      "description": "Returns the owner ID of the specified entity."
  },
  "365": {
      "prefix": "SetHandlingVector",
      "body": [
          "SetHandlingVector(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Vector3* value})${0}"
      ],
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`"
  },
  "366": {
      "prefix": "PerformHttpRequestInternal",
      "body": [
          "PerformHttpRequestInternal(${1:char* requestData}, ${2:int* requestDataLength})${0}"
      ],
      "description": ""
  },
  "367": {
      "prefix": "SetConvarReplicated",
      "body": [
          "SetConvarReplicated(${1:char* varName}, ${2:char* value})${0}"
      ],
      "description": ""
  },
  "368": {
      "prefix": "SetInteriorRoomExtents",
      "body": [
          "SetInteriorRoomExtents(${1:int* interiorId}, ${2:int* roomIndex}, ${3:float* bbMinX}, ${4:float* bbMinY}, ${5:float* bbMinZ}, ${6:float* bbMaxX}, ${7:float* bbMaxY}, ${8:float* bbMaxZ})${0}"
      ],
      "description": ""
  },
  "369": {
      "prefix": "SetAudioSubmixEffectParamFloat",
      "body": [
          "SetAudioSubmixEffectParamFloat(${1:int* submixId}, ${2:int* effectSlot}, ${3:int* paramIndex}, ${4:float* paramValue})${0}"
      ],
      "description": "Sets a floating-point parameter for a submix effect."
  },
  "370": {
      "prefix": "SetFlyThroughWindscreenParams",
      "body": [
          "SetFlyThroughWindscreenParams(${1:float* vehMinSpeed}, ${2:float* unkMinSpeed}, ${3:float* unkModifier}, ${4:float* minDamage})${0}"
      ],
      "description": "Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash."
  },
  "371": {
      "prefix": "OverridePedsCanStandOnTopFlag",
      "body": [
          "OverridePedsCanStandOnTopFlag(${1:BOOL* flag})${0}"
      ],
      "description": "Sets whether peds can stand on top of *all* vehicles without falling off.\n\nNote this flag is not replicated automatically, you will have to manually do so."
  },
  "372": {
      "prefix": "SendDuiMessage",
      "body": [
          "SendDuiMessage(${1:long* duiObject}, ${2:char* jsonString})${0}"
      ],
      "description": "Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE."
  },
  "373": {
      "prefix": "RegisterStreamingFileFromCache",
      "body": [
          "RegisterStreamingFileFromCache(${1:char* resourceName}, ${2:char* fileName}, ${3:char* cacheString})${0}"
      ],
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a dynamic streaming asset from the server with the GTA streaming module system."
  },
  "374": {
      "prefix": "SetRuntimeTexturePixel",
      "body": [
          "SetRuntimeTexturePixel(${1:long* tex}, ${2:int* x}, ${3:int* y}, ${4:int* r}, ${5:int* g}, ${6:int* b}, ${7:int* a})${0}"
      ],
      "description": "Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect."
  },
  "375": {
      "prefix": "SetMinimapClipType",
      "body": [
          "SetMinimapClipType(${1:int* type})${0}"
      ],
      "description": "Sets the type for the minimap blip clipping object to be either rectangular or rounded."
  },
  "376": {
      "prefix": "SetMpGamerTagsUseVehicleBehavior",
      "body": [
          "SetMpGamerTagsUseVehicleBehavior(${1:bool* enabled})${0}"
      ],
      "description": "Sets whether all tags should group (normal game behavior) or should remain independent and above each ped's respective head when in a vehicle."
  },
  "377": {
      "prefix": "SetHandlingFloat",
      "body": [
          "SetHandlingFloat(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:float* value})${0}"
      ],
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`"
  },
  "378": {
      "prefix": "SetInteriorRoomFlag",
      "body": [
          "SetInteriorRoomFlag(${1:int* interiorId}, ${2:int* roomIndex}, ${3:int* flag})${0}"
      ],
      "description": ""
  },
  "379": {
      "prefix": "SetDiscordRichPresenceAction",
      "body": [
          "SetDiscordRichPresenceAction(${1:int* index}, ${2:char* label}, ${3:char* url})${0}"
      ],
      "description": "Sets a clickable button to be displayed in a player's Discord rich presence."
  },
  "380": {
      "prefix": "SetTrainDoorOpenRatio",
      "body": [
          "SetTrainDoorOpenRatio(${1:Vehicle* train}, ${2:int* doorIndex}, ${3:float* ratio})${0}"
      ],
      "description": "Sets the ratio that a door is open for on a train."
  },
  "381": {
      "prefix": "SetMapZoomDataLevel",
      "body": [
          "SetMapZoomDataLevel(${1:int* index}, ${2:float* zoomScale}, ${3:float* zoomSpeed}, ${4:float* scrollSpeed}, ${5:float* tilesX}, ${6:float* tilesY})${0}"
      ],
      "description": "Sets values to the zoom level data by index."
  },
  "382": {
      "prefix": "SetDiscordRichPresenceAssetSmallText",
      "body": [
          "SetDiscordRichPresenceAssetSmallText(${1:char* text})${0}"
      ],
      "description": "This native sets the hover text of the small image asset for the discord rich presence implementation."
  },
  "383": {
      "prefix": "SetGameType",
      "body": [
          "SetGameType(${1:char* gametypeName})${0}"
      ],
      "description": ""
  },
  "384": {
      "prefix": "SetEntityDistanceCullingRadius",
      "body": [
          "SetEntityDistanceCullingRadius(${1:Entity* entity}, ${2:float* radius})${0}"
      ],
      "description": "It overrides the default distance culling radius of an entity. Set to `0.0` to reset.\r\nIf you want to interact with an entity outside of your players' scopes set the radius to a huge number."
  },
  "385": {
      "prefix": "SetResourceKvpInt",
      "body": [
          "SetResourceKvpInt(${1:char* key}, ${2:int* value})${0}"
      ],
      "description": "A setter for [GET_RESOURCE_KVP_INT](#\\_0x557B586A)."
  },
  "386": {
      "prefix": "SetMinimapType",
      "body": [
          "SetMinimapType(${1:int* type})${0}"
      ],
      "description": "Possible Types:\n\n```\n0 = Off,\r\n1 = Regular,\r\n2 = Expanded,\r\n3 = Simple,\n```"
  },
  "387": {
      "prefix": "SetVehicleHandlingInt",
      "body": [
          "SetVehicleHandlingInt(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:int* value})${0}"
      ],
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation."
  },
  "388": {
      "prefix": "SetEntityRoutingBucket",
      "body": [
          "SetEntityRoutingBucket(${1:Entity* entity}, ${2:int* bucket})${0}"
      ],
      "description": "Sets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware."
  },
  "389": {
      "prefix": "SetRichPresence",
      "body": [
          "SetRichPresence(${1:char* presenceState})${0}"
      ],
      "description": "Sets the player's rich presence detail state for social platform providers to a specified string."
  },
  "390": {
      "prefix": "SetManualShutdownLoadingScreenNui",
      "body": [
          "SetManualShutdownLoadingScreenNui(${1:BOOL* manualShutdown})${0}"
      ],
      "description": "Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\r\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen."
  },
  "391": {
      "prefix": "SetTrainsForceDoorsOpen",
      "body": [
          "SetTrainsForceDoorsOpen(${1:bool* forceOpen})${0}"
      ],
      "description": "Enables or disables whether train doors should be forced open whilst a player is inside the train. This is enabled by default in multiplayer."
  },
  "392": {
      "prefix": "SetRopeLengthChangeRate",
      "body": [
          "SetRopeLengthChangeRate(${1:int* rope}, ${2:float* lengthChangeRate})${0}"
      ],
      "description": "Set's the ropes length change rate, which is the speed that rope should wind if started."
  },
  "393": {
      "prefix": "SetMinimapOverlayDisplay",
      "body": [
          "SetMinimapOverlayDisplay(${1:int* miniMap}, ${2:float* x}, ${3:float* y}, ${4:float* xScale}, ${5:float* yScale}, ${6:float* alpha})${0}"
      ],
      "description": "Sets the display info for a minimap overlay."
  },
  "394": {
      "prefix": "SetMapName",
      "body": [
          "SetMapName(${1:char* mapName})${0}"
      ],
      "description": ""
  },
  "395": {
      "prefix": "SetInteriorPortalCornerPosition",
      "body": [
          "SetInteriorPortalCornerPosition(${1:int* interiorId}, ${2:int* portalIndex}, ${3:int* cornerIndex}, ${4:float* posX}, ${5:float* posY}, ${6:float* posZ})${0}"
      ],
      "description": ""
  },
  "396": {
      "prefix": "SetResourceKvpFloat",
      "body": [
          "SetResourceKvpFloat(${1:char* key}, ${2:float* value})${0}"
      ],
      "description": "A setter for [GET_RESOURCE_KVP_FLOAT](#\\_0x35BDCEEA)."
  },
  "397": {
      "prefix": "SetNetworkWalkMode",
      "body": [
          "SetNetworkWalkMode(${1:bool* enabled})${0}"
      ],
      "description": ""
  },
  "398": {
      "prefix": "SetPlayerRoutingBucket",
      "body": [
          "SetPlayerRoutingBucket(${1:char* playerSrc}, ${2:int* bucket})${0}"
      ],
      "description": "Sets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware."
  },
  "399": {
      "prefix": "SetPlayerCullingRadius",
      "body": [
          "SetPlayerCullingRadius(${1:char* playerSrc}, ${2:float* radius})${0}"
      ],
      "description": "Sets the culling radius for the specified player.\r\nSet to `0.0` to reset."
  },
  "400": {
      "prefix": "SetMinimapComponentPosition",
      "body": [
          "SetMinimapComponentPosition(${1:char* name}, ${2:char* alignX}, ${3:char* alignY}, ${4:float* posX}, ${5:float* posY}, ${6:float* sizeX}, ${7:float* sizeY})${0}"
      ],
      "description": "Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component."
  },
  "401": {
      "prefix": "SetMillisecondsPerGameMinute",
      "body": [
          "SetMillisecondsPerGameMinute(${1:int* value})${0}"
      ],
      "description": "Overrides how many real ms are equal to one game minute.\r\nA setter for [`GetMillisecondsPerGameMinute`](#\\_0x2F8B4D1C595B11DB)."
  },
  "402": {
      "prefix": "SetDiscordRichPresenceAssetText",
      "body": [
          "SetDiscordRichPresenceAssetText(${1:char* text})${0}"
      ],
      "description": "This native sets the hover text of the image asset for the discord rich presence implementation."
  },
  "403": {
      "prefix": "SetInteriorPortalFlag",
      "body": [
          "SetInteriorPortalFlag(${1:int* interiorId}, ${2:int* portalIndex}, ${3:int* flag})${0}"
      ],
      "description": ""
  },
  "404": {
      "prefix": "SetResourceKvpNoSync",
      "body": [
          "SetResourceKvpNoSync(${1:char* key}, ${2:char* value})${0}"
      ],
      "description": "Nonsynchronous [SET_RESOURCE_KVP](#\\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A)."
  },
  "405": {
      "prefix": "SetAudioSubmixEffectParamInt",
      "body": [
          "SetAudioSubmixEffectParamInt(${1:int* submixId}, ${2:int* effectSlot}, ${3:int* paramIndex}, ${4:int* paramValue})${0}"
      ],
      "description": "Sets an integer parameter for a submix effect."
  },
  "406": {
      "prefix": "SetVehicleEngineTemperature",
      "body": [
          "SetVehicleEngineTemperature(${1:Vehicle* vehicle}, ${2:float* temperature})${0}"
      ],
      "description": ""
  },
  "407": {
      "prefix": "SetNuiFocusKeepInput",
      "body": [
          "SetNuiFocusKeepInput(${1:BOOL* keepInput})${0}"
      ],
      "description": ""
  },
  "408": {
      "prefix": "SetInteriorPortalRoomFrom",
      "body": [
          "SetInteriorPortalRoomFrom(${1:int* interiorId}, ${2:int* portalIndex}, ${3:int* roomFrom})${0}"
      ],
      "description": ""
  },
  "409": {
      "prefix": "SetResourceKvpIntNoSync",
      "body": [
          "SetResourceKvpIntNoSync(${1:char* key}, ${2:int* value})${0}"
      ],
      "description": "Nonsynchronous [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A)."
  },
  "410": {
      "prefix": "SetVehicleWheelRotationSpeed",
      "body": [
          "SetVehicleWheelRotationSpeed(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* speed})${0}"
      ],
      "description": "Sets the rotation speed of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "411": {
      "prefix": "SetStateBagValue",
      "body": [
          "SetStateBagValue(${1:char* bagName}, ${2:char* keyName}, ${3:char* valueData}, ${4:int* valueLength}, ${5:BOOL* replicated})${0}"
      ],
      "description": "Internal function for setting a state bag value."
  },
  "412": {
      "prefix": "SetSnakeoilForEntry",
      "body": [
          "SetSnakeoilForEntry(${1:char* name}, ${2:char* path}, ${3:char* data})${0}"
      ],
      "description": ""
  },
  "413": {
      "prefix": "SetMpGamerTagsVisibleDistance",
      "body": [
          "SetMpGamerTagsVisibleDistance(${1:float* distance})${0}"
      ],
      "description": "Sets the maximum distance at which all tags will be visible and which beyond will not be displayed. Distance is measured from the camera position."
  },
  "414": {
      "prefix": "SetRuntimeTextureArgbData",
      "body": [
          "SetRuntimeTextureArgbData(${1:long* tex}, ${2:char* buffer}, ${3:int* length})${0}"
      ],
      "description": ""
  },
  "415": {
      "prefix": "SetVehicleSteeringScale",
      "body": [
          "SetVehicleSteeringScale(${1:Vehicle* vehicle}, ${2:float* scale})${0}"
      ],
      "description": ""
  },
  "416": {
      "prefix": "SetPedModelPersonality",
      "body": [
          "SetPedModelPersonality(${1:Hash* modelHash}, ${2:Hash* personalityHash})${0}"
      ],
      "description": "Overrides a ped model personality type."
  },
  "417": {
      "prefix": "SetVehicleWheelRimColliderSize",
      "body": [
          "SetVehicleWheelRimColliderSize(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* value})${0}"
      ],
      "description": "Not sure what this changes, probably determines physical rim size in case the tire is blown."
  },
  "418": {
      "prefix": "SetVehicleAutoRepairDisabled",
      "body": [
          "SetVehicleAutoRepairDisabled(${1:Vehicle* vehicle}, ${2:BOOL* value})${0}"
      ],
      "description": "Disables the vehicle from being repaired when a vehicle extra is enabled."
  },
  "419": {
      "prefix": "SetVehicleAlarmTimeLeft",
      "body": [
          "SetVehicleAlarmTimeLeft(${1:Vehicle* vehicle}, ${2:int* time})${0}"
      ],
      "description": ""
  },
  "420": {
      "prefix": "SetVehicleWheelBrakePressure",
      "body": [
          "SetVehicleWheelBrakePressure(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* pressure})${0}"
      ],
      "description": "Sets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nNormal values around 1.0f"
  },
  "421": {
      "prefix": "SetTextChatEnabled",
      "body": [
          "SetTextChatEnabled(${1:BOOL* enabled})${0}"
      ],
      "description": ""
  },
  "422": {
      "prefix": "SetVehicleSuspensionHeight",
      "body": [
          "SetVehicleSuspensionHeight(${1:Vehicle* vehicle}, ${2:float* newHeight})${0}"
      ],
      "description": "Sets the height of the vehicle's suspension.\r\nThis changes the same value set by Suspension in the mod shop.\r\nNegatives values raise the car. Positive values lower the car.\n\nThis is change is visual only. The collision of the vehicle will not move."
  },
  "423": {
      "prefix": "SetResourceKvp",
      "body": [
          "SetResourceKvp(${1:char* key}, ${2:char* value})${0}"
      ],
      "description": "A setter for [GET_RESOURCE_KVP_STRING](#\\_0x5240DA5A)."
  },
  "424": {
      "prefix": "SetVehicleWheelPower",
      "body": [
          "SetVehicleWheelPower(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* power})${0}"
      ],
      "description": "Sets power being sent to a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "425": {
      "prefix": "SetRopesCreateNetworkWorldState",
      "body": [
          "SetRopesCreateNetworkWorldState(${1:BOOL* shouldCreate})${0}"
      ],
      "description": "Toggles whether the usage of [ADD_ROPE](#\\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false."
  },
  "426": {
      "prefix": "SetNuiFocus",
      "body": [
          "SetNuiFocus(${1:BOOL* hasFocus}, ${2:BOOL* hasCursor})${0}"
      ],
      "description": ""
  },
  "427": {
      "prefix": "SetVehicleHandlingFloat",
      "body": [
          "SetVehicleHandlingFloat(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:float* value})${0}"
      ],
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.\r\nExample: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`"
  },
  "428": {
      "prefix": "SetRoutingBucketPopulationEnabled",
      "body": [
          "SetRoutingBucketPopulationEnabled(${1:int* bucketId}, ${2:BOOL* mode})${0}"
      ],
      "description": "Sets whether or not the specified routing bucket has automatically-created population enabled."
  },
  "429": {
      "prefix": "SetVehicleCurrentRpm",
      "body": [
          "SetVehicleCurrentRpm(${1:Vehicle* vehicle}, ${2:float* rpm})${0}"
      ],
      "description": ""
  },
  "430": {
      "prefix": "SetVehicleWheelFlags",
      "body": [
          "SetVehicleWheelFlags(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:int* flags})${0}"
      ],
      "description": "Sets the flags of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "431": {
      "prefix": "SetRoutingBucketEntityLockdownMode",
      "body": [
          "SetRoutingBucketEntityLockdownMode(${1:int* bucketId}, ${2:char* mode})${0}"
      ],
      "description": "Sets the entity lockdown mode for a specific routing bucket.\n\nLockdown modes are:\n\n| Mode       | Meaning                                                    |\r\n| ---------- | ---------------------------------------------------------- |\r\n| `strict`   | No entities can be created by clients at all.              |\r\n| `relaxed`  | Only script-owned entities created by clients are blocked. |\r\n| `inactive` | Clients can create any entity they want.                   |"
  },
  "432": {
      "prefix": "SetModelHeadlightConfiguration",
      "body": [
          "SetModelHeadlightConfiguration(${1:Hash* modelHash}, ${2:float* ratePerSecond}, ${3:float* headlightRotation}, ${4:BOOL* invertRotation})${0}"
      ],
      "description": ""
  },
  "433": {
      "prefix": "SetWeatherOwnedByNetwork",
      "body": [
          "SetWeatherOwnedByNetwork(${1:BOOL* network})${0}"
      ],
      "description": "Sets whether or not the weather should be owned by the network subsystem.\n\nTo be able to use [\\_SET_WEATHER_TYPE_TRANSITION](#\\_0x578C752848ECFA0C), this has to be set to false."
  },
  "434": {
      "prefix": "SetVehicleClutch",
      "body": [
          "SetVehicleClutch(${1:Vehicle* vehicle}, ${2:float* clutch})${0}"
      ],
      "description": ""
  },
  "435": {
      "prefix": "SetVehicleWheelHealth",
      "body": [
          "SetVehicleWheelHealth(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* health})${0}"
      ],
      "description": ""
  },
  "436": {
      "prefix": "SetVehicleHandlingVector",
      "body": [
          "SetVehicleHandlingVector(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Vector3* value})${0}"
      ],
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation."
  },
  "437": {
      "prefix": "SetVehicleGravityAmount",
      "body": [
          "SetVehicleGravityAmount(${1:Vehicle* vehicle}, ${2:float* gravity})${0}"
      ],
      "description": ""
  },
  "438": {
      "prefix": "SelectEntityAtCursor",
      "body": [
          "SelectEntityAtCursor(${1:int* hitFlags}, ${2:BOOL* precise})${0}"
      ],
      "description": "Gets the selected entity at the current mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "439": {
      "prefix": "EnterCursorMode",
      "body": [
          "EnterCursorMode()${0}"
      ],
      "description": "Enters cursor mode, suppressing mouse movement to the game and displaying a mouse cursor instead. This function supports\r\nSDK infrastructure and is not intended to be used directly from your code."
  },
  "440": {
      "prefix": "SetVehicleHighGear",
      "body": [
          "SetVehicleHighGear(${1:Vehicle* vehicle}, ${2:int* gear})${0}"
      ],
      "description": ""
  },
  "441": {
      "prefix": "SetResourceKvpFloatNoSync",
      "body": [
          "SetResourceKvpFloatNoSync(${1:char* key}, ${2:float* value})${0}"
      ],
      "description": "Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A)."
  },
  "442": {
      "prefix": "StopResource",
      "body": [
          "StopResource(${1:char* resourceName})${0}"
      ],
      "description": ""
  },
  "443": {
      "prefix": "SetVehicleWheelieState",
      "body": [
          "SetVehicleWheelieState(${1:Vehicle* vehicle}, ${2:int* state})${0}"
      ],
      "description": "Example script: https://pastebin.com/J6XGbkCW\n\nList of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```"
  },
  "444": {
      "prefix": "SetVehicleWheelYRotation",
      "body": [
          "SetVehicleWheelYRotation(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "445": {
      "prefix": "SetVehicleWheelIsPowered",
      "body": [
          "SetVehicleWheelIsPowered(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:BOOL* powered})${0}"
      ],
      "description": "Sets whether the wheel is powered.\r\nOn all wheel drive cars this works to change which wheels receive power, but if a car's fDriveBiasFront doesn't send power to that wheel, it won't get power anyway. This can be fixed by changing the fDriveBiasFront with SET_VEHICLE_HANDLING_FLOAT.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nThis is a shortcut to a flag in SET_VEHICLE_WHEEL_FLAGS."
  },
  "446": {
      "prefix": "SetVehicleHandlingField",
      "body": [
          "SetVehicleHandlingField(${1:Vehicle* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Any* value})${0}"
      ],
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.\r\nExample: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`"
  },
  "447": {
      "prefix": "TriggerServerEventInternal",
      "body": [
          "TriggerServerEventInternal(${1:char* eventName}, ${2:char* eventPayload}, ${3:int* payloadLength})${0}"
      ],
      "description": "The backing function for TriggerServerEvent."
  },
  "448": {
      "prefix": "TriggerEventInternal",
      "body": [
          "TriggerEventInternal(${1:char* eventName}, ${2:char* eventPayload}, ${3:int* payloadLength})${0}"
      ],
      "description": "The backing function for TriggerEvent."
  },
  "449": {
      "prefix": "SetWeaponsNoAutoswap",
      "body": [
          "SetWeaponsNoAutoswap(${1:BOOL* state})${0}"
      ],
      "description": "Disables autoswapping to another weapon when the current weapon runs out of ammo."
  },
  "450": {
      "prefix": "SetVehicleOilLevel",
      "body": [
          "SetVehicleOilLevel(${1:Vehicle* vehicle}, ${2:float* level})${0}"
      ],
      "description": ""
  },
  "451": {
      "prefix": "SetVisualSettingFloat",
      "body": [
          "SetVisualSettingFloat(${1:char* name}, ${2:float* value})${0}"
      ],
      "description": "Overrides a floating point value from `visualsettings.dat` temporarily."
  },
  "452": {
      "prefix": "StartResource",
      "body": [
          "StartResource(${1:char* resourceName})${0}"
      ],
      "description": ""
  },
  "453": {
      "prefix": "SetVehicleWheelXOffset",
      "body": [
          "SetVehicleWheelXOffset(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* offset})${0}"
      ],
      "description": "Adjusts the offset of the specified wheel relative to the wheel's axle center.\r\nNeeds to be called every frame in order to function properly, as GTA will reset the offset otherwise.\r\nThis function can be especially useful to set the track width of a vehicle, for example:\n\n```\nfunction SetVehicleFrontTrackWidth(vehicle, width)\r\nSetVehicleWheelXOffset(vehicle, 0, -width/2)\r\nSetVehicleWheelXOffset(vehicle, 1, width/2)\r\nend\n```"
  },
  "454": {
      "prefix": "VerifyPasswordHash",
      "body": [
          "VerifyPasswordHash(${1:char* password}, ${2:char* hash})${0}"
      ],
      "description": ""
  },
  "455": {
      "prefix": "SetVehicleWheelTireColliderSize",
      "body": [
          "SetVehicleWheelTireColliderSize(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* value})${0}"
      ],
      "description": "Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size)."
  },
  "456": {
      "prefix": "EnableEditorRuntime",
      "body": [
          "EnableEditorRuntime()${0}"
      ],
      "description": "Enables the editor runtime mode, changing game behavior to track entity metadata.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "457": {
      "prefix": "SetVehicleWheelTractionVectorLength",
      "body": [
          "SetVehicleWheelTractionVectorLength(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* length})${0}"
      ],
      "description": "Sets the traction vector length of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
  },
  "458": {
      "prefix": "SetVehicleSteeringAngle",
      "body": [
          "SetVehicleSteeringAngle(${1:Vehicle* vehicle}, ${2:float* angle})${0}"
      ],
      "description": ""
  },
  "459": {
      "prefix": "SetWeaponsNoAutoreload",
      "body": [
          "SetWeaponsNoAutoreload(${1:BOOL* state})${0}"
      ],
      "description": "Disables the game's built-in auto-reloading."
  },
  "460": {
      "prefix": "GetEntityIndexFromMapdata",
      "body": [
          "GetEntityIndexFromMapdata(${1:int* mapdata}, ${2:int* entity})${0}"
      ],
      "description": "Returns the transient entity index for a specified mapdata/entity pair.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "461": {
      "prefix": "ResetMapdataEntityMatrix",
      "body": [
          "ResetMapdataEntityMatrix(${1:int* mapDataHash}, ${2:int* entityInternalIdx})${0}"
      ],
      "description": "Resets mapdata entity transform matrix to its original state.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "462": {
      "prefix": "TriggerLatentServerEventInternal",
      "body": [
          "TriggerLatentServerEventInternal(${1:char* eventName}, ${2:char* eventPayload}, ${3:int* payloadLength}, ${4:int* bps})${0}"
      ],
      "description": "The backing function for TriggerLatentServerEvent."
  },
  "463": {
      "prefix": "SetVehicleWheelSize",
      "body": [
          "SetVehicleWheelSize(${1:Vehicle* vehicle}, ${2:float* size})${0}"
      ],
      "description": "Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set size for non-default wheels)."
  },
  "464": {
      "prefix": "ShutdownLoadingScreenNui",
      "body": [
          "ShutdownLoadingScreenNui()${0}"
      ],
      "description": "Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`."
  },
  "465": {
      "prefix": "StartFindKvp",
      "body": [
          "StartFindKvp(${1:char* prefix})${0}"
      ],
      "description": ""
  },
  "466": {
      "prefix": "SetVehicleFuelLevel",
      "body": [
          "SetVehicleFuelLevel(${1:Vehicle* vehicle}, ${2:float* level})${0}"
      ],
      "description": ""
  },
  "467": {
      "prefix": "GetMapdataEntityMatrix",
      "body": [
          "GetMapdataEntityMatrix(${1:int* mapDataHash}, ${2:int* entityInternalIdx}, ${3:long* matrixPtr})${0}"
      ],
      "description": "Returns mapdata's entity matrix. This function supports SDK infrastructure and is not intended to be used directly from your code.\n\nThis should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.\n\nMatrix layout is as follows:\n\n*   Element \\[0], \\[1] and \\[2] should represent the right vector.\n*   Element \\[4], \\[5] and \\[6] should represent the forward vector.\n*   Element \\[8], \\[9] and \\[10] should represent the up vector.\n*   Element \\[12], \\[13] and \\[14] should represent X, Y and Z translation coordinates.\n*   All other elements should be \\[0, 0, 0, 1]."
  },
  "468": {
      "prefix": "DisableEditorRuntime",
      "body": [
          "DisableEditorRuntime()${0}"
      ],
      "description": "Disables the editor runtime mode, changing game behavior to not track entity metadata.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "469": {
      "prefix": "ClearPlayerWantedLevel",
      "body": [
          "ClearPlayerWantedLevel(${1:Player* player})${0}"
      ],
      "description": "This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);\r\nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PLAYER_WANTED_LEVEL](?\\_0xB302540597885499).**"
  },
  "470": {
      "prefix": "GetMapdataEntityHandle",
      "body": [
          "GetMapdataEntityHandle(${1:int* mapDataHash}, ${2:int* entityInternalIdx}, ${3:int* entityHandle})${0}"
      ],
      "description": "Retrieves the map data entity handle.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "471": {
      "prefix": "RemoveAllPedWeapons",
      "body": [
          "RemoveAllPedWeapons(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": "setting the last params to false it does that same so I would suggest its not a toggle\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_ALL_PED_WEAPONS](?\\_0xF25DF915FA38C5F3).**"
  },
  "472": {
      "prefix": "SetVehicleWheelTireColliderWidth",
      "body": [
          "SetVehicleWheelTireColliderWidth(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* value})${0}"
      ],
      "description": "Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width)."
  },
  "473": {
      "prefix": "SetVehicleTurboPressure",
      "body": [
          "SetVehicleTurboPressure(${1:Vehicle* vehicle}, ${2:float* pressure})${0}"
      ],
      "description": ""
  },
  "474": {
      "prefix": "SetVehicleWheelWidth",
      "body": [
          "SetVehicleWheelWidth(${1:Vehicle* vehicle}, ${2:float* width})${0}"
      ],
      "description": "Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set width for non-default wheels)."
  },
  "475": {
      "prefix": "WasEventCanceled",
      "body": [
          "WasEventCanceled()${0}"
      ],
      "description": "Returns whether or not the currently executing event was canceled."
  },
  "476": {
      "prefix": "GetMapdataFromHashKey",
      "body": [
          "GetMapdataFromHashKey(${1:Hash* mapdataHandle})${0}"
      ],
      "description": "Returns the transient map data index for a specified hash.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "477": {
      "prefix": "CreateObjectNoOffset",
      "body": [
          "CreateObjectNoOffset(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* isNetwork}, ${6:BOOL* netMissionEntity}, ${7:BOOL* doorFlag})${0}"
      ],
      "description": "Creates an object (prop) with the specified model centered at the specified position.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT_NO_OFFSET](?\\_0x9A294B2138ABB884).**"
  },
  "478": {
      "prefix": "GetExternalKvpString",
      "body": [
          "GetExternalKvpString(${1:char* resource}, ${2:char* key})${0}"
      ],
      "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B), but for a specified resource."
  },
  "479": {
      "prefix": "GetExternalKvpInt",
      "body": [
          "GetExternalKvpInt(${1:char* resource}, ${2:char* key})${0}"
      ],
      "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8), but for a specified resource."
  },
  "480": {
      "prefix": "SetEntityDrawOutline",
      "body": [
          "SetEntityDrawOutline(${1:Entity* entity}, ${2:BOOL* enabled})${0}"
      ],
      "description": "Draws an outline around a given entity. This function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "481": {
      "prefix": "TriggerLatentClientEventInternal",
      "body": [
          "TriggerLatentClientEventInternal(${1:char* eventName}, ${2:char* eventTarget}, ${3:char* eventPayload}, ${4:int* payloadLength}, ${5:int* bps})${0}"
      ],
      "description": "The backing function for TriggerLatentClientEvent."
  },
  "482": {
      "prefix": "SetEntityMatrix",
      "body": [
          "SetEntityMatrix(${1:Entity* entity}, ${2:float* forwardX}, ${3:float* forwardY}, ${4:float* forwardZ}, ${5:float* rightX}, ${6:float* rightY}, ${7:float* rightZ}, ${8:float* upX}, ${9:float* upY}, ${10:float* upZ}, ${11:float* atX}, ${12:float* atY}, ${13:float* atZ})${0}"
      ],
      "description": "Sets an entity's matrix. Arguments are in the same order as with GET_ENTITY_MATRIX."
  },
  "483": {
      "prefix": "ClearPedProp",
      "body": [
          "ClearPedProp(${1:Ped* ped}, ${2:int* propId})${0}"
      ],
      "description": "List of component/props ID\r\ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_PROP](?\\_0x0943E5B8E078E76E).**"
  },
  "484": {
      "prefix": "ClearPedTasks",
      "body": [
          "ClearPedTasks(${1:Ped* ped})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS](?\\_0xE1EF3C1216AFF2CD).**"
  },
  "485": {
      "prefix": "TriggerClientEventInternal",
      "body": [
          "TriggerClientEventInternal(${1:char* eventName}, ${2:char* eventTarget}, ${3:char* eventPayload}, ${4:int* payloadLength})${0}"
      ],
      "description": "The backing function for TriggerClientEvent."
  },
  "486": {
      "prefix": "LeaveCursorMode",
      "body": [
          "LeaveCursorMode()${0}"
      ],
      "description": "Leaves cursor mode. This function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "487": {
      "prefix": "SetPedComponentVariation",
      "body": [
          "SetPedComponentVariation(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId}, ${4:int* textureId}, ${5:int* paletteId})${0}"
      ],
      "description": "This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\\\n**1**: Mask\\\n**2**: Hair\\\n**3**: Torso\\\n**4**: Leg\\\n**5**: Parachute / bag\\\n**6**: Shoes\\\n**7**: Accessory\\\n**8**: Undershirt\\\n**9**: Kevlar\\\n**10**: Badge\\\n**11**: Torso 2\n\n### Related and useful natives\n\n[GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842)\\\n[GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD)\r\n[List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_COMPONENT_VARIATION](?\\_0x262B14F48D29DE80).**"
  },
  "488": {
      "prefix": "DrawGizmo",
      "body": [
          "DrawGizmo(${1:long* matrixPtr}, ${2:char* id})${0}"
      ],
      "description": "Draws a gizmo. This function supports SDK infrastructure and is not intended to be used directly from your code.\n\nThis should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.\n\nMatrix layout is as follows:\n\n*   Element \\[0], \\[1] and \\[2] should represent the right vector.\n*   Element \\[4], \\[5] and \\[6] should represent the forward vector.\n*   Element \\[8], \\[9] and \\[10] should represent the up vector.\n*   Element \\[12], \\[13] and \\[14] should represent X, Y and Z translation coordinates.\n*   All other elements should be \\[0, 0, 0, 1]."
  },
  "489": {
      "prefix": "StartFindExternalKvp",
      "body": [
          "StartFindExternalKvp(${1:char* resourceName}, ${2:char* prefix})${0}"
      ],
      "description": "Equivalent of [START_FIND_KVP](#\\_0xDD379006), but for another resource than the current one."
  },
  "490": {
      "prefix": "TempBanPlayer",
      "body": [
          "TempBanPlayer(${1:char* playerSrc}, ${2:char* reason})${0}"
      ],
      "description": ""
  },
  "491": {
      "prefix": "RemoveWeaponComponentFromPed",
      "body": [
          "RemoveWeaponComponentFromPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* componentHash})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_COMPONENT_FROM_PED](?\\_0x1E8BE90C74FB4C09).**"
  },
  "492": {
      "prefix": "SetEntityDrawOutlineShader",
      "body": [
          "SetEntityDrawOutlineShader(${1:int* shader})${0}"
      ],
      "description": "Sets variant of shader that will be used to draw entity outline.\n\nVariants are:\n\n*   **0**: Default value, gauss shader.\n*   **1**: 2px wide solid color outline.\n*   **2**: Fullscreen solid color except for entity."
  },
  "493": {
      "prefix": "AddBlipForCoord",
      "body": [
          "AddBlipForCoord(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_COORD](?\\_0x5A039BB0BCA604B6).**"
  },
  "494": {
      "prefix": "GetExternalKvpFloat",
      "body": [
          "GetExternalKvpFloat(${1:char* resource}, ${2:char* key})${0}"
      ],
      "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938), but for a specified resource."
  },
  "495": {
      "prefix": "AddBlipForRadius",
      "body": [
          "AddBlipForRadius(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* radius})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_RADIUS](?\\_0x46818D79B1F7499A).**"
  },
  "496": {
      "prefix": "SetEntityHeading",
      "body": [
          "SetEntityHeading(${1:Entity* entity}, ${2:float* heading})${0}"
      ],
      "description": "Set the heading of an entity in degrees also known as \"Yaw\".\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_HEADING](?\\_0x8E2530AA8ADA980E).**"
  },
  "497": {
      "prefix": "SetPedToRagdollWithFall",
      "body": [
          "SetPedToRagdollWithFall(${1:Ped* ped}, ${2:int* time}, ${3:int* p2}, ${4:int* ragdollType}, ${5:float* x}, ${6:float* y}, ${7:float* z}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:float* p10}, ${12:float* p11}, ${13:float* p12}, ${14:float* p13})${0}"
      ],
      "description": "Return variable is never used in R\\*'s scripts.\r\nNot sure what p2 does. It seems like it would be a time judging by it's usage in R\\*'s scripts, but didn't seem to affect anything in my testings.\r\nx, y, and z are coordinates, most likely to where the ped will fall.\r\np7 is probably the force of the fall, but untested, so I left the variable name the same.\r\np8 to p13 are always 0f in R\\*'s scripts.\r\n(Simplified) Example of the usage of the function from R\\*'s scripts:\r\nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL_WITH_FALL](?\\_0xD76632D99E4966C8).**"
  },
  "498": {
      "prefix": "AddPedDecorationFromHashes",
      "body": [
          "AddPedDecorationFromHashes(${1:Ped* ped}, ${2:Hash* collection}, ${3:Hash* overlay})${0}"
      ],
      "description": "Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\r\ncollection - PedDecorationCollection filename hash\r\noverlay - Item name hash\r\nExample:\r\nEntry inside \"mpbeach_overlays.xml\" -\r\n<Item>\r\n<uvPos x=\"0.500000\" y=\"0.500000\" />\r\n<scale x=\"0.600000\" y=\"0.500000\" />\r\n<rotation value=\"0.000000\" />\r\n<nameHash>FM_Hair_Fuzz</nameHash>\r\n<txdHash>mp_hair_fuzz</txdHash>\r\n<txtHash>mp_hair_fuzz</txtHash>\r\n<zone>ZONE_HEAD</zone>\r\n<type>TYPE_TATTOO</type>\r\n<faction>FM</faction>\r\n<garment>All</garment>\r\n<gender>GENDER_DONTCARE</gender>\r\n<award />\r\n<awardLevel />\r\n</Item>\r\nCode:\r\nPED::\\_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n\n**This is the server-side RPC native equivalent of the client native [ADD_PED_DECORATION_FROM_HASHES](?\\_0x5F5D1665E352A839).**"
  },
  "499": {
      "prefix": "SetEntityCoords",
      "body": [
          "SetEntityCoords(${1:Entity* entity}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:BOOL* alive}, ${6:BOOL* deadFlag}, ${7:BOOL* ragdollFlag}, ${8:BOOL* clearArea})${0}"
      ],
      "description": "Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_COORDS](?\\_0x06843DA7060A026B).**"
  },
  "500": {
      "prefix": "AddBlipForEntity",
      "body": [
          "AddBlipForEntity(${1:Entity* entity})${0}"
      ],
      "description": "Returns red ( default ) blip attached to entity.\r\nExample:\r\nBlip blip; //Put this outside your case or option\r\nblip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);\r\nHUD::SET_BLIP_AS_FRIENDLY(blip, true);\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_ENTITY](?\\_0x5CDE92C702A8FCE7).**"
  },
  "501": {
      "prefix": "CreateObject",
      "body": [
          "CreateObject(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* isNetwork}, ${6:BOOL* netMissionEntity}, ${7:BOOL* doorFlag})${0}"
      ],
      "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT](?\\_0x509D5878EB39E842).**"
  },
  "502": {
      "prefix": "UpdateMapdataEntity",
      "body": [
          "UpdateMapdataEntity(${1:int* mapdata}, ${2:int* entity}, ${3:object* entityDef})${0}"
      ],
      "description": "Transiently updates the entity with the specified mapdata index and entity index.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "503": {
      "prefix": "CreatePed",
      "body": [
          "CreatePed(${1:int* pedType}, ${2:Hash* modelHash}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* heading}, ${7:BOOL* isNetwork}, ${8:BOOL* bScriptHostPed})${0}"
      ],
      "description": "Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\r\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\r\n(e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED](?\\_0xD49F9B0955C367DE).**"
  },
  "504": {
      "prefix": "GetEntityMapdataOwner",
      "body": [
          "GetEntityMapdataOwner(${1:Entity* entity}, ${2:int* mapdataHandle}, ${3:int* entityHandle})${0}"
      ],
      "description": "Retrieves the map data and entity handles from a specific entity.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "505": {
      "prefix": "SelectEntityAtPos",
      "body": [
          "SelectEntityAtPos(${1:float* fracX}, ${2:float* fracY}, ${3:int* hitFlags}, ${4:BOOL* precise})${0}"
      ],
      "description": "Gets the selected entity at the specified mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code."
  },
  "506": {
      "prefix": "AddBlipForArea",
      "body": [
          "AddBlipForArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* width}, ${5:float* height})${0}"
      ],
      "description": "Adds a rectangular blip for the specified coordinates/area.\r\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\r\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\r\nExample image:\r\n![minimap](https://w.wew.wtf/pdcjig.png)\r\n![big map](https://w.wew.wtf/zgcjcm.png)\r\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)\n\n**This is the server-side RPC native equivalent of the client native [\\_ADD_BLIP_FOR_AREA](?\\_0xCE5D0E5E315DB238).**"
  },
  "507": {
      "prefix": "SetBlipSprite",
      "body": [
          "SetBlipSprite(${1:Blip* blip}, ${2:int* spriteId})${0}"
      ],
      "description": "<!--\r\n_loc1_.map((name, idx) => `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\\n')\r\n-->\n\nSets the displayed sprite for a specific blip.\r\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.\n\n**This is the server-side RPC native equivalent of the client native [SET_BLIP_SPRITE](?\\_0xDF735600A4696DAF).**"
  },
  "508": {
      "prefix": "GiveWeaponToPed",
      "body": [
          "GiveWeaponToPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammoCount}, ${4:BOOL* isHidden}, ${5:BOOL* bForceInHand})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_TO_PED](?\\_0xBF0FD6E56C964FCB).**"
  },
  "509": {
      "prefix": "ClearPedTasksImmediately",
      "body": [
          "ClearPedTasksImmediately(${1:Ped* ped})${0}"
      ],
      "description": "Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS_IMMEDIATELY](?\\_0xAAA34F8A7CB32098).**"
  },
  "510": {
      "prefix": "SetPedPropIndex",
      "body": [
          "SetPedPropIndex(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId}, ${4:int* textureId}, ${5:BOOL* attach})${0}"
      ],
      "description": "This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hat\\\n**1**: Glass\\\n**2**: Ear\\\n**6**: Watch\\\n**7**: Bracelet\n\n### Related and useful natives\n\n[GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)\\\n[GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)\r\n[List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_PROP_INDEX](?\\_0x93376B65A266EB5F).**"
  },
  "511": {
      "prefix": "CreateVehicle",
      "body": [
          "CreateVehicle(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading}, ${6:BOOL* isNetwork}, ${7:BOOL* netMissionEntity})${0}"
      ],
      "description": "Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating\r\nscript as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n```\nNativeDB Added Parameter 8: BOOL p7\n```\n\n**This is the server-side RPC native equivalent of the client native [CREATE_VEHICLE](?\\_0xAF35D0D2583051B0).**"
  },
  "512": {
      "prefix": "SetPedHeadOverlayColor",
      "body": [
          "SetPedHeadOverlayColor(${1:Ped* ped}, ${2:int* overlayID}, ${3:int* colorType}, ${4:int* colorID}, ${5:int* secondColorID})${0}"
      ],
      "description": "Used for freemode (online) characters.\r\nColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.\r\nCalled after SET_PED_HEAD_OVERLAY().\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_HEAD_OVERLAY_COLOR](?\\_0x497BF74A7B9CB952).**"
  },
  "513": {
      "prefix": "SetPedAmmo",
      "body": [
          "SetPedAmmo(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammo})${0}"
      ],
      "description": "NativeDB Added Parameter 4: BOOL p3\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_AMMO](?\\_0x14E56BC5B5DB6A19).**"
  },
  "514": {
      "prefix": "TaskCombatPed",
      "body": [
          "TaskCombatPed(${1:Ped* ped}, ${2:Ped* targetPed}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": "Makes the specified ped attack the target ped.\r\np2 should be 0\r\np3 should be 16\n\n**This is the server-side RPC native equivalent of the client native [TASK_COMBAT_PED](?\\_0xF166E48407BAC484).**"
  },
  "515": {
      "prefix": "ApplyForceToEntity",
      "body": [
          "ApplyForceToEntity(${1:Entity* entity}, ${2:int* forceType}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* offX}, ${7:float* offY}, ${8:float* offZ}, ${9:int* boneIndex}, ${10:BOOL* isDirectionRel}, ${11:BOOL* ignoreUpVec}, ${12:BOOL* isForceRel}, ${13:BOOL* p12}, ${14:BOOL* p13})${0}"
      ],
      "description": "Applies a force to the specified entity.\r\n**List of force types (p1)**:\n\n```\npublic enum ForceType\r\n{\r\nMinForce = 0,\r\nMaxForceRot = 1,\r\nMinForce2 = 2,\r\nMaxForceRot2 = 3,\r\nForceNoRot = 4,\r\nForceRotPlusForce = 5\r\n}\n```\n\nResearch/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).\n\n**This is the server-side RPC native equivalent of the client native [APPLY_FORCE_TO_ENTITY](?\\_0xC5F68BE9613E2D18).**"
  },
  "516": {
      "prefix": "SetPedArmour",
      "body": [
          "SetPedArmour(${1:Ped* ped}, ${2:int* amount})${0}"
      ],
      "description": "Sets the armor of the specified ped.\r\nped: The Ped to set the armor of.\r\namount: A value between 0 and 100 indicating the value to set the Ped's armor to.\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_ARMOUR](?\\_0xCEA04D83135264CC).**"
  },
  "517": {
      "prefix": "SetVehicleDoorsLocked",
      "body": [
          "SetVehicleDoorsLocked(${1:Vehicle* vehicle}, ${2:int* doorLockStatus})${0}"
      ],
      "description": "// Source GTA VC miss2 leak, matching constants for 0/2/4, testing\r\n// They use 10 in am_mp_property_int, don't know what it does atm.\r\nenum eCarLock {\r\nCARLOCK_NONE = 0,\r\nCARLOCK_UNLOCKED = 1,\r\nCARLOCK_LOCKED = 2,\r\nCARLOCK_LOCKOUT_PLAYER_ONLY = 3,\r\nCARLOCK_LOCKED_PLAYER_INSIDE = 4,\r\nCARLOCK_LOCKED_INITIALLY = 5,\r\nCARLOCK_FORCE_SHUT_DOORS = 6,\r\nCARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7\r\n};\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOORS_LOCKED](?\\_0xB664292EAECF7FA6).**"
  },
  "518": {
      "prefix": "RemoveWeaponFromPed",
      "body": [
          "RemoveWeaponFromPed(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": "This native removes a specified weapon from your selected ped.\r\nWeapon Hashes: pastebin.com/0wwDZgkF\r\nExample:\r\nC#:\r\nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);\r\nC++:\r\nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);\r\nThe code above removes the knife from the player.\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_FROM_PED](?\\_0x4899CB088EDF59B8).**"
  },
  "519": {
      "prefix": "SetEntityDrawOutlineColor",
      "body": [
          "SetEntityDrawOutlineColor(${1:int* red}, ${2:int* green}, ${3:int* blue}, ${4:int* alpha})${0}"
      ],
      "description": "Sets color for entity outline. `255, 0, 255, 255` by default."
  },
  "520": {
      "prefix": "SetPedCanRagdoll",
      "body": [
          "SetPedCanRagdoll(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [SET_PED_CAN_RAGDOLL](?\\_0xB128377056A54E2A).**"
  },
  "521": {
      "prefix": "SetVehicleDoorBroken",
      "body": [
          "SetVehicleDoorBroken(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:BOOL* deleteDoor})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOOR_BROKEN](?\\_0xD4D4F6A4AB575A33).**"
  },
  "522": {
      "prefix": "SetPlayerInvincible",
      "body": [
          "SetPlayerInvincible(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Simply sets you as invincible (Health will not deplete).\r\nUse 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:\r\n\\*(DWORD \\*)(playerPedAddress + 0x188) |= (1 << 9);\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_INVINCIBLE](?\\_0x239528EACDC3E7DE).**"
  },
  "523": {
      "prefix": "RemoveBlip",
      "body": [
          "RemoveBlip(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "524": {
      "prefix": "SetPedHeadBlendData",
      "body": [
          "SetPedHeadBlendData(${1:Ped* ped}, ${2:int* shapeFirstID}, ${3:int* shapeSecondID}, ${4:int* shapeThirdID}, ${5:int* skinFirstID}, ${6:int* skinSecondID}, ${7:int* skinThirdID}, ${8:float* shapeMix}, ${9:float* skinMix}, ${10:float* thirdMix}, ${11:BOOL* isParent})${0}"
      ],
      "description": "The \"shape\" parameters control the shape of the ped's face. The \"skin\" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.\r\nThe IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.\r\n!!!Can someone add working example for this???\r\ntry this:\r\nheadBlendData headData;\r\n\\_GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), \\&headData);\r\nSET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond\r\n, headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);\r\nFor more info please refer to this topic.\r\ngtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_BLEND_DATA](?\\_0x9414E18B9434C2FE).**"
  },
  "525": {
      "prefix": "FreezeEntityPosition",
      "body": [
          "FreezeEntityPosition(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.\n\n**This is the server-side RPC native equivalent of the client native [FREEZE_ENTITY_POSITION](?\\_0x428CA6DBD1094446).**"
  },
  "526": {
      "prefix": "SetPedEyeColor",
      "body": [
          "SetPedEyeColor(${1:Ped* ped}, ${2:int* index})${0}"
      ],
      "description": "Used for freemode (online) characters.\r\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_EYE_COLOR](?\\_0x50B56988B170AFDF).**"
  },
  "527": {
      "prefix": "SetPedRandomProps",
      "body": [
          "SetPedRandomProps(${1:Ped* ped})${0}"
      ],
      "description": "List of component/props ID\r\ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_PROPS](?\\_0xC44AA05345C992C6).**"
  },
  "528": {
      "prefix": "SetEntityRotation",
      "body": [
          "SetEntityRotation(${1:Entity* entity}, ${2:float* pitch}, ${3:float* roll}, ${4:float* yaw}, ${5:int* rotationOrder}, ${6:BOOL* p5})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [SET_ENTITY_ROTATION](?\\_0x8524A8B0171D5E07).**"
  },
  "529": {
      "prefix": "SetPlayerWantedLevel",
      "body": [
          "SetPlayerWantedLevel(${1:Player* player}, ${2:int* wantedLevel}, ${3:BOOL* disableNoMission})${0}"
      ],
      "description": "Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect\r\nwantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files\r\ndisableNoMission-  Disables When Off Mission- appears to always be false\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_WANTED_LEVEL](?\\_0x39FF19C64EF7DA5B).**"
  },
  "530": {
      "prefix": "SetEntityVelocity",
      "body": [
          "SetEntityVelocity(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "Note that the third parameter(denoted as z) is \"up and down\" with positive numbers encouraging upwards movement.\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_VELOCITY](?\\_0x1C99BB7B6E96D16F).**"
  },
  "531": {
      "prefix": "CreatePedInsideVehicle",
      "body": [
          "CreatePedInsideVehicle(${1:Vehicle* vehicle}, ${2:int* pedType}, ${3:Hash* modelHash}, ${4:int* seat}, ${5:BOOL* isNetwork}, ${6:BOOL* bScriptHostPed})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [CREATE_PED_INSIDE_VEHICLE](?\\_0x7DD959874C1FD534).**"
  },
  "532": {
      "prefix": "SetPedHairColor",
      "body": [
          "SetPedHairColor(${1:Ped* ped}, ${2:int* colorID}, ${3:int* highlightColorID})${0}"
      ],
      "description": "Used for freemode (online) characters.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_HAIR_COLOR](?\\_0x4CFFC65454C93A49).**"
  },
  "533": {
      "prefix": "SetVehicleColourCombination",
      "body": [
          "SetVehicleColourCombination(${1:Vehicle* vehicle}, ${2:int* colorCombination})${0}"
      ],
      "description": "Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\r\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOUR_COMBINATION](?\\_0x33E8CD3322E2FE31).**"
  },
  "534": {
      "prefix": "TaskGoToEntity",
      "body": [
          "TaskGoToEntity(${1:Entity* entity}, ${2:Entity* target}, ${3:int* duration}, ${4:float* distance}, ${5:float* speed}, ${6:float* p5}, ${7:int* p6})${0}"
      ],
      "description": "The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\r\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\r\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\r\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_ENTITY](?\\_0x6A071245EB0D1882).**"
  },
  "535": {
      "prefix": "SetVehicleCustomPrimaryColour",
      "body": [
          "SetVehicleCustomPrimaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_PRIMARY_COLOUR](?\\_0x7141766F91D15BEA).**"
  },
  "536": {
      "prefix": "TaskGoToCoordAnyMeans",
      "body": [
          "TaskGoToCoordAnyMeans(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:Any* p5}, ${7:BOOL* p6}, ${8:int* walkingStyle}, ${9:float* p8})${0}"
      ],
      "description": "example from fm_mission_controller\r\nTASK::TASK_GO_TO_COORD_ANY_MEANS(l\\_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_COORD_ANY_MEANS](?\\_0x5BC448CB78FA3E88).**"
  },
  "537": {
      "prefix": "SetPedIntoVehicle",
      "body": [
          "SetPedIntoVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* seatIndex})${0}"
      ],
      "description": "Ped: The ped to warp.\r\nvehicle: The vehicle to warp the ped into.\r\nSeat_Index: \\[-1 is driver seat, -2 first free passenger seat]\r\nMoreinfo of Seat Index\r\nDriverSeat = -1\r\nPassenger = 0\r\nLeft Rear = 1\r\nRightRear = 2\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_INTO_VEHICLE](?\\_0xF75B0D629E1C063D).**"
  },
  "538": {
      "prefix": "SetPedResetFlag",
      "body": [
          "SetPedResetFlag(${1:Ped* ped}, ${2:int* flagId}, ${3:BOOL* doReset})${0}"
      ],
      "description": "PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\r\nKnown values:\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RESET_FLAG](?\\_0xC1E8A365BF3B29F2).**"
  },
  "539": {
      "prefix": "ClearPedSecondaryTask",
      "body": [
          "ClearPedSecondaryTask(${1:Ped* ped})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [CLEAR_PED_SECONDARY_TASK](?\\_0x176CECF6F920D707).**"
  },
  "540": {
      "prefix": "SetPedRandomComponentVariation",
      "body": [
          "SetPedRandomComponentVariation(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "p1 is always 0 in R\\* scripts; and a quick disassembly seems to indicate that p1 is unused.\r\nList of component/props ID:\r\ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_COMPONENT_VARIATION](?\\_0xC8A9481A01E63C28).**"
  },
  "541": {
      "prefix": "SetVehicleCustomSecondaryColour",
      "body": [
          "SetVehicleCustomSecondaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_SECONDARY_COLOUR](?\\_0x36CED73BFED89754).**"
  },
  "542": {
      "prefix": "TaskPlayAnim",
      "body": [
          "TaskPlayAnim(${1:Ped* ped}, ${2:char* animDictionary}, ${3:char* animationName}, ${4:float* blendInSpeed}, ${5:float* blendOutSpeed}, ${6:int* duration}, ${7:int* flag}, ${8:float* playbackRate}, ${9:BOOL* lockX}, ${10:BOOL* lockY}, ${11:BOOL* lockZ})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```\nfloat blendInSpeed > normal speed is 8.0f\r\n----------------------\r\nfloat blendOutSpeed > normal speed is 8.0f\r\n----------------------\r\nint duration: time in millisecond\r\n----------------------\r\n-1 _ _ _ _ _ _ _> Default (see flag)\r\n0 _ _ _ _ _ _ _ > Not play at all\r\nSmall value _ _ > Slow down animation speed\r\nOther _ _ _ _ _ > freeze player control until specific time (ms) has\r\n_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be\r\n_ _ _ _ _ _ _ _ _ controllable.)\r\nint flag:\r\n----------------------\r\nenum eAnimationFlags\r\n{\r\nANIM_FLAG_NORMAL = 0,\r\nANIM_FLAG_REPEAT = 1,\r\nANIM_FLAG_STOP_LAST_FRAME = 2,\r\nANIM_FLAG_UPPERBODY = 16,\r\nANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,\r\nANIM_FLAG_CANCELABLE = 120,\r\n};\r\nOdd number : loop infinitely\r\nEven number : Freeze at last frame\r\nMultiple of 4: Freeze at last frame but controllable\r\n01 to 15 > Full body\r\n10 to 31 > Upper body\r\n32 to 47 > Full body > Controllable\r\n48 to 63 > Upper body > Controllable\r\n...\r\n001 to 255 > Normal\r\n256 to 511 > Garbled\r\n...\r\nplaybackRate:\r\nvalues are between 0.0 and 1.0\r\nlockX:\r\n0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3\r\n> 1 for mini@sprunk\r\nlockY:\r\n0 in most cases\r\n1 for missfam5_yoga, missfra1mcs_2_crew_react\r\nlockZ:\r\n0 for single player\r\nCan be 1 but only for MP\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM](?\\_0xEA47FE3719165B94).**"
  },
  "543": {
      "prefix": "GiveWeaponComponentToPed",
      "body": [
          "GiveWeaponComponentToPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* componentHash})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_COMPONENT_TO_PED](?\\_0xD966D51AA5B28BB9).**"
  },
  "544": {
      "prefix": "SetCurrentPedWeapon",
      "body": [
          "SetCurrentPedWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* bForceInHand})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [SET_CURRENT_PED_WEAPON](?\\_0xADF692B254977C0C).**"
  },
  "545": {
      "prefix": "SetPedDefaultComponentVariation",
      "body": [
          "SetPedDefaultComponentVariation(${1:Ped* ped})${0}"
      ],
      "description": "Sets Ped Default Clothes\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_DEFAULT_COMPONENT_VARIATION](?\\_0x45EEE61580806D63).**"
  },
  "546": {
      "prefix": "SetPedFaceFeature",
      "body": [
          "SetPedFaceFeature(${1:Ped* ped}, ${2:int* index}, ${3:float* scale})${0}"
      ],
      "description": "Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.\r\nIndex can be 0 - 19\r\nSET_PED_M\\*\r\nHere is the list of names. It starts at 0 and runs in sequence\r\nFace_Feature\r\nNose_Width\r\nNose_Peak_Hight\r\nNose_Peak_Lenght\r\nNose_Bone_High\r\nNose_Peak_Lowering\r\nNose_Bone_Twist\r\nEyeBrown_High\r\nEyeBrown_Forward\r\nCheeks_Bone_High\r\nCheeks_Bone_Width\r\nCheeks_Width\r\nEyes_Openning\r\nLips_Thickness\r\nJaw_Bone_Width: Bone size to sides\r\nJaw_Bone_Back_Lenght: Bone size to back\r\nChimp_Bone_Lowering: Go Down\r\nChimp_Bone_Lenght: Go forward\r\nChimp_Bone_Width\r\nChimp_Hole\r\nNeck_Thikness\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_FACE_FEATURE](?\\_0x71A5C1DBA060049E).**"
  },
  "547": {
      "prefix": "TaskEveryoneLeaveVehicle",
      "body": [
          "TaskEveryoneLeaveVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [TASK_EVERYONE_LEAVE_VEHICLE](?\\_0x7F93691AB4B92272).**"
  },
  "548": {
      "prefix": "SetPlayerModel",
      "body": [
          "SetPlayerModel(${1:Player* player}, ${2:Hash* model})${0}"
      ],
      "description": "Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset\r\nMake sure to request the model first and wait until it has loaded.\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_MODEL](?\\_0x00A1CADD00108836).**"
  },
  "549": {
      "prefix": "SetPlayerControl",
      "body": [
          "SetPlayerControl(${1:Player* player}, ${2:BOOL* bHasControl}, ${3:int* flags})${0}"
      ],
      "description": "Flags:\r\nSPC_AMBIENT_SCRIPT = (1 << 1),\r\nSPC_CLEAR_TASKS = (1 << 2),\r\nSPC_REMOVE_FIRES = (1 << 3),\r\nSPC_REMOVE_EXPLOSIONS = (1 << 4),\r\nSPC_REMOVE_PROJECTILES = (1 << 5),\r\nSPC_DEACTIVATE_GADGETS = (1 << 6),\r\nSPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),\r\nSPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),\r\nSPC_ALLOW_PLAYER_DAMAGE = (1 << 9),\r\nSPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),\r\nSPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),\r\nSPC_ALLOW_PAD_SHAKE = (1 << 12)\r\nSee: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_CONTROL](?\\_0x8D32347D6D4C40A2).**"
  },
  "550": {
      "prefix": "SetPedToRagdoll",
      "body": [
          "SetPedToRagdoll(${1:Ped* ped}, ${2:int* time1}, ${3:int* time2}, ${4:int* ragdollType}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:BOOL* p6})${0}"
      ],
      "description": "p4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\r\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\r\n**Else**: CTaskNMBalance\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL](?\\_0xAE99FB955581844A).**"
  },
  "551": {
      "prefix": "SetVehicleDirtLevel",
      "body": [
          "SetVehicleDirtLevel(${1:Vehicle* vehicle}, ${2:float* dirtLevel})${0}"
      ],
      "description": "Sets the dirt level of the passed vehicle.\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DIRT_LEVEL](?\\_0x79D3B596FE44EE8B).**"
  },
  "552": {
      "prefix": "TaskLeaveAnyVehicle",
      "body": [
          "TaskLeaveAnyVehicle(${1:Ped* ped}, ${2:int* p1}, ${3:int* flags})${0}"
      ],
      "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_ANY_VEHICLE](?\\_0x504D54DF3F6F2247).**"
  },
  "553": {
      "prefix": "SetPedHeadOverlay",
      "body": [
          "SetPedHeadOverlay(${1:Ped* ped}, ${2:int* overlayID}, ${3:int* index}, ${4:float* opacity})${0}"
      ],
      "description": "OverlayID ranges from 0 to 12, index from 0 to \\_GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.\r\noverlayID       Part                  Index, to disable\r\n0               Blemishes             0 - 23, 255\r\n1               Facial Hair           0 - 28, 255\r\n2               Eyebrows              0 - 33, 255\r\n3               Ageing                0 - 14, 255\r\n4               Makeup                0 - 74, 255\r\n5               Blush                 0 - 6, 255\r\n6               Complexion            0 - 11, 255\r\n7               Sun Damage            0 - 10, 255\r\n8               Lipstick              0 - 9, 255\r\n9               Moles/Freckles        0 - 17, 255\r\n10              Chest Hair            0 - 16, 255\r\n11              Body Blemishes        0 - 11, 255\r\n12              Add Body Blemishes    0 - 1, 255\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_OVERLAY](?\\_0x48F44967FA05CC1E).**"
  },
  "554": {
      "prefix": "TaskHandsUp",
      "body": [
          "TaskHandsUp(${1:Ped* ped}, ${2:int* duration}, ${3:Ped* facingPed}, ${4:int* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "In the scripts, p3 was always -1.\r\np3 seems to be duration or timeout of turn animation.\r\nAlso facingPed can be 0 or -1 so ped will just raise hands up.\n\n**This is the server-side RPC native equivalent of the client native [TASK_HANDS_UP](?\\_0xF2EAB31979A7F910).**"
  },
  "555": {
      "prefix": "TaskGoStraightToCoord",
      "body": [
          "TaskGoStraightToCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:int* timeout}, ${7:float* targetHeading}, ${8:float* distanceToSlide})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [TASK_GO_STRAIGHT_TO_COORD](?\\_0xD76B57B44F1E6F8B).**"
  },
  "556": {
      "prefix": "TaskShootAtEntity",
      "body": [
          "TaskShootAtEntity(${1:Entity* entity}, ${2:Entity* target}, ${3:int* duration}, ${4:Hash* firingPattern})${0}"
      ],
      "description": "//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\r\nEntity aimedentity;\r\nPlayer player = PLAYER::PLAYER_ID();\r\nPLAYER::\\_GET_AIMED_ENTITY(player, \\&aimedentity);\r\n//bg is an array of peds\r\nTASK::TASK_SHOOT_AT_ENTITY(bg\\[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\r\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\r\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_ENTITY](?\\_0x08DA95E8298AE772).**"
  },
  "557": {
      "prefix": "TaskEnterVehicle",
      "body": [
          "TaskEnterVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* timeout}, ${4:int* seat}, ${5:float* speed}, ${6:int* flag}, ${7:Any* p6})${0}"
      ],
      "description": "speed 1.0 = walk, 2.0 = run\r\np5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle\r\np6 is always 0\r\nUsage of seat\r\n\\-1 = driver\r\n0 = passenger\r\n1 = left back seat\r\n2 = right back seat\r\n3 = outside left\r\n4 = outside right\n\n**This is the server-side RPC native equivalent of the client native [TASK_ENTER_VEHICLE](?\\_0xC20E50AA46D09CA8).**"
  },
  "558": {
      "prefix": "SetVehicleBodyHealth",
      "body": [
          "SetVehicleBodyHealth(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": "p2 often set to 1000.0 in the decompiled scripts.\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_BODY_HEALTH](?\\_0xB77D05AC8C78AADB).**"
  },
  "559": {
      "prefix": "TaskShootAtCoord",
      "body": [
          "TaskShootAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* duration}, ${6:Hash* firingPattern})${0}"
      ],
      "description": "Firing Pattern Hash Information: https://pastebin.com/Px036isB\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_COORD](?\\_0x46A6CC01E0826106).**"
  },
  "560": {
      "prefix": "TaskReactAndFleePed",
      "body": [
          "TaskReactAndFleePed(${1:Ped* ped}, ${2:Ped* fleeTarget})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [TASK_REACT_AND_FLEE_PED](?\\_0x72C896464915D1B1).**"
  },
  "561": {
      "prefix": "SetVehicleAlarm",
      "body": [
          "SetVehicleAlarm(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": "**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_ALARM](?\\_0xCDE5E70C1DDB954C).**"
  },
  "562": {
      "prefix": "TaskLeaveVehicle",
      "body": [
          "TaskLeaveVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* flags})${0}"
      ],
      "description": "Flags from decompiled scripts:\r\n0 = normal exit and closes door.\r\n1 = normal exit and closes door.\r\n16 = teleports outside, door kept closed.\r\n64 = normal exit and closes door, maybe a bit slower animation than 0.\r\n256 = normal exit but does not close the door.\r\n4160 = ped is throwing himself out, even when the vehicle is still.\r\n262144 = ped moves to passenger seat first, then exits normally\r\nOthers to be tried out: 320, 512, 131072.\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_VEHICLE](?\\_0xD3DBCE61A490BE02).**"
  },
  "563": {
      "prefix": "TaskDriveBy",
      "body": [
          "TaskDriveBy(${1:Ped* driverPed}, ${2:Ped* targetPed}, ${3:Vehicle* targetVehicle}, ${4:float* targetX}, ${5:float* targetY}, ${6:float* targetZ}, ${7:float* distanceToShoot}, ${8:int* pedAccuracy}, ${9:BOOL* p8}, ${10:Hash* firingPattern})${0}"
      ],
      "description": "Example:\r\nTASK::TASK_DRIVE_BY(l\\_467\\[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\r\nNeeds working example. Doesn't seem to do anything.\r\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\r\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\r\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n\n**This is the server-side RPC native equivalent of the client native [TASK_DRIVE_BY](?\\_0x2F8AF0E82773A171).**"
  },
  "564": {
      "prefix": "TaskWarpPedIntoVehicle",
      "body": [
          "TaskWarpPedIntoVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* seat})${0}"
      ],
      "description": ""
  },
  "565": {
      "prefix": "SetVehicleColours",
      "body": [
          "SetVehicleColours(${1:Vehicle* vehicle}, ${2:int* colorPrimary}, ${3:int* colorSecondary})${0}"
      ],
      "description": ""
  },
  "566": {
      "prefix": "TaskPlayAnimAdvanced",
      "body": [
          "TaskPlayAnimAdvanced(${1:Ped* ped}, ${2:char* animDict}, ${3:char* animName}, ${4:float* posX}, ${5:float* posY}, ${6:float* posZ}, ${7:float* rotX}, ${8:float* rotY}, ${9:float* rotZ}, ${10:float* animEnterSpeed}, ${11:float* animExitSpeed}, ${12:int* duration}, ${13:Any* flag}, ${14:float* animTime}, ${15:Any* p14}, ${16:Any* p15})${0}"
      ],
      "description": "It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).\r\n[Animations list](https://alexguirre.github.io/animations-list/)\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM_ADVANCED](?\\_0x83CDB10EA29B370B).**"
  },
  "567": {
      "prefix": "SetPedConfigFlag",
      "body": [
          "SetPedConfigFlag(${1:Ped* ped}, ${2:int* flagId}, ${3:BOOL* value})${0}"
      ],
      "description": "cpp\r\n// Potential names and hash collisions included as comments\r\nenum ePedConfigFlags {\r\n\\_0x67D1A445 = 0,\r\n\\_0xC63DE95E = 1,\r\nCPED_CONFIG_FLAG_NoCriticalHits = 2,\r\nCPED_CONFIG_FLAG_DrownsInWater = 3,\r\nCPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,\r\n\\_0x37D196F4 = 5,\r\n\\_0xE2462399 = 6,\r\nCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\r\n\\_0xEDDEB838 = 8,\r\n\\_0xB398B6FD = 9,\r\n\\_0xF6664E68 = 10,\r\n\\_0xA05E7CA3 = 11,\r\n\\_0xCE394045 = 12,\r\nCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\r\n\\_0xCD8D1411 = 14,\r\n\\_0xB031F1A9 = 15,\r\n\\_0xFE65BEE3 = 16,\r\nCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\r\n\\_0x380165BD = 18,\r\n\\_0x07C045C7 = 19,\r\n\\_0x583B5E2D = 20,\r\n\\_0x475EDA58 = 21,\r\n\\_0x8629D05B = 22,\r\n\\_0x1522968B = 23,\r\nCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\r\n\\_0x4CC09C4B = 25,\r\n\\_0x034F3053 = 26,\r\n\\_0xD91BA7CC = 27,\r\n\\_0x5C8DC66E = 28,\r\n\\_0x8902EAA0 = 29,\r\n\\_0x6580B9D2 = 30,\r\n\\_0x0EF7A297 = 31,\r\n\\_0x6BF86E5B = 32,\r\nCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\r\nCPED_CONFIG_FLAG_HasHelmet = 34,\r\nCPED_CONFIG_FLAG_UseHelmet = 35,\r\n\\_0xEEB3D630 = 36,\r\n\\_0xB130D17B = 37,\r\n\\_0x5F071200 = 38,\r\nCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\r\n\\_0xC287AAFF = 40,\r\n\\_0x203328CC = 41,\r\nCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\r\nCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\r\nCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\r\n\\_0xEC4A8ACF = 45,\r\n\\_0xDB115BFA = 46,\r\nCPED_CONFIG_FLAG_PedBeingDeleted = 47,\r\nCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\r\n\\_0xF8E99565 = 49,\r\n\\_0xDD17FEE6 = 50,\r\n\\_0x7ED9B2C9 = 51,\r\n\\_0x655E8618 = 52,\r\n\\_0x5A6C1F6E = 53,\r\n\\_0xD749FC41 = 54,\r\n\\_0x357F63F3 = 55,\r\n\\_0xC5E60961 = 56,\r\n\\_0x29275C3E = 57,\r\nCPED_CONFIG_FLAG_IsFiring = 58,\r\nCPED_CONFIG_FLAG_WasFiring = 59,\r\nCPED_CONFIG_FLAG_IsStanding = 60,\r\nCPED_CONFIG_FLAG_WasStanding = 61,\r\nCPED_CONFIG_FLAG_InVehicle = 62,\r\nCPED_CONFIG_FLAG_OnMount = 63,\r\nCPED_CONFIG_FLAG_AttachedToVehicle = 64,\r\nCPED_CONFIG_FLAG_IsSwimming = 65,\r\nCPED_CONFIG_FLAG_WasSwimming = 66,\r\nCPED_CONFIG_FLAG_IsSkiing = 67,\r\nCPED_CONFIG_FLAG_IsSitting = 68,\r\nCPED_CONFIG_FLAG_KilledByStealth = 69,\r\nCPED_CONFIG_FLAG_KilledByTakedown = 70,\r\nCPED_CONFIG_FLAG_Knockedout = 71,\r\n\\_0x3E3C4560 = 72,\r\n\\_0x2994C7B7 = 73,\r\n\\_0x6D59D275 = 74,\r\nCPED_CONFIG_FLAG_UsingCoverPoint = 75,\r\nCPED_CONFIG_FLAG_IsInTheAir = 76,\r\n\\_0x2D493FB7 = 77,\r\nCPED_CONFIG_FLAG_IsAimingGun = 78,\r\n\\_0x14D69875 = 79,\r\n\\_0x40B05311 = 80,\r\n\\_0x8B230BC5 = 81,\r\n\\_0xC74E5842 = 82,\r\n\\_0x9EA86147 = 83,\r\n\\_0x674C746C = 84,\r\n\\_0x3E56A8C2 = 85,\r\n\\_0xC144A1EF = 86,\r\n\\_0x0548512D = 87,\r\n\\_0x31C93909 = 88,\r\n\\_0xA0269315 = 89,\r\n\\_0xD4D59D4D = 90,\r\n\\_0x411D4420 = 91,\r\n\\_0xDF4AEF0D = 92,\r\nCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\r\n\\_0x300E4CD3 = 94,\r\n\\_0xF1C5BF04 = 95,\r\n\\_0x89C2EF13 = 96,\r\nCPED_CONFIG_FLAG_VaultFromCover = 97,\r\n\\_0x02A852C8 = 98,\r\n\\_0x3D9407F1 = 99,\r\n\\_0x319B4558 = 100,\r\nCPED_CONFIG_FLAG_ForcedAim = 101,\r\n\\_0xB942D71A = 102,\r\n\\_0xD26C55A8 = 103,\r\n\\_0xB89E703B = 104,\r\nCPED_CONFIG_FLAG_ForceReload = 105,\r\n\\_0xD9E73DA2 = 106,\r\n\\_0xFF71DC2C = 107,\r\n\\_0x1E27E8D8 = 108,\r\n\\_0xF2C53966 = 109,\r\n\\_0xC4DBE247 = 110,\r\n\\_0x83C0A4BF = 111,\r\n\\_0x0E0FAF8C = 112,\r\n\\_0x26616660 = 113,\r\n\\_0x43B80B79 = 114,\r\n\\_0x0D2A9309 = 115,\r\n\\_0x12C1C983 = 116,\r\nCPED_CONFIG_FLAG_BumpedByPlayer = 117,\r\n\\_0xE586D504 = 118,\r\n\\_0x52374204 = 119,\r\nCPED_CONFIG_FLAG_IsHandCuffed = 120,\r\nCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\r\nCPED_CONFIG_FLAG_DisableMelee = 122,\r\n\\_0xFE714397 = 123,\r\n\\_0xB3E660BD = 124,\r\n\\_0x5FED6BFD = 125,\r\n\\_0xC9D6F66F = 126,\r\n\\_0x519BC986 = 127,\r\nCPED_CONFIG_FLAG_CanBeAgitated = 128,\r\n\\_0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult\r\n\\_0xDAB70E9F = 130,\r\n\\_0xE569438A = 131,\r\n\\_0xBBC77D6D = 132,\r\n\\_0xCB59EF0F = 133,\r\n\\_0x8C5EA971 = 134,\r\nCPED_CONFIG_FLAG_IsScuba = 135,\r\nCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\r\n\\_0xDCE59B58 = 137,\r\nCPED_CONFIG_FLAG_RidingTrain = 138,\r\nCPED_CONFIG_FLAG_ArrestResult = 139,\r\nCPED_CONFIG_FLAG_CanAttackFriendly = 140,\r\n\\_0x98A4BE43 = 141,\r\n\\_0x6901E731 = 142,\r\n\\_0x9EC9BF6C = 143,\r\n\\_0x42841A8F = 144,\r\nCPED_CONFIG_FLAG_ShootingAnimFlag = 145,\r\nCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\r\nCPED_CONFIG_FLAG_StairsDetected = 147,\r\nCPED_CONFIG_FLAG_SlopeDetected = 148,\r\n\\_0x1A15670B = 149,\r\n\\_0x61786EE5 = 150,\r\n\\_0xCB9186BD = 151,\r\n\\_0xF0710152 = 152,\r\n\\_0x43DFE310 = 153,\r\n\\_0xC43C624E = 154,\r\nCPED_CONFIG_FLAG_CanPerformArrest = 155,\r\nCPED_CONFIG_FLAG_CanPerformUncuff = 156,\r\nCPED_CONFIG_FLAG_CanBeArrested = 157,\r\n\\_0xF7960FF5 = 158,\r\n\\_0x59564113 = 159,\r\n\\_0x0C6C3099 = 160,\r\n\\_0x645F927A = 161,\r\n\\_0xA86549B9 = 162,\r\n\\_0x8AAF337A = 163,\r\n\\_0x13BAA6E7 = 164,\r\n\\_0x5FB9D1F5 = 165,\r\nCPED_CONFIG_FLAG_IsInjured = 166,\r\n\\_0x6398A20B = 167,\r\n\\_0xD8072639 = 168,\r\n\\_0xA05B1845 = 169,\r\n\\_0x83F6D220 = 170,\r\n\\_0xD8430331 = 171,\r\n\\_0x4B547520 = 172,\r\n\\_0xE66E1406 = 173,\r\n\\_0x1C4BFE0C = 174,\r\n\\_0x90008BFA = 175,\r\n\\_0x07C7A910 = 176,\r\n\\_0xF15F8191 = 177,\r\n\\_0xCE4E8BE2 = 178,\r\n\\_0x1D46E4F2 = 179,\r\nCPED_CONFIG_FLAG_IsInCustody = 180,\r\n\\_0xE4FD9B3A = 181,\r\n\\_0x67AE0812 = 182,\r\nCPED_CONFIG_FLAG_IsAgitated = 183,\r\nCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\r\n\\_0x7B2D325E = 185,\r\nCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\r\nCPED_CONFIG_FLAG_HasHurtStarted = 187,\r\nCPED_CONFIG_FLAG_DisableHurt = 188,\r\nCPED_CONFIG_FLAG_PlayerIsWeird = 189,\r\n\\_0x32FC208B = 190,\r\n\\_0x0C296E5A = 191,\r\n\\_0xE63B73EC = 192,\r\n\\_0x04E9CC80 = 193,\r\nCPED_CONFIG_FLAG_UsingScenario = 194,\r\nCPED_CONFIG_FLAG_VisibleOnScreen = 195,\r\n\\_0xD88C58A1 = 196,\r\n\\_0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide\r\n\\_0xEA02B420 = 198,\r\n\\_0x3F559CFF = 199,\r\n\\_0x8C55D029 = 200,\r\n\\_0x5E6466F6 = 201,\r\n\\_0xEB5AD706 = 202,\r\n\\_0x0EDDDDE7 = 203,\r\n\\_0xA64F7B1D = 204,\r\n\\_0x48532CBA = 205,\r\n\\_0xAA25A9E7 = 206,\r\n\\_0x415B26B9 = 207,\r\nCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\r\nCPED_CONFIG_FLAG_DodgedPlayer = 209,\r\n\\_0x67405504 = 210,\r\n\\_0x75DDD68C = 211,\r\n\\_0x2AD879B4 = 212,\r\n\\_0x51486F91 = 213,\r\n\\_0x32F79E21 = 214,\r\n\\_0xBF099213 = 215,\r\n\\_0x054AC8E2 = 216,\r\n\\_0x14E495CC = 217,\r\n\\_0x3C7DF9DF = 218,\r\n\\_0x848FFEF2 = 219,\r\nCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\r\n\\_0x2618E1CF = 221,\r\n\\_0x84F722FA = 222,\r\n\\_0xD1B87B1F = 223,\r\n\\_0x728AA918 = 224,\r\nCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\r\nCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\r\n\\_0x59E91185 = 227,\r\n\\_0x1EA7225F = 228,\r\nCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\r\n\\_0x6DCA7D88 = 230,\r\n\\_0xFC3E572D = 231,\r\n\\_0x08E9F9CF = 232,\r\n\\_0x2D3BA52D = 233,\r\n\\_0xFD2F53EA = 234,\r\n\\_0x31A1B03B = 235,\r\nCPED_CONFIG_FLAG_IsHoldingProp = 236,\r\n\\_0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead\r\n\\_0xCE57C9A3 = 238,\r\n\\_0x26149198 = 239,\r\n\\_0x1B33B598 = 240,\r\n\\_0x719B6E87 = 241,\r\n\\_0x13E8E8E8 = 242,\r\n\\_0xF29739AE = 243,\r\n\\_0xABEA8A74 = 244,\r\n\\_0xB60EA2BA = 245,\r\n\\_0x536B0950 = 246,\r\n\\_0x0C754ACA = 247,\r\n\\_0x69D28F3E = 248,\r\n\\_0x12659168 = 249,\r\n\\_0x1BDF2F04 = 250,\r\n\\_0x7728FAA3 = 251,\r\n\\_0x6A807ED8 = 252,\r\nCPED_CONFIG_FLAG_OnStairs = 253,\r\n\\_0xE1A2F73F = 254,\r\n\\_0x5B3697C8 = 255,\r\n\\_0xF1EB20A9 = 256,\r\n\\_0x8B7DF407 = 257,\r\n\\_0x329DCF1A = 258,\r\n\\_0x8D90DD1B = 259,\r\n\\_0xB8A292B7 = 260,\r\n\\_0x8374B087 = 261,\r\n\\_0x2AF558F0 = 262,\r\n\\_0x82251455 = 263,\r\n\\_0x30CF498B = 264,\r\n\\_0xE1CD50AF = 265,\r\n\\_0x72E4AE48 = 266,\r\n\\_0xC2657EA1 = 267,\r\n\\_0x29FF6030 = 268,\r\n\\_0x8248A5EC = 269,\r\nCPED_CONFIG_FLAG_OnStairSlope = 270,\r\n\\_0xA0897933 = 271,\r\nCPED_CONFIG_FLAG_DontBlipCop = 272,\r\nCPED_CONFIG_FLAG_ClimbedShiftedFence = 273,\r\n\\_0xF7823618 = 274,\r\n\\_0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped\r\nCPED_CONFIG_FLAG_EdgeDetected = 276,\r\n\\_0x92B67896 = 277,\r\n\\_0xCAD677C9 = 278,\r\nCPED_CONFIG_FLAG_AvoidTearGas = 279,\r\n\\_0x5276AC7B = 280,\r\n\\_0x1032692A = 281,\r\n\\_0xDA23E7F1 = 282,\r\n\\_0x9139724D = 283,\r\n\\_0xA1457461 = 284,\r\n\\_0x4186E095 = 285,\r\n\\_0xAC68E2EB = 286,\r\nCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\r\nCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\r\n\\_0x1B9EE8A1 = 289,\r\n\\_0xF3F5758C = 290,\r\n\\_0x2A9307F1 = 291,\r\n\\_0x7403D216 = 292,\r\n\\_0xA06A3C6C = 293,\r\nCPED_CONFIG_FLAG_DisableShockingEvents = 294,\r\n\\_0xF8DA25A5 = 295,\r\n\\_0x7EF55802 = 296,\r\n\\_0xB31F1187 = 297,\r\n\\_0x84315402 = 298,\r\n\\_0x0FD69867 = 299,\r\n\\_0xC7829B67 = 300,\r\nCPED_CONFIG_FLAG_DisablePedConstraints = 301,\r\n\\_0x6D23CF25 = 302,\r\n\\_0x2ADA871B = 303,\r\n\\_0x47BC8A58 = 304,\r\n\\_0xEB692FA5 = 305,\r\n\\_0x4A133C50 = 306,\r\n\\_0xC58099C3 = 307,\r\n\\_0xF3D76D41 = 308,\r\n\\_0xB0EEE9F2 = 309,\r\nCPED_CONFIG_FLAG_IsInCluster = 310,\r\n\\_0x0FA153EF = 311,\r\n\\_0xD73F5CD3 = 312,\r\n\\_0xD4136C22 = 313,\r\n\\_0xE404CA6B = 314,\r\n\\_0xB9597446 = 315,\r\n\\_0xD5C98277 = 316,\r\n\\_0xD5060A9C = 317,\r\n\\_0x3E5F1CBB = 318,\r\n\\_0xD8BE1D54 = 319,\r\n\\_0x0B1F191F = 320,\r\n\\_0xC995167A = 321,\r\nCPED_CONFIG_FLAG_HasHighHeels = 322,\r\n\\_0x86B01E54 = 323,\r\n\\_0x3A56FE15 = 324,\r\n\\_0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario\r\n\\_0xBBF47729 = 326,\r\n\\_0x22B668A8 = 327,\r\n\\_0x2624D4D4 = 328,\r\nCPED_CONFIG_FLAG_DisableTalkTo = 329,\r\nCPED_CONFIG_FLAG_DontBlip = 330,\r\nCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\r\n\\_0x630F55F3 = 332,\r\n\\_0x150468FD = 333,\r\n\\_0x914EBD6B = 334,\r\n\\_0x79AF3B6D = 335,\r\n\\_0x75C7A632 = 336,\r\n\\_0x52D530E2 = 337,\r\n\\_0xDB2A90E0 = 338,\r\n\\_0x5922763D = 339,\r\n\\_0x12ADB567 = 340,\r\n\\_0x105C8518 = 341,\r\n\\_0x106F703D = 342,\r\n\\_0xED152C3E = 343,\r\n\\_0xA0EFE6A8 = 344,\r\n\\_0xBF348C82 = 345,\r\n\\_0xCDDFE830 = 346,\r\n\\_0x7B59BD9B = 347,\r\n\\_0x0124C788 = 348,\r\nCPED_CONFIG_FLAG_EquipJetpack = 349,\r\n\\_0x08D361A5 = 350,\r\n\\_0xE13D1F7C = 351,\r\n\\_0x40E25FB9 = 352,\r\n\\_0x930629D9 = 353,\r\n\\_0xECCF0C7F = 354,\r\n\\_0xB6E9613B = 355,\r\n\\_0x490C0478 = 356,\r\n\\_0xE8865BEA = 357,\r\n\\_0xF3C34A29 = 358,\r\nCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\r\n\\_0xF660E115 = 360,\r\n\\_0xAB0E6DED = 361,\r\nCPED_CONFIG_FLAG_HasReserveParachute = 362,\r\nCPED_CONFIG_FLAG_UseReserveParachute = 363,\r\n\\_0x5C5D9CD3 = 364,\r\n\\_0x8F7701F3 = 365,\r\n\\_0xBC4436AD = 366,\r\n\\_0xD7E07D37 = 367,\r\n\\_0x03C4FD24 = 368,\r\n\\_0x7675789A = 369,\r\n\\_0xB7288A88 = 370,\r\n\\_0xC06B6291 = 371,\r\n\\_0x95A4A805 = 372,\r\n\\_0xA8E9A042 = 373,\r\nCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\r\n\\_0xBAC674B3 = 375,\r\n\\_0x147F1FFB = 376,\r\n\\_0x4376DD79 = 377,\r\n\\_0xCD3DB518 = 378,\r\n\\_0xFE4BA4B6 = 379,\r\n\\_0x5DF03A55 = 380,\r\n\\_0xBCD816CD = 381,\r\n\\_0xCF02DD69 = 382,\r\n\\_0xF73AFA2E = 383,\r\n\\_0x80B9A9D0 = 384,\r\n\\_0xF601F7EE = 385,\r\n\\_0xA91350FC = 386,\r\n\\_0x3AB23B96 = 387,\r\nCPED_CONFIG_FLAG_IsClimbingLadder = 388,\r\nCPED_CONFIG_FLAG_HasBareFeet = 389,\r\n\\_0xB4B1CD4C = 390,\r\n\\_0x5459AFB8 = 391,\r\n\\_0x54F27667 = 392,\r\n\\_0xC11D3E8F = 393,\r\n\\_0x5419EB3E = 394,\r\n\\_0x82D8DBB4 = 395,\r\n\\_0x33B02D2F = 396,\r\n\\_0xAE66176D = 397,\r\n\\_0xA2692593 = 398,\r\n\\_0x714C7E31 = 399,\r\n\\_0xEC488AC7 = 400,\r\n\\_0xAE398504 = 401,\r\n\\_0xABC58D72 = 402,\r\n\\_0x5E5B9591 = 403,\r\n\\_0x6BA1091E = 404,\r\n\\_0x77840177 = 405,\r\n\\_0x1C7ACAC4 = 406,\r\n\\_0x124420E9 = 407,\r\n\\_0x75A65587 = 408,\r\n\\_0xDFD2D55B = 409,\r\n\\_0xBDD39919 = 410,\r\n\\_0x43DEC267 = 411,\r\n\\_0xE42B7797 = 412,\r\nCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\r\n\\_0x4F8149F5 = 414,\r\n\\_0xDD9ECA7A = 415,\r\n\\_0x9E7EF9D2 = 416,\r\n\\_0x2C6ED942 = 417,\r\nCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\r\n\\_0xA488727D = 419,\r\n\\_0xCFF5F6DE = 420,\r\n\\_0x6D614599 = 421,\r\nCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\r\n\\_0xFE401D26 = 423,\r\nCPED_CONFIG_FLAG_FallsLikeAircraft = 424,\r\n\\_0x2B42AE82 = 425,\r\n\\_0x7A95734F = 426,\r\n\\_0xDF4D8617 = 427,\r\n\\_0x578F1F14 = 428,\r\nCPED_CONFIG_FLAG_DisableStartEngine = 429,\r\nCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\r\n\\_0x153C9500 = 431,\r\n\\_0xCB7A632E = 432,\r\n\\_0xDE727981 = 433,\r\nCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\r\n\\_0x12BBB935 = 435,\r\n\\_0xAD0A1277 = 436,\r\n\\_0xEA6AA46A = 437,\r\nCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\r\n\\_0xCB7F3A1E = 439,\r\n\\_0x50178878 = 440,\r\n\\_0x051B4F0D = 441,\r\n\\_0x2FC3DECC = 442,\r\n\\_0xC0030B0B = 443,\r\n\\_0xBBDAF1E9 = 444,\r\n\\_0x944FE59C = 445,\r\n\\_0x506FBA39 = 446,\r\n\\_0xDD45FE84 = 447,\r\n\\_0xE698AE75 = 448,\r\n\\_0x199633F8 = 449,\r\nCPED_CONFIG_FLAG_PedIsArresting = 450,\r\nCPED_CONFIG_FLAG_IsDecoyPed = 451,\r\n\\_0x3A251D83 = 452,\r\n\\_0xA56F6986 = 453,\r\n\\_0x1D19C622 = 454,\r\n\\_0xB68D3EAB = 455,\r\nCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\r\n\\_0x4BD5EBAD = 457,\r\n}\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CONFIG_FLAG](?\\_0x1913FE4CBF41C463).**"
  },
  "568": {
      "prefix": "SetVehicleNumberPlateText",
      "body": [
          "SetVehicleNumberPlateText(${1:Vehicle* vehicle}, ${2:char* plateText})${0}"
      ],
      "description": "Sets a vehicle's license plate text.  8 chars maximum.\r\nExample:\r\nPed playerPed = PLAYER::PLAYER_PED_ID();\r\nVehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);\r\nchar \\*plateText = \"KING\";\r\nVEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_NUMBER_PLATE_TEXT](?\\_0x95A88F0B409CDA47).**"
  },
  "569": {
      "prefix": "AppCloseApp",
      "body": [
          "AppCloseApp()${0}"
      ],
      "description": ""
  },
  "570": {
      "prefix": "AppClearBlock",
      "body": [
          "AppClearBlock()${0}"
      ],
      "description": ""
  },
  "571": {
      "prefix": "AppCloseBlock",
      "body": [
          "AppCloseBlock()${0}"
      ],
      "description": ""
  },
  "572": {
      "prefix": "AppDeleteAppData",
      "body": [
          "AppDeleteAppData(${1:char* appName})${0}"
      ],
      "description": ""
  },
  "573": {
      "prefix": "AppDataValid",
      "body": [
          "AppDataValid()${0}"
      ],
      "description": ""
  },
  "574": {
      "prefix": "AppGetFloat",
      "body": [
          "AppGetFloat(${1:char* property})${0}"
      ],
      "description": ""
  },
  "575": {
      "prefix": "AppGetDeletedFileStatus",
      "body": [
          "AppGetDeletedFileStatus()${0}"
      ],
      "description": ""
  },
  "576": {
      "prefix": "AppGetString",
      "body": [
          "AppGetString(${1:char* property})${0}"
      ],
      "description": ""
  },
  "577": {
      "prefix": "AppGetInt",
      "body": [
          "AppGetInt(${1:char* property})${0}"
      ],
      "description": ""
  },
  "578": {
      "prefix": "AppHasSyncedData",
      "body": [
          "AppHasSyncedData(${1:char* appName})${0}"
      ],
      "description": ""
  },
  "579": {
      "prefix": "AppSetApp",
      "body": [
          "AppSetApp(${1:char* appName})${0}"
      ],
      "description": "```\nCalled in the gamescripts like:  \nAPP::APP_SET_APP(\"car\");  \nAPP::APP_SET_APP(\"dog\");  \n```"
  },
  "580": {
      "prefix": "AppSetFloat",
      "body": [
          "AppSetFloat(${1:char* property}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "581": {
      "prefix": "AppHasLinkedSocialClubAccount",
      "body": [
          "AppHasLinkedSocialClubAccount()${0}"
      ],
      "description": ""
  },
  "582": {
      "prefix": "AppSaveData",
      "body": [
          "AppSaveData()${0}"
      ],
      "description": ""
  },
  "583": {
      "prefix": "AppSetString",
      "body": [
          "AppSetString(${1:char* property}, ${2:char* value})${0}"
      ],
      "description": ""
  },
  "584": {
      "prefix": "AppSetBlock",
      "body": [
          "AppSetBlock(${1:char* blockName})${0}"
      ],
      "description": ""
  },
  "585": {
      "prefix": "AppSetInt",
      "body": [
          "AppSetInt(${1:char* property}, ${2:int* value})${0}"
      ],
      "description": ""
  },
  "586": {
      "prefix": "DisableScriptBrainSet",
      "body": [
          "DisableScriptBrainSet(${1:int* brainSet})${0}"
      ],
      "description": ""
  },
  "587": {
      "prefix": "IsWorldPointWithinBrainActivationRange",
      "body": [
          "IsWorldPointWithinBrainActivationRange()${0}"
      ],
      "description": "```\nGets whether the world point the calling script is registered to is within desired range of the player.  \n```"
  },
  "588": {
      "prefix": "AddScriptToRandomPed",
      "body": [
          "AddScriptToRandomPed(${1:char* name}, ${2:Hash* model}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": "```\nBRAIN::ADD_SCRIPT_TO_RANDOM_PED(\"pb_prostitute\", ${s_f_y_hooker_01}, 100, 0);\n- Nacorpio\n-----\nHardcoded to not work in Multiplayer.\n```"
  },
  "589": {
      "prefix": "EnableScriptBrainSet",
      "body": [
          "EnableScriptBrainSet(${1:int* brainSet})${0}"
      ],
      "description": ""
  },
  "590": {
      "prefix": "IsObjectWithinBrainActivationRange",
      "body": [
          "IsObjectWithinBrainActivationRange(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "591": {
      "prefix": "RegisterWorldPointScriptBrain",
      "body": [
          "RegisterWorldPointScriptBrain(${1:char* scriptName}, ${2:float* activationRange}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "592": {
      "prefix": "RegisterObjectScriptBrain",
      "body": [
          "RegisterObjectScriptBrain(${1:char* scriptName}, ${2:Hash* modelHash}, ${3:int* p2}, ${4:float* activationRange}, ${5:int* p4}, ${6:int* p5})${0}"
      ],
      "description": "```\nRegisters a script for any object with a specific model hash.\nBRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(\"ob_telescope\", ${prop_telescope_01}, 100, 4.0, -1, 9);\n```"
  },
  "593": {
      "prefix": "AddCamSplineNodeUsingCamera",
      "body": [
          "AddCamSplineNodeUsingCamera(${1:Cam* cam}, ${2:Cam* cam2}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "594": {
      "prefix": "AddCamSplineNode",
      "body": [
          "AddCamSplineNode(${1:Cam* camera}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* xRot}, ${6:float* yRot}, ${7:float* zRot}, ${8:int* length}, ${9:int* p8}, ${10:int* transitionType})${0}"
      ],
      "description": "```\nI filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.  \np7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one  \np8 big values ~100 will slow down the camera movement before reaching this node  \np9 != 0 seems to override the rotation/pitch (bool?)  \n```"
  },
  "595": {
      "prefix": "AddCamSplineNodeUsingCameraFrame",
      "body": [
          "AddCamSplineNodeUsingCameraFrame(${1:Cam* cam}, ${2:Cam* cam2}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "596": {
      "prefix": "AnimateGameplayCamZoom",
      "body": [
          "AnimateGameplayCamZoom(${1:float* p0}, ${2:float* distance})${0}"
      ],
      "description": "```\nSeems to animate the gameplay camera zoom.  \nEg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);  \nwill animate the camera zooming in from 1000 meters away.  \nGame scripts use it like this:  \n// Setting this to 1 prevents V key from changing zoom  \nPLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);  \n// These restrict how far you can move cam up/down left/right  \nCAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);  \nCAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);  \nCAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);  \n```"
  },
  "597": {
      "prefix": "AddCamSplineNodeUsingGameplayFrame",
      "body": [
          "AddCamSplineNodeUsingGameplayFrame(${1:Cam* cam}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "598": {
      "prefix": "AnimatedShakeCam",
      "body": [
          "AnimatedShakeCam(${1:Cam* cam}, ${2:char* p1}, ${3:char* p2}, ${4:char* p3}, ${5:float* amplitude})${0}"
      ],
      "description": "```\nExample from michael2 script.  \nCAM::ANIMATED_SHAKE_CAM(l_5069, \"shake_cam_all@\", \"light\", \"\", 1f);  \n```"
  },
  "599": {
      "prefix": "AttachCamToEntity",
      "body": [
          "AttachCamToEntity(${1:Cam* cam}, ${2:Entity* entity}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:BOOL* isRelative})${0}"
      ],
      "description": "```\nLast param determines if its relative to the Entity  \n```"
  },
  "600": {
      "prefix": "AnimatedShakeScriptGlobal",
      "body": [
          "AnimatedShakeScriptGlobal(${1:char* p0}, ${2:char* p1}, ${3:char* p2}, ${4:float* p3})${0}"
      ],
      "description": "```\nCAM::ANIMATED_SHAKE_SCRIPT_GLOBAL(\"SHAKE_CAM_medium\", \"medium\", \"\", 0.5f);\n```"
  },
  "601": {
      "prefix": "AttachCamToPedBone2",
      "body": [
          "AttachCamToPedBone2(${1:Cam* cam}, ${2:Ped* ped}, ${3:int* boneIndex}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:float* p8}, ${10:BOOL* p9})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "602": {
      "prefix": "AttachCamToPedBone",
      "body": [
          "AttachCamToPedBone(${1:Cam* cam}, ${2:Ped* ped}, ${3:int* boneIndex}, ${4:float* x}, ${5:float* y}, ${6:float* z}, ${7:BOOL* heading})${0}"
      ],
      "description": ""
  },
  "603": {
      "prefix": "ClampGameplayCamPitch",
      "body": [
          "ClampGameplayCamPitch(${1:float* minimum}, ${2:float* maximum})${0}"
      ],
      "description": "```\nminimum: Degrees between -90f and 90f.\nmaximum: Degrees between -90f and 90f.\nClamps the gameplay camera's current pitch.\nEg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.\n```"
  },
  "604": {
      "prefix": "ClampGameplayCamYaw",
      "body": [
          "ClampGameplayCamYaw(${1:float* minimum}, ${2:float* maximum})${0}"
      ],
      "description": "```\nminimum: Degrees between -180f and 180f.\nmaximum: Degrees between -180f and 180f.\nClamps the gameplay camera's current yaw.\nEg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.\n```"
  },
  "605": {
      "prefix": "AttachCamToVehicleBone",
      "body": [
          "AttachCamToVehicleBone(${1:Cam* cam}, ${2:Vehicle* vehicle}, ${3:int* boneIndex}, ${4:BOOL* relativeRotation}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:float* offX}, ${9:float* offY}, ${10:float* offZ}, ${11:BOOL* fixedDirection})${0}"
      ],
      "description": "This native works with vehicles only.\nBone indexes are usually given by this native [GET_ENTITY_BONE_INDEX_BY_NAME](#\\_0xFB71170B7E76ACBA)."
  },
  "606": {
      "prefix": "CreateCam",
      "body": [
          "CreateCam(${1:char* camName}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\n\"DEFAULT_SCRIPTED_CAMERA\"  \n\"DEFAULT_ANIMATED_CAMERA\"  \n\"DEFAULT_SPLINE_CAMERA\"  \n\"DEFAULT_SCRIPTED_FLY_CAMERA\"  \n\"TIMED_SPLINE_CAMERA\"  \n```"
  },
  "607": {
      "prefix": "CreateCamWithParams",
      "body": [
          "CreateCamWithParams(${1:char* camName}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:float* fov}, ${9:BOOL* p8}, ${10:int* p9})${0}"
      ],
      "description": "```\ncamName is always set to \"DEFAULT_SCRIPTED_CAMERA\" in Rockstar's scripts.  \n------------  \nCamera names found in the b617d scripts:  \n\"DEFAULT_ANIMATED_CAMERA\"  \n\"DEFAULT_SCRIPTED_CAMERA\"  \n\"DEFAULT_SCRIPTED_FLY_CAMERA\"  \n\"DEFAULT_SPLINE_CAMERA\"  \n------------  \nSide Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.  \n```"
  },
  "608": {
      "prefix": "CreateCamera",
      "body": [
          "CreateCamera(${1:Hash* camHash}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "609": {
      "prefix": "CreateCinematicShot",
      "body": [
          "CreateCinematicShot(${1:Any* p0}, ${2:int* p1}, ${3:Any* p2}, ${4:Entity* entity})${0}"
      ],
      "description": ""
  },
  "610": {
      "prefix": "CreateCameraWithParams",
      "body": [
          "CreateCameraWithParams(${1:Hash* camHash}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:float* fov}, ${9:BOOL* p8}, ${10:Any* p9})${0}"
      ],
      "description": "```\nCAM::_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z  \nCAM::_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z  \nCAM::_80EC114669DAEFF4() can be used instead of p7 (Possible p7 is FOV parameter. )  \np8 ???  \np9 uses 2 by default  \n```"
  },
  "611": {
      "prefix": "DestroyAllCams",
      "body": [
          "DestroyAllCams(${1:BOOL* bScriptHostCam})${0}"
      ],
      "description": "```\nBOOL param indicates whether the cam should be destroyed if it belongs to the calling script.  \n```"
  },
  "612": {
      "prefix": "DetachCam",
      "body": [
          "DetachCam(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "613": {
      "prefix": "CustomMenuCoordinates",
      "body": [
          "CustomMenuCoordinates(${1:float* p0})${0}"
      ],
      "description": "```\nsome camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.  \n```"
  },
  "614": {
      "prefix": "DisableCamCollisionForEntity",
      "body": [
          "DisableCamCollisionForEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "615": {
      "prefix": "DestroyCam",
      "body": [
          "DestroyCam(${1:Cam* cam}, ${2:BOOL* bScriptHostCam})${0}"
      ],
      "description": "```\nBOOL param indicates whether the cam should be destroyed if it belongs to the calling script.  \n```"
  },
  "616": {
      "prefix": "DisableFirstPersonCamThisFrame",
      "body": [
          "DisableFirstPersonCamThisFrame()${0}"
      ],
      "description": "```\nDisables first person camera for the current frame.  \nFound in decompiled scripts:  \nGRAPHICS::DRAW_DEBUG_TEXT_2D(\"Disabling First Person Cam\", 0.5, 0.8, 0.0, 0, 0, 255, 255);  \nCAM::_DE2EF5DA284CC8DF();  \n```"
  },
  "617": {
      "prefix": "DisableAimCamThisUpdate",
      "body": [
          "DisableAimCamThisUpdate()${0}"
      ],
      "description": ""
  },
  "618": {
      "prefix": "DisableCamCollisionForObject",
      "body": [
          "DisableCamCollisionForObject(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "619": {
      "prefix": "DisableVehicleFirstPersonCamThisFrame",
      "body": [
          "DisableVehicleFirstPersonCamThisFrame()${0}"
      ],
      "description": ""
  },
  "620": {
      "prefix": "DoScreenFadeOut",
      "body": [
          "DoScreenFadeOut(${1:int* duration})${0}"
      ],
      "description": "```\nFades the screen out.  \nduration: The time the fade should take, in milliseconds.  \n```"
  },
  "621": {
      "prefix": "DoScreenFadeIn",
      "body": [
          "DoScreenFadeIn(${1:int* duration})${0}"
      ],
      "description": "```\nFades the screen in.  \nduration: The time the fade should take, in milliseconds.  \n```"
  },
  "622": {
      "prefix": "DoesCamExist",
      "body": [
          "DoesCamExist(${1:Cam* cam})${0}"
      ],
      "description": "```\nReturns whether or not the passed camera handle exists.  \n```"
  },
  "623": {
      "prefix": "EnableCrosshairThisFrame",
      "body": [
          "EnableCrosshairThisFrame()${0}"
      ],
      "description": "```\nShows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.  \n```"
  },
  "624": {
      "prefix": "GetCamActiveViewModeContext",
      "body": [
          "GetCamActiveViewModeContext()${0}"
      ],
      "description": "Enumerated type defined in camControlHelperMetadataViewModes:\n\n```cpp\nenum Context {\n    ON_FOOT = 0, // [G|S]ET_FOLLOW_PED_CAM_*\n    IN_VEHICLE = 1, // [G|S]ET_FOLLOW_VEHICLE_CAM_*\n    ON_BIKE = 2,\n    IN_BOAT = 3,\n    IN_AIRCRAFT = 4,\n    IN_SUBMARINE = 5,\n    IN_HELI = 6,\n    IN_TURRET = 7,\n}\n```"
  },
  "625": {
      "prefix": "ForceCinematicRenderingThisUpdate",
      "body": [
          "ForceCinematicRenderingThisUpdate(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "626": {
      "prefix": "GetCamAnimCurrentPhase",
      "body": [
          "GetCamAnimCurrentPhase(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "627": {
      "prefix": "GetCamCoord",
      "body": [
          "GetCamCoord(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "628": {
      "prefix": "GetCamFarClip",
      "body": [
          "GetCamFarClip(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "629": {
      "prefix": "GetCamFov",
      "body": [
          "GetCamFov(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "630": {
      "prefix": "GetCamSplineNodeIndex",
      "body": [
          "GetCamSplineNodeIndex(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "631": {
      "prefix": "GetCamFarDof",
      "body": [
          "GetCamFarDof(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "632": {
      "prefix": "GetCamSplinePhase",
      "body": [
          "GetCamSplinePhase(${1:Cam* cam})${0}"
      ],
      "description": "```\nCan use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.  \n(returns 1.0f when no nodes has been added, reached end of non existing spline)  \n```"
  },
  "633": {
      "prefix": "GetCamNearClip",
      "body": [
          "GetCamNearClip(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "634": {
      "prefix": "GetCamRot",
      "body": [
          "GetCamRot(${1:Cam* cam}, ${2:int* rotationOrder})${0}"
      ],
      "description": "```\nThe last parameter, as in other \"ROT\" methods, is usually 2.  \n```"
  },
  "635": {
      "prefix": "GetDebugCamera",
      "body": [
          "GetDebugCamera()${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "636": {
      "prefix": "GetFinalRenderedCamCoord",
      "body": [
          "GetFinalRenderedCamCoord()${0}"
      ],
      "description": ""
  },
  "637": {
      "prefix": "GetFinalRenderedCamFov",
      "body": [
          "GetFinalRenderedCamFov()${0}"
      ],
      "description": ""
  },
  "638": {
      "prefix": "GetCamSplineNodePhase",
      "body": [
          "GetCamSplineNodePhase(${1:Cam* cam})${0}"
      ],
      "description": "```\nI'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.  \n```"
  },
  "639": {
      "prefix": "GetFinalRenderedCamMotionBlurStrength",
      "body": [
          "GetFinalRenderedCamMotionBlurStrength()${0}"
      ],
      "description": ""
  },
  "640": {
      "prefix": "GetCamViewModeForContext",
      "body": [
          "GetCamViewModeForContext(${1:int* context})${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the view mode enum."
  },
  "641": {
      "prefix": "GetFinalRenderedCamFarClip",
      "body": [
          "GetFinalRenderedCamFarClip()${0}"
      ],
      "description": ""
  },
  "642": {
      "prefix": "GetFinalRenderedCamNearDof",
      "body": [
          "GetFinalRenderedCamNearDof()${0}"
      ],
      "description": ""
  },
  "643": {
      "prefix": "GetFinalRenderedCamFarDof",
      "body": [
          "GetFinalRenderedCamFarDof()${0}"
      ],
      "description": ""
  },
  "644": {
      "prefix": "GetFinalRenderedInWhenFriendlyFov",
      "body": [
          "GetFinalRenderedInWhenFriendlyFov(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "645": {
      "prefix": "GetFinalRenderedCamNearClip",
      "body": [
          "GetFinalRenderedCamNearClip()${0}"
      ],
      "description": ""
  },
  "646": {
      "prefix": "GetFinalRenderedInWhenFriendlyRot",
      "body": [
          "GetFinalRenderedInWhenFriendlyRot(${1:Player* player}, ${2:int* rotationOrder})${0}"
      ],
      "description": ""
  },
  "647": {
      "prefix": "GetFinalRenderedCamRot",
      "body": [
          "GetFinalRenderedCamRot(${1:int* rotationOrder})${0}"
      ],
      "description": ""
  },
  "648": {
      "prefix": "GetFocusPedOnScreen",
      "body": [
          "GetFocusPedOnScreen(${1:float* p0}, ${2:int* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:int* p7}, ${9:int* p8})${0}"
      ],
      "description": ""
  },
  "649": {
      "prefix": "GetFollowPedCamViewMode",
      "body": [
          "GetFollowPedCamViewMode()${0}"
      ],
      "description": "```cpp\n// view mode enumeration\nenum _0xA11D7CA8\n{\n\tTHIRD_PERSON_NEAR = 0,\n\tTHIRD_PERSON_MEDIUM = 1,\n\tTHIRD_PERSON_FAR = 2,\n\tCINEMATIC = 3,\n\tFIRST_PERSON = 4,\n};\n```"
  },
  "650": {
      "prefix": "GetFirstPersonAimCamZoomFactor",
      "body": [
          "GetFirstPersonAimCamZoomFactor()${0}"
      ],
      "description": ""
  },
  "651": {
      "prefix": "GetFollowVehicleCamViewMode",
      "body": [
          "GetFollowVehicleCamViewMode()${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum."
  },
  "652": {
      "prefix": "GetFollowPedCamZoomLevel",
      "body": [
          "GetFollowPedCamZoomLevel()${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum."
  },
  "653": {
      "prefix": "GetGameplayCamFov",
      "body": [
          "GetGameplayCamFov()${0}"
      ],
      "description": ""
  },
  "654": {
      "prefix": "GetFollowVehicleCamZoomLevel",
      "body": [
          "GetFollowVehicleCamZoomLevel()${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum."
  },
  "655": {
      "prefix": "GetGameplayCamCoord",
      "body": [
          "GetGameplayCamCoord()${0}"
      ],
      "description": ""
  },
  "656": {
      "prefix": "GetGameplayCamRelativeHeading",
      "body": [
          "GetGameplayCamRelativeHeading()${0}"
      ],
      "description": ""
  },
  "657": {
      "prefix": "GetGameplayCamRelativePitch",
      "body": [
          "GetGameplayCamRelativePitch()${0}"
      ],
      "description": ""
  },
  "658": {
      "prefix": "GetRenderingCam",
      "body": [
          "GetRenderingCam()${0}"
      ],
      "description": ""
  },
  "659": {
      "prefix": "GetGameplayCamRot",
      "body": [
          "GetGameplayCamRot(${1:int* rotationOrder})${0}"
      ],
      "description": "```\np0 dosen't seem to change much, I tried it with 0, 1, 2:  \n0-Pitch(X): -70.000092  \n0-Roll(Y): -0.000001  \n0-Yaw(Z): -43.886459  \n1-Pitch(X): -70.000092  \n1-Roll(Y): -0.000001  \n1-Yaw(Z): -43.886463  \n2-Pitch(X): -70.000092  \n2-Roll(Y): -0.000002  \n2-Yaw(Z): -43.886467  \n```"
  },
  "660": {
      "prefix": "InvalidateIdleCam",
      "body": [
          "InvalidateIdleCam()${0}"
      ],
      "description": "Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera."
  },
  "661": {
      "prefix": "IsAimCamActive",
      "body": [
          "IsAimCamActive()${0}"
      ],
      "description": ""
  },
  "662": {
      "prefix": "InvalidateVehicleIdleCam",
      "body": [
          "InvalidateVehicleIdleCam()${0}"
      ],
      "description": "Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera."
  },
  "663": {
      "prefix": "IsAimCamThirdPersonActive",
      "body": [
          "IsAimCamThirdPersonActive()${0}"
      ],
      "description": "```\nIS_A*\n```"
  },
  "664": {
      "prefix": "IsCamActive",
      "body": [
          "IsCamActive(${1:Cam* cam})${0}"
      ],
      "description": "```\nReturns whether or not the passed camera handle is active.  \n```"
  },
  "665": {
      "prefix": "IsCamInterpolating",
      "body": [
          "IsCamInterpolating(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "666": {
      "prefix": "IsCamPlayingAnim",
      "body": [
          "IsCamPlayingAnim(${1:Cam* cam}, ${2:char* animName}, ${3:char* animDictionary})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "667": {
      "prefix": "IsCamShaking",
      "body": [
          "IsCamShaking(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "668": {
      "prefix": "IsCamRendering",
      "body": [
          "IsCamRendering(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "669": {
      "prefix": "IsCamSplinePaused",
      "body": [
          "IsCamSplinePaused(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "670": {
      "prefix": "IsCinematicCamRendering",
      "body": [
          "IsCinematicCamRendering()${0}"
      ],
      "description": ""
  },
  "671": {
      "prefix": "IsCinematicCamActive",
      "body": [
          "IsCinematicCamActive()${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "672": {
      "prefix": "IsCinematicIdleCamRendering",
      "body": [
          "IsCinematicIdleCamRendering()${0}"
      ],
      "description": ""
  },
  "673": {
      "prefix": "IsCinematicCamShaking",
      "body": [
          "IsCinematicCamShaking()${0}"
      ],
      "description": ""
  },
  "674": {
      "prefix": "IsFollowPedCamActive",
      "body": [
          "IsFollowPedCamActive()${0}"
      ],
      "description": ""
  },
  "675": {
      "prefix": "IsCinematicShotActive",
      "body": [
          "IsCinematicShotActive(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "676": {
      "prefix": "IsFollowVehicleCamActive",
      "body": [
          "IsFollowVehicleCamActive()${0}"
      ],
      "description": ""
  },
  "677": {
      "prefix": "IsGameplayCamLookingBehind",
      "body": [
          "IsGameplayCamLookingBehind()${0}"
      ],
      "description": ""
  },
  "678": {
      "prefix": "IsFirstPersonAimCamActive",
      "body": [
          "IsFirstPersonAimCamActive()${0}"
      ],
      "description": ""
  },
  "679": {
      "prefix": "IsGameplayCamRendering",
      "body": [
          "IsGameplayCamRendering()${0}"
      ],
      "description": "```\nExamples when this function will return 0 are:\n- During busted screen.\n- When player is coming out from a hospital.\n- When player is coming out from a police station.\n- When player is buying gun from AmmuNation.\n```"
  },
  "680": {
      "prefix": "IsGameplayCamShaking",
      "body": [
          "IsGameplayCamShaking()${0}"
      ],
      "description": ""
  },
  "681": {
      "prefix": "IsGameplayHintActive",
      "body": [
          "IsGameplayHintActive()${0}"
      ],
      "description": ""
  },
  "682": {
      "prefix": "IsInVehicleCamDisabled",
      "body": [
          "IsInVehicleCamDisabled()${0}"
      ],
      "description": ""
  },
  "683": {
      "prefix": "IsScreenFadedOut",
      "body": [
          "IsScreenFadedOut()${0}"
      ],
      "description": ""
  },
  "684": {
      "prefix": "IsScreenFadingOut",
      "body": [
          "IsScreenFadingOut()${0}"
      ],
      "description": ""
  },
  "685": {
      "prefix": "IsScreenFadedIn",
      "body": [
          "IsScreenFadedIn()${0}"
      ],
      "description": ""
  },
  "686": {
      "prefix": "IsScriptGlobalShaking",
      "body": [
          "IsScriptGlobalShaking()${0}"
      ],
      "description": "```\nIn drunk_controller.c4, sub_309\nif (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {\n    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);\n}\n```"
  },
  "687": {
      "prefix": "IsScreenFadingIn",
      "body": [
          "IsScreenFadingIn()${0}"
      ],
      "description": ""
  },
  "688": {
      "prefix": "IsSphereVisible",
      "body": [
          "IsSphereVisible(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "689": {
      "prefix": "OverrideCamSplineMotionBlur",
      "body": [
          "OverrideCamSplineMotionBlur(${1:Cam* cam}, ${2:int* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": "```\nMax value for p1 is 15.  \n```"
  },
  "690": {
      "prefix": "OverrideCamSplineVelocity",
      "body": [
          "OverrideCamSplineVelocity(${1:Cam* cam}, ${2:int* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "691": {
      "prefix": "PlayCamAnim",
      "body": [
          "PlayCamAnim(${1:Cam* cam}, ${2:char* animName}, ${3:char* animDictionary}, ${4:float* x}, ${5:float* y}, ${6:float* z}, ${7:float* xRot}, ${8:float* yRot}, ${9:float* zRot}, ${10:BOOL* p9}, ${11:int* p10})${0}"
      ],
      "description": "```\nAtleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.  \np9 is unknown at this time.  \np10 throughout all the X360 Scripts is always 2.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "692": {
      "prefix": "PlaySynchronizedCamAnim",
      "body": [
          "PlaySynchronizedCamAnim(${1:Any* p0}, ${2:Any* p1}, ${3:char* animName}, ${4:char* animDictionary})${0}"
      ],
      "description": "```\nExamples:  \nCAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), \"PLAYER_EXIT_L_CAM\", \"mp_doorbell\");  \nCAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], \"ah3b_attackheli_cam2\", \"missheistfbi3b_helicrash\");  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "693": {
      "prefix": "PointCamAtCoord",
      "body": [
          "PointCamAtCoord(${1:Cam* cam}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "694": {
      "prefix": "PointCamAtPedBone",
      "body": [
          "PointCamAtPedBone(${1:Cam* cam}, ${2:Ped* ped}, ${3:int* boneIndex}, ${4:float* x}, ${5:float* y}, ${6:float* z}, ${7:BOOL* p6})${0}"
      ],
      "description": "```\nParameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.  \n```"
  },
  "695": {
      "prefix": "PointCamAtEntity",
      "body": [
          "PointCamAtEntity(${1:Cam* cam}, ${2:Entity* entity}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:BOOL* p5})${0}"
      ],
      "description": "Points the camera at the specified entity.\n\nOffset works like [GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS](#\\_0x1899F328B0E12848)."
  },
  "696": {
      "prefix": "ReplayFreeCamGetMaxRange",
      "body": [
          "ReplayFreeCamGetMaxRange()${0}"
      ],
      "description": ""
  },
  "697": {
      "prefix": "RenderScriptCams",
      "body": [
          "RenderScriptCams(${1:BOOL* render}, ${2:BOOL* ease}, ${3:int* easeTime}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nease - smooth transition between the camera's positions  \neaseTime - Time in milliseconds for the transition to happen  \nIf you have created a script (rendering) camera, and want to go back to the   \ncharacter (gameplay) camera, call this native with render set to 0.  \nSetting ease to 1 will smooth the transition.  \n```\n\n```\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "698": {
      "prefix": "SetCamActive",
      "body": [
          "SetCamActive(${1:Cam* cam}, ${2:BOOL* active})${0}"
      ],
      "description": "```\nSet camera as active/inactive.  \n```"
  },
  "699": {
      "prefix": "SetCamActiveWithInterp",
      "body": [
          "SetCamActiveWithInterp(${1:Cam* camTo}, ${2:Cam* camFrom}, ${3:int* duration}, ${4:int* easeLocation}, ${5:int* easeRotation})${0}"
      ],
      "description": "```\nPrevious declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...  \n```"
  },
  "700": {
      "prefix": "SetCamAnimCurrentPhase",
      "body": [
          "SetCamAnimCurrentPhase(${1:Cam* cam}, ${2:float* phase})${0}"
      ],
      "description": ""
  },
  "701": {
      "prefix": "SetCamAffectsAiming",
      "body": [
          "SetCamAffectsAiming(${1:Cam* cam}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nAllows you to aim and shoot at the direction the camera is facing.  \n```"
  },
  "702": {
      "prefix": "SetCamCoord",
      "body": [
          "SetCamCoord(${1:Cam* cam}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})${0}"
      ],
      "description": "```\nSets the position of the cam.  \n```"
  },
  "703": {
      "prefix": "SetCamDebugName",
      "body": [
          "SetCamDebugName(${1:Cam* camera}, ${2:char* name})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "704": {
      "prefix": "SetCamDofFnumberOfLens",
      "body": [
          "SetCamDofFnumberOfLens(${1:Cam* camera}, ${2:float* p1})${0}"
      ],
      "description": "```\nThis native has its name defined inside its codE  \n```"
  },
  "705": {
      "prefix": "SetCamDofFocusDistanceBias",
      "body": [
          "SetCamDofFocusDistanceBias(${1:Cam* camera}, ${2:float* p1})${0}"
      ],
      "description": "```\nThis native has a name defined inside its code  \n```"
  },
  "706": {
      "prefix": "SetCamDofFocalLengthMultiplier",
      "body": [
          "SetCamDofFocalLengthMultiplier(${1:Cam* camera}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nNative name labeled within its code\n```"
  },
  "707": {
      "prefix": "SetCamDofMaxNearInFocusDistanceBlendLevel",
      "body": [
          "SetCamDofMaxNearInFocusDistanceBlendLevel(${1:Cam* camera}, ${2:float* p1})${0}"
      ],
      "description": "```\nThis native has a name defined inside its code  \n```"
  },
  "708": {
      "prefix": "SetCamDofMaxNearInFocusDistance",
      "body": [
          "SetCamDofMaxNearInFocusDistance(${1:Cam* camera}, ${2:float* p1})${0}"
      ],
      "description": "```\nThis native has a name defined inside its code  \n```"
  },
  "709": {
      "prefix": "SetCamDofPlanes",
      "body": [
          "SetCamDofPlanes(${1:Cam* cam}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "710": {
      "prefix": "SetCamEffect",
      "body": [
          "SetCamEffect(${1:int* p0})${0}"
      ],
      "description": "```\nif p0 is 0, effect is cancelled  \nif p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.  \nif p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.  \n```"
  },
  "711": {
      "prefix": "SetCamDofStrength",
      "body": [
          "SetCamDofStrength(${1:Cam* cam}, ${2:float* dofStrength})${0}"
      ],
      "description": ""
  },
  "712": {
      "prefix": "SetCamFarDof",
      "body": [
          "SetCamFarDof(${1:Cam* cam}, ${2:float* farDOF})${0}"
      ],
      "description": ""
  },
  "713": {
      "prefix": "SetCamFarClip",
      "body": [
          "SetCamFarClip(${1:Cam* cam}, ${2:float* farClip})${0}"
      ],
      "description": ""
  },
  "714": {
      "prefix": "SetCamFov",
      "body": [
          "SetCamFov(${1:Cam* cam}, ${2:float* fieldOfView})${0}"
      ],
      "description": "```\nSets the field of view of the cam.  \n---------------------------------------------  \nMin: 1.0f  \nMax: 130.0f  \n```"
  },
  "715": {
      "prefix": "SetCamInheritRollVehicle",
      "body": [
          "SetCamInheritRollVehicle(${1:Cam* cam}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nThe native seems to only be called once.  \nThe native is used as so,  \nCAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));  \nIn the exile1 script.  \n```"
  },
  "716": {
      "prefix": "SetCamMotionBlurStrength",
      "body": [
          "SetCamMotionBlurStrength(${1:Cam* cam}, ${2:float* strength})${0}"
      ],
      "description": ""
  },
  "717": {
      "prefix": "SetCamNearClip",
      "body": [
          "SetCamNearClip(${1:Cam* cam}, ${2:float* nearClip})${0}"
      ],
      "description": ""
  },
  "718": {
      "prefix": "SetCamNearDof",
      "body": [
          "SetCamNearDof(${1:Cam* cam}, ${2:float* nearDOF})${0}"
      ],
      "description": ""
  },
  "719": {
      "prefix": "SetCamShakeAmplitude",
      "body": [
          "SetCamShakeAmplitude(${1:Cam* cam}, ${2:float* amplitude})${0}"
      ],
      "description": ""
  },
  "720": {
      "prefix": "SetCamParams",
      "body": [
          "SetCamParams(${1:Cam* cam}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:float* fieldOfView}, ${9:Any* p8}, ${10:int* p9}, ${11:int* p10}, ${12:int* p11})${0}"
      ],
      "description": ""
  },
  "721": {
      "prefix": "SetCamSplineDuration",
      "body": [
          "SetCamSplineDuration(${1:Cam* cam}, ${2:int* timeDuration})${0}"
      ],
      "description": "```\nI named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.  \n```"
  },
  "722": {
      "prefix": "SetCamRot",
      "body": [
          "SetCamRot(${1:Cam* cam}, ${2:float* rotX}, ${3:float* rotY}, ${4:float* rotZ}, ${5:int* rotationOrder})${0}"
      ],
      "description": "```\nSets the rotation of the cam.  \nLast parameter unknown.  \nLast parameter seems to always be set to 2.  \n```"
  },
  "723": {
      "prefix": "SetCamSplineNodeEase",
      "body": [
          "SetCamSplineNodeEase(${1:Cam* cam}, ${2:int* p1}, ${3:int* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "724": {
      "prefix": "SetCamSplineNodeVelocityScale",
      "body": [
          "SetCamSplineNodeVelocityScale(${1:Cam* cam}, ${2:int* p1}, ${3:float* scale})${0}"
      ],
      "description": ""
  },
  "725": {
      "prefix": "SetCamSplineNodeExtraFlags",
      "body": [
          "SetCamSplineNodeExtraFlags(${1:Cam* cam}, ${2:int* p1}, ${3:int* flags})${0}"
      ],
      "description": ""
  },
  "726": {
      "prefix": "SetCamUseShallowDofMode",
      "body": [
          "SetCamUseShallowDofMode(${1:Cam* cam}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "727": {
      "prefix": "SetCamViewModeForContext",
      "body": [
          "SetCamViewModeForContext(${1:int* context}, ${2:int* viewMode})${0}"
      ],
      "description": ""
  },
  "728": {
      "prefix": "SetCamSplinePhase",
      "body": [
          "SetCamSplinePhase(${1:Cam* cam}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "729": {
      "prefix": "SetCinematicCamShakeAmplitude",
      "body": [
          "SetCinematicCamShakeAmplitude(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "730": {
      "prefix": "SetCamSplineSmoothingStyle",
      "body": [
          "SetCamSplineSmoothingStyle(${1:Cam* cam}, ${2:int* smoothingStyle})${0}"
      ],
      "description": ""
  },
  "731": {
      "prefix": "SetFirstPersonAimCamNearClipThisUpdate",
      "body": [
          "SetFirstPersonAimCamNearClipThisUpdate(${1:float* distance})${0}"
      ],
      "description": ""
  },
  "732": {
      "prefix": "SetCinematicButtonActive",
      "body": [
          "SetCinematicButtonActive(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "733": {
      "prefix": "SetFirstPersonCamPitchRange",
      "body": [
          "SetFirstPersonCamPitchRange(${1:float* minAngle}, ${2:float* maxAngle})${0}"
      ],
      "description": ""
  },
  "734": {
      "prefix": "SetCinematicModeActive",
      "body": [
          "SetCinematicModeActive(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.\n```"
  },
  "735": {
      "prefix": "SetFlyCamHorizontalResponse",
      "body": [
          "SetFlyCamHorizontalResponse(${1:Cam* cam}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "736": {
      "prefix": "SetFirstPersonAimCamZoomFactor",
      "body": [
          "SetFirstPersonAimCamZoomFactor(${1:float* zoomFactor})${0}"
      ],
      "description": ""
  },
  "737": {
      "prefix": "SetFlyCamCoordAndConstrain",
      "body": [
          "SetFlyCamCoordAndConstrain(${1:Cam* cam}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "738": {
      "prefix": "SetFlyCamMaxHeight",
      "body": [
          "SetFlyCamMaxHeight(${1:Cam* cam}, ${2:float* height})${0}"
      ],
      "description": ""
  },
  "739": {
      "prefix": "SetFollowPedCamThisUpdate",
      "body": [
          "SetFollowPedCamThisUpdate(${1:char* camName}, ${2:int* p1})${0}"
      ],
      "description": "```\nFrom the scripts:\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA\", 0);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_ON_EXILE1_LADDER_CAMERA\", 1500);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 0);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 3000);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA\", 0);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 0);\n```"
  },
  "740": {
      "prefix": "SetFlyCamVerticalSpeedMultiplier",
      "body": [
          "SetFlyCamVerticalSpeedMultiplier(${1:Cam* cam}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "741": {
      "prefix": "SetFollowTurretSeatCam",
      "body": [
          "SetFollowTurretSeatCam(${1:int* seatIndex})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "742": {
      "prefix": "SetFollowPedCamViewMode",
      "body": [
          "SetFollowPedCamViewMode(${1:int* viewMode})${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum."
  },
  "743": {
      "prefix": "SetFollowVehicleCamViewMode",
      "body": [
          "SetFollowVehicleCamViewMode(${1:int* viewMode})${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum."
  },
  "744": {
      "prefix": "SetGameplayCamFollowPedThisUpdate",
      "body": [
          "SetGameplayCamFollowPedThisUpdate(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "745": {
      "prefix": "SetFollowVehicleCamZoomLevel",
      "body": [
          "SetFollowVehicleCamZoomLevel(${1:int* zoomLevel})${0}"
      ],
      "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum."
  },
  "746": {
      "prefix": "SetGameplayCamRawYaw",
      "body": [
          "SetGameplayCamRawYaw(${1:float* yaw})${0}"
      ],
      "description": "```\nDoes nothing  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "747": {
      "prefix": "SetGameplayCamRelativePitch",
      "body": [
          "SetGameplayCamRelativePitch(${1:float* angle}, ${2:float* scalingFactor})${0}"
      ],
      "description": "This native sets the camera's pitch (rotation on the x-axis)."
  },
  "748": {
      "prefix": "SetGameplayCamHash",
      "body": [
          "SetGameplayCamHash(${1:char* camName})${0}"
      ],
      "description": "```\nSets gameplay camera to hash\n```\n\n```\nNativeDB Introduced: v1180\n```"
  },
  "749": {
      "prefix": "SetGameplayCamRawPitch",
      "body": [
          "SetGameplayCamRawPitch(${1:float* pitch})${0}"
      ],
      "description": ""
  },
  "750": {
      "prefix": "SetGameplayCamRelativeHeading",
      "body": [
          "SetGameplayCamRelativeHeading(${1:float* heading})${0}"
      ],
      "description": "```\nSets the camera position relative to heading in float from -360 to +360.  \nHeading is alwyas 0 in aiming camera.  \n```"
  },
  "751": {
      "prefix": "SetGameplayCamShakeAmplitude",
      "body": [
          "SetGameplayCamShakeAmplitude(${1:float* amplitude})${0}"
      ],
      "description": "```\nSets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script \"drunk_controller.ysc.c4\" to simulate making the player drunk.  \n```"
  },
  "752": {
      "prefix": "SetGameplayCamRelativeRotation",
      "body": [
          "SetGameplayCamRelativeRotation(${1:float* roll}, ${2:float* pitch}, ${3:float* yaw})${0}"
      ],
      "description": ""
  },
  "753": {
      "prefix": "SetGameplayCamVehicleCameraName",
      "body": [
          "SetGameplayCamVehicleCameraName(${1:Hash* vehicleModel})${0}"
      ],
      "description": ""
  },
  "754": {
      "prefix": "SetGameplayCamVehicleCamera",
      "body": [
          "SetGameplayCamVehicleCamera(${1:char* vehicleName})${0}"
      ],
      "description": "```\nFrom b617 scripts:\nCAM::_21E253A7F8DA5DFB(\"DINGHY\");\nCAM::_21E253A7F8DA5DFB(\"ISSI2\");\nCAM::_21E253A7F8DA5DFB(\"SPEEDO\");\n```"
  },
  "755": {
      "prefix": "SetGameplayEntityHint",
      "body": [
          "SetGameplayEntityHint(${1:Entity* entity}, ${2:float* xOffset}, ${3:float* yOffset}, ${4:float* zOffset}, ${5:BOOL* p4}, ${6:int* p5}, ${7:int* p6}, ${8:int* p7}, ${9:Any* p8})${0}"
      ],
      "description": "```\np6 & p7 - possibly length or time  \n```"
  },
  "756": {
      "prefix": "SetGameplayCoordHint",
      "body": [
          "SetGameplayCoordHint(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* duration}, ${5:int* blendOutDuration}, ${6:int* blendInDuration}, ${7:int* unk})${0}"
      ],
      "description": ""
  },
  "757": {
      "prefix": "SetGameplayHintAnimOffsetx",
      "body": [
          "SetGameplayHintAnimOffsetx(${1:float* xOffset})${0}"
      ],
      "description": ""
  },
  "758": {
      "prefix": "SetGameplayHintBaseOrbitPitchOffset",
      "body": [
          "SetGameplayHintBaseOrbitPitchOffset(${1:float* value})${0}"
      ],
      "description": ""
  },
  "759": {
      "prefix": "SetGameplayHintAnimCloseup",
      "body": [
          "SetGameplayHintAnimCloseup(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "760": {
      "prefix": "SetGameplayHintFov",
      "body": [
          "SetGameplayHintFov(${1:float* FOV})${0}"
      ],
      "description": ""
  },
  "761": {
      "prefix": "SetGameplayHintAnimOffsety",
      "body": [
          "SetGameplayHintAnimOffsety(${1:float* yOffset})${0}"
      ],
      "description": ""
  },
  "762": {
      "prefix": "SetGameplayHintFollowDistanceScalar",
      "body": [
          "SetGameplayHintFollowDistanceScalar(${1:float* value})${0}"
      ],
      "description": ""
  },
  "763": {
      "prefix": "SetGameplayObjectHint",
      "body": [
          "SetGameplayObjectHint(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:BOOL* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7})${0}"
      ],
      "description": ""
  },
  "764": {
      "prefix": "SetGameplayVehicleHint",
      "body": [
          "SetGameplayVehicleHint(${1:Vehicle* vehicle}, ${2:float* offsetX}, ${3:float* offsetY}, ${4:float* offsetZ}, ${5:BOOL* p4}, ${6:int* time}, ${7:int* easeInTime}, ${8:int* easeOutTime})${0}"
      ],
      "description": "Focuses the camera on the specified vehicle."
  },
  "765": {
      "prefix": "SetGameplayPedHint",
      "body": [
          "SetGameplayPedHint(${1:Ped* p0}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:BOOL* p4}, ${6:int* duration}, ${7:int* blendOutDuration}, ${8:int* blendInDuration})${0}"
      ],
      "description": ""
  },
  "766": {
      "prefix": "SetUseHiDof",
      "body": [
          "SetUseHiDof()${0}"
      ],
      "description": ""
  },
  "767": {
      "prefix": "SetInVehicleCamStateThisUpdate",
      "body": [
          "SetInVehicleCamStateThisUpdate(${1:Vehicle* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "768": {
      "prefix": "SetWidescreenBorders",
      "body": [
          "SetWidescreenBorders(${1:BOOL* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "769": {
      "prefix": "SetThirdPersonAimCamNearClipThisUpdate",
      "body": [
          "SetThirdPersonAimCamNearClipThisUpdate(${1:float* distance})${0}"
      ],
      "description": ""
  },
  "770": {
      "prefix": "ShakeCam",
      "body": [
          "ShakeCam(${1:Cam* cam}, ${2:char* type}, ${3:float* amplitude})${0}"
      ],
      "description": "```\nPossible shake types (updated b617d):  \nDEATH_FAIL_IN_EFFECT_SHAKE  \nDRUNK_SHAKE  \nFAMILY5_DRUG_TRIP_SHAKE  \nHAND_SHAKE  \nJOLT_SHAKE  \nLARGE_EXPLOSION_SHAKE  \nMEDIUM_EXPLOSION_SHAKE  \nSMALL_EXPLOSION_SHAKE  \nROAD_VIBRATION_SHAKE  \nSKY_DIVING_SHAKE  \nVIBRATE_SHAKE  \n```"
  },
  "771": {
      "prefix": "ShakeCinematicCam",
      "body": [
          "ShakeCinematicCam(${1:char* p0}, ${2:float* p1})${0}"
      ],
      "description": "```\np0 argument found in the b617d scripts: \"DRUNK_SHAKE\"  \n```"
  },
  "772": {
      "prefix": "ShakeGameplayCam",
      "body": [
          "ShakeGameplayCam(${1:char* shakeName}, ${2:float* intensity})${0}"
      ],
      "description": "```\nPossible shake types (updated b617d):  \nDEATH_FAIL_IN_EFFECT_SHAKE  \nDRUNK_SHAKE  \nFAMILY5_DRUG_TRIP_SHAKE  \nHAND_SHAKE  \nJOLT_SHAKE  \nLARGE_EXPLOSION_SHAKE  \nMEDIUM_EXPLOSION_SHAKE  \nSMALL_EXPLOSION_SHAKE  \nROAD_VIBRATION_SHAKE  \nSKY_DIVING_SHAKE  \nVIBRATE_SHAKE  \n```"
  },
  "773": {
      "prefix": "ShakeScriptGlobal",
      "body": [
          "ShakeScriptGlobal(${1:char* p0}, ${2:float* p1})${0}"
      ],
      "description": "```\nCAM::SHAKE_SCRIPT_GLOBAL(\"HAND_SHAKE\", 0.2);\n```"
  },
  "774": {
      "prefix": "StopCamPointing",
      "body": [
          "StopCamPointing(${1:Cam* cam})${0}"
      ],
      "description": ""
  },
  "775": {
      "prefix": "StopCamShaking",
      "body": [
          "StopCamShaking(${1:Cam* cam}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "776": {
      "prefix": "StopCinematicCamShaking",
      "body": [
          "StopCinematicCamShaking(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "777": {
      "prefix": "StopGameplayCamShaking",
      "body": [
          "StopGameplayCamShaking(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "778": {
      "prefix": "StopCinematicShot",
      "body": [
          "StopCinematicShot(${1:Hash* p0})${0}"
      ],
      "description": ""
  },
  "779": {
      "prefix": "StopRenderingScriptCamsUsingCatchUp",
      "body": [
          "StopRenderingScriptCamsUsingCatchUp(${1:BOOL* render}, ${2:float* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nThis native makes the gameplay camera zoom into first person/third person with a special effect.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "780": {
      "prefix": "StopScriptGlobalShaking",
      "body": [
          "StopScriptGlobalShaking(${1:BOOL* p0})${0}"
      ],
      "description": "```\nIn drunk_controller.c4, sub_309\nif (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {\n    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);\n}\n```"
  },
  "781": {
      "prefix": "StopCutsceneCamShaking",
      "body": [
          "StopCutsceneCamShaking()${0}"
      ],
      "description": ""
  },
  "782": {
      "prefix": "UseStuntCameraThisFrame",
      "body": [
          "UseStuntCameraThisFrame()${0}"
      ],
      "description": ""
  },
  "783": {
      "prefix": "StopGameplayHint",
      "body": [
          "StopGameplayHint(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "784": {
      "prefix": "AdvanceClockTimeTo",
      "body": [
          "AdvanceClockTimeTo(${1:int* hour}, ${2:int* minute}, ${3:int* second})${0}"
      ],
      "description": ""
  },
  "785": {
      "prefix": "GetClockDayOfWeek",
      "body": [
          "GetClockDayOfWeek()${0}"
      ],
      "description": "```\nGets the current day of the week.  \n0: Sunday  \n1: Monday  \n2: Tuesday  \n3: Wednesday  \n4: Thursday  \n5: Friday  \n6: Saturday  \n```"
  },
  "786": {
      "prefix": "GetClockMinutes",
      "body": [
          "GetClockMinutes()${0}"
      ],
      "description": "```\nGets the current ingame clock minute.  \n```"
  },
  "787": {
      "prefix": "AddToClockTime",
      "body": [
          "AddToClockTime(${1:int* hours}, ${2:int* minutes}, ${3:int* seconds})${0}"
      ],
      "description": ""
  },
  "788": {
      "prefix": "GetClockSeconds",
      "body": [
          "GetClockSeconds()${0}"
      ],
      "description": "```\nGets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.  \n```"
  },
  "789": {
      "prefix": "GetClockDayOfMonth",
      "body": [
          "GetClockDayOfMonth()${0}"
      ],
      "description": ""
  },
  "790": {
      "prefix": "GetLocalTime",
      "body": [
          "GetLocalTime(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})${0}"
      ],
      "description": "```\nGets local system time as year, month, day, hour, minute and second.  \nExample usage:  \nint year;  \nint month;  \nint day;  \nint hour;  \nint minute;  \nint second;  \nor use std::tm struct  \nTIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);  \n```"
  },
  "791": {
      "prefix": "GetClockHours",
      "body": [
          "GetClockHours()${0}"
      ],
      "description": "```\nGets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)  \n```"
  },
  "792": {
      "prefix": "GetClockMonth",
      "body": [
          "GetClockMonth()${0}"
      ],
      "description": ""
  },
  "793": {
      "prefix": "GetPosixTime",
      "body": [
          "GetPosixTime(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})${0}"
      ],
      "description": "```\nGets system time as year, month, day, hour, minute and second.  \nExample usage:  \n\tint year;  \n\tint month;  \n\tint day;  \n\tint hour;  \n\tint minute;  \n\tint second;  \n\tTIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);  \n```"
  },
  "794": {
      "prefix": "GetClockYear",
      "body": [
          "GetClockYear()${0}"
      ],
      "description": ""
  },
  "795": {
      "prefix": "GetMillisecondsPerGameMinute",
      "body": [
          "GetMillisecondsPerGameMinute()${0}"
      ],
      "description": "Returns how many real ms are equal to one game minute.\nA getter for [`SetMillisecondsPerGameMinute`](#\\_0x36CA2554)."
  },
  "796": {
      "prefix": "PauseClock",
      "body": [
          "PauseClock(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "797": {
      "prefix": "GetUtcTime",
      "body": [
          "GetUtcTime(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})${0}"
      ],
      "description": "```\nGets current UTC time\n```"
  },
  "798": {
      "prefix": "SetClockTime",
      "body": [
          "SetClockTime(${1:int* hour}, ${2:int* minute}, ${3:int* second})${0}"
      ],
      "description": "```\nSET_CLOCK_TIME(12, 34, 56);  \n```"
  },
  "799": {
      "prefix": "SetClockDate",
      "body": [
          "SetClockDate(${1:int* day}, ${2:int* month}, ${3:int* year})${0}"
      ],
      "description": ""
  },
  "800": {
      "prefix": "ActivateAudioSlowmoMode",
      "body": [
          "ActivateAudioSlowmoMode(${1:char* p0})${0}"
      ],
      "description": ""
  },
  "801": {
      "prefix": "AddEntityToAudioMixGroup",
      "body": [
          "AddEntityToAudioMixGroup(${1:Entity* entity}, ${2:char* groupName}, ${3:float* p2})${0}"
      ],
      "description": "```\nAll found occurrences in b678d:\npastebin.com/ceu67jz8\n```"
  },
  "802": {
      "prefix": "AddLineToConversation",
      "body": [
          "AddLineToConversation(${1:int* index}, ${2:char* p1}, ${3:char* p2}, ${4:int* p3}, ${5:int* p4}, ${6:BOOL* p5}, ${7:BOOL* p6}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:int* p9}, ${11:BOOL* p10}, ${12:BOOL* p11}, ${13:BOOL* p12})${0}"
      ],
      "description": "```\nNOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,\n_GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.\np0 is -1, 0 - 35\np1 is a char or string (whatever you wanna call it)\np2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop\np3 is again -1, 0 - 35\np4 is again -1, 0 - 35\np5 is either 0 or 1 (bool ?)\np6 is either 0 or 1 (The func to determine this is bool)\np7 is either 0 or 1 (The func to determine this is bool)\np8 is either 0 or 1 (The func to determine this is bool)\np9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)\np10 is either 0 or 1 (The func to determine this is bool)\np11 is either 0 or 1 (The func to determine this is bool)\np12 is unknown as in TU27 X360 scripts it only goes to p11.\n```"
  },
  "803": {
      "prefix": "BlipSiren",
      "body": [
          "BlipSiren(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nPlays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.  \nOnly works on vehicles with a police siren.  \n```"
  },
  "804": {
      "prefix": "AddPedToConversation",
      "body": [
          "AddPedToConversation(${1:int* index}, ${2:Ped* ped}, ${3:char* p2})${0}"
      ],
      "description": "```\n4 calls in the b617d scripts. The only one with p0 and p2 in clear text:\nAUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, \"DINAPOLI\");\n=================================================\nOne of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.\n```"
  },
  "805": {
      "prefix": "AudioIsScriptedMusicPlaying",
      "body": [
          "AudioIsScriptedMusicPlaying()${0}"
      ],
      "description": ""
  },
  "806": {
      "prefix": "BlockDeathJingle",
      "body": [
          "BlockDeathJingle(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "807": {
      "prefix": "CanPedSpeak",
      "body": [
          "CanPedSpeak(${1:Ped* ped}, ${2:char* speechName}, ${3:BOOL* unk})${0}"
      ],
      "description": "```\nChecks if the ped can play the speech or has the speech file, last parameter is usually 0  \n```"
  },
  "808": {
      "prefix": "CancelMusicEvent",
      "body": [
          "CancelMusicEvent(${1:char* eventName})${0}"
      ],
      "description": "```\nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n```"
  },
  "809": {
      "prefix": "CancelCurrentPoliceReport",
      "body": [
          "CancelCurrentPoliceReport()${0}"
      ],
      "description": ""
  },
  "810": {
      "prefix": "ClearAmbientZoneListState",
      "body": [
          "ClearAmbientZoneListState(${1:Any* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "811": {
      "prefix": "ClearAllBrokenGlass",
      "body": [
          "ClearAllBrokenGlass()${0}"
      ],
      "description": ""
  },
  "812": {
      "prefix": "ClearCustomRadioTrackList",
      "body": [
          "ClearCustomRadioTrackList(${1:char* radioStation})${0}"
      ],
      "description": "```\n3 calls in the b617d scripts, removed duplicate.\nAUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST(\"RADIO_16_SILVERLAKE\");\nAUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\");\n```"
  },
  "813": {
      "prefix": "ClearAmbientZoneState",
      "body": [
          "ClearAmbientZoneState(${1:char* zoneName}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nThis function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);\nStill needs more research.\n```"
  },
  "814": {
      "prefix": "DisablePedPainAudio",
      "body": [
          "DisablePedPainAudio(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "815": {
      "prefix": "CreateNewScriptedConversation",
      "body": [
          "CreateNewScriptedConversation()${0}"
      ],
      "description": ""
  },
  "816": {
      "prefix": "DoesPlayerVehHaveRadio",
      "body": [
          "DoesPlayerVehHaveRadio()${0}"
      ],
      "description": ""
  },
  "817": {
      "prefix": "EnableVehicleExhaustPops",
      "body": [
          "EnableVehicleExhaustPops(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Sets whether the vehicle passed has exhaust pops."
  },
  "818": {
      "prefix": "DeactivateAudioSlowmoMode",
      "body": [
          "DeactivateAudioSlowmoMode(${1:char* p0})${0}"
      ],
      "description": ""
  },
  "819": {
      "prefix": "ForceRadioTrackListPosition",
      "body": [
          "ForceRadioTrackListPosition(${1:char* radioStation}, ${2:char* trackListName}, ${3:int* milliseconds})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "820": {
      "prefix": "FreezeMicrophone",
      "body": [
          "FreezeMicrophone()${0}"
      ],
      "description": ""
  },
  "821": {
      "prefix": "FreezeRadioStation",
      "body": [
          "FreezeRadioStation(${1:char* radioStation})${0}"
      ],
      "description": ""
  },
  "822": {
      "prefix": "DistantCopCarSirens",
      "body": [
          "DistantCopCarSirens(${1:BOOL* value})${0}"
      ],
      "description": "```\nIf value is set to true, and ambient siren sound will be played.\nAppears to enable/disable an audio flag.\n```"
  },
  "823": {
      "prefix": "GetAmbientVoiceNameHash",
      "body": [
          "GetAmbientVoiceNameHash(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "824": {
      "prefix": "EnableStallWarningSounds",
      "body": [
          "EnableStallWarningSounds(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "825": {
      "prefix": "FindRadioStationIndex",
      "body": [
          "FindRadioStationIndex(${1:int* stationNameHash})${0}"
      ],
      "description": ""
  },
  "826": {
      "prefix": "ForceVehicleEngineAudio",
      "body": [
          "ForceVehicleEngineAudio(${1:Vehicle* vehicle}, ${2:char* audioName})${0}"
      ],
      "description": "```\nThis native sets the audio of the specified vehicle to the audioName (p1).\nUse the audioNameHash found in vehicles.meta\nExample:\n_SET_VEHICLE_AUDIO(veh, \"ADDER\");\nThe selected vehicle will now have the audio of the Adder.\nFORCE_VEHICLE_???\n```"
  },
  "827": {
      "prefix": "GetCurrentScriptedConversationLine",
      "body": [
          "GetCurrentScriptedConversationLine()${0}"
      ],
      "description": ""
  },
  "828": {
      "prefix": "GetIsPreloadedConversationReady",
      "body": [
          "GetIsPreloadedConversationReady()${0}"
      ],
      "description": ""
  },
  "829": {
      "prefix": "GetMusicPlaytime",
      "body": [
          "GetMusicPlaytime()${0}"
      ],
      "description": ""
  },
  "830": {
      "prefix": "GetNumUnlockedRadioStations",
      "body": [
          "GetNumUnlockedRadioStations()${0}"
      ],
      "description": ""
  },
  "831": {
      "prefix": "GetAudibleMusicTrackTextId",
      "body": [
          "GetAudibleMusicTrackTextId()${0}"
      ],
      "description": ""
  },
  "832": {
      "prefix": "GetCurrentRadioTrackName",
      "body": [
          "GetCurrentRadioTrackName(${1:char* radioStationName})${0}"
      ],
      "description": "```\nReturn the hash of the radio stations current track.\n\nNativeDB Introduced: v1493\n```"
  },
  "833": {
      "prefix": "GetPlayerRadioStationIndex",
      "body": [
          "GetPlayerRadioStationIndex()${0}"
      ],
      "description": "```\nReturns 255 (radio off index) if the function fails.  \n```"
  },
  "834": {
      "prefix": "GetCurrentRadioTrackPlaybackTime",
      "body": [
          "GetCurrentRadioTrackPlaybackTime(${1:char* radioStationName})${0}"
      ],
      "description": "```\nReturn the playback time (in milliseconds) of the radio stations current track. \n\nNativeDB Introduced: v1493\n```"
  },
  "835": {
      "prefix": "GetPlayerRadioStationName",
      "body": [
          "GetPlayerRadioStationName()${0}"
      ],
      "description": "```\nReturns active radio station name  \n```"
  },
  "836": {
      "prefix": "GetNetworkIdFromSoundId",
      "body": [
          "GetNetworkIdFromSoundId(${1:int* soundId})${0}"
      ],
      "description": "```\nCould this be used alongside either,   \nSET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.  \n```"
  },
  "837": {
      "prefix": "GetSoundId",
      "body": [
          "GetSoundId()${0}"
      ],
      "description": ""
  },
  "838": {
      "prefix": "GetSoundIdFromNetworkId",
      "body": [
          "GetSoundIdFromNetworkId(${1:int* netId})${0}"
      ],
      "description": "Counterpart: [`GET_NETWORK_ID_FROM_SOUND_ID`](#\\_0x2DE3F0A134FFBC0D)."
  },
  "839": {
      "prefix": "GetPlayerRadioStationGenre",
      "body": [
          "GetPlayerRadioStationGenre()${0}"
      ],
      "description": ""
  },
  "840": {
      "prefix": "GetStreamPlayTime",
      "body": [
          "GetStreamPlayTime()${0}"
      ],
      "description": ""
  },
  "841": {
      "prefix": "GetRadioStationName",
      "body": [
          "GetRadioStationName(${1:int* radioStation})${0}"
      ],
      "description": "```\nReturns String with radio station name.  \n```"
  },
  "842": {
      "prefix": "GetVehicleDefaultHorn",
      "body": [
          "GetVehicleDefaultHorn(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns hash of default vehicle horn  \nHash is stored in audVehicleAudioEntity  \n```"
  },
  "843": {
      "prefix": "GetVehicleDefaultHornIgnoreMods",
      "body": [
          "GetVehicleDefaultHornIgnoreMods(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "844": {
      "prefix": "GetVehicleDefaultHornVariation",
      "body": [
          "GetVehicleDefaultHornVariation(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "845": {
      "prefix": "HasMultiplayerAudioDataLoaded",
      "body": [
          "HasMultiplayerAudioDataLoaded()${0}"
      ],
      "description": "```\nHAS_*\n```"
  },
  "846": {
      "prefix": "HasMultiplayerAudioDataUnloaded",
      "body": [
          "HasMultiplayerAudioDataUnloaded()${0}"
      ],
      "description": "```\nHAS_*\n```"
  },
  "847": {
      "prefix": "HasSoundFinished",
      "body": [
          "HasSoundFinished(${1:int* soundId})${0}"
      ],
      "description": ""
  },
  "848": {
      "prefix": "HintAmbientAudioBank",
      "body": [
          "HintAmbientAudioBank(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "849": {
      "prefix": "HintScriptAudioBank",
      "body": [
          "HintScriptAudioBank(${1:Any* p0}, ${2:int* p1})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "850": {
      "prefix": "InterruptConversationAndPause",
      "body": [
          "InterruptConversationAndPause(${1:Ped* ped}, ${2:char* p1}, ${3:char* p2})${0}"
      ],
      "description": "```\nOne call found in the b617d scripts:\nAUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), \"CONV_INTERRUPT_QUIT_IT\", \"LESTER\");\n```"
  },
  "851": {
      "prefix": "InterruptConversation",
      "body": [
          "InterruptConversation(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "852": {
      "prefix": "IsAlarmPlaying",
      "body": [
          "IsAlarmPlaying(${1:char* alarmName})${0}"
      ],
      "description": "```\nExample:  \nbool playing = AUDIO::IS_ALARM_PLAYING(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\");  \n```"
  },
  "853": {
      "prefix": "IsAmbientSpeechPlaying",
      "body": [
          "IsAmbientSpeechPlaying(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "854": {
      "prefix": "IsAmbientSpeechDisabled",
      "body": [
          "IsAmbientSpeechDisabled(${1:Ped* ped})${0}"
      ],
      "description": "```\nCommon in the scripts:  \nAUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());  \n```"
  },
  "855": {
      "prefix": "IsAmbientZoneEnabled",
      "body": [
          "IsAmbientZoneEnabled(${1:char* ambientZone})${0}"
      ],
      "description": ""
  },
  "856": {
      "prefix": "IsAnimalVocalizationPlaying",
      "body": [
          "IsAnimalVocalizationPlaying(${1:Ped* pedHandle})${0}"
      ],
      "description": ""
  },
  "857": {
      "prefix": "IsAnySpeechPlaying",
      "body": [
          "IsAnySpeechPlaying(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "858": {
      "prefix": "IsAudioSceneActive",
      "body": [
          "IsAudioSceneActive(${1:char* scene})${0}"
      ],
      "description": ""
  },
  "859": {
      "prefix": "IsHornActive",
      "body": [
          "IsHornActive(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nChecks whether the horn of a vehicle is currently played.  \n```"
  },
  "860": {
      "prefix": "IsGameInControlOfMusic",
      "body": [
          "IsGameInControlOfMusic()${0}"
      ],
      "description": "```\nHardcoded to return 1  \n```"
  },
  "861": {
      "prefix": "IsMissionNewsStoryUnlocked",
      "body": [
          "IsMissionNewsStoryUnlocked(${1:int* newsStory})${0}"
      ],
      "description": ""
  },
  "862": {
      "prefix": "IsMissionCompletePlaying",
      "body": [
          "IsMissionCompletePlaying()${0}"
      ],
      "description": ""
  },
  "863": {
      "prefix": "IsMissionCompleteReadyForUi",
      "body": [
          "IsMissionCompleteReadyForUi()${0}"
      ],
      "description": ""
  },
  "864": {
      "prefix": "IsMobilePhoneCallOngoing",
      "body": [
          "IsMobilePhoneCallOngoing()${0}"
      ],
      "description": ""
  },
  "865": {
      "prefix": "IsPedInCurrentConversation",
      "body": [
          "IsPedInCurrentConversation(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "866": {
      "prefix": "IsMobilePhoneRadioActive",
      "body": [
          "IsMobilePhoneRadioActive()${0}"
      ],
      "description": ""
  },
  "867": {
      "prefix": "IsPedRingtonePlaying",
      "body": [
          "IsPedRingtonePlaying(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "868": {
      "prefix": "IsPlayerVehRadioEnable",
      "body": [
          "IsPlayerVehRadioEnable()${0}"
      ],
      "description": ""
  },
  "869": {
      "prefix": "IsRadioRetuning",
      "body": [
          "IsRadioRetuning()${0}"
      ],
      "description": ""
  },
  "870": {
      "prefix": "IsMusicOneshotPlaying",
      "body": [
          "IsMusicOneshotPlaying()${0}"
      ],
      "description": ""
  },
  "871": {
      "prefix": "IsScriptedSpeechPlaying",
      "body": [
          "IsScriptedSpeechPlaying(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "872": {
      "prefix": "IsRadioFadedOut",
      "body": [
          "IsRadioFadedOut()${0}"
      ],
      "description": ""
  },
  "873": {
      "prefix": "IsStreamPlaying",
      "body": [
          "IsStreamPlaying()${0}"
      ],
      "description": ""
  },
  "874": {
      "prefix": "IsScriptedConversationLoaded",
      "body": [
          "IsScriptedConversationLoaded()${0}"
      ],
      "description": ""
  },
  "875": {
      "prefix": "IsVehicleRadioEnabled",
      "body": [
          "IsVehicleRadioEnabled(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nIS_VEHICLE_*\n```"
  },
  "876": {
      "prefix": "IsScriptedConversationOngoing",
      "body": [
          "IsScriptedConversationOngoing()${0}"
      ],
      "description": ""
  },
  "877": {
      "prefix": "IsVehicleRadioLoud",
      "body": [
          "IsVehicleRadioLoud(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "878": {
      "prefix": "IsVehicleAudiblyDamaged",
      "body": [
          "IsVehicleAudiblyDamaged(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "879": {
      "prefix": "LinkStaticEmitterToEntity",
      "body": [
          "LinkStaticEmitterToEntity(${1:char* emitterName}, ${2:Entity* entity})${0}"
      ],
      "description": "```\nL* (LINK_*?)\n```"
  },
  "880": {
      "prefix": "LoadStream",
      "body": [
          "LoadStream(${1:char* streamName}, ${2:char* soundSet})${0}"
      ],
      "description": "```\nExample:  \nAUDIO::LOAD_STREAM(\"CAR_STEAL_1_PASSBY\", \"CAR_STEAL_1_SOUNDSET\");  \nAll found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w  \nStream names often ends with \"_MASTER\", \"_SMALL\" or \"_STREAM\". Also \"_IN\", \"_OUT\" and numbers.     \nsoundSet is often set to 0 in the scripts. These are common to end the soundSets: \"_SOUNDS\", \"_SOUNDSET\" and numbers.  \n```"
  },
  "881": {
      "prefix": "LoadStreamWithStartOffset",
      "body": [
          "LoadStreamWithStartOffset(${1:char* streamName}, ${2:int* startOffset}, ${3:char* soundSet})${0}"
      ],
      "description": "```\nExample:  \nAUDIO::LOAD_STREAM_WITH_START_OFFSET(\"STASH_TOXIN_STREAM\", 2400, \"FBI_05_SOUNDS\");  \nOnly called a few times in the scripts.  \n```"
  },
  "882": {
      "prefix": "LockRadioStation",
      "body": [
          "LockRadioStation(${1:char* radioStationName}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nDisables the radio station (hides it from the radio wheel).\n\nNativeDB Introduced: v1493\n```"
  },
  "883": {
      "prefix": "LockRadioStationTrackList",
      "body": [
          "LockRadioStationTrackList(${1:char* radioStation}, ${2:char* trackListName})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "884": {
      "prefix": "OverridePlayerGroundMaterial",
      "body": [
          "OverridePlayerGroundMaterial(${1:Hash* hash}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "885": {
      "prefix": "OverrideMicrophoneSettings",
      "body": [
          "OverrideMicrophoneSettings(${1:Hash* hash}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Sets audio flag \"OverrideMicrophoneSettings\""
  },
  "886": {
      "prefix": "OverrideTrevorRage",
      "body": [
          "OverrideTrevorRage(${1:char* voiceEffect})${0}"
      ],
      "description": "This native enables the audio flag \"TrevorRageIsOverridden\" and sets the voice effect to `voiceEffect`"
  },
  "887": {
      "prefix": "OverrideUnderwaterStream",
      "body": [
          "OverrideUnderwaterStream(${1:Any* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "888": {
      "prefix": "OverrideVehHorn",
      "body": [
          "OverrideVehHorn(${1:Vehicle* vehicle}, ${2:BOOL* override}, ${3:int* hornHash})${0}"
      ],
      "description": "Overrides the vehicle's horn hash.\n\nWhen changing this hash on a vehicle, [`_GET_VEHICLE_HORN_HASH`](#\\_0xACB5DCCA1EC76840) will **not** return the 'overwritten' hash. It will still always return the default horn hash (same as [`GET_VEHICLE_DEFAULT_HORN`](#\\_0x02165D55000219AC)).\n\nList of possible hashes (found in decompiled scripts):\n\n|        signed |     unsigned |      hex     |\n|--------------:|-------------:|:------------:|\n|  `1604822495` | `1604822495` | `0x5FA7A5DF` |\n| `-1262465009` | `3032502287` | `0xB4C0500F` |\n|  `-889553789` | `3405413507` | `0xCAFA7C83` |\n| `-1557943086` | `2737024210` | `0xA323ACD2` |\n| `-1318696617` | `2976270679` | `0xB1664957` |\n|    `-7740003` | `4287227293` | `0xFF89E59D` |\n| `-1815146967` | `2479820329` | `0x93CF0E29` |\n|  `-339919356` | `3955047940` | `0xEBBD3E04` |"
  },
  "889": {
      "prefix": "PauseScriptedConversation",
      "body": [
          "PauseScriptedConversation(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "890": {
      "prefix": "PlayAnimalVocalization",
      "body": [
          "PlayAnimalVocalization(${1:Ped* pedHandle}, ${2:int* p1}, ${3:char* speechName})${0}"
      ],
      "description": "```\nPlays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.\nThis native is works only when you call it on the ped with right model (ac_chop only ?)\nSpeech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ\n```"
  },
  "891": {
      "prefix": "PlayAmbientSpeechFromPositionNative",
      "body": [
          "PlayAmbientSpeechFromPositionNative(${1:char* speechName}, ${2:char* voiceName}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:char* speechParam})${0}"
      ],
      "description": ""
  },
  "892": {
      "prefix": "PlayMissionCompleteAudio",
      "body": [
          "PlayMissionCompleteAudio(${1:char* audioName})${0}"
      ],
      "description": "```\nCalled 38 times in the scripts. There are 5 different audioNames used.\n One unknown removed below.\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"DEAD\");\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"FRANKLIN_BIG_01\");\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"GENERIC_FAILED\");\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"TREVOR_SMALL_01\");\n```"
  },
  "893": {
      "prefix": "PlayDeferredSoundFrontend",
      "body": [
          "PlayDeferredSoundFrontend(${1:char* soundName}, ${2:char* soundsetName})${0}"
      ],
      "description": "```\nOnly call found in the b617d scripts:\nAUDIO::PLAY_DEFERRED_SOUND_FRONTEND(\"BACK\", \"HUD_FREEMODE_SOUNDSET\");\n```"
  },
  "894": {
      "prefix": "PlayEndCreditsMusic",
      "body": [
          "PlayEndCreditsMusic(${1:BOOL* play})${0}"
      ],
      "description": ""
  },
  "895": {
      "prefix": "PlayPain",
      "body": [
          "PlayPain(${1:Ped* ped}, ${2:int* painID}, ${3:int* p1})${0}"
      ],
      "description": "```\nNeeds another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);  \nLast 2 parameters always seem to be 0.  \nEX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);  \nKnown Pain IDs  \n________________________  \n1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)  \n6 - Scream (Short)  \n7 - Scared Scream (Kinda Long)  \n8 - On Fire  \n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "896": {
      "prefix": "PlayPedAmbientSpeechNative",
      "body": [
          "PlayPedAmbientSpeechNative(${1:Ped* ped}, ${2:char* speechName}, ${3:char* speechParam})${0}"
      ],
      "description": "Plays ambient speech; see also [`PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE`](#\\_0xC6941B4A3A8FBBB9).\n\n```\nspeechParam: Can be one of the following:\nSPEECH_PARAMS_STANDARD\nSPEECH_PARAMS_ALLOW_REPEAT\nSPEECH_PARAMS_BEAT\nSPEECH_PARAMS_FORCE\nSPEECH_PARAMS_FORCE_FRONTEND\nSPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND\nSPEECH_PARAMS_FORCE_NORMAL\nSPEECH_PARAMS_FORCE_NORMAL_CLEAR\nSPEECH_PARAMS_FORCE_NORMAL_CRITICAL\nSPEECH_PARAMS_FORCE_SHOUTED\nSPEECH_PARAMS_FORCE_SHOUTED_CLEAR\nSPEECH_PARAMS_FORCE_SHOUTED_CRITICAL\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY\nSPEECH_PARAMS_MEGAPHONE\nSPEECH_PARAMS_HELI\nSPEECH_PARAMS_FORCE_MEGAPHONE\nSPEECH_PARAMS_FORCE_HELI\nSPEECH_PARAMS_INTERRUPT\nSPEECH_PARAMS_INTERRUPT_SHOUTED\nSPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR\nSPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL\nSPEECH_PARAMS_INTERRUPT_NO_FORCE\nSPEECH_PARAMS_INTERRUPT_FRONTEND\nSPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND\nSPEECH_PARAMS_ADD_BLIP\nSPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT\nSPEECH_PARAMS_ADD_BLIP_FORCE\nSPEECH_PARAMS_ADD_BLIP_SHOUTED\nSPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE\nSPEECH_PARAMS_ADD_BLIP_INTERRUPT\nSPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL\nSPEECH_PARAMS_SHOUTED\nSPEECH_PARAMS_SHOUTED_CLEAR\nSPEECH_PARAMS_SHOUTED_CRITICAL\nNote: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "897": {
      "prefix": "PlayPedRingtone",
      "body": [
          "PlayPedRingtone(${1:char* ringtoneName}, ${2:Ped* ped}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny  \nAUDIO::PLAY_PED_RINGTONE(\"Remote_Ring\", PLAYER::PLAYER_PED_ID(), 1);  \nAUDIO::PLAY_PED_RINGTONE(\"Dial_and_Remote_Ring\", PLAYER::PLAYER_PED_ID(), 1);  \n```"
  },
  "898": {
      "prefix": "PlayPedAmbientSpeechAndCloneNative",
      "body": [
          "PlayPedAmbientSpeechAndCloneNative(${1:Ped* ped}, ${2:char* speechName}, ${3:char* speechParam})${0}"
      ],
      "description": "See [`PLAY_PED_AMBIENT_SPEECH_NATIVE`](#\\_0x8E04FEDD28D42462) for parameter specifications.\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "899": {
      "prefix": "PlayPoliceReport",
      "body": [
          "PlayPoliceReport(${1:char* name}, ${2:float* p1})${0}"
      ],
      "description": "```\nPlays the given police radio message.\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr\n```"
  },
  "900": {
      "prefix": "PlayPedAmbientSpeechWithVoiceNative",
      "body": [
          "PlayPedAmbientSpeechWithVoiceNative(${1:Ped* ped}, ${2:char* speechName}, ${3:char* voiceName}, ${4:char* speechParam}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nThis is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.\nEX (C#):\nGTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, \"GENERIC_INSULT_HIGH\", \"s_m_y_sheriff_01_white_full_01\", \"SPEECH_PARAMS_FORCE_SHOUTED\", 0);\nThe first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.\n```"
  },
  "901": {
      "prefix": "PlaySoundFromCoord",
      "body": [
          "PlaySoundFromCoord(${1:int* soundId}, ${2:char* audioName}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:char* audioRef}, ${7:BOOL* isNetwork}, ${8:int* range}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW  \ngtaforums.com/topic/795622-audio-for-mods  \n```"
  },
  "902": {
      "prefix": "PlaySound",
      "body": [
          "PlaySound(${1:int* soundId}, ${2:char* audioName}, ${3:char* audioRef}, ${4:BOOL* p3}, ${5:Any* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ  \n```"
  },
  "903": {
      "prefix": "PlaySoundFromEntity",
      "body": [
          "PlaySoundFromEntity(${1:int* soundId}, ${2:char* audioName}, ${3:Entity* entity}, ${4:char* audioRef}, ${5:BOOL* isNetwork}, ${6:Any* p5})${0}"
      ],
      "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0   \nNo changes made in b678d.  \ngtaforums.com/topic/795622-audio-for-mods  \n```"
  },
  "904": {
      "prefix": "PlaySoundFrontend",
      "body": [
          "PlaySoundFrontend(${1:int* soundId}, ${2:char* audioName}, ${3:char* audioRef}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nList: https://pastebin.com/DCeRiaLJ\nAll occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM\n```"
  },
  "905": {
      "prefix": "PlayStreamFromPed",
      "body": [
          "PlayStreamFromPed(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "906": {
      "prefix": "PlayStreamFromObject",
      "body": [
          "PlayStreamFromObject(${1:Object* object})${0}"
      ],
      "description": "```\nUsed with AUDIO::LOAD_STREAM\nExample from finale_heist2b.c4:\nTASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, \"push_out_vault_l\", 4.0, -1.5, 5, 713, 4.0, 0);\n                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);\n                    PED::_2208438012482A1A(l_4C8[2/*14*/], 0, 0);\n                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);\n                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);\n                    if (AUDIO::LOAD_STREAM(\"Gold_Cart_Push_Anim_01\", \"BIG_SCORE_3B_SOUNDS\")) {\n                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);\n                    }\n```"
  },
  "907": {
      "prefix": "PlayStreamFromPosition",
      "body": [
          "PlayStreamFromPosition(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "908": {
      "prefix": "PlayStreamFromVehicle",
      "body": [
          "PlayStreamFromVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "909": {
      "prefix": "PlayStreamFrontend",
      "body": [
          "PlayStreamFrontend()${0}"
      ],
      "description": ""
  },
  "910": {
      "prefix": "PlayVehicleDoorCloseSound",
      "body": [
          "PlayVehicleDoorCloseSound(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": ""
  },
  "911": {
      "prefix": "PreloadScriptConversation",
      "body": [
          "PreloadScriptConversation(${1:BOOL* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "912": {
      "prefix": "PlaySynchronizedAudioEvent",
      "body": [
          "PlaySynchronizedAudioEvent(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "913": {
      "prefix": "PreloadScriptPhoneConversation",
      "body": [
          "PreloadScriptPhoneConversation(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "914": {
      "prefix": "PlayVehicleDoorOpenSound",
      "body": [
          "PlayVehicleDoorOpenSound(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": ""
  },
  "915": {
      "prefix": "PreloadVehicleAudio",
      "body": [
          "PreloadVehicleAudio(${1:Hash* model})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "916": {
      "prefix": "PrepareSynchronizedAudioEvent",
      "body": [
          "PrepareSynchronizedAudioEvent(${1:char* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "917": {
      "prefix": "RecordBrokenGlass",
      "body": [
          "RecordBrokenGlass(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "918": {
      "prefix": "PrepareAlarm",
      "body": [
          "PrepareAlarm(${1:char* alarmName})${0}"
      ],
      "description": "```\nExample:  \nbool prepareAlarm = AUDIO::PREPARE_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\");  \n```"
  },
  "919": {
      "prefix": "PrepareMusicEvent",
      "body": [
          "PrepareMusicEvent(${1:char* eventName})${0}"
      ],
      "description": "```\nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n```"
  },
  "920": {
      "prefix": "PrepareSynchronizedAudioEventForScene",
      "body": [
          "PrepareSynchronizedAudioEventForScene(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "921": {
      "prefix": "RegisterScriptWithAudio",
      "body": [
          "RegisterScriptWithAudio(${1:int* p0})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "922": {
      "prefix": "ReleaseAmbientAudioBank",
      "body": [
          "ReleaseAmbientAudioBank()${0}"
      ],
      "description": ""
  },
  "923": {
      "prefix": "ReleaseNamedScriptAudioBank",
      "body": [
          "ReleaseNamedScriptAudioBank(${1:char* audioBank})${0}"
      ],
      "description": ""
  },
  "924": {
      "prefix": "ReleaseScriptAudioBank",
      "body": [
          "ReleaseScriptAudioBank()${0}"
      ],
      "description": ""
  },
  "925": {
      "prefix": "ReleaseMissionAudioBank",
      "body": [
          "ReleaseMissionAudioBank()${0}"
      ],
      "description": ""
  },
  "926": {
      "prefix": "ReleaseWeaponAudio",
      "body": [
          "ReleaseWeaponAudio()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "927": {
      "prefix": "ReleaseSoundId",
      "body": [
          "ReleaseSoundId(${1:int* soundId})${0}"
      ],
      "description": ""
  },
  "928": {
      "prefix": "RemoveEntityFromAudioMixGroup",
      "body": [
          "RemoveEntityFromAudioMixGroup(${1:Entity* entity}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "929": {
      "prefix": "RequestAmbientAudioBank",
      "body": [
          "RequestAmbientAudioBank(${1:char* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nAll occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "930": {
      "prefix": "RemovePortalSettingsOverride",
      "body": [
          "RemovePortalSettingsOverride(${1:char* p0})${0}"
      ],
      "description": "```\n Found in the b617d scripts, duplicates removed:\n AUDIO::_B4BBFD9CD8B3922B(\"V_CARSHOWROOM_PS_WINDOW_UNBROKEN\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_CIA_PS_WINDOW_UNBROKEN\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_DLC_HEIST_APARTMENT_DOOR_CLOSED\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_FINALEBANK_PS_VAULT_INTACT\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_MICHAEL_PS_BATHROOM_WITH_WINDOW\");\n```"
  },
  "931": {
      "prefix": "RequestMissionAudioBank",
      "body": [
          "RequestMissionAudioBank(${1:char* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nAll occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "932": {
      "prefix": "RequestScriptAudioBank",
      "body": [
          "RequestScriptAudioBank(${1:char* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nAll occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6  \n```\n\n```\nNativeDB Added Parameter 3: int p2\n```"
  },
  "933": {
      "prefix": "ResetPedAudioFlags",
      "body": [
          "ResetPedAudioFlags(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "934": {
      "prefix": "ResetTrevorRage",
      "body": [
          "ResetTrevorRage()${0}"
      ],
      "description": ""
  },
  "935": {
      "prefix": "RestartScriptedConversation",
      "body": [
          "RestartScriptedConversation()${0}"
      ],
      "description": ""
  },
  "936": {
      "prefix": "SetAggressiveHorns",
      "body": [
          "SetAggressiveHorns(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nMakes pedestrians sound their horn longer, faster and more agressive when they use their horn.  \n```"
  },
  "937": {
      "prefix": "SetAmbientVoiceNameHash",
      "body": [
          "SetAmbientVoiceNameHash(${1:Ped* ped}, ${2:Hash* hash})${0}"
      ],
      "description": ""
  },
  "938": {
      "prefix": "SetAmbientVoiceName",
      "body": [
          "SetAmbientVoiceName(${1:Ped* ped}, ${2:char* name})${0}"
      ],
      "description": "```\nAudio List  \ngtaforums.com/topic/795622-audio-for-mods/  \nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ  \nYes  \n```"
  },
  "939": {
      "prefix": "SetAmbientZoneListState",
      "body": [
          "SetAmbientZoneListState(${1:char* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "940": {
      "prefix": "SetAmbientZoneListStatePersistent",
      "body": [
          "SetAmbientZoneListStatePersistent(${1:char* ambientZone}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "941": {
      "prefix": "SetAmbientZoneState",
      "body": [
          "SetAmbientZoneState(${1:char* zoneName}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "942": {
      "prefix": "SetAmbientZoneStatePersistent",
      "body": [
          "SetAmbientZoneStatePersistent(${1:char* ambientZone}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "943": {
      "prefix": "SetAudioSceneVariable",
      "body": [
          "SetAudioSceneVariable(${1:char* scene}, ${2:char* variable}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "944": {
      "prefix": "SetAnimalMood",
      "body": [
          "SetAnimalMood(${1:Ped* animal}, ${2:int* mood})${0}"
      ],
      "description": "```\nmood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.  \n```"
  },
  "945": {
      "prefix": "SetAudioFlag",
      "body": [
          "SetAudioFlag(${1:char* flagName}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nPossible flag names:  \n\"ActivateSwitchWheelAudio\"  \n\"AllowAmbientSpeechInSlowMo\"  \n\"AllowCutsceneOverScreenFade\"  \n\"AllowForceRadioAfterRetune\"  \n\"AllowPainAndAmbientSpeechToPlayDuringCutscene\"  \n\"AllowPlayerAIOnMission\"  \n\"AllowPoliceScannerWhenPlayerHasNoControl\"  \n\"AllowRadioDuringSwitch\"  \n\"AllowRadioOverScreenFade\"  \n\"AllowScoreAndRadio\"  \n\"AllowScriptedSpeechInSlowMo\"  \n\"AvoidMissionCompleteDelay\"  \n\"DisableAbortConversationForDeathAndInjury\"  \n\"DisableAbortConversationForRagdoll\"  \n\"DisableBarks\"  \n\"DisableFlightMusic\"  \n\"DisableReplayScriptStreamRecording\"  \n\"EnableHeadsetBeep\"  \n\"ForceConversationInterrupt\"  \n\"ForceSeamlessRadioSwitch\"  \n\"ForceSniperAudio\"  \n\"FrontendRadioDisabled\"  \n\"HoldMissionCompleteWhenPrepared\"  \n\"IsDirectorModeActive\"  \n\"IsPlayerOnMissionForSpeech\"  \n\"ListenerReverbDisabled\"  \n\"LoadMPData\"  \n\"MobileRadioInGame\"  \n\"OnlyAllowScriptTriggerPoliceScanner\"  \n\"PlayMenuMusic\"  \n\"PoliceScannerDisabled\"  \n\"ScriptedConvListenerMaySpeak\"  \n\"SpeechDucksScore\"  \n\"SuppressPlayerScubaBreathing\"  \n\"WantedMusicDisabled\"  \n\"WantedMusicOnMission\"  \n-------------------------------  \nNo added flag names between b393d and b573d, including b573d.  \n#######################################################################  \n\"IsDirectorModeActive\" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.  \n-----------------------------------------------------------------------  \nAll flag IDs and hashes:  \nID: 01 | Hash: 0x20A7858F  \nID: 02 | Hash: 0xA11C2259  \nID: 03 | Hash: 0x08DE4700  \nID: 04 | Hash: 0x989F652F  \nID: 05 | Hash: 0x3C9E76BA  \nID: 06 | Hash: 0xA805FEB0  \nID: 07 | Hash: 0x4B94EA26  \nID: 08 | Hash: 0x803ACD34  \nID: 09 | Hash: 0x7C741226  \nID: 10 | Hash: 0x31DB9EBD  \nID: 11 | Hash: 0xDF386F18  \nID: 12 | Hash: 0x669CED42  \nID: 13 | Hash: 0x51F22743  \nID: 14 | Hash: 0x2052B35C  \nID: 15 | Hash: 0x071472DC  \nID: 16 | Hash: 0xF9928BCC  \nID: 17 | Hash: 0x7ADBDD48  \nID: 18 | Hash: 0xA959BA1A  \nID: 19 | Hash: 0xBBE89B60  \nID: 20 | Hash: 0x87A08871  \nID: 21 | Hash: 0xED1057CE  \nID: 22 | Hash: 0x1584AD7A  \nID: 23 | Hash: 0x8582CFCB  \nID: 24 | Hash: 0x7E5E2FB0  \nID: 25 | Hash: 0xAE4F72DB  \nID: 26 | Hash: 0x5D16D1FA  \nID: 27 | Hash: 0x06B2F4B8  \nID: 28 | Hash: 0x5D4CDC96  \nID: 29 | Hash: 0x8B5A48BA  \nID: 30 | Hash: 0x98FBD539  \nID: 31 | Hash: 0xD8CB0473  \nID: 32 | Hash: 0x5CBB4874  \nID: 33 | Hash: 0x2E9F93A9  \nID: 34 | Hash: 0xD93BEA86  \nID: 35 | Hash: 0x92109B7D  \nID: 36 | Hash: 0xB7EC9E4D  \nID: 37 | Hash: 0xCABDBB1D  \nID: 38 | Hash: 0xB3FD4A52  \nID: 39 | Hash: 0x370D94E5  \nID: 40 | Hash: 0xA0F7938F  \nID: 41 | Hash: 0xCBE1CE81  \nID: 42 | Hash: 0xC27F1271  \nID: 43 | Hash: 0x9E3258EB  \nID: 44 | Hash: 0x551CDA5B  \nID: 45 | Hash: 0xCB6D663C  \nID: 46 | Hash: 0x7DACE87F  \nID: 47 | Hash: 0xF9DE416F  \nID: 48 | Hash: 0x882E6E9E  \nID: 49 | Hash: 0x16B447E7  \nID: 50 | Hash: 0xBD867739  \nID: 51 | Hash: 0xA3A58604  \nID: 52 | Hash: 0x7E046BBC  \nID: 53 | Hash: 0xD95FDB98  \nID: 54 | Hash: 0x5842C0ED  \nID: 55 | Hash: 0x285FECC6  \nID: 56 | Hash: 0x9351AC43  \nID: 57 | Hash: 0x50032E75  \nID: 58 | Hash: 0xAE6D0D59  \nID: 59 | Hash: 0xD6351785  \nID: 60 | Hash: 0xD25D71BC  \nID: 61 | Hash: 0x1F7F6423  \nID: 62 | Hash: 0xE24C3AA6  \nID: 63 | Hash: 0xBFFDD2B7  \n```"
  },
  "946": {
      "prefix": "SetAudioSpecialEffectMode",
      "body": [
          "SetAudioSpecialEffectMode(${1:int* mode})${0}"
      ],
      "description": "Needs to be called every frame.\nAudio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt"
  },
  "947": {
      "prefix": "SetAudioVehiclePriority",
      "body": [
          "SetAudioVehiclePriority(${1:Vehicle* vehicle}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "948": {
      "prefix": "SetAudioScriptCleanupTime",
      "body": [
          "SetAudioScriptCleanupTime(${1:int* time})${0}"
      ],
      "description": ""
  },
  "949": {
      "prefix": "SetCutsceneAudioOverride",
      "body": [
          "SetCutsceneAudioOverride(${1:char* name})${0}"
      ],
      "description": "```\nAll occurrences found in b617d, sorted alphabetically and identical lines removed:   \nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_AK\");  \nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_CUSTOM\");  \nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_TOOTHLESS\");  \n```"
  },
  "950": {
      "prefix": "SetFrontendRadioActive",
      "body": [
          "SetFrontendRadioActive(${1:BOOL* active})${0}"
      ],
      "description": ""
  },
  "951": {
      "prefix": "SetCustomRadioTrackList",
      "body": [
          "SetCustomRadioTrackList(${1:char* radioStation}, ${2:char* trackListName}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nExamples:\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_KILL_MICHAEL\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_KILL_MICHAEL\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_KILL_TREVOR\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_SAVE_MICHAEL_TREVOR\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\", \"OFF_ROAD_RADIO_ROCK_LIST\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_06_COUNTRY\", \"MAGDEMO2_RADIO_DINGHY\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_16_SILVERLAKE\", \"SEA_RACE_RADIO_PLAYLIST\", 1);\nAUDIO::SET_CUSTOM_RADIO_TRACK_LIST(\"RADIO_01_CLASS_ROCK\", \"OFF_ROAD_RADIO_ROCK_LIST\", 1);\n```"
  },
  "952": {
      "prefix": "SetEmitterRadioStation",
      "body": [
          "SetEmitterRadioStation(${1:char* emitterName}, ${2:char* radioStation})${0}"
      ],
      "description": ""
  },
  "953": {
      "prefix": "SetGpsActive",
      "body": [
          "SetGpsActive(${1:BOOL* active})${0}"
      ],
      "description": ""
  },
  "954": {
      "prefix": "SetHornEnabled",
      "body": [
          "SetHornEnabled(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "955": {
      "prefix": "SetInitialPlayerStation",
      "body": [
          "SetInitialPlayerStation(${1:char* radioStation})${0}"
      ],
      "description": ""
  },
  "956": {
      "prefix": "SetMicrophonePosition",
      "body": [
          "SetMicrophonePosition(${1:BOOL* p0}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:float* x3}, ${9:float* y3}, ${10:float* z3})${0}"
      ],
      "description": "```\nIf this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..  \n```"
  },
  "957": {
      "prefix": "SetMobilePhoneRadioState",
      "body": [
          "SetMobilePhoneRadioState(${1:BOOL* state})${0}"
      ],
      "description": ""
  },
  "958": {
      "prefix": "SetMobileRadioEnabledDuringGameplay",
      "body": [
          "SetMobileRadioEnabledDuringGameplay(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "959": {
      "prefix": "SetPedAudioFootstepLoud",
      "body": [
          "SetPedAudioFootstepLoud(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nEnables/disables ped's \"loud\" footstep sound.\n```\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "960": {
      "prefix": "SetPedAudioFootstepQuiet",
      "body": [
          "SetPedAudioFootstepQuiet(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nEnables/disables ped's \"quiet\" footstep sound.\n```\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "961": {
      "prefix": "SetPedIsDrunk",
      "body": [
          "SetPedIsDrunk(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSets the ped drunk sounds.  Only works with PLAYER_PED_ID\n====================================================\nAs mentioned above, this only sets the drunk sound to ped/player.\nTo give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET\nBelow is an example\nif (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, \"move_m@drunk@verydrunk\"))\n                {\n                    Function.Call(Hash.REQUEST_ANIM_SET, \"move_m@drunk@verydrunk\");\n                }\n                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, \"move_m@drunk@verydrunk\", 0x3E800000);\nAnd to stop the effect use\nRESET_PED_MOVEMENT_CLIPSET\n```"
  },
  "962": {
      "prefix": "SetPedAudioGender",
      "body": [
          "SetPedAudioGender(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "963": {
      "prefix": "SetPedTalk",
      "body": [
          "SetPedTalk(${1:Ped* ped})${0}"
      ],
      "description": "```\nSpeech related.  \n```"
  },
  "964": {
      "prefix": "SetPedScream",
      "body": [
          "SetPedScream(${1:Ped* ped})${0}"
      ],
      "description": "```\nAssigns some ambient voice to the ped.  \n```"
  },
  "965": {
      "prefix": "SetPedVoiceGroup",
      "body": [
          "SetPedVoiceGroup(${1:Ped* ped}, ${2:Hash* voiceGroupHash})${0}"
      ],
      "description": "```\nFrom the scripts:\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"PAIGE_PVG\"));\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"TALINA_PVG\"));\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"FEMALE_LOST_BLACK_PVG\"));\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"FEMALE_LOST_WHITE_PVG\"));\n```"
  },
  "966": {
      "prefix": "SetPlayerAngry",
      "body": [
          "SetPlayerAngry(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "967": {
      "prefix": "SetPortalSettingsOverride",
      "body": [
          "SetPortalSettingsOverride(${1:char* p0}, ${2:char* p1})${0}"
      ],
      "description": "```\nFound in the b617d scripts, duplicates removed:\nAUDIO::_044DBAD7A7FA2BE5(\"V_CARSHOWROOM_PS_WINDOW_UNBROKEN\", \"V_CARSHOWROOM_PS_WINDOW_BROKEN\");\n AUDIO::_044DBAD7A7FA2BE5(\"V_CIA_PS_WINDOW_UNBROKEN\", \"V_CIA_PS_WINDOW_BROKEN\");\n AUDIO::_044DBAD7A7FA2BE5(\"V_DLC_HEIST_APARTMENT_DOOR_CLOSED\", \"V_DLC_HEIST_APARTMENT_DOOR_OPEN\");\n AUDIO::_044DBAD7A7FA2BE5(\"V_FINALEBANK_PS_VAULT_INTACT\", \"V_FINALEBANK_PS_VAULT_BLOWN\");\n AUDIO::_044DBAD7A7FA2BE5(\"V_MICHAEL_PS_BATHROOM_WITH_WINDOW\", \"V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW\");\n```"
  },
  "968": {
      "prefix": "SetRadioAutoUnfreeze",
      "body": [
          "SetRadioAutoUnfreeze(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "969": {
      "prefix": "SetRadioFrontendFadeTime",
      "body": [
          "SetRadioFrontendFadeTime(${1:float* fadeTime})${0}"
      ],
      "description": ""
  },
  "970": {
      "prefix": "SetRadioStationIsVisible",
      "body": [
          "SetRadioStationIsVisible(${1:char* radioStation}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Doesn't have an effect in Story Mode.\n\n```\nNativeDB Introduced: v2372\n```"
  },
  "971": {
      "prefix": "SetRadioStationMusicOnly",
      "body": [
          "SetRadioStationMusicOnly(${1:char* radioStation}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\n6 calls in the b617d scripts, removed identical lines:\nAUDIO::SET_RADIO_STATION_MUSIC_ONLY(\"RADIO_01_CLASS_ROCK\", 1);\nAUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);\nAUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);\n```"
  },
  "972": {
      "prefix": "SetRadioToStationIndex",
      "body": [
          "SetRadioToStationIndex(${1:int* radioStation})${0}"
      ],
      "description": "```\nSets radio station by index.  \n```"
  },
  "973": {
      "prefix": "SetRadioTrack",
      "body": [
          "SetRadioTrack(${1:char* radioStation}, ${2:char* radioTrack})${0}"
      ],
      "description": "```\nOnly found this one in the decompiled scripts:  \nAUDIO::SET_RADIO_TRACK(\"RADIO_03_HIPHOP_NEW\", \"ARM1_RADIO_STARTS\");  \n```"
  },
  "974": {
      "prefix": "SetRadioToStationName",
      "body": [
          "SetRadioToStationName(${1:char* stationName})${0}"
      ],
      "description": "```\nFor a full list, see here: pastebin.com/Kj9t38KF  \n```"
  },
  "975": {
      "prefix": "SetRadioTrackMix",
      "body": [
          "SetRadioTrackMix(${1:char* radioStationName}, ${2:char* mixName}, ${3:int* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "976": {
      "prefix": "SetScriptUpdateDoorAudio",
      "body": [
          "SetScriptUpdateDoorAudio(${1:Hash* doorHash}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "977": {
      "prefix": "SetSirenKeepOn",
      "body": [
          "SetSirenKeepOn(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "978": {
      "prefix": "SetStaticEmitterEnabled",
      "body": [
          "SetStaticEmitterEnabled(${1:char* emitterName}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nExample:\nAUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_01_STAGE\", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM\", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM\", false);\nThis turns off surrounding sounds not connected directly to peds.\n```"
  },
  "979": {
      "prefix": "SetSirenWithNoDriver",
      "body": [
          "SetSirenWithNoDriver(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "980": {
      "prefix": "SetSynchronizedAudioEventPositionThisFrame",
      "body": [
          "SetSynchronizedAudioEventPositionThisFrame(${1:char* p0}, ${2:Entity* p1})${0}"
      ],
      "description": "```\nSets the position of the audio event to the entity's position for one frame(?)\nif (l_8C3 == 0) {\n    sub_27fd1(0, -1, 1);\n    if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {\n        AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);\n    }\n    if (sub_7dd(l_A00)) {\n        AUDIO::_950A154B8DAB6185(\"PAP2_IG1_POPPYSEX\", l_A00);\n    }\n    sub_91c(\"TK************ SETTING SYNCH SCENE AUDIO POSITION THIS FRAME ************TK\");\n    l_8C3 = 1;\n}\n--\nFound in the b617d scripts, duplicates removed:\nAUDIO::_950A154B8DAB6185(\"CAR_5_IG_6\", l_7FE[1/*1*/]);\nAUDIO::_950A154B8DAB6185(\"EX03_TRAIN_BIKE_LAND\",   PLAYER::PLAYER_PED_ID());\nAUDIO::_950A154B8DAB6185(\"FBI_2_MCS_1_LeadIn\", l_40[2/*1*/]);\nAUDIO::_950A154B8DAB6185(\"FIN_C2_MCS_1\", l_24C[0/*1*/]);\nAUDIO::_950A154B8DAB6185(\"MNT_DNC\", l_5F);\nAUDIO::_950A154B8DAB6185(\"PAP2_IG1_POPPYSEX\", l_A00);\n```"
  },
  "981": {
      "prefix": "SetUserRadioControlEnabled",
      "body": [
          "SetUserRadioControlEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "982": {
      "prefix": "SetVariableOnStream",
      "body": [
          "SetVariableOnStream(${1:char* p0}, ${2:float* p1})${0}"
      ],
      "description": "```\nFrom the scripts, p0:  \n\"ArmWrestlingIntensity\",  \n\"INOUT\",  \n\"Monkey_Stream\",  \n\"ZoomLevel\"  \n```"
  },
  "983": {
      "prefix": "SetVariableOnCutsceneAudio",
      "body": [
          "SetVariableOnCutsceneAudio(${1:char* variableName}, ${2:float* value})${0}"
      ],
      "description": "```\nSET_VARIABLE_ON_*\n```"
  },
  "984": {
      "prefix": "SetVehHasRadioOverride",
      "body": [
          "SetVehHasRadioOverride(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "985": {
      "prefix": "SetVariableOnSound",
      "body": [
          "SetVariableOnSound(${1:int* soundId}, ${2:char* variableName}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "986": {
      "prefix": "SetVehRadioStation",
      "body": [
          "SetVehRadioStation(${1:Vehicle* vehicle}, ${2:char* radioStation})${0}"
      ],
      "description": "```\nFor a full list, see here: pastebin.com/Kj9t38KF  \n```"
  },
  "987": {
      "prefix": "SetVariableOnUnderWaterStream",
      "body": [
          "SetVariableOnUnderWaterStream(${1:char* variableName}, ${2:float* value})${0}"
      ],
      "description": "```\nAUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(\"inTunnel\", 1.0);\nAUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(\"inTunnel\", 0.0);\n```"
  },
  "988": {
      "prefix": "SetVehicleAudioEngineDamageFactor",
      "body": [
          "SetVehicleAudioEngineDamageFactor(${1:Vehicle* vehicle}, ${2:float* damageFactor})${0}"
      ],
      "description": ""
  },
  "989": {
      "prefix": "SetVehicleAudioBodyDamageFactor",
      "body": [
          "SetVehicleAudioBodyDamageFactor(${1:Vehicle* vehicle}, ${2:float* intensity})${0}"
      ],
      "description": "Vehicle will make a 'rattling' noise when decelerating"
  },
  "990": {
      "prefix": "SetVehicleBoostActive",
      "body": [
          "SetVehicleBoostActive(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);  \nSET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);   \nWill give a boost-soundeffect.  \n```"
  },
  "991": {
      "prefix": "SetVehicleHornVariation",
      "body": [
          "SetVehicleHornVariation(${1:Vehicle* vehicle}, ${2:int* value})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "992": {
      "prefix": "SetVehicleRadioLoud",
      "body": [
          "SetVehicleRadioLoud(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "993": {
      "prefix": "SetVehicleRadioEnabled",
      "body": [
          "SetVehicleRadioEnabled(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\ncan't seem to enable radio on cop cars etc  \n```"
  },
  "994": {
      "prefix": "SkipRadioForward",
      "body": [
          "SkipRadioForward()${0}"
      ],
      "description": ""
  },
  "995": {
      "prefix": "StartAlarm",
      "body": [
          "StartAlarm(${1:char* alarmName}, ${2:BOOL* p2})${0}"
      ],
      "description": "```\nExample:\nThis will start the alarm at Fort Zancudo.\nAUDIO::START_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);\nFirst parameter (char) is the name of the alarm.\nSecond parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.\n----------\nIt DOES make a difference but it has to do with the duration or something I dunno yet\n----------\n Found in the b617d scripts:\n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS\", 0);\n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER\", 1);\n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B\", 0);\n AUDIO::START_ALARM(\"BIG_SCORE_HEIST_VAULT_ALARMS\", a_0);\n AUDIO::START_ALARM(\"FBI_01_MORGUE_ALARMS\", 1);\n AUDIO::START_ALARM(\"FIB_05_BIOTECH_LAB_ALARMS\", 0);\n AUDIO::START_ALARM(\"JEWEL_STORE_HEIST_ALARMS\", 0);\n AUDIO::START_ALARM(\"PALETO_BAY_SCORE_ALARM\", 1);\n AUDIO::START_ALARM(\"PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM\", 0);\n AUDIO::START_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);\n AUDIO::START_ALARM(\"PORT_OF_LS_HEIST_SHIP_ALARMS\", 0);\n AUDIO::START_ALARM(\"PRISON_ALARMS\", 0);\n AUDIO::START_ALARM(\"PROLOGUE_VAULT_ALARMS\", 0);\n```"
  },
  "996": {
      "prefix": "SkipToNextScriptedConversationLine",
      "body": [
          "SkipToNextScriptedConversationLine()${0}"
      ],
      "description": ""
  },
  "997": {
      "prefix": "SoundVehicleHornThisFrame",
      "body": [
          "SoundVehicleHornThisFrame(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nSET_*\n```"
  },
  "998": {
      "prefix": "StartAudioScene",
      "body": [
          "StartAudioScene(${1:char* scene})${0}"
      ],
      "description": "```\nUsed to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.  \nList of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC  \n```"
  },
  "999": {
      "prefix": "StartScriptConversation",
      "body": [
          "StartScriptConversation(${1:BOOL* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "1000": {
      "prefix": "StartPreloadedConversation",
      "body": [
          "StartPreloadedConversation()${0}"
      ],
      "description": ""
  },
  "1001": {
      "prefix": "StartScriptPhoneConversation",
      "body": [
          "StartScriptPhoneConversation(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1002": {
      "prefix": "StopAlarm",
      "body": [
          "StopAlarm(${1:char* alarmName}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nExample:  \nThis will stop the alarm at Fort Zancudo.  \nAUDIO::STOP_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);  \nFirst parameter (char) is the name of the alarm.  \nSecond parameter (bool) has to be true (1) to have any effect.  \n```"
  },
  "1003": {
      "prefix": "StopAudioScene",
      "body": [
          "StopAudioScene(${1:char* scene})${0}"
      ],
      "description": ""
  },
  "1004": {
      "prefix": "StopAllAlarms",
      "body": [
          "StopAllAlarms(${1:BOOL* stop})${0}"
      ],
      "description": ""
  },
  "1005": {
      "prefix": "StopCurrentPlayingAmbientSpeech",
      "body": [
          "StopCurrentPlayingAmbientSpeech(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "1006": {
      "prefix": "StopAudioScenes",
      "body": [
          "StopAudioScenes()${0}"
      ],
      "description": "```\n??  \n```"
  },
  "1007": {
      "prefix": "StopCurrentPlayingSpeech",
      "body": [
          "StopCurrentPlayingSpeech(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "1008": {
      "prefix": "StopCutsceneAudio",
      "body": [
          "StopCutsceneAudio()${0}"
      ],
      "description": ""
  },
  "1009": {
      "prefix": "StopPedRingtone",
      "body": [
          "StopPedRingtone(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "1010": {
      "prefix": "StopPedSpeaking",
      "body": [
          "StopPedSpeaking(${1:Ped* ped}, ${2:BOOL* shaking})${0}"
      ],
      "description": ""
  },
  "1011": {
      "prefix": "StopSound",
      "body": [
          "StopSound(${1:int* soundId})${0}"
      ],
      "description": ""
  },
  "1012": {
      "prefix": "StopScriptedConversation",
      "body": [
          "StopScriptedConversation(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1013": {
      "prefix": "StopStream",
      "body": [
          "StopStream()${0}"
      ],
      "description": ""
  },
  "1014": {
      "prefix": "TriggerMusicEvent",
      "body": [
          "TriggerMusicEvent(${1:char* eventName})${0}"
      ],
      "description": "```\nList of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W  \nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n```"
  },
  "1015": {
      "prefix": "UnlockMissionNewsStory",
      "body": [
          "UnlockMissionNewsStory(${1:int* newsStory})${0}"
      ],
      "description": ""
  },
  "1016": {
      "prefix": "UnlockRadioStationTrackList",
      "body": [
          "UnlockRadioStationTrackList(${1:char* radioStation}, ${2:char* trackListName})${0}"
      ],
      "description": "```\nAUDIO::UNLOCK_RADIO_STATION_TRACK_LIST(\"RADIO_16_SILVERLAKE\", \"MIRRORPARK_LOCKED\");\n```"
  },
  "1017": {
      "prefix": "StopSynchronizedAudioEvent",
      "body": [
          "StopSynchronizedAudioEvent(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1018": {
      "prefix": "UpdateLsur",
      "body": [
          "UpdateLsur(${1:BOOL* enableMixes})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "1019": {
      "prefix": "TriggerSiren",
      "body": [
          "TriggerSiren(${1:Vehicle* vehicle})${0}"
      ],
      "description": "... When not in a vehicle\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "1020": {
      "prefix": "UnfreezeRadioStation",
      "body": [
          "UnfreezeRadioStation(${1:char* radioStation})${0}"
      ],
      "description": ""
  },
  "1021": {
      "prefix": "UseSirenAsHorn",
      "body": [
          "UseSirenAsHorn(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1022": {
      "prefix": "UnregisterScriptWithAudio",
      "body": [
          "UnregisterScriptWithAudio()${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**\n\n```\nOn last-gen this just runs blr and this func is called by several other functions other then the native's table.  \n```"
  },
  "1023": {
      "prefix": "CanSetEnterStateForRegisteredEntity",
      "body": [
          "CanSetEnterStateForRegisteredEntity(${1:char* cutsceneEntName}, ${2:Hash* modelHash})${0}"
      ],
      "description": "```\nmodelHash (p1) was always 0 in R* scripts  \n```"
  },
  "1024": {
      "prefix": "DoesCutsceneEntityExist",
      "body": [
          "DoesCutsceneEntityExist(${1:char* cutsceneEntName}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1025": {
      "prefix": "GetCutsceneSectionPlaying",
      "body": [
          "GetCutsceneSectionPlaying()${0}"
      ],
      "description": ""
  },
  "1026": {
      "prefix": "CanRequestAssetsForCutsceneEntity",
      "body": [
          "CanRequestAssetsForCutsceneEntity()${0}"
      ],
      "description": ""
  },
  "1027": {
      "prefix": "GetCutsceneTime",
      "body": [
          "GetCutsceneTime()${0}"
      ],
      "description": ""
  },
  "1028": {
      "prefix": "CanSetExitStateForCamera",
      "body": [
          "CanSetExitStateForCamera(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1029": {
      "prefix": "GetEntityIndexOfRegisteredEntity",
      "body": [
          "GetEntityIndexOfRegisteredEntity(${1:char* cutsceneEntName}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1030": {
      "prefix": "CanSetExitStateForRegisteredEntity",
      "body": [
          "CanSetExitStateForRegisteredEntity(${1:char* cutsceneEntName}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1031": {
      "prefix": "GetCutFileNumSections",
      "body": [
          "GetCutFileNumSections(${1:char* cutsceneName})${0}"
      ],
      "description": "```\nJenkins hash probably is 0xFD8B1AC2\n```"
  },
  "1032": {
      "prefix": "HasCutFileLoaded",
      "body": [
          "HasCutFileLoaded(${1:char* cutsceneName})${0}"
      ],
      "description": "```\nSimply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.\n```"
  },
  "1033": {
      "prefix": "HasCutsceneCutThisFrame",
      "body": [
          "HasCutsceneCutThisFrame()${0}"
      ],
      "description": ""
  },
  "1034": {
      "prefix": "HasCutsceneLoaded",
      "body": [
          "HasCutsceneLoaded()${0}"
      ],
      "description": ""
  },
  "1035": {
      "prefix": "GetCutsceneTotalDuration",
      "body": [
          "GetCutsceneTotalDuration()${0}"
      ],
      "description": ""
  },
  "1036": {
      "prefix": "GetEntityIndexOfCutsceneEntity",
      "body": [
          "GetEntityIndexOfCutsceneEntity(${1:char* cutsceneEntName}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1037": {
      "prefix": "IsCutscenePlaybackFlagSet",
      "body": [
          "IsCutscenePlaybackFlagSet(${1:int* flag})${0}"
      ],
      "description": ""
  },
  "1038": {
      "prefix": "HasCutsceneFinished",
      "body": [
          "HasCutsceneFinished()${0}"
      ],
      "description": ""
  },
  "1039": {
      "prefix": "IsCutscenePlaying",
      "body": [
          "IsCutscenePlaying()${0}"
      ],
      "description": ""
  },
  "1040": {
      "prefix": "HasThisCutsceneLoaded",
      "body": [
          "HasThisCutsceneLoaded(${1:char* cutsceneName})${0}"
      ],
      "description": ""
  },
  "1041": {
      "prefix": "IsCutsceneActive",
      "body": [
          "IsCutsceneActive()${0}"
      ],
      "description": ""
  },
  "1042": {
      "prefix": "RegisterSynchronisedScriptSpeech",
      "body": [
          "RegisterSynchronisedScriptSpeech()${0}"
      ],
      "description": ""
  },
  "1043": {
      "prefix": "RemoveCutscene",
      "body": [
          "RemoveCutscene()${0}"
      ],
      "description": ""
  },
  "1044": {
      "prefix": "RegisterEntityForCutscene",
      "body": [
          "RegisterEntityForCutscene(${1:Ped* cutscenePed}, ${2:char* cutsceneEntName}, ${3:int* p2}, ${4:Hash* modelHash}, ${5:int* p4})${0}"
      ],
      "description": ""
  },
  "1045": {
      "prefix": "RequestCutFile",
      "body": [
          "RequestCutFile(${1:char* cutsceneName})${0}"
      ],
      "description": "```\nSimply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.\n```"
  },
  "1046": {
      "prefix": "RequestCutsceneWithPlaybackList",
      "body": [
          "RequestCutsceneWithPlaybackList(${1:char* cutsceneName}, ${2:int* playbackFlags}, ${3:int* flags})${0}"
      ],
      "description": "```\nflags: Usually 8\nplaybackFlags: Which scenes should be played.\nExample: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.\n```"
  },
  "1047": {
      "prefix": "RemoveCutFile",
      "body": [
          "RemoveCutFile(${1:char* cutsceneName})${0}"
      ],
      "description": "```\nSimply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.\n```"
  },
  "1048": {
      "prefix": "SetCutsceneEntityStreamingFlags",
      "body": [
          "SetCutsceneEntityStreamingFlags(${1:char* cutsceneEntName}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "1049": {
      "prefix": "RequestCutscene",
      "body": [
          "RequestCutscene(${1:char* cutsceneName}, ${2:int* flags})${0}"
      ],
      "description": "```\nflags: Usually 8\n```"
  },
  "1050": {
      "prefix": "SetCutsceneOrigin",
      "body": [
          "SetCutsceneOrigin(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:int* p4})${0}"
      ],
      "description": "```\np3 could be heading. Needs more research.  \n```"
  },
  "1051": {
      "prefix": "SetCutsceneCanBeSkipped",
      "body": [
          "SetCutsceneCanBeSkipped(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1052": {
      "prefix": "SetCutsceneFadeValues",
      "body": [
          "SetCutsceneFadeValues(${1:BOOL* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "1053": {
      "prefix": "SetCutscenePedComponentVariationFromPed",
      "body": [
          "SetCutscenePedComponentVariationFromPed(${1:char* cutsceneEntName}, ${2:Ped* ped}, ${3:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1054": {
      "prefix": "SetCutsceneTriggerArea",
      "body": [
          "SetCutsceneTriggerArea(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": "```\nOnly used twice in R* scripts  \n```"
  },
  "1055": {
      "prefix": "SetCutscenePedComponentVariation",
      "body": [
          "SetCutscenePedComponentVariation(${1:char* cutsceneEntName}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3}, ${5:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1056": {
      "prefix": "StartCutsceneAtCoords",
      "body": [
          "StartCutsceneAtCoords(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* flags})${0}"
      ],
      "description": "```\nflags: Usually 0.\n```"
  },
  "1057": {
      "prefix": "SetCutscenePedPropVariation",
      "body": [
          "SetCutscenePedPropVariation(${1:char* cutsceneEntName}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3}, ${5:Hash* modelHash})${0}"
      ],
      "description": "```\nThanks R*! ;)\nif ((l_161 == 0) || (l_161 == 2)) {\n    sub_2ea27(\"Trying to set Jimmy prop variation\");\n    CUTSCENE::_0546524ADE2E9723(\"Jimmy_Boston\", 1, 0, 0, 0);\n}\n```"
  },
  "1058": {
      "prefix": "StopCutscene",
      "body": [
          "StopCutscene(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1059": {
      "prefix": "StartCutscene",
      "body": [
          "StartCutscene(${1:int* flags})${0}"
      ],
      "description": "```\nflags: Usually 0.\n```"
  },
  "1060": {
      "prefix": "StopCutsceneImmediately",
      "body": [
          "StopCutsceneImmediately()${0}"
      ],
      "description": ""
  },
  "1061": {
      "prefix": "WasCutsceneSkipped",
      "body": [
          "WasCutsceneSkipped()${0}"
      ],
      "description": ""
  },
  "1062": {
      "prefix": "DataarrayAddDict",
      "body": [
          "DataarrayAddDict(${1:Any* arrayData})${0}"
      ],
      "description": ""
  },
  "1063": {
      "prefix": "DataarrayAddBool",
      "body": [
          "DataarrayAddBool(${1:Any* arrayData}, ${2:BOOL* value})${0}"
      ],
      "description": ""
  },
  "1064": {
      "prefix": "DataarrayAddInt",
      "body": [
          "DataarrayAddInt(${1:Any* arrayData}, ${2:int* value})${0}"
      ],
      "description": ""
  },
  "1065": {
      "prefix": "DataarrayAddFloat",
      "body": [
          "DataarrayAddFloat(${1:Any* arrayData}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "1066": {
      "prefix": "DataarrayAddString",
      "body": [
          "DataarrayAddString(${1:Any* arrayData}, ${2:char* value})${0}"
      ],
      "description": ""
  },
  "1067": {
      "prefix": "DataarrayAddVector",
      "body": [
          "DataarrayAddVector(${1:Any* arrayData}, ${2:float* valueX}, ${3:float* valueY}, ${4:float* valueZ})${0}"
      ],
      "description": ""
  },
  "1068": {
      "prefix": "DataarrayGetBool",
      "body": [
          "DataarrayGetBool(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": ""
  },
  "1069": {
      "prefix": "DataarrayGetCount",
      "body": [
          "DataarrayGetCount(${1:Any* arrayData})${0}"
      ],
      "description": ""
  },
  "1070": {
      "prefix": "DataarrayGetFloat",
      "body": [
          "DataarrayGetFloat(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": ""
  },
  "1071": {
      "prefix": "DataarrayGetDict",
      "body": [
          "DataarrayGetDict(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": ""
  },
  "1072": {
      "prefix": "DataarrayGetInt",
      "body": [
          "DataarrayGetInt(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": ""
  },
  "1073": {
      "prefix": "DataarrayGetString",
      "body": [
          "DataarrayGetString(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": ""
  },
  "1074": {
      "prefix": "DataarrayGetType",
      "body": [
          "DataarrayGetType(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": "```\nTypes:  \n1 = Boolean  \n2 = Integer  \n3 = Float  \n4 = String  \n5 = Vector3  \n6 = Object  \n7 = Array  \n```"
  },
  "1075": {
      "prefix": "DataarrayGetVector",
      "body": [
          "DataarrayGetVector(${1:Any* arrayData}, ${2:int* arrayIndex})${0}"
      ],
      "description": ""
  },
  "1076": {
      "prefix": "DatadictGetArray",
      "body": [
          "DatadictGetArray(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1077": {
      "prefix": "DatadictCreateArray",
      "body": [
          "DatadictCreateArray(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1078": {
      "prefix": "DatadictCreateDict",
      "body": [
          "DatadictCreateDict(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1079": {
      "prefix": "DatadictGetInt",
      "body": [
          "DatadictGetInt(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1080": {
      "prefix": "DatadictGetBool",
      "body": [
          "DatadictGetBool(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1081": {
      "prefix": "DatadictGetFloat",
      "body": [
          "DatadictGetFloat(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1082": {
      "prefix": "DatadictGetDict",
      "body": [
          "DatadictGetDict(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1083": {
      "prefix": "DatadictGetType",
      "body": [
          "DatadictGetType(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": "```\nTypes:  \n1 = Boolean  \n2 = Integer  \n3 = Float  \n4 = String  \n5 = Vector3  \n6 = Object  \n7 = Array  \n```"
  },
  "1084": {
      "prefix": "DatadictSetBool",
      "body": [
          "DatadictSetBool(${1:Any* objectData}, ${2:char* key}, ${3:BOOL* value})${0}"
      ],
      "description": ""
  },
  "1085": {
      "prefix": "DatadictGetString",
      "body": [
          "DatadictGetString(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1086": {
      "prefix": "DatadictSetFloat",
      "body": [
          "DatadictSetFloat(${1:Any* objectData}, ${2:char* key}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "1087": {
      "prefix": "DatadictGetVector",
      "body": [
          "DatadictGetVector(${1:Any* objectData}, ${2:char* key})${0}"
      ],
      "description": ""
  },
  "1088": {
      "prefix": "DatafileClearWatchList",
      "body": [
          "DatafileClearWatchList()${0}"
      ],
      "description": ""
  },
  "1089": {
      "prefix": "DatadictSetInt",
      "body": [
          "DatadictSetInt(${1:Any* objectData}, ${2:char* key}, ${3:int* value})${0}"
      ],
      "description": ""
  },
  "1090": {
      "prefix": "DatafileDelete",
      "body": [
          "DatafileDelete()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\n```"
  },
  "1091": {
      "prefix": "DatadictSetString",
      "body": [
          "DatadictSetString(${1:Any* objectData}, ${2:char* key}, ${3:char* value})${0}"
      ],
      "description": ""
  },
  "1092": {
      "prefix": "DatafileDeleteRequestedFile",
      "body": [
          "DatafileDeleteRequestedFile(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1093": {
      "prefix": "DatafileFlushMissionHeader",
      "body": [
          "DatafileFlushMissionHeader()${0}"
      ],
      "description": ""
  },
  "1094": {
      "prefix": "DatadictSetVector",
      "body": [
          "DatadictSetVector(${1:Any* objectData}, ${2:char* key}, ${3:float* valueX}, ${4:float* valueY}, ${5:float* valueZ})${0}"
      ],
      "description": ""
  },
  "1095": {
      "prefix": "DatafileGetFileDict",
      "body": [
          "DatafileGetFileDict()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\n```"
  },
  "1096": {
      "prefix": "DatafileCreate",
      "body": [
          "DatafileCreate()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\n```"
  },
  "1097": {
      "prefix": "DatafileIsSavePending",
      "body": [
          "DatafileIsSavePending()${0}"
      ],
      "description": "```\nExample:  \nif (!DATAFILE::_BEDB96A7584AA8CF())  \n{  \n    if (!g_109E3)  \n\t{  \n        if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))  \n{  \n            if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())  \n\t{  \n                g_17A8B = 0;  \n            }  \n            if (!g_D52C)  \n\t{  \n                sub_730();  \n            }  \n        }  \n    }  \n}  \n```"
  },
  "1098": {
      "prefix": "DatafileLoadOfflineUgc",
      "body": [
          "DatafileLoadOfflineUgc(${1:char* filename})${0}"
      ],
      "description": "```\nLoads a User-Generated Content (UGC) file. These files can be found in \"[GTA5]\\data\\ugc\" and \"[GTA5]\\common\\patch\\ugc\". They seem to follow a naming convention, most likely of \"[name]_[part].ugc\". See example below for usage.\nReturns whether or not the file was successfully loaded.\nExample:\nDATAFILE::_LOAD_UGC_FILE(\"RockstarPlaylists\") // loads \"rockstarplaylists_00.ugc\"\n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "1099": {
      "prefix": "DatafileSelectCreatorStats",
      "body": [
          "DatafileSelectCreatorStats(${1:int* p0})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "1100": {
      "prefix": "DatafileHasLoadedFileData",
      "body": [
          "DatafileHasLoadedFileData(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1101": {
      "prefix": "DatafileSelectUgcData",
      "body": [
          "DatafileSelectUgcData(${1:int* p0})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "1102": {
      "prefix": "DatafileStartSaveToCloud",
      "body": [
          "DatafileStartSaveToCloud(${1:char* filename})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "1103": {
      "prefix": "DatafileHasValidFileData",
      "body": [
          "DatafileHasValidFileData(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1104": {
      "prefix": "DatafileStoreMissionHeader",
      "body": [
          "DatafileStoreMissionHeader()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\n```"
  },
  "1105": {
      "prefix": "DatafileIsValidRequestId",
      "body": [
          "DatafileIsValidRequestId(${1:int* index})${0}"
      ],
      "description": ""
  },
  "1106": {
      "prefix": "DatafileSelectActiveFile",
      "body": [
          "DatafileSelectActiveFile(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "1107": {
      "prefix": "DatafileSelectUgcPlayerData",
      "body": [
          "DatafileSelectUgcPlayerData(${1:int* p0})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "1108": {
      "prefix": "DatafileWatchRequestId",
      "body": [
          "DatafileWatchRequestId(${1:int* id})${0}"
      ],
      "description": "```\nAdds the given request ID to the watch list.\n```"
  },
  "1109": {
      "prefix": "DatafileSelectUgcStats",
      "body": [
          "DatafileSelectUgcStats(${1:int* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "1110": {
      "prefix": "DatafileUpdateSaveToCloud",
      "body": [
          "DatafileUpdateSaveToCloud(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1111": {
      "prefix": "UgcCreateMission",
      "body": [
          "UgcCreateMission(${1:char* contentName}, ${2:char* description}, ${3:char* tagsCsv}, ${4:char* contentTypeName}, ${5:BOOL* publish})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "1112": {
      "prefix": "UgcCreateContent",
      "body": [
          "UgcCreateContent(${1:char* data}, ${2:int* dataCount}, ${3:char* contentName}, ${4:char* description}, ${5:char* tagsCsv}, ${6:char* contentTypeName}, ${7:BOOL* publish})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 8: Any p7\n```"
  },
  "1113": {
      "prefix": "UgcSetPlayerData",
      "body": [
          "UgcSetPlayerData(${1:char* contentId}, ${2:float* rating}, ${3:char* contentTypeName})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "1114": {
      "prefix": "UgcUpdateContent",
      "body": [
          "UgcUpdateContent(${1:char* contentId}, ${2:Any* data}, ${3:int* dataCount}, ${4:char* contentName}, ${5:char* description}, ${6:char* tagsCsv}, ${7:char* contentTypeName})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 8: Any p7\n```"
  },
  "1115": {
      "prefix": "UgcUpdateMission",
      "body": [
          "UgcUpdateMission(${1:char* contentId}, ${2:char* contentName}, ${3:char* description}, ${4:char* tagsCsv}, ${5:char* contentTypeName})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "1116": {
      "prefix": "DecorGetBool",
      "body": [
          "DecorGetBool(${1:Entity* entity}, ${2:char* propertyName})${0}"
      ],
      "description": ""
  },
  "1117": {
      "prefix": "DecorExistOn",
      "body": [
          "DecorExistOn(${1:Entity* entity}, ${2:char* propertyName})${0}"
      ],
      "description": "```\nReturns whether or not the specified property is set for the entity.  \n```"
  },
  "1118": {
      "prefix": "DecorGetFloat",
      "body": [
          "DecorGetFloat(${1:Entity* entity}, ${2:char* propertyName})${0}"
      ],
      "description": ""
  },
  "1119": {
      "prefix": "DecorRegister",
      "body": [
          "DecorRegister(${1:char* propertyName}, ${2:int* type})${0}"
      ],
      "description": "```\nhttps://alloc8or.re/gta5/doc/enums/eDecorType.txt\n```"
  },
  "1120": {
      "prefix": "DecorRegisterLock",
      "body": [
          "DecorRegisterLock()${0}"
      ],
      "description": "```\nCalled after all decorator type initializations.  \n```"
  },
  "1121": {
      "prefix": "DecorGetInt",
      "body": [
          "DecorGetInt(${1:Entity* entity}, ${2:char* propertyName})${0}"
      ],
      "description": ""
  },
  "1122": {
      "prefix": "DecorRemove",
      "body": [
          "DecorRemove(${1:Entity* entity}, ${2:char* propertyName})${0}"
      ],
      "description": ""
  },
  "1123": {
      "prefix": "DecorIsRegisteredAsType",
      "body": [
          "DecorIsRegisteredAsType(${1:char* propertyName}, ${2:int* type})${0}"
      ],
      "description": ""
  },
  "1124": {
      "prefix": "DecorSetBool",
      "body": [
          "DecorSetBool(${1:Entity* entity}, ${2:char* propertyName}, ${3:BOOL* value})${0}"
      ],
      "description": "```\nThis function sets metadata of type bool to specified entity.  \n```"
  },
  "1125": {
      "prefix": "DecorSetFloat",
      "body": [
          "DecorSetFloat(${1:Entity* entity}, ${2:char* propertyName}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "1126": {
      "prefix": "DecorSetTime",
      "body": [
          "DecorSetTime(${1:Entity* entity}, ${2:char* propertyName}, ${3:int* timestamp})${0}"
      ],
      "description": ""
  },
  "1127": {
      "prefix": "DecorSetInt",
      "body": [
          "DecorSetInt(${1:Entity* entity}, ${2:char* propertyName}, ${3:int* value})${0}"
      ],
      "description": "```\nSets property to int.  \n```"
  },
  "1128": {
      "prefix": "GetExtraContentPackHasBeenInstalled",
      "body": [
          "GetExtraContentPackHasBeenInstalled()${0}"
      ],
      "description": ""
  },
  "1129": {
      "prefix": "GetIsLoadingScreenActive",
      "body": [
          "GetIsLoadingScreenActive()${0}"
      ],
      "description": ""
  },
  "1130": {
      "prefix": "HasCloudRequestsFinished",
      "body": [
          "HasCloudRequestsFinished(${1:BOOL* variable}, ${2:Any* unused})${0}"
      ],
      "description": "```\nSets the value of the specified variable to 0.\nAlways returns true.\n```"
  },
  "1131": {
      "prefix": "IsDlcPresent",
      "body": [
          "IsDlcPresent(${1:Hash* dlcHash})${0}"
      ],
      "description": "```\nExample:\nDLC::IS_DLC_PRESENT($\\mpbusiness2\\);\n($ = gethashkey)\nbruteforce these:\n0xB119F6D\n0x96F02EE6\n```"
  },
  "1132": {
      "prefix": "OnEnterSp",
      "body": [
          "OnEnterSp()${0}"
      ],
      "description": "```\nUnloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).\nThe original (and wrong) definition is below:\nThis unload the GTA:O DLC map parts (like high end garages/apartments).\nWorks in singleplayer.\n```"
  },
  "1133": {
      "prefix": "OnEnterMp",
      "body": [
          "OnEnterMp()${0}"
      ],
      "description": "```\nThis loads the GTA:O dlc map parts (high end garages, apartments).\nWorks in singleplayer.\nIn order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);\n```"
  },
  "1134": {
      "prefix": "AttachEntityBoneToEntityBone",
      "body": [
          "AttachEntityBoneToEntityBone(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:int* entityBone}, ${4:int* entityBone2}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "1135": {
      "prefix": "ApplyForceToEntity",
      "body": [
          "ApplyForceToEntity(${1:Entity* entity}, ${2:int* forceType}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* offX}, ${7:float* offY}, ${8:float* offZ}, ${9:int* boneIndex}, ${10:BOOL* isDirectionRel}, ${11:BOOL* ignoreUpVec}, ${12:BOOL* isForceRel}, ${13:BOOL* p12}, ${14:BOOL* p13})${0}"
      ],
      "description": "Applies a force to the specified entity.\n\n**List of force types (p1)**:\n\n```\npublic enum ForceType\n{\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\n```\n\nResearch/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/)."
  },
  "1136": {
      "prefix": "AttachEntityToEntity",
      "body": [
          "AttachEntityToEntity(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:int* boneIndex}, ${4:float* xPos}, ${5:float* yPos}, ${6:float* zPos}, ${7:float* xRot}, ${8:float* yRot}, ${9:float* zRot}, ${10:BOOL* p9}, ${11:BOOL* useSoftPinning}, ${12:BOOL* collision}, ${13:BOOL* isPed}, ${14:int* rotationOrder}, ${15:BOOL* fixedRot})${0}"
      ],
      "description": "```\nAttaches entity1 to bone (boneIndex) of entity2.\nboneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.\nuseSoftPinning - if set to false attached entity will not detach when fixed\ncollision - controls collision between the two entities (FALSE disables collision).\nisPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)\nvertexIndex - position of vertex\nfixedRot - if false it ignores entity vector\n```"
  },
  "1137": {
      "prefix": "ApplyForceToEntityCenterOfMass",
      "body": [
          "ApplyForceToEntityCenterOfMass(${1:Entity* entity}, ${2:int* forceType}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:BOOL* p5}, ${7:BOOL* isDirectionRel}, ${8:BOOL* isForceRel}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nApplies a force to the specified entity.\n**List of force types (p1)**:\npublic enum ForceType\n{\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\nResearch/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.\np6/relative - makes the xyz force not relative to world coords, but to something else\np7/highForce - setting false will make the force really low\n```"
  },
  "1138": {
      "prefix": "AttachEntityBoneToEntityBonePhysically",
      "body": [
          "AttachEntityBoneToEntityBonePhysically(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:int* entityBone}, ${4:int* entityBone2}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "1139": {
      "prefix": "AttachEntityToEntityPhysically",
      "body": [
          "AttachEntityToEntityPhysically(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:int* boneIndex1}, ${4:int* boneIndex2}, ${5:float* xPos1}, ${6:float* yPos1}, ${7:float* zPos1}, ${8:float* xPos2}, ${9:float* yPos2}, ${10:float* zPos2}, ${11:float* xRot}, ${12:float* yRot}, ${13:float* zRot}, ${14:float* breakForce}, ${15:BOOL* fixedRot}, ${16:BOOL* p15}, ${17:BOOL* collision}, ${18:BOOL* teleport}, ${19:int* p18})${0}"
      ],
      "description": "```\nbreakForce is the amount of force required to break the bond.\np14 - is always 1 in scripts\np15 - is 1 or 0 in scripts - unknown what it does\np16 - controls collision between the two entities (FALSE disables collision).\np17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)\np18 - is always 2 in scripts.\n```"
  },
  "1140": {
      "prefix": "ClearEntityLastDamageEntity",
      "body": [
          "ClearEntityLastDamageEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1141": {
      "prefix": "CreateModelHideExcludingScriptObjects",
      "body": [
          "CreateModelHideExcludingScriptObjects(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* model}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "1142": {
      "prefix": "CreateForcedObject",
      "body": [
          "CreateForcedObject(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Any* p3}, ${5:Hash* modelHash}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "1143": {
      "prefix": "CreateModelSwap",
      "body": [
          "CreateModelSwap(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* originalModel}, ${6:Hash* newModel}, ${7:BOOL* p6})${0}"
      ],
      "description": "```\nOnly works with objects!  \nNetwork players do not see changes done with this.  \n```"
  },
  "1144": {
      "prefix": "CreateModelHide",
      "body": [
          "CreateModelHide(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* model}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\np5 = sets as true in scripts  \nSame as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.  \nNetwork players do not see changes done with this.  \n```"
  },
  "1145": {
      "prefix": "DeleteEntity",
      "body": [
          "DeleteEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nDeletes the specified entity, then sets the handle pointed to by the pointer to NULL.\n```"
  },
  "1146": {
      "prefix": "DetachEntity",
      "body": [
          "DetachEntity(${1:Entity* entity}, ${2:BOOL* dynamic}, ${3:BOOL* collision})${0}"
      ],
      "description": ""
  },
  "1147": {
      "prefix": "DoesEntityBelongToThisScript",
      "body": [
          "DoesEntityBelongToThisScript(${1:Entity* entity}, ${2:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "1148": {
      "prefix": "DoesEntityExist",
      "body": [
          "DoesEntityExist(${1:Entity* entity})${0}"
      ],
      "description": "Checks whether an entity exists in the game world."
  },
  "1149": {
      "prefix": "DoesEntityHavePhysics",
      "body": [
          "DoesEntityHavePhysics(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1150": {
      "prefix": "DoesEntityHaveDrawable",
      "body": [
          "DoesEntityHaveDrawable(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1151": {
      "prefix": "FindAnimEventPhase",
      "body": [
          "FindAnimEventPhase(${1:char* animDictionary}, ${2:char* animName}, ${3:char* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nIn the script \"player_scene_t_bbfight.c4\":  \n\"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))\"  \n-- &l_16E (p0) is requested as an anim dictionary earlier in the script.  \n-- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the \"animation\" param.  \n-- v_9 (p2) is instantiated as \"victim_fall\"; I'm guessing that's another anim  \n--v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:   \n\"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))\"  \nBoth v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though  \n-alphazolam  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1152": {
      "prefix": "EnableEntityUnk",
      "body": [
          "EnableEntityUnk(${1:Entity* entity})${0}"
      ],
      "description": "```\nENABLE_*\n```"
  },
  "1153": {
      "prefix": "ForceEntityAiAndAnimationUpdate",
      "body": [
          "ForceEntityAiAndAnimationUpdate(${1:Entity* entity})${0}"
      ],
      "description": "```\nBased on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.  \n```"
  },
  "1154": {
      "prefix": "GetAnimDuration",
      "body": [
          "GetAnimDuration(${1:char* animDict}, ${2:char* animName})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1155": {
      "prefix": "FreezeEntityPosition",
      "body": [
          "FreezeEntityPosition(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS."
  },
  "1156": {
      "prefix": "GetEntityAlpha",
      "body": [
          "GetEntityAlpha(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1157": {
      "prefix": "GetCollisionNormalOfLastHitForEntity",
      "body": [
          "GetCollisionNormalOfLastHitForEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1158": {
      "prefix": "GetEntityAnimTotalTime",
      "body": [
          "GetEntityAnimTotalTime(${1:Entity* entity}, ${2:char* animDict}, ${3:char* animName})${0}"
      ],
      "description": "```\nReturns a float value representing animation's total playtime in milliseconds.  \nExample:  \nGET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),\"amb@world_human_yoga@female@base\",\"base_b\")   \nreturn 20800.000000  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1159": {
      "prefix": "GetEntityAnimCurrentTime",
      "body": [
          "GetEntityAnimCurrentTime(${1:Entity* entity}, ${2:char* animDict}, ${3:char* animName})${0}"
      ],
      "description": "```\nReturns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.  \nExample:  \n0.000000 - mark the starting of animation.  \n0.500000 - mark the midpoint of the animation.  \n1.000000 - mark the end of animation.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1160": {
      "prefix": "GetEntityAttachedTo",
      "body": [
          "GetEntityAttachedTo(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1161": {
      "prefix": "GetEntityBonePosition2",
      "body": [
          "GetEntityBonePosition2(${1:Entity* entity}, ${2:int* boneIndex})${0}"
      ],
      "description": "```\nGets the world rotation of the specified bone of the specified entity.\nThis native is used in casinoroulette.c but I don't know yet what is the difference with _GET_ENTITY_BONE_ROTATION\n```"
  },
  "1162": {
      "prefix": "GetEntityBoneCount",
      "body": [
          "GetEntityBoneCount(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1163": {
      "prefix": "GetEntityBoneIndexByName",
      "body": [
          "GetEntityBoneIndexByName(${1:Entity* entity}, ${2:char* boneName})${0}"
      ],
      "description": "```\nReturns the index of the bone. If the bone was not found, -1 will be returned.   \nlist:  \npastebin.com/D7JMnX1g  \nBoneNames:  \n\tchassis,  \n\twindscreen,  \n\tseat_pside_r,  \n\tseat_dside_r,  \n\tbodyshell,  \n\tsuspension_lm,  \n\tsuspension_lr,  \n\tplatelight,  \n\tattach_female,  \n\tattach_male,  \n\tbonnet,  \n\tboot,  \n\tchassis_dummy,\t//Center of the dummy  \n\tchassis_Control,\t//Not found yet  \n\tdoor_dside_f,\t//Door left, front  \n\tdoor_dside_r,\t//Door left, back  \n\tdoor_pside_f,\t//Door right, front  \n\tdoor_pside_r,\t//Door right, back  \n\tGun_GripR,  \n\twindscreen_f,  \n\tplatelight,\t//Position where the light above the numberplate is located  \n\tVFX_Emitter,  \n\twindow_lf,\t//Window left, front  \n\twindow_lr,\t//Window left, back  \n\twindow_rf,\t//Window right, front  \n\twindow_rr,\t//Window right, back  \n\tengine,\t//Position of the engine  \n\tgun_ammo,  \n\tROPE_ATTATCH,\t//Not misspelled. In script \"finale_heist2b.c4\".  \n\twheel_lf,\t//Wheel left, front  \n\twheel_lr,\t//Wheel left, back  \n\twheel_rf,\t//Wheel right, front  \n\twheel_rr,\t//Wheel right, back  \n\texhaust,\t//Exhaust. shows only the position of the stock-exhaust  \n\toverheat,\t//A position on the engine(not exactly sure, how to name it)  \n\tmisc_e,\t//Not a car-bone.  \n\tseat_dside_f,\t//Driver-seat  \n\tseat_pside_f,\t//Seat next to driver  \n\tGun_Nuzzle,  \n\tseat_r  \nI doubt that the function is case-sensitive, since I found a \"Chassis\" and a \"chassis\". - Just tested: Definitely not case-sensitive.  \n```"
  },
  "1164": {
      "prefix": "GetEntityBoneRotation",
      "body": [
          "GetEntityBoneRotation(${1:Entity* entity}, ${2:int* boneIndex})${0}"
      ],
      "description": "```\nGets the world rotation of the specified bone of the specified entity.\n```"
  },
  "1165": {
      "prefix": "GetEntityCanBeDamaged",
      "body": [
          "GetEntityCanBeDamaged(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1166": {
      "prefix": "GetEntityBoneRotationLocal",
      "body": [
          "GetEntityBoneRotationLocal(${1:Entity* entity}, ${2:int* boneIndex})${0}"
      ],
      "description": "Gets the local rotation of the specified bone of the specified entity.\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "1167": {
      "prefix": "GetEntityForwardVector",
      "body": [
          "GetEntityForwardVector(${1:Entity* entity})${0}"
      ],
      "description": "```\nGets the entity's forward vector.\n```"
  },
  "1168": {
      "prefix": "GetEntityCollisionDisabled",
      "body": [
          "GetEntityCollisionDisabled(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1169": {
      "prefix": "GetEntityForwardX",
      "body": [
          "GetEntityForwardX(${1:Entity* entity})${0}"
      ],
      "description": "```\nGets the X-component of the entity's forward vector.  \n```"
  },
  "1170": {
      "prefix": "GetEntityCoords",
      "body": [
          "GetEntityCoords(${1:Entity* entity}, ${2:BOOL* alive})${0}"
      ],
      "description": "Gets the current coordinates (world position) for a specified entity."
  },
  "1171": {
      "prefix": "GetEntityForwardY",
      "body": [
          "GetEntityForwardY(${1:Entity* entity})${0}"
      ],
      "description": "```\nGets the Y-component of the entity's forward vector.  \n```"
  },
  "1172": {
      "prefix": "GetEntityHeading",
      "body": [
          "GetEntityHeading(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns the heading of the entity in degrees. Also know as the \"Yaw\" of an entity.\n```"
  },
  "1173": {
      "prefix": "GetEntityLodDist",
      "body": [
          "GetEntityLodDist(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns the LOD distance of an entity.  \n```"
  },
  "1174": {
      "prefix": "GetEntityHealth",
      "body": [
          "GetEntityHealth(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns an integer value of entity's current health.\nExample of range for ped:\n- Player [0 to 200]\n- Ped [100 to 200]\n- Vehicle [0 to 1000]\n- Object [0 to 1000]\nHealth is actually a float value but this native casts it to int.\nIn order to get the actual value, do:\nfloat health = *(float *)(entityAddress + 0x280);\n```"
  },
  "1175": {
      "prefix": "GetEntityMatrix",
      "body": [
          "GetEntityMatrix(${1:Entity* entity}, ${2:Vector3* forwardVector}, ${3:Vector3* rightVector}, ${4:Vector3* upVector}, ${5:Vector3* position})${0}"
      ],
      "description": ""
  },
  "1176": {
      "prefix": "GetEntityHeightAboveGround",
      "body": [
          "GetEntityHeightAboveGround(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturn height (z-dimension) above ground.   \nExample: The pilot in a titan plane is 1.844176 above ground.  \nHow can i convert it to meters?  \nEverything seems to be in meters, probably this too.  \n```"
  },
  "1177": {
      "prefix": "GetEntityHeight",
      "body": [
          "GetEntityHeight(${1:Entity* entity}, ${2:float* X}, ${3:float* Y}, ${4:float* Z}, ${5:BOOL* atTop}, ${6:BOOL* inWorldCoords})${0}"
      ],
      "description": ""
  },
  "1178": {
      "prefix": "GetEntityModel",
      "body": [
          "GetEntityModel(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns the model hash from the entity\n```"
  },
  "1179": {
      "prefix": "GetEntityMaxHealth",
      "body": [
          "GetEntityMaxHealth(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturn an integer value of entity's maximum health.  \nExample:  \n- Player = 200  \n```"
  },
  "1180": {
      "prefix": "GetEntityPitch",
      "body": [
          "GetEntityPitch(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1181": {
      "prefix": "GetEntityPopulationType",
      "body": [
          "GetEntityPopulationType(${1:Entity* entity})${0}"
      ],
      "description": "A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt"
  },
  "1182": {
      "prefix": "GetEntityPhysicsHeading",
      "body": [
          "GetEntityPhysicsHeading(${1:Entity* entity})${0}"
      ],
      "description": "```\nGets the heading of the entity physics in degrees, which tends to be more accurate than just \"GET_ENTITY_HEADING\". This can be clearly seen while, for example, ragdolling a ped/player.  \nNOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.  \n```"
  },
  "1183": {
      "prefix": "GetEntityQuaternion",
      "body": [
          "GetEntityQuaternion(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* w})${0}"
      ],
      "description": "```\nw is the correct parameter name!  \n```"
  },
  "1184": {
      "prefix": "GetEntityPickup",
      "body": [
          "GetEntityPickup(${1:Entity* entity}, ${2:Hash* modelHash})${0}"
      ],
      "description": "```\nGET_ENTITY_*\n\nSeems to return the handle of the entity's portable pickup.\n\nNativeDB Introduced: v1180\n```"
  },
  "1185": {
      "prefix": "GetEntityProofs",
      "body": [
          "GetEntityProofs(${1:Entity* entity}, ${2:BOOL* bulletProof}, ${3:BOOL* fireProof}, ${4:BOOL* explosionProof}, ${5:BOOL* collisionProof}, ${6:BOOL* meleeProof}, ${7:BOOL* steamProof}, ${8:BOOL* p7}, ${9:BOOL* drownProof})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "1186": {
      "prefix": "GetEntityRotation",
      "body": [
          "GetEntityRotation(${1:Entity* entity}, ${2:int* rotationOrder})${0}"
      ],
      "description": "```\nrotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.\n\nWhat you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.\n\nWhat it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll:\nwww.allstar.fiu.edu/aero/images/pic5-1.gif\n```\n\n### Rotation Orders\n\n*   **0**: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.\n*   **1**: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.\n*   **2**: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.\n*   **3**: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.\n*   **4**: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.\n*   **5**: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis."
  },
  "1187": {
      "prefix": "GetEntityRoll",
      "body": [
          "GetEntityRoll(${1:Entity* entity})${0}"
      ],
      "description": "```\nDisplays the current ROLL axis of the entity [-180.0000/180.0000+]  \n(Sideways Roll) such as a vehicle tipped on its side  \n```"
  },
  "1188": {
      "prefix": "GetEntityScript",
      "body": [
          "GetEntityScript(${1:Entity* entity}, ${2:ScrHandle* script})${0}"
      ],
      "description": "```\nAll ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.  \n```"
  },
  "1189": {
      "prefix": "GetEntityRotationVelocity",
      "body": [
          "GetEntityRotationVelocity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1190": {
      "prefix": "GetEntitySpeedVector",
      "body": [
          "GetEntitySpeedVector(${1:Entity* entity}, ${2:BOOL* relative})${0}"
      ],
      "description": "```\nRelative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).  \n```"
  },
  "1191": {
      "prefix": "GetEntitySubmergedLevel",
      "body": [
          "GetEntitySubmergedLevel(${1:Entity* entity})${0}"
      ],
      "description": "```\nGet how much of the entity is submerged.  1.0f is whole entity.  \n```"
  },
  "1192": {
      "prefix": "GetEntitySpeed",
      "body": [
          "GetEntitySpeed(${1:Entity* entity})${0}"
      ],
      "description": "```\nresult is in meters per second  \n------------------------------------------------------------  \nSo would the conversion to mph and km/h, be along the lines of this.  \nfloat speed = GET_ENTITY_SPEED(veh);  \nfloat kmh = (speed * 3.6);  \nfloat mph = (speed * 2.236936);  \n```"
  },
  "1193": {
      "prefix": "GetEntityType",
      "body": [
          "GetEntityType(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns:\n0 = no entity\n1 = ped\n2 = vehicle\n3 = object\n```"
  },
  "1194": {
      "prefix": "GetEntityVelocity",
      "body": [
          "GetEntityVelocity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1195": {
      "prefix": "GetEntityUprightValue",
      "body": [
          "GetEntityUprightValue(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1196": {
      "prefix": "GetObjectIndexFromEntityIndex",
      "body": [
          "GetObjectIndexFromEntityIndex(${1:Entity* entity})${0}"
      ],
      "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```"
  },
  "1197": {
      "prefix": "GetLastMaterialHitByEntity",
      "body": [
          "GetLastMaterialHitByEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1198": {
      "prefix": "GetNearestPlayerToEntity",
      "body": [
          "GetNearestPlayerToEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1199": {
      "prefix": "GetOffsetFromEntityGivenWorldCoords",
      "body": [
          "GetOffsetFromEntityGivenWorldCoords(${1:Entity* entity}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})${0}"
      ],
      "description": "```\nConverts world coords (posX - Z) to coords relative to the entity  \nExample:  \nposX = 50  \nposY = 1000  \nposZ = 60  \nEntity's coords are: x=30, y=1000, z=60.  \nAll three returned coords will then be in range of [-20,20] depending on rotation of the entity.  \n```"
  },
  "1200": {
      "prefix": "GetNearestPlayerToEntityOnTeam",
      "body": [
          "GetNearestPlayerToEntityOnTeam(${1:Entity* entity}, ${2:int* team})${0}"
      ],
      "description": ""
  },
  "1201": {
      "prefix": "GetOffsetFromEntityInWorldCoords",
      "body": [
          "GetOffsetFromEntityInWorldCoords(${1:Entity* entity}, ${2:float* offsetX}, ${3:float* offsetY}, ${4:float* offsetZ})${0}"
      ],
      "description": "```\nOffset values are relative to the entity.  \nx = left/right  \ny = forward/backward  \nz = up/down  \n```"
  },
  "1202": {
      "prefix": "GetVehicleIndexFromEntityIndex",
      "body": [
          "GetVehicleIndexFromEntityIndex(${1:Entity* entity})${0}"
      ],
      "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```"
  },
  "1203": {
      "prefix": "GetPedIndexFromEntityIndex",
      "body": [
          "GetPedIndexFromEntityIndex(${1:Entity* entity})${0}"
      ],
      "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```"
  },
  "1204": {
      "prefix": "HasCollisionLoadedAroundEntity",
      "body": [
          "HasCollisionLoadedAroundEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1205": {
      "prefix": "GetWorldPositionOfEntityBone",
      "body": [
          "GetWorldPositionOfEntityBone(${1:Entity* entity}, ${2:int* boneIndex})${0}"
      ],
      "description": "```\nReturns the coordinates of an entity-bone.  \n```"
  },
  "1206": {
      "prefix": "HasEntityBeenDamagedByAnyObject",
      "body": [
          "HasEntityBeenDamagedByAnyObject(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1207": {
      "prefix": "HasAnimEventFired",
      "body": [
          "HasAnimEventFired(${1:Entity* entity}, ${2:Hash* actionHash})${0}"
      ],
      "description": "```\nif (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"CreateObject\")))\n```"
  },
  "1208": {
      "prefix": "HasEntityBeenDamagedByAnyVehicle",
      "body": [
          "HasEntityBeenDamagedByAnyVehicle(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1209": {
      "prefix": "HasEntityBeenDamagedByEntity",
      "body": [
          "HasEntityBeenDamagedByEntity(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nEntity 1 = Victim  \nEntity 2 = Attacker  \np2 seems to always be 1  \n```"
  },
  "1210": {
      "prefix": "HasEntityAnimFinished",
      "body": [
          "HasEntityAnimFinished(${1:Entity* entity}, ${2:char* animDict}, ${3:char* animName}, ${4:int* p3})${0}"
      ],
      "description": "```\nP3 is always 3 as far as i cant tell  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1211": {
      "prefix": "HasEntityClearLosToEntityInFront",
      "body": [
          "HasEntityClearLosToEntityInFront(${1:Entity* entity1}, ${2:Entity* entity2})${0}"
      ],
      "description": "```\nHas the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.  \nThis is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops  \n```"
  },
  "1212": {
      "prefix": "HasEntityBeenDamagedByAnyPed",
      "body": [
          "HasEntityBeenDamagedByAnyPed(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1213": {
      "prefix": "HasEntityClearLosToEntity2",
      "body": [
          "HasEntityClearLosToEntity2(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:int* traceType})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "1214": {
      "prefix": "HasEntityClearLosToEntity",
      "body": [
          "HasEntityClearLosToEntity(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:int* flags})${0}"
      ],
      "description": "Checks if entity1 has a clear line of sight to entity2. So a simple raycast which if it collides with any of the given colliderTypes returns false.\n\nThe direction of the check matters with for example bushes, so checking from inside to outside a bush with traceType 256 returns true, but the other way around returns false."
  },
  "1215": {
      "prefix": "IsAnEntity",
      "body": [
          "IsAnEntity(${1:int* handle})${0}"
      ],
      "description": ""
  },
  "1216": {
      "prefix": "HasEntityCollidedWithAnything",
      "body": [
          "HasEntityCollidedWithAnything(${1:Entity* entity})${0}"
      ],
      "description": "```\nCalled on tick.  \nTested with vehicles, returns true whenever the vehicle is touching any entity.  \nNote: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.  \n```"
  },
  "1217": {
      "prefix": "IsEntityAVehicle",
      "body": [
          "IsEntityAVehicle(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1218": {
      "prefix": "IsEntityAtCoord",
      "body": [
          "IsEntityAtCoord(${1:Entity* entity}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:float* xSize}, ${6:float* ySize}, ${7:float* zSize}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:int* p9})${0}"
      ],
      "description": "```\nChecks if entity is within x/y/zSize distance of x/y/z.   \nLast three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0  \n```"
  },
  "1219": {
      "prefix": "IsEntityAMissionEntity",
      "body": [
          "IsEntityAMissionEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1220": {
      "prefix": "IsEntityAPed",
      "body": [
          "IsEntityAPed(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1221": {
      "prefix": "IsEntityAtEntity",
      "body": [
          "IsEntityAtEntity(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:float* xSize}, ${4:float* ySize}, ${5:float* zSize}, ${6:BOOL* p5}, ${7:BOOL* p6}, ${8:int* p7})${0}"
      ],
      "description": "```\nChecks if entity1 is within the box defined by x/y/zSize of entity2.  \nLast three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0  \n```"
  },
  "1222": {
      "prefix": "IsEntityAnObject",
      "body": [
          "IsEntityAnObject(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1223": {
      "prefix": "IsEntityAttachedToAnyObject",
      "body": [
          "IsEntityAttachedToAnyObject(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1224": {
      "prefix": "IsEntityAttached",
      "body": [
          "IsEntityAttached(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1225": {
      "prefix": "IsEntityAttachedToAnyPed",
      "body": [
          "IsEntityAttachedToAnyPed(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1226": {
      "prefix": "IsEntityAttachedToAnyVehicle",
      "body": [
          "IsEntityAttachedToAnyVehicle(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1227": {
      "prefix": "IsEntityAttachedToEntity",
      "body": [
          "IsEntityAttachedToEntity(${1:Entity* from}, ${2:Entity* to})${0}"
      ],
      "description": ""
  },
  "1228": {
      "prefix": "IsEntityDead",
      "body": [
          "IsEntityDead(${1:Entity* entity})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: BOOL p1\n```"
  },
  "1229": {
      "prefix": "IsEntityInArea",
      "body": [
          "IsEntityInArea(${1:Entity* entity}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:Any* p9})${0}"
      ],
      "description": ""
  },
  "1230": {
      "prefix": "IsEntityInAir",
      "body": [
          "IsEntityInAir(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1231": {
      "prefix": "IsEntityInWater",
      "body": [
          "IsEntityInWater(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1232": {
      "prefix": "IsEntityOccluded",
      "body": [
          "IsEntityOccluded(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1233": {
      "prefix": "IsEntityInAngledArea",
      "body": [
          "IsEntityInAngledArea(${1:Entity* entity}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:float* width}, ${9:BOOL* debug}, ${10:BOOL* includez}, ${11:Any* p10})${0}"
      ],
      "description": "p10 is some entity flag check, also used in [`IS_ENTITY_AT_ENTITY`](#\\_0x751B70C3D034E187), [`IS_ENTITY_IN_AREA`](#\\_0x54736AA40E271165) and [`IS_ENTITY_AT_COORD`](#\\_0x20B60995556D004F).\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area."
  },
  "1234": {
      "prefix": "IsEntityInZone",
      "body": [
          "IsEntityInZone(${1:Entity* entity}, ${2:char* zone})${0}"
      ],
      "description": ""
  },
  "1235": {
      "prefix": "IsEntityPlayingAnim",
      "body": [
          "IsEntityPlayingAnim(${1:Entity* entity}, ${2:char* animDict}, ${3:char* animName}, ${4:int* taskFlag})${0}"
      ],
      "description": "See also [`IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM`](#\\_0x6EC47A344923E1ED)\n\n```\nTaken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), \"creatures@shark@move\", \"attack_player\", 3)  \np4 is always 3 in the scripts.  \ntaskFlag:  \n2 - Check synchronized scene  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1236": {
      "prefix": "IsEntityOnScreen",
      "body": [
          "IsEntityOnScreen(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns true if the entity is in between the minimum and maximum values for the 2d screen coords.   \nThis means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.   \nChipping  \n```"
  },
  "1237": {
      "prefix": "IsEntityTouchingModel",
      "body": [
          "IsEntityTouchingModel(${1:Entity* entity}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1238": {
      "prefix": "IsEntityStatic",
      "body": [
          "IsEntityStatic(${1:Entity* entity})${0}"
      ],
      "description": "```\nA static ped will not react to natives like \"APPLY_FORCE_TO_ENTITY\" or \"SET_ENTITY_VELOCITY\" and oftentimes will not react to task-natives like \"AI::TASK_COMBAT_PED\". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.  \n^ Attach a phCollider to the ped.  \n```"
  },
  "1239": {
      "prefix": "IsEntityUpright",
      "body": [
          "IsEntityUpright(${1:Entity* entity}, ${2:float* angle})${0}"
      ],
      "description": ""
  },
  "1240": {
      "prefix": "IsEntityTouchingEntity",
      "body": [
          "IsEntityTouchingEntity(${1:Entity* entity}, ${2:Entity* targetEntity})${0}"
      ],
      "description": ""
  },
  "1241": {
      "prefix": "IsEntityUpsidedown",
      "body": [
          "IsEntityUpsidedown(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1242": {
      "prefix": "IsEntityVisible",
      "body": [
          "IsEntityVisible(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1243": {
      "prefix": "IsEntityVisibleToScript",
      "body": [
          "IsEntityVisibleToScript(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1244": {
      "prefix": "IsEntityWaitingForWorldCollision",
      "body": [
          "IsEntityWaitingForWorldCollision(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1245": {
      "prefix": "PlaySynchronizedEntityAnim",
      "body": [
          "PlaySynchronizedEntityAnim(${1:Entity* entity}, ${2:int* syncedScene}, ${3:char* animation}, ${4:char* propName}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6}, ${8:float* p7})${0}"
      ],
      "description": "```\np4 and p7 are usually 1000.0f.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1246": {
      "prefix": "PlayEntityAnim",
      "body": [
          "PlayEntityAnim(${1:Entity* entity}, ${2:char* animName}, ${3:char* animDict}, ${4:float* p3}, ${5:BOOL* loop}, ${6:BOOL* stayInAnim}, ${7:BOOL* p6}, ${8:float* delta}, ${9:Any* bitset})${0}"
      ],
      "description": "```\ndelta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.  \nThe only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1247": {
      "prefix": "RemoveForcedObject",
      "body": [
          "RemoveForcedObject(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "1248": {
      "prefix": "PlaySynchronizedMapEntityAnim",
      "body": [
          "PlaySynchronizedMapEntityAnim(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:float* p8}, ${10:float* p9}, ${11:Any* p10}, ${12:float* p11})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1249": {
      "prefix": "ProcessEntityAttachments",
      "body": [
          "ProcessEntityAttachments(${1:Entity* entity})${0}"
      ],
      "description": "```\nCalled to update entity attachments.\n```"
  },
  "1250": {
      "prefix": "RemoveModelHide",
      "body": [
          "RemoveModelHide(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* model}, ${6:BOOL* p5})${0}"
      ],
      "description": "p5 requires more research. See also [`CREATE_MODEL_HIDE`](#\\_0x8A97BCA30A0CE478) and [`CREATE_MODEL_SWAP`](#\\_0x92C47782FDA8B2A3).\n\nNetwork players do not see changes done with this."
  },
  "1251": {
      "prefix": "ResetEntityAlpha",
      "body": [
          "ResetEntityAlpha(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1252": {
      "prefix": "RemoveModelSwap",
      "body": [
          "RemoveModelSwap(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* originalModel}, ${6:Hash* newModel}, ${7:BOOL* p6})${0}"
      ],
      "description": ""
  },
  "1253": {
      "prefix": "SetCanClimbOnEntity",
      "body": [
          "SetCanClimbOnEntity(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1254": {
      "prefix": "SetCanAutoVaultOnEntity",
      "body": [
          "SetCanAutoVaultOnEntity(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1255": {
      "prefix": "SetEntityAlpha",
      "body": [
          "SetEntityAlpha(${1:Entity* entity}, ${2:int* alphaLevel}, ${3:BOOL* skin})${0}"
      ],
      "description": "This native sets the entity's alpha level."
  },
  "1256": {
      "prefix": "SetEntityAlwaysPrerender",
      "body": [
          "SetEntityAlwaysPrerender(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1257": {
      "prefix": "SetEntityAngularVelocity",
      "body": [
          "SetEntityAngularVelocity(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "1258": {
      "prefix": "SetEntityAnimCurrentTime",
      "body": [
          "SetEntityAnimCurrentTime(${1:Entity* entity}, ${2:char* animDictionary}, ${3:char* animName}, ${4:float* time})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "1259": {
      "prefix": "SetEntityAsMissionEntity",
      "body": [
          "SetEntityAsMissionEntity(${1:Entity* entity}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nMakes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.  \np1 has no effect when either its on or off   \nmaybe a quick disassembly will tell us what it does  \np2 has no effect when either its on or off   \nmaybe a quick disassembly will tell us what it does  \n```"
  },
  "1260": {
      "prefix": "SetEntityAnimSpeed",
      "body": [
          "SetEntityAnimSpeed(${1:Entity* entity}, ${2:char* animDictionary}, ${3:char* animName}, ${4:float* speedMultiplier})${0}"
      ],
      "description": ""
  },
  "1261": {
      "prefix": "SetEntityAsNoLongerNeeded",
      "body": [
          "SetEntityAsNoLongerNeeded(${1:Entity* entity})${0}"
      ],
      "description": "```\nMarks the specified entity (ped, vehicle or object) as no longer needed.  \nEntities marked as no longer needed, will be deleted as the engine sees fit.  \n```"
  },
  "1262": {
      "prefix": "SetEntityCanBeTargetedWithoutLos",
      "body": [
          "SetEntityCanBeTargetedWithoutLos(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSets whether the entity can be targeted without being in line-of-sight.  \n```"
  },
  "1263": {
      "prefix": "SetEntityCollision",
      "body": [
          "SetEntityCollision(${1:Entity* entity}, ${2:BOOL* toggle}, ${3:BOOL* keepPhysics})${0}"
      ],
      "description": ""
  },
  "1264": {
      "prefix": "SetEntityCanBeDamaged",
      "body": [
          "SetEntityCanBeDamaged(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1265": {
      "prefix": "SetEntityCompletelyDisableCollision",
      "body": [
          "SetEntityCompletelyDisableCollision(${1:Entity* entity}, ${2:BOOL* toggle}, ${3:BOOL* keepPhysics})${0}"
      ],
      "description": ""
  },
  "1266": {
      "prefix": "SetEntityCanBeDamagedByRelationshipGroup",
      "body": [
          "SetEntityCanBeDamagedByRelationshipGroup(${1:Entity* entity}, ${2:BOOL* bCanBeDamaged}, ${3:int* relGroup})${0}"
      ],
      "description": ""
  },
  "1267": {
      "prefix": "SetEntityCleanupByEngine",
      "body": [
          "SetEntityCleanupByEngine(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nTrue means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.\n```"
  },
  "1268": {
      "prefix": "SetEntityCoordsNoOffset",
      "body": [
          "SetEntityCoordsNoOffset(${1:Entity* entity}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:BOOL* alive}, ${6:BOOL* deadFlag}, ${7:BOOL* ragdollFlag})${0}"
      ],
      "description": "Sets the coordinates (world position) for a specified entity."
  },
  "1269": {
      "prefix": "SetEntityCoords",
      "body": [
          "SetEntityCoords(${1:Entity* entity}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:BOOL* alive}, ${6:BOOL* deadFlag}, ${7:BOOL* ragdollFlag}, ${8:BOOL* clearArea})${0}"
      ],
      "description": "Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis."
  },
  "1270": {
      "prefix": "SetEntityDecalsDisabled",
      "body": [
          "SetEntityDecalsDisabled(${1:Entity* entity}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nSET_ENTITY_*\n```"
  },
  "1271": {
      "prefix": "SetEntityHasGravity",
      "body": [
          "SetEntityHasGravity(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1272": {
      "prefix": "SetEntityCoordsWithoutPlantsReset",
      "body": [
          "SetEntityCoordsWithoutPlantsReset(${1:Entity* entity}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:BOOL* alive}, ${6:BOOL* deadFlag}, ${7:BOOL* ragdollFlag}, ${8:BOOL* clearArea})${0}"
      ],
      "description": ""
  },
  "1273": {
      "prefix": "SetEntityHealth",
      "body": [
          "SetEntityHealth(${1:Entity* entity}, ${2:int* health})${0}"
      ],
      "description": "health >= 0\n\nmale ped ~= 100 - 200\n\nfemale ped ~= 0 - 100\n\n```\nNativeDB Added Parameter 3: int p2\n```"
  },
  "1274": {
      "prefix": "SetEntityIsTargetPriority",
      "body": [
          "SetEntityIsTargetPriority(${1:Entity* entity}, ${2:BOOL* p1}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "1275": {
      "prefix": "SetEntityDynamic",
      "body": [
          "SetEntityDynamic(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1276": {
      "prefix": "SetEntityLodDist",
      "body": [
          "SetEntityLodDist(${1:Entity* entity}, ${2:int* value})${0}"
      ],
      "description": "```\nLOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).  \n```"
  },
  "1277": {
      "prefix": "SetEntityHeading",
      "body": [
          "SetEntityHeading(${1:Entity* entity}, ${2:float* heading})${0}"
      ],
      "description": "Set the heading of an entity in degrees also known as \"Yaw\"."
  },
  "1278": {
      "prefix": "SetEntityInvincible",
      "body": [
          "SetEntityInvincible(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.  \nIf you use this for a ped and you want Ragdoll to stay enabled, then do:  \n*(DWORD *)(pedAddress + 0x188) |= (1 << 9);  \nUse this if you want to get the invincibility status:  \n\tbool IsPedInvincible(Ped ped)  \n\t{  \nauto addr = getScriptHandleBaseAddress(ped);\t  \nif (addr)  \n{  \n\tDWORD flag = *(DWORD *)(addr + 0x188);  \n\treturn ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);  \n}  \nreturn false;  \n\t}  \n```"
  },
  "1279": {
      "prefix": "SetEntityMaxHealth",
      "body": [
          "SetEntityMaxHealth(${1:Entity* entity}, ${2:int* value})${0}"
      ],
      "description": "```\nFor instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849  \n```"
  },
  "1280": {
      "prefix": "SetEntityMaxSpeed",
      "body": [
          "SetEntityMaxSpeed(${1:Entity* entity}, ${2:float* speed})${0}"
      ],
      "description": ""
  },
  "1281": {
      "prefix": "SetEntityMotionBlur",
      "body": [
          "SetEntityMotionBlur(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1282": {
      "prefix": "SetEntityOnlyDamagedByPlayer",
      "body": [
          "SetEntityOnlyDamagedByPlayer(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1283": {
      "prefix": "SetEntityLights",
      "body": [
          "SetEntityLights(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1284": {
      "prefix": "SetEntityQuaternion",
      "body": [
          "SetEntityQuaternion(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* w})${0}"
      ],
      "description": "```\nw is the correct parameter name!  \n```"
  },
  "1285": {
      "prefix": "SetEntityRenderScorched",
      "body": [
          "SetEntityRenderScorched(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1286": {
      "prefix": "SetEntityLoadCollisionFlag",
      "body": [
          "SetEntityLoadCollisionFlag(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.\n\nCertainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "1287": {
      "prefix": "SetEntityRotation",
      "body": [
          "SetEntityRotation(${1:Entity* entity}, ${2:float* pitch}, ${3:float* roll}, ${4:float* yaw}, ${5:int* rotationOrder}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "1288": {
      "prefix": "SetEntityVelocity",
      "body": [
          "SetEntityVelocity(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "```\nNote that the third parameter(denoted as z) is \"up and down\" with positive numbers encouraging upwards movement.\n```"
  },
  "1289": {
      "prefix": "SetObjectAsNoLongerNeeded",
      "body": [
          "SetObjectAsNoLongerNeeded(${1:Object* object})${0}"
      ],
      "description": "```\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n```"
  },
  "1290": {
      "prefix": "SetEntityNoCollisionEntity",
      "body": [
          "SetEntityNoCollisionEntity(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:BOOL* thisFrameOnly})${0}"
      ],
      "description": "```\nCalling this function disables collision between two entities.\nThe importance of the order for entity1 and entity2 is unclear.\nThe third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.\n```"
  },
  "1291": {
      "prefix": "SetPedAsNoLongerNeeded",
      "body": [
          "SetPedAsNoLongerNeeded(${1:Ped* ped})${0}"
      ],
      "description": "```\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n```"
  },
  "1292": {
      "prefix": "SetEntityOnlyDamagedByRelationshipGroup",
      "body": [
          "SetEntityOnlyDamagedByRelationshipGroup(${1:Entity* entity}, ${2:BOOL* p1}, ${3:Hash* relationshipHash})${0}"
      ],
      "description": ""
  },
  "1293": {
      "prefix": "SetEntityProofs",
      "body": [
          "SetEntityProofs(${1:Entity* entity}, ${2:BOOL* bulletProof}, ${3:BOOL* fireProof}, ${4:BOOL* explosionProof}, ${5:BOOL* collisionProof}, ${6:BOOL* meleeProof}, ${7:BOOL* steamProof}, ${8:BOOL* p7}, ${9:BOOL* drownProof})${0}"
      ],
      "description": "```\nEnable / disable each type of damage.  \n--------------  \np7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);  \n```"
  },
  "1294": {
      "prefix": "StopSynchronizedEntityAnim",
      "body": [
          "StopSynchronizedEntityAnim(${1:Entity* entity}, ${2:float* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np1 sync task id?  \n```"
  },
  "1295": {
      "prefix": "StopSynchronizedMapEntityAnim",
      "body": [
          "StopSynchronizedMapEntityAnim(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4}, ${6:float* p5})${0}"
      ],
      "description": ""
  },
  "1296": {
      "prefix": "WouldEntityBeOccluded",
      "body": [
          "WouldEntityBeOccluded(${1:Hash* entityModelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "1297": {
      "prefix": "SetEntityRecordsCollisions",
      "body": [
          "SetEntityRecordsCollisions(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1298": {
      "prefix": "SetEntityTrafficlightOverride",
      "body": [
          "SetEntityTrafficlightOverride(${1:Entity* entity}, ${2:int* state})${0}"
      ],
      "description": "```\nExample here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340\n0 = green\n1 = red\n2 = yellow\n3 = reset changes\nchanging lights may not change the behavior of vehicles\n```"
  },
  "1299": {
      "prefix": "SetEntityVisible",
      "body": [
          "SetEntityVisible(${1:Entity* entity}, ${2:BOOL* toggle}, ${3:BOOL* unk})${0}"
      ],
      "description": "Toggle the visibility of a given entity."
  },
  "1300": {
      "prefix": "SetVehicleAsNoLongerNeeded",
      "body": [
          "SetVehicleAsNoLongerNeeded(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n```"
  },
  "1301": {
      "prefix": "StopEntityAnim",
      "body": [
          "StopEntityAnim(${1:Entity* entity}, ${2:char* animation}, ${3:char* animGroup}, ${4:float* p3})${0}"
      ],
      "description": "```\nRAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm\n```"
  },
  "1302": {
      "prefix": "AddShockingEventAtPosition",
      "body": [
          "AddShockingEventAtPosition(${1:int* eventType}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* duration})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```"
  },
  "1303": {
      "prefix": "BlockDecisionMakerEvent",
      "body": [
          "BlockDecisionMakerEvent(${1:Hash* name}, ${2:int* eventType})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\nThis is limited to 4 blocked events at a time.\n```"
  },
  "1304": {
      "prefix": "ClearDecisionMakerEventResponse",
      "body": [
          "ClearDecisionMakerEventResponse(${1:Hash* name}, ${2:int* eventType})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```"
  },
  "1305": {
      "prefix": "RemoveAllShockingEvents",
      "body": [
          "RemoveAllShockingEvents(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1306": {
      "prefix": "RemoveShockingEvent",
      "body": [
          "RemoveShockingEvent(${1:ScrHandle* event})${0}"
      ],
      "description": ""
  },
  "1307": {
      "prefix": "AddShockingEventForEntity",
      "body": [
          "AddShockingEventForEntity(${1:int* eventType}, ${2:Entity* entity}, ${3:float* duration})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```"
  },
  "1308": {
      "prefix": "RemoveShockingEventSpawnBlockingAreas",
      "body": [
          "RemoveShockingEventSpawnBlockingAreas()${0}"
      ],
      "description": ""
  },
  "1309": {
      "prefix": "SuppressAgitationEventsNextFrame",
      "body": [
          "SuppressAgitationEventsNextFrame()${0}"
      ],
      "description": ""
  },
  "1310": {
      "prefix": "IsShockingEventInSphere",
      "body": [
          "IsShockingEventInSphere(${1:int* eventType}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```"
  },
  "1311": {
      "prefix": "UnblockDecisionMakerEvent",
      "body": [
          "UnblockDecisionMakerEvent(${1:Hash* name}, ${2:int* eventType})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```"
  },
  "1312": {
      "prefix": "SetDecisionMaker",
      "body": [
          "SetDecisionMaker(${1:Ped* ped}, ${2:Hash* name})${0}"
      ],
      "description": ""
  },
  "1313": {
      "prefix": "SuppressShockingEventTypeNextFrame",
      "body": [
          "SuppressShockingEventTypeNextFrame(${1:int* eventType})${0}"
      ],
      "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```"
  },
  "1314": {
      "prefix": "SuppressShockingEventsNextFrame",
      "body": [
          "SuppressShockingEventsNextFrame()${0}"
      ],
      "description": ""
  },
  "1315": {
      "prefix": "DoesShopPedApparelHaveRestrictionTag",
      "body": [
          "DoesShopPedApparelHaveRestrictionTag(${1:Hash* componentHash}, ${2:Hash* restrictionTagHash}, ${3:int* componentId})${0}"
      ],
      "description": ""
  },
  "1316": {
      "prefix": "GetDlcVehicleData",
      "body": [
          "GetDlcVehicleData(${1:int* dlcVehicleIndex}, ${2:int* outData})${0}"
      ],
      "description": "```\ndlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.  \noutData is a struct of 3 8-byte items.  \nThe Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.  \n```"
  },
  "1317": {
      "prefix": "GetDlcVehicleModel",
      "body": [
          "GetDlcVehicleModel(${1:int* dlcVehicleIndex})${0}"
      ],
      "description": "```\ndlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()  \n```"
  },
  "1318": {
      "prefix": "GetDlcWeaponComponentDataSp",
      "body": [
          "GetDlcWeaponComponentDataSp(${1:int* dlcWeaponIndex}, ${2:int* dlcWeapCompIndex}, ${3:int* ComponentDataPtr})${0}"
      ],
      "description": "Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "1319": {
      "prefix": "GetDlcVehicleFlags",
      "body": [
          "GetDlcVehicleFlags(${1:int* dlcVehicleIndex})${0}"
      ],
      "description": ""
  },
  "1320": {
      "prefix": "GetDlcWeaponDataSp",
      "body": [
          "GetDlcWeaponDataSp(${1:int* dlcWeaponIndex}, ${2:int* outData})${0}"
      ],
      "description": "Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "1321": {
      "prefix": "GetForcedProp",
      "body": [
          "GetForcedProp(${1:Hash* componentHash}, ${2:int* forcedPropIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* anchorPoint})${0}"
      ],
      "description": ""
  },
  "1322": {
      "prefix": "GetDlcVehicleModLockHash",
      "body": [
          "GetDlcVehicleModLockHash(${1:Hash* hash})${0}"
      ],
      "description": ""
  },
  "1323": {
      "prefix": "GetHashNameForComponent",
      "body": [
          "GetHashNameForComponent(${1:Entity* entity}, ${2:int* componentId}, ${3:int* drawableVariant}, ${4:int* textureVariant})${0}"
      ],
      "description": ""
  },
  "1324": {
      "prefix": "GetNumDlcVehicles",
      "body": [
          "GetNumDlcVehicles()${0}"
      ],
      "description": ""
  },
  "1325": {
      "prefix": "GetDlcWeaponComponentData",
      "body": [
          "GetDlcWeaponComponentData(${1:int* dlcWeaponIndex}, ${2:int* dlcWeapCompIndex}, ${3:int* ComponentDataPtr})${0}"
      ],
      "description": "```\np0 seems to be the weapon index  \np1 seems to be the weapon component index  \nstruct DlcComponentData{  \nint attachBone;  \nint padding1;  \nint bActiveByDefault;  \nint padding2;  \nint unk;  \nint padding3;  \nint componentHash;  \nint padding4;  \nint unk2;  \nint padding5;  \nint componentCost;  \nint padding6;  \nchar nameLabel[64];  \nchar descLabel[64];  \n};  \n```"
  },
  "1326": {
      "prefix": "GetNumDlcWeaponComponents",
      "body": [
          "GetNumDlcWeaponComponents(${1:int* dlcWeaponIndex})${0}"
      ],
      "description": "```\nReturns the total number of DLC weapon components.\n```"
  },
  "1327": {
      "prefix": "GetDlcWeaponData",
      "body": [
          "GetDlcWeaponData(${1:int* dlcWeaponIndex}, ${2:int* outData})${0}"
      ],
      "description": "```\ndlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.  \nstruct DlcWeaponData  \n{  \nint emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this  \nint padding1;  \nint weaponHash;  \nint padding2;  \nint unk;  \nint padding3;  \nint weaponCost;  \nint padding4;  \nint ammoCost;  \nint padding5;  \nint ammoType;  \nint padding6;  \nint defaultClipSize;  \nint padding7;  \nchar nameLabel[64];  \nchar descLabel[64];  \nchar desc2Label[64]; // usually \"the\" + name  \nchar upperCaseNameLabel[64];  \n};  \n```"
  },
  "1328": {
      "prefix": "GetForcedComponent",
      "body": [
          "GetForcedComponent(${1:Hash* componentHash}, ${2:int* forcedComponentIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* componentType})${0}"
      ],
      "description": ""
  },
  "1329": {
      "prefix": "GetHashNameForProp",
      "body": [
          "GetHashNameForProp(${1:Entity* entity}, ${2:int* componentId}, ${3:int* propIndex}, ${4:int* propTextureIndex})${0}"
      ],
      "description": ""
  },
  "1330": {
      "prefix": "GetNumDlcWeapons",
      "body": [
          "GetNumDlcWeapons()${0}"
      ],
      "description": "```\nReturns the total number of DLC weapons.\n```"
  },
  "1331": {
      "prefix": "GetNumTattooShopDlcItems",
      "body": [
          "GetNumTattooShopDlcItems(${1:int* character})${0}"
      ],
      "description": "```\nCharacter types:\n0 = Michael,\n1 = Franklin,\n2 = Trevor,\n3 = MPMale,\n4 = MPFemale\n```"
  },
  "1332": {
      "prefix": "GetNumDlcWeaponComponentsSp",
      "body": [
          "GetNumDlcWeaponComponentsSp(${1:int* dlcWeaponIndex})${0}"
      ],
      "description": "Returns the total number of DLC weapon components that are available in SP.\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "1333": {
      "prefix": "GetShopPedApparelForcedComponentCount",
      "body": [
          "GetShopPedApparelForcedComponentCount(${1:Hash* componentHash})${0}"
      ],
      "description": "```\nReturns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.\n```"
  },
  "1334": {
      "prefix": "GetShopPedApparelVariantComponentCount",
      "body": [
          "GetShopPedApparelVariantComponentCount(${1:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "1335": {
      "prefix": "GetShopPedApparelVariantPropCount",
      "body": [
          "GetShopPedApparelVariantPropCount(${1:Hash* propHash})${0}"
      ],
      "description": ""
  },
  "1336": {
      "prefix": "GetNumDlcWeaponsSp",
      "body": [
          "GetNumDlcWeaponsSp()${0}"
      ],
      "description": "Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "1337": {
      "prefix": "GetShopPedApparelForcedPropCount",
      "body": [
          "GetShopPedApparelForcedPropCount(${1:Hash* componentHash})${0}"
      ],
      "description": "```\nReturns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.\n```"
  },
  "1338": {
      "prefix": "GetShopPedOutfitComponentVariant",
      "body": [
          "GetShopPedOutfitComponentVariant(${1:Hash* outfit}, ${2:int* slot}, ${3:Any* outComponentVariant})${0}"
      ],
      "description": ""
  },
  "1339": {
      "prefix": "GetShopPedComponent",
      "body": [
          "GetShopPedComponent(${1:Hash* componentHash}, ${2:Any* outComponent})${0}"
      ],
      "description": "```\nMore info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86\n```"
  },
  "1340": {
      "prefix": "GetShopPedOutfitLocate",
      "body": [
          "GetShopPedOutfitLocate(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1341": {
      "prefix": "GetShopPedOutfit",
      "body": [
          "GetShopPedOutfit(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "1342": {
      "prefix": "GetShopPedProp",
      "body": [
          "GetShopPedProp(${1:Hash* componentHash}, ${2:Any* outProp})${0}"
      ],
      "description": ""
  },
  "1343": {
      "prefix": "GetShopPedOutfitPropVariant",
      "body": [
          "GetShopPedOutfitPropVariant(${1:Hash* outfitHash}, ${2:int* variantIndex}, ${3:Any* outPropVariant})${0}"
      ],
      "description": ""
  },
  "1344": {
      "prefix": "GetShopPedQueryComponent",
      "body": [
          "GetShopPedQueryComponent(${1:int* componentId}, ${2:int* outComponent})${0}"
      ],
      "description": ""
  },
  "1345": {
      "prefix": "GetShopPedQueryOutfit",
      "body": [
          "GetShopPedQueryOutfit(${1:int* outfitIndex}, ${2:Any* outfit})${0}"
      ],
      "description": "```\nstruct Outfit_s  \n{  \n\tint mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;  \n\tint maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,   \n\t\tarmourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;  \n};  \n```"
  },
  "1346": {
      "prefix": "GetShopPedQueryProp",
      "body": [
          "GetShopPedQueryProp(${1:int* componentId}, ${2:Any* outProp})${0}"
      ],
      "description": ""
  },
  "1347": {
      "prefix": "GetTattooShopDlcItemData",
      "body": [
          "GetTattooShopDlcItemData(${1:int* characterType}, ${2:int* decorationIndex}, ${3:Any* outComponent})${0}"
      ],
      "description": "Character types:\n\n```\n0 = Michael,\n1 = Franklin,\n2 = Trevor,\n3 = MPMale,\n4 = MPFemale\n```\n\n```csharp\nenum TattooZoneData\n{\n    ZONE_TORSO = 0,\n    ZONE_HEAD = 1,\n    ZONE_LEFT_ARM = 2,\n    ZONE_RIGHT_ARM = 3,\n    ZONE_LEFT_LEG = 4,\n    ZONE_RIGHT_LEG = 5,\n    ZONE_UNKNOWN = 6,\n    ZONE_NONE = 7,\n};\n\nstruct outComponent\n{\n    // these vars are suffixed with 4 bytes of padding each.\n    uint unk;\n    int unk2;\n    uint tattooCollectionHash;\n    uint tattooNameHash;\n    int unk3;\n    TattooZoneData zoneId;\n    uint unk4;\n    uint unk5;\n    // maybe more, not sure exactly, decompiled scripts are very vague around this part.\n}\n```"
  },
  "1348": {
      "prefix": "GetVariantComponent",
      "body": [
          "GetVariantComponent(${1:Hash* componentHash}, ${2:int* variantComponentIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* componentType})${0}"
      ],
      "description": ""
  },
  "1349": {
      "prefix": "InitShopPedComponent",
      "body": [
          "InitShopPedComponent(${1:int* outComponent})${0}"
      ],
      "description": ""
  },
  "1350": {
      "prefix": "GetVariantProp",
      "body": [
          "GetVariantProp(${1:Hash* componentHash}, ${2:int* variantPropIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* anchorPoint})${0}"
      ],
      "description": ""
  },
  "1351": {
      "prefix": "IsContentItemLocked",
      "body": [
          "IsContentItemLocked(${1:Hash* itemHash})${0}"
      ],
      "description": ""
  },
  "1352": {
      "prefix": "InitShopPedProp",
      "body": [
          "InitShopPedProp(${1:int* outProp})${0}"
      ],
      "description": ""
  },
  "1353": {
      "prefix": "IsDlcVehicleMod",
      "body": [
          "IsDlcVehicleMod(${1:Hash* hash})${0}"
      ],
      "description": ""
  },
  "1354": {
      "prefix": "LoadContentChangeSetGroup",
      "body": [
          "LoadContentChangeSetGroup(${1:Hash* hash})${0}"
      ],
      "description": "```\nFrom fm_deathmatch_creator and fm_race_creator:\n\nFILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP_SP\"));\nFILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP\"));\n\nNativeDB Introduced: v1604\n```"
  },
  "1355": {
      "prefix": "SetupShopPedApparelQuery",
      "body": [
          "SetupShopPedApparelQuery(${1:int* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "1356": {
      "prefix": "SetupShopPedOutfitQuery",
      "body": [
          "SetupShopPedOutfitQuery(${1:int* character}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\ncharacters\n0: Michael\n1: Franklin\n2: Trevor\n3: MPMale\n4: MPFemale\n```"
  },
  "1357": {
      "prefix": "UnloadContentChangeSetGroup",
      "body": [
          "UnloadContentChangeSetGroup(${1:Hash* hash})${0}"
      ],
      "description": "```\nFrom fm_deathmatch_creator and fm_race_creator:\n\nFILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP_SP\"));\nFILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP\"));\n\nNativeDB Introduced: v1604\n```"
  },
  "1358": {
      "prefix": "SetupShopPedApparelQueryTu",
      "body": [
          "SetupShopPedApparelQueryTu(${1:int* character}, ${2:int* p1}, ${3:int* p2}, ${4:BOOL* p3}, ${5:int* p4}, ${6:int* componentId})${0}"
      ],
      "description": "```\ncharacter is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.\ncomponentId is between 0 and 11 and corresponds to the usual component slots.\np1 could be the outfit number; unsure.\np2 is usually -1; unknown function.\np3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.\np4 is usually -1; unknown function.\ncomponentId is -1 when p3 is true in decompiled scripts.\n```"
  },
  "1359": {
      "prefix": "AddExplosionWithUserVfx",
      "body": [
          "AddExplosionWithUserVfx(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* explosionType}, ${5:Hash* explosionFx}, ${6:float* damageScale}, ${7:BOOL* isAudible}, ${8:BOOL* isInvisible}, ${9:float* cameraShake})${0}"
      ],
      "description": ""
  },
  "1360": {
      "prefix": "AddExplosion",
      "body": [
          "AddExplosion(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* explosionType}, ${5:float* damageScale}, ${6:BOOL* isAudible}, ${7:BOOL* isInvisible}, ${8:float* cameraShake})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 9: BOOL noDamage\n```\n\n```\nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.\nBOOL noDamage = false: damage || nodamage = true: no damage\n```\n\n```cpp\nenum class eExplosionTag : uint32_t\n{\n    DONTCARE = 0xFFFFFFFF,\n    GRENADE = 0,\n    GRENADELAUNCHER = 1,\n    STICKYBOMB = 2,\n    MOLOTOV = 3,\n    ROCKET = 4,\n    TANKSHELL = 5,\n    HI_OCTANE = 6,\n    CAR = 7,\n    PLANE = 8,\n    PETROL_PUMP = 9,\n    BIKE = 10,\n    DIR_STEAM = 11,\n    DIR_FLAME = 12,\n    DIR_WATER_HYDRANT = 13,\n    DIR_GAS_CANISTER = 14,\n    BOAT = 15,\n    SHIP_DESTROY = 16,\n    TRUCK = 17,\n    BULLET = 18,\n    SMOKEGRENADELAUNCHER = 19,\n    SMOKEGRENADE = 20,\n    BZGAS = 21,\n    FLARE = 22,\n    GAS_CANISTER = 23,\n    EXTINGUISHER = 24,\n    _0x988620B8 = 25,\n    EXP_TAG_TRAIN = 26,\n    EXP_TAG_BARREL = 27,\n    EXP_TAG_PROPANE = 28,\n    EXP_TAG_BLIMP = 29,\n    EXP_TAG_DIR_FLAME_EXPLODE = 30,\n    EXP_TAG_TANKER = 31,\n    PLANE_ROCKET = 32,\n    EXP_TAG_VEHICLE_BULLET = 33,\n    EXP_TAG_GAS_TANK = 34,\n    EXP_TAG_BIRD_CRAP = 35,\n    EXP_TAG_RAILGUN = 36,\n    EXP_TAG_BLIMP2 = 37,\n    EXP_TAG_FIREWORK = 38,\n    EXP_TAG_SNOWBALL = 39,\n    EXP_TAG_PROXMINE = 40,\n    EXP_TAG_VALKYRIE_CANNON = 41,\n    EXP_TAG_AIR_DEFENCE = 42,\n    EXP_TAG_PIPEBOMB = 43,\n    EXP_TAG_VEHICLEMINE = 44,\n    EXP_TAG_EXPLOSIVEAMMO = 45,\n    EXP_TAG_APCSHELL = 46,\n    EXP_TAG_BOMB_CLUSTER = 47,\n    EXP_TAG_BOMB_GAS = 48,\n    EXP_TAG_BOMB_INCENDIARY = 49,\n    EXP_TAG_BOMB_STANDARD = 50,\n    EXP_TAG_TORPEDO = 51,\n    EXP_TAG_TORPEDO_UNDERWATER = 52,\n    EXP_TAG_BOMBUSHKA_CANNON = 53,\n    EXP_TAG_BOMB_CLUSTER_SECONDARY = 54,\n    EXP_TAG_HUNTER_BARRAGE = 55,\n    EXP_TAG_HUNTER_CANNON = 56,\n    EXP_TAG_ROGUE_CANNON = 57,\n    EXP_TAG_MINE_UNDERWATER = 58,\n    EXP_TAG_ORBITAL_CANNON = 59,\n    EXP_TAG_BOMB_STANDARD_WIDE = 60,\n    EXP_TAG_EXPLOSIVEAMMO_SHOTGUN = 61,\n    EXP_TAG_OPPRESSOR2_CANNON = 62,\n    EXP_TAG_MORTAR_KINETIC = 63,\n    EXP_TAG_VEHICLEMINE_KINETIC = 64,\n    EXP_TAG_VEHICLEMINE_EMP = 65,\n    EXP_TAG_VEHICLEMINE_SPIKE = 66,\n    EXP_TAG_VEHICLEMINE_SLICK = 67,\n    EXP_TAG_VEHICLEMINE_TAR = 68,\n    EXP_TAG_SCRIPT_DRONE = 69,\n    EXP_TAG_RAYGUN = 70,\n    EXP_TAG_BURIEDMINE = 71,\n    EXP_TAG_SCRIPT_MISSILE = 72,\n    EXP_TAG_RCTANK_ROCKET = 73,\n    EXP_TAG_BOMB_WATER = 74,\n    EXP_TAG_BOMB_WATER_SECONDARY = 75,\n    _0xF728C4A9 = 76,\n    _0xBAEC056F = 77,\n    EXP_TAG_FLASHGRENADE = 78,\n    EXP_TAG_STUNGRENADE = 79,\n    _0x763D3B3B = 80,\n    EXP_TAG_SCRIPT_MISSILE_LARGE = 81,\n    EXP_TAG_SUBMARINE_BIG = 82,\n};\n```"
  },
  "1361": {
      "prefix": "AddOwnedExplosion",
      "body": [
          "AddOwnedExplosion(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* explosionType}, ${6:float* damageScale}, ${7:BOOL* isAudible}, ${8:BOOL* isInvisible}, ${9:float* cameraShake})${0}"
      ],
      "description": ""
  },
  "1362": {
      "prefix": "GetClosestFirePos",
      "body": [
          "GetClosestFirePos(${1:Vector3* outPosition}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "```\nReturns TRUE if it found something. FALSE if not.  \n```"
  },
  "1363": {
      "prefix": "GetEntityInsideExplosionSphere",
      "body": [
          "GetEntityInsideExplosionSphere(${1:int* explosionType}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1364": {
      "prefix": "GetEntityInsideExplosionArea",
      "body": [
          "GetEntityInsideExplosionArea(${1:int* explosionType}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:float* radius})${0}"
      ],
      "description": "```\nReturns a handle to the first entity within the a circle spawned inside the 2 points from a radius.\n```"
  },
  "1365": {
      "prefix": "GetNumberOfFiresInRange",
      "body": [
          "GetNumberOfFiresInRange(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "1366": {
      "prefix": "IsExplosionActiveInArea",
      "body": [
          "IsExplosionActiveInArea(${1:int* explosionType}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2})${0}"
      ],
      "description": ""
  },
  "1367": {
      "prefix": "IsExplosionInAngledArea",
      "body": [
          "IsExplosionInAngledArea(${1:int* explosionType}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:float* width})${0}"
      ],
      "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area."
  },
  "1368": {
      "prefix": "IsEntityOnFire",
      "body": [
          "IsEntityOnFire(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1369": {
      "prefix": "IsExplosionInArea",
      "body": [
          "IsExplosionInArea(${1:int* explosionType}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2})${0}"
      ],
      "description": ""
  },
  "1370": {
      "prefix": "IsExplosionInSphere",
      "body": [
          "IsExplosionInSphere(${1:int* explosionType}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius})${0}"
      ],
      "description": ""
  },
  "1371": {
      "prefix": "SetFireSpreadRate",
      "body": [
          "SetFireSpreadRate(${1:float* p0})${0}"
      ],
      "description": "SET_FIRE_\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "1372": {
      "prefix": "StartEntityFire",
      "body": [
          "StartEntityFire(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1373": {
      "prefix": "StopFireInRange",
      "body": [
          "StopFireInRange(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "1374": {
      "prefix": "RemoveScriptFire",
      "body": [
          "RemoveScriptFire(${1:FireId* fireHandle})${0}"
      ],
      "description": ""
  },
  "1375": {
      "prefix": "StartScriptFire",
      "body": [
          "StartScriptFire(${1:float* X}, ${2:float* Y}, ${3:float* Z}, ${4:int* maxChildren}, ${5:BOOL* isGasFire})${0}"
      ],
      "description": "```\nStarts a fire:  \nxyz: Location of fire  \nmaxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.  \nisGasFire: Whether or not the fire is powered by gasoline.  \n```"
  },
  "1376": {
      "prefix": "StopEntityFire",
      "body": [
          "StopEntityFire(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1377": {
      "prefix": "AddDecal",
      "body": [
          "AddDecal(${1:int* decalType}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:float* width}, ${12:float* height}, ${13:float* rCoef}, ${14:float* gCoef}, ${15:float* bCoef}, ${16:float* opacity}, ${17:float* timeout}, ${18:BOOL* p17}, ${19:BOOL* p18}, ${20:BOOL* p19})${0}"
      ],
      "description": "```\ndecal types:  \npublic enum DecalTypes  \n{  \n    splatters_blood = 1010,  \n    splatters_blood_dir = 1015,  \n    splatters_blood_mist = 1017,  \n    splatters_mud = 1020,  \n    splatters_paint = 1030,  \n    splatters_water = 1040,  \n    splatters_water_hydrant = 1050,  \n    splatters_blood2 = 1110,  \n    weapImpact_metal = 4010,  \n    weapImpact_concrete = 4020,  \n    weapImpact_mattress = 4030,  \n    weapImpact_mud = 4032,  \n    weapImpact_wood = 4050,  \n    weapImpact_sand = 4053,  \n    weapImpact_cardboard = 4040,  \n    weapImpact_melee_glass = 4100,  \n    weapImpact_glass_blood = 4102,  \n    weapImpact_glass_blood2 = 4104,  \n    weapImpact_shotgun_paper = 4200,  \n    weapImpact_shotgun_mattress,  \n    weapImpact_shotgun_metal,  \n    weapImpact_shotgun_wood,  \n    weapImpact_shotgun_dirt,  \n    weapImpact_shotgun_tvscreen,  \n    weapImpact_shotgun_tvscreen2,  \n    weapImpact_shotgun_tvscreen3,  \n    weapImpact_melee_concrete = 4310,  \n    weapImpact_melee_wood = 4312,  \n    weapImpact_melee_metal = 4314,  \n    burn1 = 4421,  \n    burn2,  \n    burn3,  \n    burn4,  \n    burn5,  \n    bang_concrete_bang = 5000,  \n    bang_concrete_bang2,  \n    bang_bullet_bang,  \n    bang_bullet_bang2 = 5004,  \n    bang_glass = 5031,  \n    bang_glass2,  \n    solidPool_water = 9000,  \n    solidPool_blood,  \n    solidPool_oil,  \n    solidPool_petrol,  \n    solidPool_mud,  \n    porousPool_water,  \n    porousPool_blood,  \n    porousPool_oil,  \n    porousPool_petrol,  \n    porousPool_mud,  \n    porousPool_water_ped_drip,  \n    liquidTrail_water = 9050  \n}  \n```"
  },
  "1378": {
      "prefix": "AddPetrolDecal",
      "body": [
          "AddPetrolDecal(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* groundLvl}, ${5:float* width}, ${6:float* transparency})${0}"
      ],
      "description": ""
  },
  "1379": {
      "prefix": "AddEntityIcon",
      "body": [
          "AddEntityIcon(${1:Entity* entity}, ${2:char* icon})${0}"
      ],
      "description": "```\nExample:  \nGRAPHICS::ADD_ENTITY_ICON(a_0, \"MP_Arrow\");  \nI tried this and nothing happened...  \n```"
  },
  "1380": {
      "prefix": "AddTcmodifierOverride",
      "body": [
          "AddTcmodifierOverride(${1:char* modifierName1}, ${2:char* modifierName2})${0}"
      ],
      "description": ""
  },
  "1381": {
      "prefix": "AnimpostfxIsRunning",
      "body": [
          "AnimpostfxIsRunning(${1:char* effectName})${0}"
      ],
      "description": "See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724)."
  },
  "1382": {
      "prefix": "AddPetrolTrailDecalInfo",
      "body": [
          "AddPetrolTrailDecalInfo(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "1383": {
      "prefix": "AnimpostfxPlay",
      "body": [
          "AnimpostfxPlay(${1:char* effectName}, ${2:int* duration}, ${3:BOOL* looped})${0}"
      ],
      "description": "```\nduration - is how long to play the effect for in milliseconds. If 0, it plays the default length\nif loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)\n```"
  },
  "1384": {
      "prefix": "AddVehicleCrewEmblem",
      "body": [
          "AddVehicleCrewEmblem(${1:Vehicle* vehicle}, ${2:Ped* ped}, ${3:int* boneIndex}, ${4:float* x1}, ${5:float* x2}, ${6:float* x3}, ${7:float* y1}, ${8:float* y2}, ${9:float* y3}, ${10:float* z1}, ${11:float* z2}, ${12:float* z3}, ${13:float* scale}, ${14:Any* p13}, ${15:int* alpha})${0}"
      ],
      "description": "```\nboneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.\n```"
  },
  "1385": {
      "prefix": "AnimpostfxStop",
      "body": [
          "AnimpostfxStop(${1:char* effectName})${0}"
      ],
      "description": "See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724)."
  },
  "1386": {
      "prefix": "AnimpostfxGetUnk",
      "body": [
          "AnimpostfxGetUnk(${1:char* effectName})${0}"
      ],
      "description": "See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724)"
  },
  "1387": {
      "prefix": "AnimpostfxStopAll",
      "body": [
          "AnimpostfxStopAll()${0}"
      ],
      "description": ""
  },
  "1388": {
      "prefix": "AnimpostfxStopAndDoUnk",
      "body": [
          "AnimpostfxStopAndDoUnk(${1:char* effectName})${0}"
      ],
      "description": "Stops the effect and sets a value (bool) in its data (+0x199) to false; See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724)."
  },
  "1389": {
      "prefix": "BeginScaleformMovieMethodOnFrontend",
      "body": [
          "BeginScaleformMovieMethodOnFrontend(${1:char* functionName})${0}"
      ],
      "description": "Starts frontend (pause menu) scaleform movie methods.\nThis can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.\n\nUse [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER`](#\\_0xB9449845F73F5E9C) for header scaleform functions."
  },
  "1390": {
      "prefix": "BeginScaleformMovieMethodOnFrontendHeader",
      "body": [
          "BeginScaleformMovieMethodOnFrontendHeader(${1:char* functionName})${0}"
      ],
      "description": "Starts frontend (pause menu) scaleform movie methods for header options.\n\nUse [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND`](#\\_0xAB58C27C2E6123C6) to customize the content inside the frontend menus."
  },
  "1391": {
      "prefix": "BeginScaleformMovieMethod",
      "body": [
          "BeginScaleformMovieMethod(${1:int* scaleform}, ${2:char* methodName})${0}"
      ],
      "description": "```\nPush a function from the Scaleform onto the stack  \n```"
  },
  "1392": {
      "prefix": "AttachTvAudioToEntity",
      "body": [
          "AttachTvAudioToEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nMight be more appropriate in AUDIO?  \n```"
  },
  "1393": {
      "prefix": "BeginScaleformScriptHudMovieMethod",
      "body": [
          "BeginScaleformScriptHudMovieMethod(${1:int* hudComponent}, ${2:char* methodName})${0}"
      ],
      "description": "```\nPushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.\nKnown components:\n19 - MP_RANK_BAR\n20 - HUD_DIRECTOR_MODE\nThis native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under \"scripts\\__Packages\\com\\rockstargames\\gtav\\hud\\hudComponents\" and \"scripts\\__Packages\\com\\rockstargames\\gtav\\Multiplayer\".\n```"
  },
  "1394": {
      "prefix": "BeginTextCommandScaleformString",
      "body": [
          "BeginTextCommandScaleformString(${1:char* componentType})${0}"
      ],
      "description": "```\nCalled prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.\nExamples:\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"NUMBER\");\nHUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRING\");\nHUD::_ADD_TEXT_COMPONENT_STRING(a_2);\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRTNM2\");\nHUD::_0x17299B63C7683A2B(v_3);\nHUD::_0x17299B63C7683A2B(v_4);\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRTNM1\");\nHUD::_0x17299B63C7683A2B(v_3);\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\n```"
  },
  "1395": {
      "prefix": "BeginTakeHighQualityPhoto",
      "body": [
          "BeginTakeHighQualityPhoto()${0}"
      ],
      "description": ""
  },
  "1396": {
      "prefix": "CallScaleformMovieMethod",
      "body": [
          "CallScaleformMovieMethod(${1:int* scaleform}, ${2:char* method})${0}"
      ],
      "description": "```\nCalls the Scaleform function.  \n```"
  },
  "1397": {
      "prefix": "BeginTakeMissionCreatorPhoto",
      "body": [
          "BeginTakeMissionCreatorPhoto()${0}"
      ],
      "description": ""
  },
  "1398": {
      "prefix": "CallScaleformMovieMethodWithString",
      "body": [
          "CallScaleformMovieMethodWithString(${1:int* scaleform}, ${2:char* methodName}, ${3:char* param1}, ${4:char* param2}, ${5:char* param3}, ${6:char* param4}, ${7:char* param5})${0}"
      ],
      "description": "```\nCalls the Scaleform function and passes the parameters as strings.  \nThe number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).  \n```"
  },
  "1399": {
      "prefix": "CallScaleformMovieMethodWithNumber",
      "body": [
          "CallScaleformMovieMethodWithNumber(${1:int* scaleform}, ${2:char* methodName}, ${3:float* param1}, ${4:float* param2}, ${5:float* param3}, ${6:float* param4}, ${7:float* param5})${0}"
      ],
      "description": "```\nCalls the Scaleform function and passes the parameters as floats.  \nThe number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.  \n```"
  },
  "1400": {
      "prefix": "CascadeShadowsEnableEntityTracker",
      "body": [
          "CascadeShadowsEnableEntityTracker(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nWhen this is set to ON, shadows only draw as you get nearer.\nWhen OFF, they draw from a further distance.\n```"
  },
  "1401": {
      "prefix": "CallScaleformMovieMethodWithNumberAndString",
      "body": [
          "CallScaleformMovieMethodWithNumberAndString(${1:int* scaleform}, ${2:char* methodName}, ${3:float* floatParam1}, ${4:float* floatParam2}, ${5:float* floatParam3}, ${6:float* floatParam4}, ${7:float* floatParam5}, ${8:char* stringParam1}, ${9:char* stringParam2}, ${10:char* stringParam3}, ${11:char* stringParam4}, ${12:char* stringParam5})${0}"
      ],
      "description": "```\nCalls the Scaleform function and passes both float and string parameters (in their respective order).  \nThe number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).  \nNOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.  \nExamples:  \n// function MY_FUNCTION(floatParam1, floatParam2, stringParam)  \nGRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, \"MY_FUNCTION\", 10.0, 20.0, -1.0, -1.0, -1.0, \"String param\", 0, 0, 0, 0);  \n// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)  \nGRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, \"MY_FUNCTION_2\", 10.0, -1.0, -1.0, -1.0, -1.0, \"String param #1\", \"String param #2\", 0, 0, 0);  \n```"
  },
  "1402": {
      "prefix": "CascadeShadowsInitSession",
      "body": [
          "CascadeShadowsInitSession()${0}"
      ],
      "description": ""
  },
  "1403": {
      "prefix": "CascadeShadowsClearShadowSampleType",
      "body": [
          "CascadeShadowsClearShadowSampleType()${0}"
      ],
      "description": ""
  },
  "1404": {
      "prefix": "CascadeShadowsSetCascadeBounds",
      "body": [
          "CascadeShadowsSetCascadeBounds(${1:Any* p0}, ${2:BOOL* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:BOOL* p6}, ${8:float* p7})${0}"
      ],
      "description": ""
  },
  "1405": {
      "prefix": "CascadeShadowsSetAircraftMode",
      "body": [
          "CascadeShadowsSetAircraftMode(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1406": {
      "prefix": "CascadeShadowsSetCascadeBoundsScale",
      "body": [
          "CascadeShadowsSetCascadeBoundsScale(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "1407": {
      "prefix": "CascadeShadowsSetDynamicDepthMode",
      "body": [
          "CascadeShadowsSetDynamicDepthMode(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1408": {
      "prefix": "CascadeShadowsSetDynamicDepthValue",
      "body": [
          "CascadeShadowsSetDynamicDepthValue(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "1409": {
      "prefix": "CascadeShadowsSetEntityTrackerScale",
      "body": [
          "CascadeShadowsSetEntityTrackerScale(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "1410": {
      "prefix": "ClearDrawOrigin",
      "body": [
          "ClearDrawOrigin()${0}"
      ],
      "description": "Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\\_0xAA0008F3BBB8F416) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\\_0xAA0008F3BBB8F416) for further information."
  },
  "1411": {
      "prefix": "CascadeShadowsSetShadowSampleType",
      "body": [
          "CascadeShadowsSetShadowSampleType(${1:char* type})${0}"
      ],
      "description": "```\nPossible values:\n\"CSM_ST_POINT\"\n\"CSM_ST_LINEAR\"\n\"CSM_ST_TWOTAP\"\n\"CSM_ST_BOX3x3\"\n\"CSM_ST_BOX4x4\"\n\"CSM_ST_DITHER2_LINEAR\"\n\"CSM_ST_CUBIC\"\n\"CSM_ST_DITHER4\"\n\"CSM_ST_DITHER16\"\n\"CSM_ST_SOFT16\"\n\"CSM_ST_DITHER16_RPDB\"\n\"CSM_ST_POISSON16_RPDB_GNORM\"\n\"CSM_ST_HIGHRES_BOX4x4\"\n\"CSM_ST_CLOUDS_SIMPLE\"\n\"CSM_ST_CLOUDS_LINEAR\"\n\"CSM_ST_CLOUDS_TWOTAP\"\n\"CSM_ST_CLOUDS_BOX3x3\"\n\"CSM_ST_CLOUDS_BOX4x4\"\n\"CSM_ST_CLOUDS_DITHER2_LINEAR\"\n\"CSM_ST_CLOUDS_SOFT16\"\n\"CSM_ST_CLOUDS_DITHER16_RPDB\"\n\"CSM_ST_CLOUDS_POISSON16_RPDB_GNORM\"\n```"
  },
  "1412": {
      "prefix": "ClearTimecycleModifier",
      "body": [
          "ClearTimecycleModifier()${0}"
      ],
      "description": ""
  },
  "1413": {
      "prefix": "ClearExtraTimecycleModifier",
      "body": [
          "ClearExtraTimecycleModifier()${0}"
      ],
      "description": "Clears the secondary timecycle modifier usually set with [`SetExtraTimecycleModifier`](#\\_0x5096FD9CCB49056D)"
  },
  "1414": {
      "prefix": "ClearTvChannelPlaylist",
      "body": [
          "ClearTvChannelPlaylist(${1:int* tvChannel})${0}"
      ],
      "description": ""
  },
  "1415": {
      "prefix": "CreateTrackedPoint",
      "body": [
          "CreateTrackedPoint()${0}"
      ],
      "description": "Creates a tracked point: useful for checking the visibility of a 3D point on screen.\n\nTracked points must be manually managed and will not be destroyed on resource stop (they are not an instance of CScriptResource). See [`DESTROY_TRACKED_POINT`](#\\_0xB25DC90BAD56CA42) and [onResourceStop](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/).\n\nOnly 64 points may be tracked at a given time."
  },
  "1416": {
      "prefix": "CreateCheckpoint",
      "body": [
          "CreateCheckpoint(${1:int* type}, ${2:float* posX1}, ${3:float* posY1}, ${4:float* posZ1}, ${5:float* posX2}, ${6:float* posY2}, ${7:float* posZ2}, ${8:float* radius}, ${9:int* red}, ${10:int* green}, ${11:int* blue}, ${12:int* alpha}, ${13:int* reserved})${0}"
      ],
      "description": "```\nCreates a checkpoint. Returns the handle of the checkpoint.  \n20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.  \nParameters:  \n* type - The type of checkpoint to create. See below for a list of checkpoint types.  \n* pos1 - The position of the checkpoint.  \n* pos2 - The position of the next checkpoint to point to.  \n* radius - The radius of the checkpoint.  \n* color - The color of the checkpoint.  \n* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.  \nCheckpoint types (prior to game build 2189):  \n0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker        \n20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker   \n25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      \n30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker   \n35-38-------Ring: Airplane Up, Left, Right, UpsideDown  \n39----------?  \n40----------Ring: just a ring  \n41----------?  \n42-44-------Cylinder w/ number (uses 'reserved' parameter)  \n45-47-------Cylinder no arrow or number  \nIf using type 42-44, reserved sets number / number and shape to display  \n0-99------------Just numbers (0-99)  \n100-109-----------------Arrow (0-9)  \n110-119------------Two arrows (0-9)  \n120-129----------Three arrows (0-9)  \n130-139----------------Circle (0-9)  \n140-149------------CycleArrow (0-9)  \n150-159----------------Circle (0-9)  \n160-169----Circle  w/ pointer (0-9)  \n170-179-------Perforated ring (0-9)  \n180-189----------------Sphere (0-9)  \n```\n\n[Checkpoint Types](https://docs.fivem.net/docs/game-references/checkpoints/) as of game build 2189"
  },
  "1417": {
      "prefix": "DestroyTrackedPoint",
      "body": [
          "DestroyTrackedPoint(${1:int* point})${0}"
      ],
      "description": ""
  },
  "1418": {
      "prefix": "DeleteCheckpoint",
      "body": [
          "DeleteCheckpoint(${1:int* checkpoint})${0}"
      ],
      "description": ""
  },
  "1419": {
      "prefix": "DisableScreenblurFade",
      "body": [
          "DisableScreenblurFade()${0}"
      ],
      "description": ""
  },
  "1420": {
      "prefix": "DisableOcclusionThisFrame",
      "body": [
          "DisableOcclusionThisFrame()${0}"
      ],
      "description": ""
  },
  "1421": {
      "prefix": "DisableVehicleDistantlights",
      "body": [
          "DisableVehicleDistantlights(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1422": {
      "prefix": "DisableScriptAmbientEffects",
      "body": [
          "DisableScriptAmbientEffects(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1423": {
      "prefix": "DoesVehicleHaveCrewEmblem",
      "body": [
          "DoesVehicleHaveCrewEmblem(${1:Vehicle* vehicle}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "1424": {
      "prefix": "DoesParticleFxLoopedExist",
      "body": [
          "DoesParticleFxLoopedExist(${1:int* ptfxHandle})${0}"
      ],
      "description": ""
  },
  "1425": {
      "prefix": "DrawBox",
      "body": [
          "DrawBox(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* red}, ${8:int* green}, ${9:int* blue}, ${10:int* alpha})${0}"
      ],
      "description": "```\nx,y,z = start pos  \nx2,y2,z2 = end pos  \nDraw's a 3D Box between the two x,y,z coords.  \n--------------  \nKeep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawBox(a As Vector3, b As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawBox(Vector3 a, Vector3 b, Color col)  \n{  \n    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);  \n}  \n```"
  },
  "1426": {
      "prefix": "DontRenderInGameUi",
      "body": [
          "DontRenderInGameUi(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1427": {
      "prefix": "DrawBinkMovie",
      "body": [
          "DrawBinkMovie(${1:int* binkMovie}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:int* r}, ${8:int* g}, ${9:int* b}, ${10:int* a})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1428": {
      "prefix": "DrawDebugCross",
      "body": [
          "DrawDebugCross(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* size}, ${5:int* red}, ${6:int* green}, ${7:int* blue}, ${8:int* alpha})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1429": {
      "prefix": "DrawDebugBox",
      "body": [
          "DrawDebugBox(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* r}, ${8:int* g}, ${9:int* b}, ${10:int* a})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1430": {
      "prefix": "DrawDebugLineWithTwoColours",
      "body": [
          "DrawDebugLineWithTwoColours(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* r1}, ${8:int* g1}, ${9:int* b1}, ${10:int* r2}, ${11:int* g2}, ${12:int* b2}, ${13:int* alpha1}, ${14:int* alpha2})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1431": {
      "prefix": "DrawDebugText",
      "body": [
          "DrawDebugText(${1:char* text}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* red}, ${6:int* green}, ${7:int* blue}, ${8:int* alpha})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1432": {
      "prefix": "DrawDebugLine",
      "body": [
          "DrawDebugLine(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* r}, ${8:int* g}, ${9:int* b}, ${10:int* a})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1433": {
      "prefix": "DrawDebugText2d",
      "body": [
          "DrawDebugText2d(${1:char* text}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* red}, ${6:int* green}, ${7:int* blue}, ${8:int* alpha})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1434": {
      "prefix": "DrawDebugSphere",
      "body": [
          "DrawDebugSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* red}, ${6:int* green}, ${7:int* blue}, ${8:int* alpha})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1435": {
      "prefix": "DrawInteractiveSprite",
      "body": [
          "DrawInteractiveSprite(${1:char* textureDict}, ${2:char* textureName}, ${3:float* screenX}, ${4:float* screenY}, ${5:float* width}, ${6:float* height}, ${7:float* heading}, ${8:int* red}, ${9:int* green}, ${10:int* blue}, ${11:int* alpha})${0}"
      ],
      "description": "Similar to [\\_DRAW_SPRITE](#\\_0xE7FFAE5EBF23D890), but seems to be some kind of \"interactive\" sprite, at least used by render targets.\nThese seem to be the only dicts ever requested by this native:\n\n```\nprop_screen_biker_laptop\nProp_Screen_GR_Disruption\nProp_Screen_TaleOfUs\nprop_screen_nightclub\nProp_Screen_IE_Adhawk\nprop_screen_sm_free_trade_shipping\nprop_screen_hacker_truck\nMPDesktop\nProp_Screen_Nightclub\nAnd a few others\n```"
  },
  "1436": {
      "prefix": "DrawLightWithRange",
      "body": [
          "DrawLightWithRange(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:int* colorR}, ${5:int* colorG}, ${6:int* colorB}, ${7:float* range}, ${8:float* intensity})${0}"
      ],
      "description": ""
  },
  "1437": {
      "prefix": "DrawLightWithRangeAndShadow",
      "body": [
          "DrawLightWithRangeAndShadow(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* r}, ${5:int* g}, ${6:int* b}, ${7:float* range}, ${8:float* intensity}, ${9:float* shadow})${0}"
      ],
      "description": ""
  },
  "1438": {
      "prefix": "DrawLine",
      "body": [
          "DrawLine(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* red}, ${8:int* green}, ${9:int* blue}, ${10:int* alpha})${0}"
      ],
      "description": "```\nDraws a depth-tested line from one point to another.\n----------------\nx1, y1, z1 : Coordinates for the first point\nx2, y2, z2 : Coordinates for the second point\nr, g, b, alpha : Color with RGBA-Values\nI recommend using a predefined function to call this.\n[VB.NET]\nPublic Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)\n    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)\nEnd Sub\n[C#]\npublic void DrawLine(Vector3 from, Vector3 to, Color col)\n{\n    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);\n}\n```"
  },
  "1439": {
      "prefix": "DrawLowQualityPhotoToPhone",
      "body": [
          "DrawLowQualityPhotoToPhone(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1440": {
      "prefix": "DrawMarker2",
      "body": [
          "DrawMarker2(${1:int* type}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* dirX}, ${6:float* dirY}, ${7:float* dirZ}, ${8:float* rotX}, ${9:float* rotY}, ${10:float* rotZ}, ${11:float* scaleX}, ${12:float* scaleY}, ${13:float* scaleZ}, ${14:int* red}, ${15:int* green}, ${16:int* blue}, ${17:int* alpha}, ${18:BOOL* bobUpAndDown}, ${19:BOOL* faceCamera}, ${20:int* p19}, ${21:BOOL* rotate}, ${22:char* textureDict}, ${23:char* textureName}, ${24:BOOL* drawOnEnts}, ${25:BOOL* p24})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 26: BOOL p25\n```"
  },
  "1441": {
      "prefix": "DrawMarker",
      "body": [
          "DrawMarker(${1:int* type}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* dirX}, ${6:float* dirY}, ${7:float* dirZ}, ${8:float* rotX}, ${9:float* rotY}, ${10:float* rotZ}, ${11:float* scaleX}, ${12:float* scaleY}, ${13:float* scaleZ}, ${14:int* red}, ${15:int* green}, ${16:int* blue}, ${17:int* alpha}, ${18:BOOL* bobUpAndDown}, ${19:BOOL* faceCamera}, ${20:int* p19}, ${21:BOOL* rotate}, ${22:char* textureDict}, ${23:char* textureName}, ${24:BOOL* drawOnEnts})${0}"
      ],
      "description": "Draws a marker with the specified appearance at the target location. This has to be called every frame, e.g. in a `Wait(0)` loop.\n\nThere's a [list of markers](https://docs.fivem.net/game-references/markers/) on the FiveM documentation site."
  },
  "1442": {
      "prefix": "DrawRect",
      "body": [
          "DrawRect(${1:float* x}, ${2:float* y}, ${3:float* width}, ${4:float* height}, ${5:int* r}, ${6:int* g}, ${7:int* b}, ${8:int* a})${0}"
      ],
      "description": "```\nDraws a rectangle on the screen.  \n-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)  \n-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)  \n-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)  \n-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)  \n-R: Red part of the color. (0-255)  \n-G: Green part of the color. (0-255)  \n-B: Blue part of the color. (0-255)  \n-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)  \nThe total number of rectangles to be drawn in one frame is apparently limited to 399.  \n```\n\n```\nNativeDB Added Parameter 9: BOOL p8\n```"
  },
  "1443": {
      "prefix": "DrawPoly",
      "body": [
          "DrawPoly(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* x3}, ${8:float* y3}, ${9:float* z3}, ${10:int* red}, ${11:int* green}, ${12:int* blue}, ${13:int* alpha})${0}"
      ],
      "description": "```\nx/y/z - Location of a vertex (in world coords), presumably.  \n----------------  \nx1, y1, z1     : Coordinates for the first point  \nx2, y2, z2     : Coordinates for the second point  \nx3, y3, z3     : Coordinates for the third point  \nr, g, b, alpha : Color with RGBA-Values  \nKeep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).  \nBut be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)  \n{  \n    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);  \n}  \nBTW: Intersecting triangles are not supported: They overlap in the order they were called.  \n```"
  },
  "1444": {
      "prefix": "DrawScaleformMovieFullscreen",
      "body": [
          "DrawScaleformMovieFullscreen(${1:int* scaleform}, ${2:int* red}, ${3:int* green}, ${4:int* blue}, ${5:int* alpha}, ${6:int* unk})${0}"
      ],
      "description": "```\nunk is not used so no need  \n```"
  },
  "1445": {
      "prefix": "DrawScaleformMovie",
      "body": [
          "DrawScaleformMovie(${1:int* scaleformHandle}, ${2:float* x}, ${3:float* y}, ${4:float* width}, ${5:float* height}, ${6:int* red}, ${7:int* green}, ${8:int* blue}, ${9:int* alpha}, ${10:int* unk})${0}"
      ],
      "description": ""
  },
  "1446": {
      "prefix": "DrawScaleformMovieFullscreenMasked",
      "body": [
          "DrawScaleformMovieFullscreenMasked(${1:int* scaleform1}, ${2:int* scaleform2}, ${3:int* red}, ${4:int* green}, ${5:int* blue}, ${6:int* alpha})${0}"
      ],
      "description": ""
  },
  "1447": {
      "prefix": "DrawScaleformMovie3d",
      "body": [
          "DrawScaleformMovie3d(${1:int* scaleform}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:float* p7}, ${9:float* sharpness}, ${10:float* p9}, ${11:float* scaleX}, ${12:float* scaleY}, ${13:float* scaleZ}, ${14:Any* p13})${0}"
      ],
      "description": ""
  },
  "1448": {
      "prefix": "DrawScaleformMovie3dSolid",
      "body": [
          "DrawScaleformMovie3dSolid(${1:int* scaleform}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:float* scaleX}, ${12:float* scaleY}, ${13:float* scaleZ}, ${14:Any* p13})${0}"
      ],
      "description": ""
  },
  "1449": {
      "prefix": "DrawSphere",
      "body": [
          "DrawSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* r}, ${6:int* g}, ${7:int* b}, ${8:float* opacity})${0}"
      ],
      "description": "Draws a 3D sphere, typically seen in the GTA:O freemode event \"Penned In\".\n\nExample [image](https://imgur.com/nCbtS4H):\n\n```lua\nDrawSphere(35.45, 172.66, 126.22, 1.0, 0, 0, 255, 0.2)\n```"
  },
  "1450": {
      "prefix": "DrawSpotLight",
      "body": [
          "DrawSpotLight(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* dirX}, ${5:float* dirY}, ${6:float* dirZ}, ${7:int* colorR}, ${8:int* colorG}, ${9:int* colorB}, ${10:float* distance}, ${11:float* brightness}, ${12:float* hardness}, ${13:float* radius}, ${14:float* falloff})${0}"
      ],
      "description": "```\nParameters:  \n* pos - coordinate where the spotlight is located  \n* dir - the direction vector the spotlight should aim at from its current position  \n* r,g,b - color of the spotlight  \n* distance - the maximum distance the light can reach  \n* brightness - the brightness of the light  \n* roundness - \"smoothness\" of the circle edge  \n* radius - the radius size of the spotlight  \n* falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)  \nExample in C# (spotlight aims at the closest vehicle):  \nVector3 myPos = Game.Player.Character.Position;  \nVehicle nearest = World.GetClosestVehicle(myPos , 1000f);  \nVector3 destinationCoords = nearest.Position;  \nVector3 dirVector = destinationCoords - myPos;  \ndirVector.Normalize();  \nFunction.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);  \n```"
  },
  "1451": {
      "prefix": "DrawShowroom",
      "body": [
          "DrawShowroom(${1:char* p0}, ${2:Ped* ped}, ${3:int* p2}, ${4:float* posX}, ${5:float* posY}, ${6:float* posZ})${0}"
      ],
      "description": "```\nIt's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A  \np0 was always \"CELEBRATION_WINNER\"  \n```"
  },
  "1452": {
      "prefix": "DrawSpotLightWithShadow",
      "body": [
          "DrawSpotLightWithShadow(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* dirX}, ${5:float* dirY}, ${6:float* dirZ}, ${7:int* colorR}, ${8:int* colorG}, ${9:int* colorB}, ${10:float* distance}, ${11:float* brightness}, ${12:float* roundness}, ${13:float* radius}, ${14:float* falloff}, ${15:int* shadowId})${0}"
      ],
      "description": ""
  },
  "1453": {
      "prefix": "DrawSprite",
      "body": [
          "DrawSprite(${1:char* textureDict}, ${2:char* textureName}, ${3:float* screenX}, ${4:float* screenY}, ${5:float* width}, ${6:float* height}, ${7:float* heading}, ${8:int* red}, ${9:int* green}, ${10:int* blue}, ${11:int* alpha})${0}"
      ],
      "description": "```\nDraws a 2D sprite on the screen.  \nParameters:  \ntextureDict - Name of texture dictionary to load texture from (e.g. \"CommonMenu\", \"MPWeaponsCommon\", etc.)  \ntextureName - Name of texture to load from texture dictionary (e.g. \"last_team_standing_icon\", \"tennis_icon\", etc.)  \nscreenX/Y - Screen offset (0.5 = center)  \nscaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)  \nheading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees  \nred,green,blue - Sprite color (default = 255/255/255)  \nalpha - opacity level  \n```\n\n```\nNativeDB Added Parameter 12: BOOL p11\n```"
  },
  "1454": {
      "prefix": "DrawSpritePoly2",
      "body": [
          "DrawSpritePoly2(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* x3}, ${8:float* y3}, ${9:float* z3}, ${10:float* red1}, ${11:float* green1}, ${12:float* blue1}, ${13:int* alpha1}, ${14:float* red2}, ${15:float* green2}, ${16:float* blue2}, ${17:int* alpha2}, ${18:float* red3}, ${19:float* green3}, ${20:float* blue3}, ${21:int* alpha3}, ${22:char* textureDict}, ${23:char* textureName}, ${24:float* u1}, ${25:float* v1}, ${26:float* w1}, ${27:float* u2}, ${28:float* v2}, ${29:float* w2}, ${30:float* u3}, ${31:float* v3}, ${32:float* w3})${0}"
      ],
      "description": "Used for drawling Deadline trailing lights, see deadline.ytd\n\nEach vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.\n\nFor UVW mapping (u,v,w parameters), reference your favourite internet resource for more details."
  },
  "1455": {
      "prefix": "DrawSpritePoly",
      "body": [
          "DrawSpritePoly(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* x3}, ${8:float* y3}, ${9:float* z3}, ${10:int* red}, ${11:int* green}, ${12:int* blue}, ${13:int* alpha}, ${14:char* textureDict}, ${15:char* textureName}, ${16:float* u1}, ${17:float* v1}, ${18:float* w1}, ${19:float* u2}, ${20:float* v2}, ${21:float* w2}, ${22:float* u3}, ${23:float* v3}, ${24:float* w3})${0}"
      ],
      "description": "Used for drawling Deadline trailing lights, see deadline.ytd\n\nFor UVW mapping (u,v,w parameters), reference your favourite internet resource for more details."
  },
  "1456": {
      "prefix": "DrawTvChannel",
      "body": [
          "DrawTvChannel(${1:float* xPos}, ${2:float* yPos}, ${3:float* xScale}, ${4:float* yScale}, ${5:float* rotation}, ${6:int* red}, ${7:int* green}, ${8:int* blue}, ${9:int* alpha})${0}"
      ],
      "description": "```\nAll calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.\n\"act_cinema.ysc\", line 1483:\nHUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);\nHUD::SET_TEXT_RENDER_ID(l_AE);\nGRAPHICS::_0x61BB1D9B3A95D802(4);\nGRAPHICS::_0xC6372ECD45D73BCD(1);\nif (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {\n    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);\n} else {\n    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);\n}\n\"am_mp_property_int.ysc\", line 102545:\nif (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {\n    if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {\n        HUD::SET_TEXT_RENDER_ID(a_2._f1);\n        GRAPHICS::_0x61BB1D9B3A95D802(4);\n        GRAPHICS::_0xC6372ECD45D73BCD(1);\n        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);\n        if (GRAPHICS::GET_TV_CHANNEL() == -1) {\n            sub_a8fa5(a_2, 1);\n        } else {\n            sub_a8fa5(a_2, 1);\n            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);\n        }\n        HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());\n    }\n}\n```"
  },
  "1457": {
      "prefix": "EnableClownBloodVfx",
      "body": [
          "EnableClownBloodVfx(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nCreates cartoon effect when Michel smokes the weed  \n```"
  },
  "1458": {
      "prefix": "DrawSpriteUv",
      "body": [
          "DrawSpriteUv(${1:char* textureDict}, ${2:char* textureName}, ${3:float* x}, ${4:float* y}, ${5:float* width}, ${6:float* height}, ${7:float* u1}, ${8:float* v1}, ${9:float* u2}, ${10:float* v2}, ${11:float* heading}, ${12:int* red}, ${13:int* green}, ${14:int* blue}, ${15:int* alpha})${0}"
      ],
      "description": "Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.\nu1, v1 - texture coordinates for the top-left corner\nu2, v2 - texture coordinates for the bottom-right corner\n\n```\nNativeDB Introduced: v1868\n```"
  },
  "1459": {
      "prefix": "EnableMovieKeyframeWait",
      "body": [
          "EnableMovieKeyframeWait(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1460": {
      "prefix": "EnableAlienBloodVfx",
      "body": [
          "EnableAlienBloodVfx(${1:BOOL* toggle})${0}"
      ],
      "description": "Creates a motion-blur sort of effect, this native does not seem to work, however by using the [`START_SCREEN_EFFECT`](#\\_0x2206BF9A37B7F724) native with `\"DrugsMichaelAliensFight\"` as the effect parameter, you should be able to get the effect.\n\nThis native does not seem to work, however by using the [START_SCREEN_EFFECT](https://runtime.fivem.net/doc/natives/#\\_0x2206BF9A37B7F724) native with \"DrugsMichaelAliensFight\" as the effect parameter, you should be able to get the effect."
  },
  "1461": {
      "prefix": "EndPetrolTrailDecals",
      "body": [
          "EndPetrolTrailDecals()${0}"
      ],
      "description": ""
  },
  "1462": {
      "prefix": "EnableMovieSubtitles",
      "body": [
          "EnableMovieSubtitles(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1463": {
      "prefix": "EndScaleformMovieMethodReturnValue",
      "body": [
          "EndScaleformMovieMethodReturnValue()${0}"
      ],
      "description": ""
  },
  "1464": {
      "prefix": "EndScaleformMovieMethod",
      "body": [
          "EndScaleformMovieMethod()${0}"
      ],
      "description": "```\nPops and calls the Scaleform function on the stack  \n```"
  },
  "1465": {
      "prefix": "EndTextCommandScaleformString",
      "body": [
          "EndTextCommandScaleformString()${0}"
      ],
      "description": ""
  },
  "1466": {
      "prefix": "EndTextCommandScaleformString2",
      "body": [
          "EndTextCommandScaleformString2()${0}"
      ],
      "description": "```\nSame as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.\n```"
  },
  "1467": {
      "prefix": "FadeUpPedLight",
      "body": [
          "FadeUpPedLight(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "1468": {
      "prefix": "FadeDecalsInRange",
      "body": [
          "FadeDecalsInRange(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:float* duration})${0}"
      ],
      "description": ""
  },
  "1469": {
      "prefix": "ForceRenderInGameUi",
      "body": [
          "ForceRenderInGameUi(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1470": {
      "prefix": "FreeMemoryForHighQualityPhoto",
      "body": [
          "FreeMemoryForHighQualityPhoto()${0}"
      ],
      "description": ""
  },
  "1471": {
      "prefix": "GetActiveScreenResolution",
      "body": [
          "GetActiveScreenResolution(${1:int* x}, ${2:int* y})${0}"
      ],
      "description": "```\nReturns current screen resolution.  \n```"
  },
  "1472": {
      "prefix": "FreeMemoryForLowQualityPhoto",
      "body": [
          "FreeMemoryForLowQualityPhoto()${0}"
      ],
      "description": ""
  },
  "1473": {
      "prefix": "GetAspectRatio",
      "body": [
          "GetAspectRatio(${1:BOOL* b})${0}"
      ],
      "description": ""
  },
  "1474": {
      "prefix": "FreeMemoryForMissionCreatorPhoto",
      "body": [
          "FreeMemoryForMissionCreatorPhoto()${0}"
      ],
      "description": ""
  },
  "1475": {
      "prefix": "GetCurrentNumberOfCloudPhotos",
      "body": [
          "GetCurrentNumberOfCloudPhotos()${0}"
      ],
      "description": ""
  },
  "1476": {
      "prefix": "GetBinkMovieTime",
      "body": [
          "GetBinkMovieTime(${1:int* binkMovie})${0}"
      ],
      "description": "In percentage: 0.0 - 100.0\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "1477": {
      "prefix": "GetDecalWashLevel",
      "body": [
          "GetDecalWashLevel(${1:int* decal})${0}"
      ],
      "description": ""
  },
  "1478": {
      "prefix": "GetIsHidef",
      "body": [
          "GetIsHidef()${0}"
      ],
      "description": "```\nfalse = Any resolution < 1280x720  \ntrue = Any resolution >= 1280x720  \n```"
  },
  "1479": {
      "prefix": "GetExtraTimecycleModifierIndex",
      "body": [
          "GetExtraTimecycleModifierIndex()${0}"
      ],
      "description": "See [`GET_TIMECYCLE_MODIFIER_INDEX`](#\\_0xFDF3D97C674AFB66) for use, works the same just for the secondary timecycle modifier."
  },
  "1480": {
      "prefix": "GetIsPetrolDecalInRange",
      "body": [
          "GetIsPetrolDecalInRange(${1:float* xCoord}, ${2:float* yCoord}, ${3:float* zCoord}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "1481": {
      "prefix": "GetIsWidescreen",
      "body": [
          "GetIsWidescreen()${0}"
      ],
      "description": "```\nSetting Aspect Ratio Manually in game will return:  \nfalse - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )  \ntrue - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )  \nSetting Aspect Ratio to \"Auto\" in game will return \"false\" or \"true\" based on the actual set Resolution Ratio.  \n```"
  },
  "1482": {
      "prefix": "GetMaximumNumberOfPhotos",
      "body": [
          "GetMaximumNumberOfPhotos()${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 0.\n```"
  },
  "1483": {
      "prefix": "GetMaximumNumberOfCloudPhotos",
      "body": [
          "GetMaximumNumberOfCloudPhotos()${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 96.\n```"
  },
  "1484": {
      "prefix": "GetRequestingnightvision",
      "body": [
          "GetRequestingnightvision()${0}"
      ],
      "description": ""
  },
  "1485": {
      "prefix": "GetSafeZoneSize",
      "body": [
          "GetSafeZoneSize()${0}"
      ],
      "description": "```\nGets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.  \n```"
  },
  "1486": {
      "prefix": "GetScaleformMovieMethodReturnValueBool",
      "body": [
          "GetScaleformMovieMethodReturnValueBool(${1:int* methodReturn})${0}"
      ],
      "description": "```\nmethodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE\n```"
  },
  "1487": {
      "prefix": "GetScaleformMovieMethodReturnValueInt",
      "body": [
          "GetScaleformMovieMethodReturnValueInt(${1:int* method_return})${0}"
      ],
      "description": "Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string."
  },
  "1488": {
      "prefix": "GetScreenCoordFromWorldCoord",
      "body": [
          "GetScreenCoordFromWorldCoord(${1:float* worldX}, ${2:float* worldY}, ${3:float* worldZ}, ${4:float* screenX}, ${5:float* screenY})${0}"
      ],
      "description": "```\nConvert a world coordinate into its relative screen coordinate.  (WorldToScreen)\nReturns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.\nFor .NET users...\nVB:\nPublic Shared Function World3DToScreen2d(pos as vector3) As Vector2\n        Dim x2dp, y2dp As New Native.OutputArgument\n        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)\n        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))\n\n    End Function\nC#:\nVector2 World3DToScreen2d(Vector3 pos)\n    {\n        var x2dp = new OutputArgument();\n        var y2dp = new OutputArgument();\n        Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);\n        return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());\n    }\n//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.\nUsed to be called _WORLD3D_TO_SCREEN2D\nI thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.\n```"
  },
  "1489": {
      "prefix": "GetScaleformMovieMethodReturnValueString",
      "body": [
          "GetScaleformMovieMethodReturnValueString(${1:int* method_return})${0}"
      ],
      "description": "Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int."
  },
  "1490": {
      "prefix": "GetScreenResolution",
      "body": [
          "GetScreenResolution(${1:int* x}, ${2:int* y})${0}"
      ],
      "description": "Hardcoded to always return 1280x720. Use [`_GET_ACTIVE_SCREEN_RESOLUTION`](?\\_0x873C9F3104101DD3) to retrieve the correct screen resolution."
  },
  "1491": {
      "prefix": "GetScreenblurFadeCurrentTime",
      "body": [
          "GetScreenblurFadeCurrentTime()${0}"
      ],
      "description": ""
  },
  "1492": {
      "prefix": "GetStatusOfLoadMissionCreatorPhoto",
      "body": [
          "GetStatusOfLoadMissionCreatorPhoto(${1:char* p0})${0}"
      ],
      "description": ""
  },
  "1493": {
      "prefix": "GetScriptGfxPosition",
      "body": [
          "GetScriptGfxPosition(${1:float* x}, ${2:float* y}, ${3:float* calculatedX}, ${4:float* calculatedY})${0}"
      ],
      "description": "Calculates the effective X/Y fractions when applying the values set by `SET_SCRIPT_GFX_ALIGN` and\n`SET_SCRIPT_GFX_ALIGN_PARAMS`."
  },
  "1494": {
      "prefix": "GetStatusOfSortedListOperation",
      "body": [
          "GetStatusOfSortedListOperation(${1:BOOL* p0})${0}"
      ],
      "description": "```\n3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.\nappcamera, appmedia, and cellphone_controller.\n```"
  },
  "1495": {
      "prefix": "GetStatusOfSaveHighQualityPhoto",
      "body": [
          "GetStatusOfSaveHighQualityPhoto()${0}"
      ],
      "description": ""
  },
  "1496": {
      "prefix": "GetStatusOfTakeHighQualityPhoto",
      "body": [
          "GetStatusOfTakeHighQualityPhoto()${0}"
      ],
      "description": ""
  },
  "1497": {
      "prefix": "GetTextureResolution",
      "body": [
          "GetTextureResolution(${1:char* textureDict}, ${2:char* textureName})${0}"
      ],
      "description": "```\nReturns the texture resolution of the passed texture dict+name.  \nNote: Most texture resolutions are doubled compared to the console version of the game.  \n```"
  },
  "1498": {
      "prefix": "GetStatusOfTakeMissionCreatorPhoto",
      "body": [
          "GetStatusOfTakeMissionCreatorPhoto()${0}"
      ],
      "description": ""
  },
  "1499": {
      "prefix": "GetTimecycleModifierIndex",
      "body": [
          "GetTimecycleModifierIndex()${0}"
      ],
      "description": "```\nOnly use for this in the PC scripts is:\nif (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)\nFor a full list, see here: pastebin.com/cnk7FTF2\n```"
  },
  "1500": {
      "prefix": "GetTogglePausedRenderphasesStatus",
      "body": [
          "GetTogglePausedRenderphasesStatus()${0}"
      ],
      "description": ""
  },
  "1501": {
      "prefix": "GetTvVolume",
      "body": [
          "GetTvVolume()${0}"
      ],
      "description": ""
  },
  "1502": {
      "prefix": "GetTimecycleTransitionModifierIndex",
      "body": [
          "GetTimecycleTransitionModifierIndex()${0}"
      ],
      "description": ""
  },
  "1503": {
      "prefix": "GetTvChannel",
      "body": [
          "GetTvChannel()${0}"
      ],
      "description": ""
  },
  "1504": {
      "prefix": "GolfTrailGetMaxHeight",
      "body": [
          "GolfTrailGetMaxHeight()${0}"
      ],
      "description": ""
  },
  "1505": {
      "prefix": "GetUsingnightvision",
      "body": [
          "GetUsingnightvision()${0}"
      ],
      "description": ""
  },
  "1506": {
      "prefix": "GolfTrailGetVisualControlPoint",
      "body": [
          "GolfTrailGetVisualControlPoint(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "1507": {
      "prefix": "GetUsingseethrough",
      "body": [
          "GetUsingseethrough()${0}"
      ],
      "description": ""
  },
  "1508": {
      "prefix": "GolfTrailSetEnabled",
      "body": [
          "GolfTrailSetEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1509": {
      "prefix": "GolfTrailSetFacing",
      "body": [
          "GolfTrailSetFacing(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1510": {
      "prefix": "GetVehicleCrewEmblemRequestState",
      "body": [
          "GetVehicleCrewEmblemRequestState(${1:Vehicle* vehicle}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "1511": {
      "prefix": "GolfTrailSetColour",
      "body": [
          "GolfTrailSetColour(${1:int* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3}, ${5:int* p4}, ${6:int* p5}, ${7:int* p6}, ${8:int* p7}, ${9:int* p8}, ${10:int* p9}, ${11:int* p10}, ${12:int* p11})${0}"
      ],
      "description": ""
  },
  "1512": {
      "prefix": "GolfTrailSetFixedControlPoint",
      "body": [
          "GolfTrailSetFixedControlPoint(${1:int* type}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:float* p4}, ${6:int* red}, ${7:int* green}, ${8:int* blue}, ${9:int* alpha})${0}"
      ],
      "description": "```\n12 matches across 4 scripts. All 4 scripts were job creators.\ntype ranged from 0 - 2.\np4 was always 0.2f. Likely scale.\nassuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).\nTested but noticed nothing.\n```"
  },
  "1513": {
      "prefix": "GolfTrailSetRadius",
      "body": [
          "GolfTrailSetRadius(${1:float* p0}, ${2:float* p1}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "1514": {
      "prefix": "GrassLodResetScriptAreas",
      "body": [
          "GrassLodResetScriptAreas()${0}"
      ],
      "description": ""
  },
  "1515": {
      "prefix": "GolfTrailSetPath",
      "body": [
          "GolfTrailSetPath(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\np8 seems to always be false.  \n```"
  },
  "1516": {
      "prefix": "GrassLodShrinkScriptAreas",
      "body": [
          "GrassLodShrinkScriptAreas(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6})${0}"
      ],
      "description": "```\nWraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?\n```"
  },
  "1517": {
      "prefix": "HasScaleformMovieFilenameLoaded",
      "body": [
          "HasScaleformMovieFilenameLoaded(${1:char* scaleformName})${0}"
      ],
      "description": "```\nOnly values used in the scripts are:\n\"heist_mp\"\n\"heistmap_mp\"\n\"instructional_buttons\"\n\"heist_pre\"\n```"
  },
  "1518": {
      "prefix": "GolfTrailSetShaderParams",
      "body": [
          "GolfTrailSetShaderParams(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4})${0}"
      ],
      "description": "```\nOnly appeared in Golf & Golf_mp. Parameters were all ptrs  \n```"
  },
  "1519": {
      "prefix": "GolfTrailSetTessellation",
      "body": [
          "GolfTrailSetTessellation(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "1520": {
      "prefix": "HasScaleformMovieLoaded",
      "body": [
          "HasScaleformMovieLoaded(${1:int* scaleformHandle})${0}"
      ],
      "description": ""
  },
  "1521": {
      "prefix": "HasScaleformContainerMovieLoadedIntoParent",
      "body": [
          "HasScaleformContainerMovieLoadedIntoParent(${1:int* scaleformHandle})${0}"
      ],
      "description": ""
  },
  "1522": {
      "prefix": "HasScaleformScriptHudMovieLoaded",
      "body": [
          "HasScaleformScriptHudMovieLoaded(${1:int* hudComponent})${0}"
      ],
      "description": ""
  },
  "1523": {
      "prefix": "HasStreamedTextureDictLoaded",
      "body": [
          "HasStreamedTextureDictLoaded(${1:char* textureDict})${0}"
      ],
      "description": ""
  },
  "1524": {
      "prefix": "IsDecalAlive",
      "body": [
          "IsDecalAlive(${1:int* decal})${0}"
      ],
      "description": ""
  },
  "1525": {
      "prefix": "IsScaleformMovieMethodReturnValueReady",
      "body": [
          "IsScaleformMovieMethodReturnValueReady(${1:int* method_return})${0}"
      ],
      "description": "methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE\nReturns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT)."
  },
  "1526": {
      "prefix": "IsPlaylistUnk",
      "body": [
          "IsPlaylistUnk(${1:int* tvChannel}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "1527": {
      "prefix": "IsScreenblurFadeRunning",
      "body": [
          "IsScreenblurFadeRunning()${0}"
      ],
      "description": "```\nReturns whether screen transition to blur/from blur is running.\n```"
  },
  "1528": {
      "prefix": "IsTrackedPointVisible",
      "body": [
          "IsTrackedPointVisible(${1:int* point})${0}"
      ],
      "description": ""
  },
  "1529": {
      "prefix": "LoadMissionCreatorPhoto",
      "body": [
          "LoadMissionCreatorPhoto(${1:char* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "1530": {
      "prefix": "LoadMovieMeshSet",
      "body": [
          "LoadMovieMeshSet(${1:char* movieMeshSetName})${0}"
      ],
      "description": ""
  },
  "1531": {
      "prefix": "IsTvPlaylistItemPlaying",
      "body": [
          "IsTvPlaylistItemPlaying(${1:Hash* videoCliphash})${0}"
      ],
      "description": "```\nIS_*\n```"
  },
  "1532": {
      "prefix": "MoveVehicleDecals",
      "body": [
          "MoveVehicleDecals(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "1533": {
      "prefix": "OverrideInteriorSmokeEnd",
      "body": [
          "OverrideInteriorSmokeEnd()${0}"
      ],
      "description": ""
  },
  "1534": {
      "prefix": "OverrideInteriorSmokeName",
      "body": [
          "OverrideInteriorSmokeName(${1:char* name})${0}"
      ],
      "description": ""
  },
  "1535": {
      "prefix": "OverrideInteriorSmokeLevel",
      "body": [
          "OverrideInteriorSmokeLevel(${1:float* level})${0}"
      ],
      "description": ""
  },
  "1536": {
      "prefix": "OverridePedBadgeTexture",
      "body": [
          "OverridePedBadgeTexture(${1:Ped* ped}, ${2:char* txd}, ${3:char* txn})${0}"
      ],
      "description": "```\nOverriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.\n```"
  },
  "1537": {
      "prefix": "PlayBinkMovie",
      "body": [
          "PlayBinkMovie(${1:int* binkMovie})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1538": {
      "prefix": "PatchDecalDiffuseMap",
      "body": [
          "PatchDecalDiffuseMap(${1:int* decalType}, ${2:char* textureDict}, ${3:char* textureName})${0}"
      ],
      "description": "```\nREQUEST_STREAMED_TEXTURE_DICT(\"MPOnMissMarkers\", false);  \n*uParam0.f_809 = add_decal(9120, vParam1, vVar4, vVar7, 2f, 2f, to_float(iVar0) / 255f, to_float(iVar1) / 255f, to_float(iVar2) / 255f, 1f, -1f, 1, 0, 0);  \nPATCH_DECAL_DIFFUSE_MAP(9120, \"MPOnMissMarkers\", \"Capture_The_Flag_Base_Icon\");  \n```"
  },
  "1539": {
      "prefix": "PopTimecycleModifier",
      "body": [
          "PopTimecycleModifier()${0}"
      ],
      "description": ""
  },
  "1540": {
      "prefix": "PresetInteriorAmbientCache",
      "body": [
          "PresetInteriorAmbientCache(${1:char* timecycleModifierName})${0}"
      ],
      "description": "```\nOnly one match in the scripts:\nGRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE(\"int_carrier_hanger\");\n```"
  },
  "1541": {
      "prefix": "PushTimecycleModifier",
      "body": [
          "PushTimecycleModifier()${0}"
      ],
      "description": ""
  },
  "1542": {
      "prefix": "QueryMovieMeshSetState",
      "body": [
          "QueryMovieMeshSetState(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1543": {
      "prefix": "RegisterNoirScreenEffectThisFrame",
      "body": [
          "RegisterNoirScreenEffectThisFrame()${0}"
      ],
      "description": "Used with 'NG_filmnoir_BW{01,02}' timecycles and the \"NOIR_FILTER_SOUNDS\" audioref."
  },
  "1544": {
      "prefix": "ReleaseMovieMeshSet",
      "body": [
          "ReleaseMovieMeshSet(${1:int* movieMeshSet})${0}"
      ],
      "description": ""
  },
  "1545": {
      "prefix": "RemoveDecalsFromObject",
      "body": [
          "RemoveDecalsFromObject(${1:Object* obj})${0}"
      ],
      "description": ""
  },
  "1546": {
      "prefix": "ReleaseBinkMovie",
      "body": [
          "ReleaseBinkMovie(${1:int* binkMovie})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1547": {
      "prefix": "RemoveDecalsFromVehicle",
      "body": [
          "RemoveDecalsFromVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "1548": {
      "prefix": "RemoveDecal",
      "body": [
          "RemoveDecal(${1:int* decal})${0}"
      ],
      "description": ""
  },
  "1549": {
      "prefix": "RemoveDecalsFromObjectFacing",
      "body": [
          "RemoveDecalsFromObjectFacing(${1:Object* obj}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "1550": {
      "prefix": "RemoveDecalsInRange",
      "body": [
          "RemoveDecalsInRange(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* range})${0}"
      ],
      "description": "```\nRemoves all decals in range from a position, it includes the bullet holes, blood pools, petrol...  \n```"
  },
  "1551": {
      "prefix": "RemoveParticleFxFromEntity",
      "body": [
          "RemoveParticleFxFromEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1552": {
      "prefix": "RemoveParticleFxInRange",
      "body": [
          "RemoveParticleFxInRange(${1:float* X}, ${2:float* Y}, ${3:float* Z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "1553": {
      "prefix": "RemoveParticleFx",
      "body": [
          "RemoveParticleFx(${1:int* ptfxHandle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1554": {
      "prefix": "RemoveScaleformScriptHudMovie",
      "body": [
          "RemoveScaleformScriptHudMovie(${1:int* hudComponent})${0}"
      ],
      "description": ""
  },
  "1555": {
      "prefix": "RemoveTcmodifierOverride",
      "body": [
          "RemoveTcmodifierOverride(${1:char* p0})${0}"
      ],
      "description": ""
  },
  "1556": {
      "prefix": "RemoveVehicleCrewEmblem",
      "body": [
          "RemoveVehicleCrewEmblem(${1:Vehicle* vehicle}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "1557": {
      "prefix": "RequestScaleformMovieInteractive",
      "body": [
          "RequestScaleformMovieInteractive(${1:char* scaleformName})${0}"
      ],
      "description": "```\nSimilar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of \"interactive\" scaleform movie?  \nThese seem to be the only scaleforms ever requested by this native:  \n\"breaking_news\"  \n\"desktop_pc\"  \n\"ECG_MONITOR\"  \n\"Hacking_PC\"  \n\"TEETH_PULLING\"  \nNote: Unless this hash is out-of-order, this native is next-gen only.  \n```"
  },
  "1558": {
      "prefix": "RequestScaleformMovie",
      "body": [
          "RequestScaleformMovie(${1:char* scaleformName})${0}"
      ],
      "description": ""
  },
  "1559": {
      "prefix": "RequestScaleformMovieInstance",
      "body": [
          "RequestScaleformMovieInstance(${1:char* scaleformName})${0}"
      ],
      "description": ""
  },
  "1560": {
      "prefix": "RequestScaleformMovie2",
      "body": [
          "RequestScaleformMovie2(${1:char* scaleformName})${0}"
      ],
      "description": "Another [REQUEST_SCALEFORM_MOVIE](#\\_0x11FE353CF9733E6F) equivalent."
  },
  "1561": {
      "prefix": "RequestScaleformScriptHudMovie",
      "body": [
          "RequestScaleformScriptHudMovie(${1:int* hudComponent})${0}"
      ],
      "description": ""
  },
  "1562": {
      "prefix": "RequestStreamedTextureDict",
      "body": [
          "RequestStreamedTextureDict(${1:char* textureDict}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nThis function can requests texture dictonaries from following RPFs:\nscaleform_generic.rpf\nscaleform_minigames.rpf\nscaleform_minimap.rpf\nscaleform_web.rpf\nlast param isnt a toggle\n```"
  },
  "1563": {
      "prefix": "ResetExtraTimecycleModifierStrength",
      "body": [
          "ResetExtraTimecycleModifierStrength()${0}"
      ],
      "description": "Resets the extra timecycle modifier strength normally set with [`SetExtraTimecycleModifierStrength`](#\\_0x2C328AF17210F009)"
  },
  "1564": {
      "prefix": "ResetParticleFxOverride",
      "body": [
          "ResetParticleFxOverride(${1:char* name})${0}"
      ],
      "description": "```\nResets the effect of SET_PARTICLE_FX_OVERRIDE\n```"
  },
  "1565": {
      "prefix": "ResetScriptGfxAlign",
      "body": [
          "ResetScriptGfxAlign()${0}"
      ],
      "description": "This function resets the alignment set using `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS` to the default\nvalues ('I', 'I'; 0, 0, 0, 0). This should be used after having used the aforementioned functions in order to not affect\nany other scripts attempting to draw."
  },
  "1566": {
      "prefix": "ResetPausedRenderphases",
      "body": [
          "ResetPausedRenderphases()${0}"
      ],
      "description": ""
  },
  "1567": {
      "prefix": "SaveHighQualityPhoto",
      "body": [
          "SaveHighQualityPhoto(${1:int* unused})${0}"
      ],
      "description": ""
  },
  "1568": {
      "prefix": "ScaleformMovieMethodAddParamFloat",
      "body": [
          "ScaleformMovieMethodAddParamFloat(${1:float* value})${0}"
      ],
      "description": "```\nPushes a float for the Scaleform function onto the stack.  \n```"
  },
  "1569": {
      "prefix": "ReturnTwo",
      "body": [
          "ReturnTwo(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "1570": {
      "prefix": "ScaleformMovieMethodAddParamBool",
      "body": [
          "ScaleformMovieMethodAddParamBool(${1:BOOL* value})${0}"
      ],
      "description": "```\nPushes a boolean for the Scaleform function onto the stack.  \n```"
  },
  "1571": {
      "prefix": "ScaleformMovieMethodAddParamPlayerNameString",
      "body": [
          "ScaleformMovieMethodAddParamPlayerNameString(${1:char* string})${0}"
      ],
      "description": "```\nThis method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like \"INSTRUCTIONAL_BUTTONS\").  \nWhen switching with a controller, the icons update and become the controller's icons.  \n```"
  },
  "1572": {
      "prefix": "ScaleformMovieMethodAddParamInt",
      "body": [
          "ScaleformMovieMethodAddParamInt(${1:int* value})${0}"
      ],
      "description": "```\nPushes an integer for the Scaleform function onto the stack.  \n```"
  },
  "1573": {
      "prefix": "ScaleformMovieMethodAddParamLatestBriefString",
      "body": [
          "ScaleformMovieMethodAddParamLatestBriefString(${1:int* value})${0}"
      ],
      "description": ""
  },
  "1574": {
      "prefix": "ScaleformMovieMethodAddParamTextureNameString",
      "body": [
          "ScaleformMovieMethodAddParamTextureNameString(${1:char* string})${0}"
      ],
      "description": ""
  },
  "1575": {
      "prefix": "ScaleformMovieMethodAddParamTextureNameString2",
      "body": [
          "ScaleformMovieMethodAddParamTextureNameString2(${1:char* string})${0}"
      ],
      "description": "GRAPHICS::\\_0x77FE3402004CD1B0(HUD::\\_GET_LABEL_TEXT(\"YACHT_GSY\"));\nGRAPHICS::\\_0x77FE3402004CD1B0(PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID()));\n\nBoth \\_0xBA7148484BD90365 / \\_0x77FE3402004CD1B0 works, but \\_0x77FE3402004CD1B0 is usually used for \"name\" (organisation, players..)."
  },
  "1576": {
      "prefix": "SeethroughGetMaxThickness",
      "body": [
          "SeethroughGetMaxThickness()${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1577": {
      "prefix": "SeethroughSetColorNear",
      "body": [
          "SeethroughSetColorNear(${1:int* red}, ${2:int* green}, ${3:int* blue})${0}"
      ],
      "description": ""
  },
  "1578": {
      "prefix": "SeethroughReset",
      "body": [
          "SeethroughReset()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "1579": {
      "prefix": "SeethroughSetFadeStartDistance",
      "body": [
          "SeethroughSetFadeStartDistance(${1:float* distance})${0}"
      ],
      "description": ""
  },
  "1580": {
      "prefix": "SeethroughSetFadeEndDistance",
      "body": [
          "SeethroughSetFadeEndDistance(${1:float* distance})${0}"
      ],
      "description": ""
  },
  "1581": {
      "prefix": "SeethroughSetHeatscale",
      "body": [
          "SeethroughSetHeatscale(${1:int* index}, ${2:float* heatScale})${0}"
      ],
      "description": ""
  },
  "1582": {
      "prefix": "SeethroughSetHiLightIntensity",
      "body": [
          "SeethroughSetHiLightIntensity(${1:float* intensity})${0}"
      ],
      "description": ""
  },
  "1583": {
      "prefix": "SeethroughSetHiLightNoise",
      "body": [
          "SeethroughSetHiLightNoise(${1:float* noise})${0}"
      ],
      "description": ""
  },
  "1584": {
      "prefix": "SeethroughSetNoiseAmountMax",
      "body": [
          "SeethroughSetNoiseAmountMax(${1:float* amount})${0}"
      ],
      "description": ""
  },
  "1585": {
      "prefix": "SeethroughSetMaxThickness",
      "body": [
          "SeethroughSetMaxThickness(${1:float* thickness})${0}"
      ],
      "description": ""
  },
  "1586": {
      "prefix": "SetArtificialLightsState",
      "body": [
          "SetArtificialLightsState(${1:BOOL* state})${0}"
      ],
      "description": "Does not affect weapons, particles, fire/explosions, flashlights or the sun.\n\nWhen set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.\n\nUsed in Humane Labs Heist for EMP."
  },
  "1587": {
      "prefix": "SeethroughSetNoiseAmountMin",
      "body": [
          "SeethroughSetNoiseAmountMin(${1:float* amount})${0}"
      ],
      "description": ""
  },
  "1588": {
      "prefix": "SetBackfaceculling",
      "body": [
          "SetBackfaceculling(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1589": {
      "prefix": "SetArtificialLightsStateAffectsVehicles",
      "body": [
          "SetArtificialLightsStateAffectsVehicles(${1:BOOL* toggle})${0}"
      ],
      "description": "If \"blackout\" is enabled, this native allows you to ignore \"blackout\" for vehicles.\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "1590": {
      "prefix": "SetBinkMovie",
      "body": [
          "SetBinkMovie(${1:char* name})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1591": {
      "prefix": "SetBinkMovieUnk2",
      "body": [
          "SetBinkMovieUnk2(${1:int* binkMovie}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "1592": {
      "prefix": "SetBinkMovieTime",
      "body": [
          "SetBinkMovieTime(${1:int* binkMovie}, ${2:float* progress})${0}"
      ],
      "description": "```\nIn percentage: 0.0 - 100.0\n\nNativeDB Introduced: v1290\n```"
  },
  "1593": {
      "prefix": "SetCheckpointCylinderHeight",
      "body": [
          "SetCheckpointCylinderHeight(${1:int* checkpoint}, ${2:float* nearHeight}, ${3:float* farHeight}, ${4:float* radius})${0}"
      ],
      "description": "```\nSets the cylinder height of the checkpoint.  \nParameters:  \n* nearHeight - The height of the checkpoint when inside of the radius.  \n* farHeight - The height of the checkpoint when outside of the radius.  \n* radius - The radius of the checkpoint.  \n```"
  },
  "1594": {
      "prefix": "SetBinkMovieVolume",
      "body": [
          "SetBinkMovieVolume(${1:int* binkMovie}, ${2:float* value})${0}"
      ],
      "description": "```\nbinkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)\n```\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "1595": {
      "prefix": "SetBinkShouldSkip",
      "body": [
          "SetBinkShouldSkip(${1:int* binkMovie}, ${2:BOOL* shouldSkip})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1596": {
      "prefix": "SetCheckpointIconScale",
      "body": [
          "SetCheckpointIconScale(${1:int* checkpoint}, ${2:float* scale})${0}"
      ],
      "description": ""
  },
  "1597": {
      "prefix": "SetCheckpointRgba2",
      "body": [
          "SetCheckpointRgba2(${1:int* checkpoint}, ${2:int* red}, ${3:int* green}, ${4:int* blue}, ${5:int* alpha})${0}"
      ],
      "description": "```\nSets the checkpoint icon color.\n```"
  },
  "1598": {
      "prefix": "SetCheckpointRgba",
      "body": [
          "SetCheckpointRgba(${1:int* checkpoint}, ${2:int* red}, ${3:int* green}, ${4:int* blue}, ${5:int* alpha})${0}"
      ],
      "description": "```\nSets the checkpoint color.  \n```"
  },
  "1599": {
      "prefix": "SetCurrentPlayerTcmodifier",
      "body": [
          "SetCurrentPlayerTcmodifier(${1:char* modifierName})${0}"
      ],
      "description": ""
  },
  "1600": {
      "prefix": "SetCheckpointScale",
      "body": [
          "SetCheckpointScale(${1:int* checkpoint}, ${2:float* p0})${0}"
      ],
      "description": "```\np0 - Scale? Looks to be a normalized value (0.0 - 1.0)\noffroad_races.c4, line ~67407:\na_3._f7 = GRAPHICS::CREATE_CHECKPOINT(v_D, v_A, a_4, a_7, v_E, v_F, v_10, sub_62b2(v_A, 220, 255), 0);\nHUD::GET_HUD_COLOUR(134, &v_E, &v_F, &v_10, &v_11);\nGRAPHICS::_SET_CHECKPOINT_ICON_RGBA(a_3._f7, v_E, v_F, v_10, sub_62b2(v_A, 70, 210));\nGRAPHICS::_4B5B4DA5D79F1943(a_3._f7, 0.95);\nGRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(a_3._f7, 4.0, 4.0, 100.0);\n```"
  },
  "1601": {
      "prefix": "SetDebugLinesAndSpheresDrawingActive",
      "body": [
          "SetDebugLinesAndSpheresDrawingActive(${1:BOOL* enabled})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "1602": {
      "prefix": "SetDisableDecalRenderingThisFrame",
      "body": [
          "SetDisableDecalRenderingThisFrame()${0}"
      ],
      "description": ""
  },
  "1603": {
      "prefix": "SetDrawOrigin",
      "body": [
          "SetDrawOrigin(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Any* p3})${0}"
      ],
      "description": "Sets the on-screen drawing origin for draw-functions in world coordinates.\n\nThe effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\\_0xFF0B610F6BE0D7AF) and is limited to 32 different origins each frame."
  },
  "1604": {
      "prefix": "SetEntityIconVisibility",
      "body": [
          "SetEntityIconVisibility(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1605": {
      "prefix": "SetEntityIconColor",
      "body": [
          "SetEntityIconColor(${1:Entity* entity}, ${2:int* red}, ${3:int* green}, ${4:int* blue}, ${5:int* alpha})${0}"
      ],
      "description": ""
  },
  "1606": {
      "prefix": "SetExtraTimecycleModifier",
      "body": [
          "SetExtraTimecycleModifier(${1:char* modifierName})${0}"
      ],
      "description": ""
  },
  "1607": {
      "prefix": "SetFlash",
      "body": [
          "SetFlash(${1:float* p0}, ${2:float* p1}, ${3:float* fadeIn}, ${4:float* duration}, ${5:float* fadeOut})${0}"
      ],
      "description": "```\nPurpose of p0 and p1 unknown.  \n```"
  },
  "1608": {
      "prefix": "SetExtraTimecycleModifierStrength",
      "body": [
          "SetExtraTimecycleModifierStrength(${1:float* strength})${0}"
      ],
      "description": "The same as [`SetTimecycleModifierStrength`](#\\_0x82E7FFCD5B2326B3) but for the secondary tiemcycle modifier."
  },
  "1609": {
      "prefix": "SetForceVehicleTrails",
      "body": [
          "SetForceVehicleTrails(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nForces vehicle trails on all surfaces.\nUSE_/USING_*\n```"
  },
  "1610": {
      "prefix": "SetNextPlayerTcmodifier",
      "body": [
          "SetNextPlayerTcmodifier(${1:char* modifierName})${0}"
      ],
      "description": ""
  },
  "1611": {
      "prefix": "SetForcePedFootstepsTracks",
      "body": [
          "SetForcePedFootstepsTracks(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nForces footstep tracks on all surfaces.\nUSE_/USING_*\n```"
  },
  "1612": {
      "prefix": "SetHidofOverride",
      "body": [
          "SetHidofOverride(${1:BOOL* p0}, ${2:BOOL* p1}, ${3:float* nearplaneOut}, ${4:float* nearplaneIn}, ${5:float* farplaneOut}, ${6:float* farplaneIn})${0}"
      ],
      "description": ""
  },
  "1613": {
      "prefix": "SetNightvision",
      "body": [
          "SetNightvision(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nEnables Night Vision.  \nExample:  \nC#: Function.Call(Hash.SET_NIGHTVISION, true);  \nC++: GRAPHICS::SET_NIGHTVISION(true);  \nBOOL toggle:  \ntrue = turns night vision on for your player.  \nfalse = turns night vision off for your player.  \n```"
  },
  "1614": {
      "prefix": "SetNoiseoveride",
      "body": [
          "SetNoiseoveride(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1615": {
      "prefix": "SetNoisinessoveride",
      "body": [
          "SetNoisinessoveride(${1:float* value})${0}"
      ],
      "description": ""
  },
  "1616": {
      "prefix": "SetParticleFxCamInsideVehicle",
      "body": [
          "SetParticleFxCamInsideVehicle(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1617": {
      "prefix": "SetParticleFxBulletImpactScale",
      "body": [
          "SetParticleFxBulletImpactScale(${1:float* scale})${0}"
      ],
      "description": ""
  },
  "1618": {
      "prefix": "SetParticleFxLoopedColour",
      "body": [
          "SetParticleFxLoopedColour(${1:int* ptfxHandle}, ${2:float* r}, ${3:float* g}, ${4:float* b}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nonly works on some fx's  \np4 = 0  \n```"
  },
  "1619": {
      "prefix": "SetParticleFxLoopedEvolution",
      "body": [
          "SetParticleFxLoopedEvolution(${1:int* ptfxHandle}, ${2:char* propertyName}, ${3:float* amount}, ${4:BOOL* noNetwork})${0}"
      ],
      "description": ""
  },
  "1620": {
      "prefix": "SetParticleFxCamInsideNonplayerVehicle",
      "body": [
          "SetParticleFxCamInsideNonplayerVehicle(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1621": {
      "prefix": "SetParticleFxLoopedFarClipDist",
      "body": [
          "SetParticleFxLoopedFarClipDist(${1:int* ptfxHandle}, ${2:float* range})${0}"
      ],
      "description": ""
  },
  "1622": {
      "prefix": "SetParticleFxLoopedAlpha",
      "body": [
          "SetParticleFxLoopedAlpha(${1:int* ptfxHandle}, ${2:float* alpha})${0}"
      ],
      "description": ""
  },
  "1623": {
      "prefix": "SetParticleFxLoopedScale",
      "body": [
          "SetParticleFxLoopedScale(${1:int* ptfxHandle}, ${2:float* scale})${0}"
      ],
      "description": ""
  },
  "1624": {
      "prefix": "SetParticleFxNonLoopedColour",
      "body": [
          "SetParticleFxNonLoopedColour(${1:float* r}, ${2:float* g}, ${3:float* b})${0}"
      ],
      "description": "only works on some fx's, not networked"
  },
  "1625": {
      "prefix": "SetParticleFxShootoutBoat",
      "body": [
          "SetParticleFxShootoutBoat(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "1626": {
      "prefix": "SetParticleFxLoopedOffsets",
      "body": [
          "SetParticleFxLoopedOffsets(${1:int* ptfxHandle}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ})${0}"
      ],
      "description": ""
  },
  "1627": {
      "prefix": "SetPlayerTcmodifierTransition",
      "body": [
          "SetPlayerTcmodifierTransition(${1:float* value})${0}"
      ],
      "description": ""
  },
  "1628": {
      "prefix": "SetParticleFxNonLoopedAlpha",
      "body": [
          "SetParticleFxNonLoopedAlpha(${1:float* alpha})${0}"
      ],
      "description": "```\nUsage example for C#:  \nFunction.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });  \n\t\tNote: the argument alpha ranges from 0.0f-1.0f !  \n```"
  },
  "1629": {
      "prefix": "SetScaleformFitRendertarget",
      "body": [
          "SetScaleformFitRendertarget(${1:int* scaleformHandle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "This native is used in some casino scripts to fit the scaleform in the rendertarget."
  },
  "1630": {
      "prefix": "SetParticleFxOverride",
      "body": [
          "SetParticleFxOverride(${1:char* oldAsset}, ${2:char* newAsset})${0}"
      ],
      "description": ""
  },
  "1631": {
      "prefix": "SetScaleformMovieAsNoLongerNeeded",
      "body": [
          "SetScaleformMovieAsNoLongerNeeded(${1:int* scaleformHandle})${0}"
      ],
      "description": ""
  },
  "1632": {
      "prefix": "SetScriptGfxAlign",
      "body": [
          "SetScriptGfxAlign(${1:int* horizontalAlign}, ${2:int* verticalAlign})${0}"
      ],
      "description": "This function anchors script draws to a side of the safe zone. This needs to be called to make the interface\nindependent of the player's safe zone configuration.\n\nThese values are equivalent to `alignX` and `alignY` in `common:/data/ui/frontend.xml`, which can be used as a baseline\nfor default alignment.\n\nValid values for `horizontalAlign`, from original documentation:\n\n*   **C (67)** - Center: DRAW_TEXT starts in the middle of the screen, while DRAW_RECT starts on the right; both move with\n    the right side of the screen.\n*   **L (76)** - Left: Anchors to the left side, DRAW_RECT starts on the left side of the screen, same as DRAW_TEXT when\n    centered.\n*   **R (82)** - Right: DRAW_TEXT starts on the left side (normal 0,0), while DRAW_RECT starts some short distance away\n    from the right side of the screen, both move with the right side of the screen.\n\nValid values for `verticalAlign`, from original documentation:\n\n*   **B (66)** - Bottom: DRAW_RECT starts about as far as the middle of the map from the bottom, while DRAW_TEXT is about\n    rather centered.\n*   **C (67)** - Center: It starts at a certain distance from the bottom, but the distance is fixed, the distance is\n    different from 66.\n*   **T (84)** - Top: Anchors to the top, DRAW_RECT starts on the top of the screen, DRAW_TEXT just below it.\n\nUsing any other value (including 0) will result in the safe zone not being taken into account for this draw. The\ncanonical value for this is 'I' (73).\n\nFor example, you can use `SET_SCRIPT_GFX_ALIGN(0, 84)` to only scale on the Y axis (to the top), but not change the X\naxis.\n\nTo reset the value, use `RESET_SCRIPT_GFX_ALIGN`."
  },
  "1633": {
      "prefix": "SetScaleformMovieToUseSystemTime",
      "body": [
          "SetScaleformMovieToUseSystemTime(${1:int* scaleform}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1634": {
      "prefix": "SetScriptGfxAlignParams",
      "body": [
          "SetScriptGfxAlignParams(${1:float* x}, ${2:float* y}, ${3:float* w}, ${4:float* h})${0}"
      ],
      "description": "Sets the draw offset/calculated size for `SET_SCRIPT_GFX_ALIGN`. If using any alignment other than left/top, the game\nexpects the width/height to be configured using this native in order to get a proper starting position for the draw\ncommand."
  },
  "1635": {
      "prefix": "SetScriptGfxDrawBehindPausemenu",
      "body": [
          "SetScriptGfxDrawBehindPausemenu(${1:BOOL* flag})${0}"
      ],
      "description": "Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target."
  },
  "1636": {
      "prefix": "SetScriptGfxDrawOrder",
      "body": [
          "SetScriptGfxDrawOrder(${1:int* order})${0}"
      ],
      "description": "Sets the draw order for script draw commands.\nExamples from decompiled scripts:\nGRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);\nGRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v\\_4, v\\_5, v\\_6, a\\_0.\\_f172, 0);\nGRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);\nGRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);"
  },
  "1637": {
      "prefix": "SetSeethrough",
      "body": [
          "SetSeethrough(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles Heatvision on/off.  \n```"
  },
  "1638": {
      "prefix": "SetStreamedTextureDictAsNoLongerNeeded",
      "body": [
          "SetStreamedTextureDictAsNoLongerNeeded(${1:char* textureDict})${0}"
      ],
      "description": ""
  },
  "1639": {
      "prefix": "SetTimecycleModifierStrength",
      "body": [
          "SetTimecycleModifierStrength(${1:float* strength})${0}"
      ],
      "description": ""
  },
  "1640": {
      "prefix": "SetTimecycleModifier",
      "body": [
          "SetTimecycleModifier(${1:char* modifierName})${0}"
      ],
      "description": "```\nLoads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. \"timecycle_mods_1.xml\")\nParameters:\nmodifierName - The modifier to load (e.g. \"V_FIB_IT3\", \"scanline_cam\", etc.)\n```"
  },
  "1641": {
      "prefix": "SetTrackedPointInfo",
      "body": [
          "SetTrackedPointInfo(${1:int* point}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius})${0}"
      ],
      "description": ""
  },
  "1642": {
      "prefix": "SetTransitionTimecycleModifier",
      "body": [
          "SetTransitionTimecycleModifier(${1:char* modifierName}, ${2:float* transition})${0}"
      ],
      "description": ""
  },
  "1643": {
      "prefix": "SetTvAudioFrontend",
      "body": [
          "SetTvAudioFrontend(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nProbably changes tvs from being a 3d audio to being \"global\" audio\n```"
  },
  "1644": {
      "prefix": "SetTvChannel",
      "body": [
          "SetTvChannel(${1:int* channel})${0}"
      ],
      "description": ""
  },
  "1645": {
      "prefix": "SetTvChannelPlaylistAtHour",
      "body": [
          "SetTvChannelPlaylistAtHour(${1:int* tvChannel}, ${2:char* playlistName}, ${3:int* hour})${0}"
      ],
      "description": ""
  },
  "1646": {
      "prefix": "StartNetworkedParticleFxLoopedOnEntity",
      "body": [
          "StartNetworkedParticleFxLoopedOnEntity(${1:char* effectName}, ${2:Entity* entity}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:float* scale}, ${10:BOOL* xAxis}, ${11:BOOL* yAxis}, ${12:BOOL* zAxis})${0}"
      ],
      "description": "```\nnetwork fx  \n```\n\n```\nNativeDB Added Parameter 13: Any p12\nNativeDB Added Parameter 14: Any p13\nNativeDB Added Parameter 15: Any p14\nNativeDB Added Parameter 16: Any p15\n```"
  },
  "1647": {
      "prefix": "SetTvChannelPlaylist",
      "body": [
          "SetTvChannelPlaylist(${1:int* tvChannel}, ${2:char* playlistName}, ${3:BOOL* restart})${0}"
      ],
      "description": "Loads specified video sequence into the TV Channel\nTV_Channel ranges from 0-2\nVideoSequence can be any of the following:\n\"PL_STD_CNT\" CNT Standard Channel\n\"PL_STD_WZL\" Weazel Standard Channel\n\"PL_LO_CNT\"\n\"PL_LO_WZL\"\n\"PL_SP_WORKOUT\"\n\"PL_SP_INV\" - Jay Norris Assassination Mission Fail\n\"PL_SP_INV_EXP\" - Jay Norris Assassination Mission Success\n\"PL_LO_RS\" - Righteous Slaughter Ad\n\"PL_LO_RS_CUTSCENE\" - Righteous Slaughter Cut-scene\n\"PL_SP_PLSH1\\_INTRO\"\n\"PL_LES1\\_FAME_OR_SHAME\"\n\"PL_STD_WZL_FOS_EP2\"\n\"PL_MP_WEAZEL\" - Weazel Logo on loop\n\"PL_MP_CCTV\" - Generic CCTV loop\nRestart:\n0=video sequence continues as normal\n1=sequence restarts from beginning every time that channel is selected\nThe above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).\nhttps://pastebin.com/zUzGB6h7"
  },
  "1648": {
      "prefix": "StartNetworkedParticleFxNonLoopedAtCoord",
      "body": [
          "StartNetworkedParticleFxNonLoopedAtCoord(${1:char* effectName}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:float* xRot}, ${6:float* yRot}, ${7:float* zRot}, ${8:float* scale}, ${9:BOOL* xAxis}, ${10:BOOL* yAxis}, ${11:BOOL* zAxis})${0}"
      ],
      "description": "```\nnetwork fx  \n```\n\n```\nNativeDB Added Parameter 12: BOOL p11\n```"
  },
  "1649": {
      "prefix": "SetTvVolume",
      "body": [
          "SetTvVolume(${1:float* volume})${0}"
      ],
      "description": ""
  },
  "1650": {
      "prefix": "StartNetworkedParticleFxNonLoopedOnEntity",
      "body": [
          "StartNetworkedParticleFxNonLoopedOnEntity(${1:char* effectName}, ${2:Entity* entity}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* rotX}, ${7:float* rotY}, ${8:float* rotZ}, ${9:float* scale}, ${10:BOOL* axisX}, ${11:BOOL* axisY}, ${12:BOOL* axisZ})${0}"
      ],
      "description": ""
  },
  "1651": {
      "prefix": "StartNetworkedParticleFxLoopedOnEntityBone",
      "body": [
          "StartNetworkedParticleFxLoopedOnEntityBone(${1:char* effectName}, ${2:Entity* entity}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:int* boneIndex}, ${10:float* scale}, ${11:BOOL* xAxis}, ${12:BOOL* yAxis}, ${13:BOOL* zAxis})${0}"
      ],
      "description": "```\nnetwork fx  \n```\n\n```\nNativeDB Added Parameter 14: Any p13\nNativeDB Added Parameter 15: Any p14\nNativeDB Added Parameter 16: Any p15\nNativeDB Added Parameter 17: Any p16\n```"
  },
  "1652": {
      "prefix": "StartNetworkedParticleFxNonLoopedOnEntityBone",
      "body": [
          "StartNetworkedParticleFxNonLoopedOnEntityBone(${1:char* effectName}, ${2:Entity* entity}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* rotX}, ${7:float* rotY}, ${8:float* rotZ}, ${9:int* boneIndex}, ${10:float* scale}, ${11:BOOL* axisX}, ${12:BOOL* axisY}, ${13:BOOL* axisZ})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "1653": {
      "prefix": "StartParticleFxLoopedAtCoord",
      "body": [
          "StartParticleFxLoopedAtCoord(${1:char* effectName}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* xRot}, ${6:float* yRot}, ${7:float* zRot}, ${8:float* scale}, ${9:BOOL* xAxis}, ${10:BOOL* yAxis}, ${11:BOOL* zAxis}, ${12:BOOL* p11})${0}"
      ],
      "description": "```\nGRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(\"scr_fbi_falling_debris\", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)  \np11 seems to be always 0  \n```"
  },
  "1654": {
      "prefix": "StartParticleFxLoopedOnEntity",
      "body": [
          "StartParticleFxLoopedOnEntity(${1:char* effectName}, ${2:Entity* entity}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:float* scale}, ${10:BOOL* xAxis}, ${11:BOOL* yAxis}, ${12:BOOL* zAxis})${0}"
      ],
      "description": ""
  },
  "1655": {
      "prefix": "StartNetworkedParticleFxNonLoopedOnPedBone",
      "body": [
          "StartNetworkedParticleFxNonLoopedOnPedBone(${1:char* effectName}, ${2:Ped* ped}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* rotX}, ${7:float* rotY}, ${8:float* rotZ}, ${9:int* boneIndex}, ${10:float* scale}, ${11:BOOL* axisX}, ${12:BOOL* axisY}, ${13:BOOL* axisZ})${0}"
      ],
      "description": ""
  },
  "1656": {
      "prefix": "StartParticleFxLoopedOnEntityBone",
      "body": [
          "StartParticleFxLoopedOnEntityBone(${1:char* effectName}, ${2:Entity* entity}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:int* boneIndex}, ${10:float* scale}, ${11:BOOL* xAxis}, ${12:BOOL* yAxis}, ${13:BOOL* zAxis})${0}"
      ],
      "description": ""
  },
  "1657": {
      "prefix": "StartParticleFxLoopedOnPedBone",
      "body": [
          "StartParticleFxLoopedOnPedBone(${1:char* effectName}, ${2:Ped* ped}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:int* boneIndex}, ${10:float* scale}, ${11:BOOL* xAxis}, ${12:BOOL* yAxis}, ${13:BOOL* zAxis})${0}"
      ],
      "description": ""
  },
  "1658": {
      "prefix": "StartParticleFxNonLoopedAtCoord",
      "body": [
          "StartParticleFxNonLoopedAtCoord(${1:char* effectName}, ${2:float* xPos}, ${3:float* yPos}, ${4:float* zPos}, ${5:float* xRot}, ${6:float* yRot}, ${7:float* zRot}, ${8:float* scale}, ${9:BOOL* xAxis}, ${10:BOOL* yAxis}, ${11:BOOL* zAxis})${0}"
      ],
      "description": "```\nGRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(\"scr_paleto_roof_impact\", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);  \nAxis - Invert Axis Flags  \nlist: pastebin.com/N9unUFWY  \n-------------------------------------------------------------------  \nC#  \nFunction.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.  \nchar *effectname = This is an in-game effect name, for e.g. \"scr_fbi4_trucks_crash\" is used to give the effects when truck crashes etc  \nfloat x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates  \nfloat xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.  \nfloat scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f  \nbool xaxis, yaxis, zaxis = To bool the axis values.  \nexample:  \nFunction.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, \"scr_fbi4_trucks_crash\", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);  \n```"
  },
  "1659": {
      "prefix": "StartParticleFxNonLoopedOnEntity",
      "body": [
          "StartParticleFxNonLoopedOnEntity(${1:char* effectName}, ${2:Entity* entity}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* rotX}, ${7:float* rotY}, ${8:float* rotZ}, ${9:float* scale}, ${10:BOOL* axisX}, ${11:BOOL* axisY}, ${12:BOOL* axisZ})${0}"
      ],
      "description": "```\nStarts a particle effect on an entity for example your player.  \nList: pastebin.com/N9unUFWY  \nExample:  \nC#:  \nFunction.Call(Hash.REQUEST_NAMED_PTFX_ASSET, \"scr_rcbarry2\");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, \"scr_rcbarry2\");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, \"scr_clown_appears\", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);  \nInternally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE  \nhowever it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native  \n```"
  },
  "1660": {
      "prefix": "StartParticleFxNonLoopedOnPedBone",
      "body": [
          "StartParticleFxNonLoopedOnPedBone(${1:char* effectName}, ${2:Ped* ped}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* rotX}, ${7:float* rotY}, ${8:float* rotZ}, ${9:int* boneIndex}, ${10:float* scale}, ${11:BOOL* axisX}, ${12:BOOL* axisY}, ${13:BOOL* axisZ})${0}"
      ],
      "description": "```\nGRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(\"scr_sh_bong_smoke\", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);  \nAxis - Invert Axis Flags  \nlist: pastebin.com/N9unUFWY  \n```"
  },
  "1661": {
      "prefix": "StopBinkMovie",
      "body": [
          "StopBinkMovie(${1:int* binkMovie})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1662": {
      "prefix": "StartPetrolTrailDecals",
      "body": [
          "StartPetrolTrailDecals(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "1663": {
      "prefix": "StopParticleFxLooped",
      "body": [
          "StopParticleFxLooped(${1:int* ptfxHandle}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np1 is always 0 in the native scripts  \n```"
  },
  "1664": {
      "prefix": "TerraingridActivate",
      "body": [
          "TerraingridActivate(${1:BOOL* toggle})${0}"
      ],
      "description": "This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).\nThis requires these two natives to be called as well to configure the grid: [`0x1c4fc5752bcd8e48`](https://runtime.fivem.net/doc/reference.html#\\_0x1C4FC5752BCD8E48) and [`0x5ce62918f8d703c7`](https://runtime.fivem.net/doc/reference.html#\\_0x5CE62918F8D703C7)."
  },
  "1665": {
      "prefix": "TerraingridSetColours",
      "body": [
          "TerraingridSetColours(${1:int* lowR}, ${2:int* lowG}, ${3:int* lowB}, ${4:int* lowAlpha}, ${5:int* R}, ${6:int* G}, ${7:int* B}, ${8:int* Alpha}, ${9:int* highR}, ${10:int* highG}, ${11:int* highB}, ${12:int* highAlpha})${0}"
      ],
      "description": "This native is used along with these two natives: [`0xa356990e161c9e65`](https://runtime.fivem.net/doc/reference.html#\\_0xA356990E161C9E65) and [`0x1c4fc5752bcd8e48`](https://runtime.fivem.net/doc/reference.html#\\_0x1C4FC5752BCD8E48).\nThis native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.\nAll those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png\n\nOld description:\nOnly called in golf and golf_mp\\\nparameters used are\\\nGRAPHICS::\\_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);"
  },
  "1666": {
      "prefix": "TogglePausedRenderphases",
      "body": [
          "TogglePausedRenderphases(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1667": {
      "prefix": "TriggerScreenblurFadeOut",
      "body": [
          "TriggerScreenblurFadeOut(${1:float* transitionTime})${0}"
      ],
      "description": ""
  },
  "1668": {
      "prefix": "TerraingridSetParams",
      "body": [
          "TerraingridSetParams(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:float* rotation}, ${6:float* p5}, ${7:float* width}, ${8:float* height}, ${9:float* p8}, ${10:float* scale}, ${11:float* glowIntensity}, ${12:float* normalHeight}, ${13:float* heightDiff})${0}"
      ],
      "description": "This native is used along with these two natives: [`0xa356990e161c9e65`](https://runtime.fivem.net/doc/reference.html#\\_0xA356990E161C9E65) and [`0x5ce62918f8d703c7`](https://runtime.fivem.net/doc/reference.html#\\_0x5CE62918F8D703C7).\n\nThis native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.\n\nAll those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png"
  },
  "1669": {
      "prefix": "Ui3dscenePushPreset",
      "body": [
          "Ui3dscenePushPreset(${1:char* presetName})${0}"
      ],
      "description": "```\nAll presets can be found in common\\data\\ui\\uiscenes.meta\n```"
  },
  "1670": {
      "prefix": "TriggerScreenblurFadeIn",
      "body": [
          "TriggerScreenblurFadeIn(${1:float* transitionTime})${0}"
      ],
      "description": ""
  },
  "1671": {
      "prefix": "UnpatchDecalDiffuseMap",
      "body": [
          "UnpatchDecalDiffuseMap(${1:int* decalType})${0}"
      ],
      "description": "```\nGRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(9123);  \nGRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(\"MPMissMarkers256\");  \n```"
  },
  "1672": {
      "prefix": "Ui3dsceneIsAvailable",
      "body": [
          "Ui3dsceneIsAvailable()${0}"
      ],
      "description": ""
  },
  "1673": {
      "prefix": "UpdateLightsOnEntity",
      "body": [
          "UpdateLightsOnEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "1674": {
      "prefix": "UseParticleFxAsset",
      "body": [
          "UseParticleFxAsset(${1:char* name})${0}"
      ],
      "description": "```\nFrom the b678d decompiled scripts:\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"FM_Mission_Controler\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_apartment_mp\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_indep_fireworks\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_mp_cig_plane\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_mp_creator\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_ornate_heist\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_prison_break_heist_station\");\n```"
  },
  "1675": {
      "prefix": "WashDecalsFromVehicle",
      "body": [
          "WashDecalsFromVehicle(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "1676": {
      "prefix": "WashDecalsInRange",
      "body": [
          "WashDecalsInRange(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "1677": {
      "prefix": "AddBlipForCoord",
      "body": [
          "AddBlipForCoord(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip."
  },
  "1678": {
      "prefix": "AddBlipForEntity",
      "body": [
          "AddBlipForEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns red ( default ) blip attached to entity.\nExample:\nBlip blip; //Put this outside your case or option\nblip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);\nHUD::SET_BLIP_AS_FRIENDLY(blip, true);\n```"
  },
  "1679": {
      "prefix": "ActivateFrontendMenu",
      "body": [
          "ActivateFrontendMenu(${1:Hash* menuhash}, ${2:BOOL* togglePause}, ${3:int* component})${0}"
      ],
      "description": "Does stuff like this:\\\ngyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617\\\nExample:\\\nint GetHash = GET_HASH_KEY(\"fe_menu_version_corona_lobby\");\\\nACTIVATE_FRONTEND_MENU(GetHash, 0, -1);\\\nBOOL p1 is a toggle to define the game in pause.\\\nint p2 is unknown but -1 always works, not sure why though.\\\n\\[30/03/2017] ins1de :\\\nthe int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.\\\nExample : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);\\\nResult : Opens the \"Online\" tab without pausing the menu, with -1 it opens the map.\n\nBelow is a list of all known Frontend Menu Hashes.\n\n*   FE_MENU_VERSION_SP_PAUSE\n*   FE_MENU_VERSION_MP_PAUSE\n*   FE_MENU_VERSION_CREATOR_PAUSE\n*   FE_MENU_VERSION_CUTSCENE_PAUSE\n*   FE_MENU_VERSION_SAVEGAME\n*   FE_MENU_VERSION_PRE_LOBBY\n*   FE_MENU_VERSION_LOBBY\n*   FE_MENU_VERSION_MP_CHARACTER_SELECT\n*   FE_MENU_VERSION_MP_CHARACTER_CREATION\n*   FE_MENU_VERSION_EMPTY\n*   FE_MENU_VERSION_EMPTY_NO_BACKGROUND\n*   FE_MENU_VERSION_TEXT_SELECTION\n*   FE_MENU_VERSION_CORONA\n*   FE_MENU_VERSION_CORONA_LOBBY\n*   FE_MENU_VERSION_CORONA_JOINED_PLAYERS\n*   FE_MENU_VERSION_CORONA_INVITE_PLAYERS\n*   FE_MENU_VERSION_CORONA_INVITE_FRIENDS\n*   FE_MENU_VERSION_CORONA_INVITE_CREWS\n*   FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS\n*   FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS\n*   FE_MENU_VERSION_CORONA_RACE\n*   FE_MENU_VERSION_CORONA_BETTING\n*   FE_MENU_VERSION_JOINING_SCREEN\n*   FE_MENU_VERSION_LANDING_MENU\n*   FE_MENU_VERSION_LANDING_KEYMAPPING_MENU"
  },
  "1680": {
      "prefix": "AddBlipForArea",
      "body": [
          "AddBlipForArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* width}, ${5:float* height})${0}"
      ],
      "description": "Adds a rectangular blip for the specified coordinates/area.\n\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\n\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\n\nExample image:\n![minimap](https://w.wew.wtf/pdcjig.png)\n![big map](https://w.wew.wtf/zgcjcm.png)\n\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)"
  },
  "1681": {
      "prefix": "AddBlipForRadius",
      "body": [
          "AddBlipForRadius(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "1682": {
      "prefix": "AddBlipForPickup",
      "body": [
          "AddBlipForPickup(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "1683": {
      "prefix": "AddNextMessageToPreviousBriefs",
      "body": [
          "AddNextMessageToPreviousBriefs(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1684": {
      "prefix": "AddPointToGpsCustomRoute",
      "body": [
          "AddPointToGpsCustomRoute(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "1685": {
      "prefix": "AddPointToGpsMultiRoute",
      "body": [
          "AddPointToGpsMultiRoute(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "1686": {
      "prefix": "AddTextComponentFloat",
      "body": [
          "AddTextComponentFloat(${1:float* value}, ${2:int* decimalPlaces})${0}"
      ],
      "description": ""
  },
  "1687": {
      "prefix": "AddTextComponentInteger",
      "body": [
          "AddTextComponentInteger(${1:int* value})${0}"
      ],
      "description": ""
  },
  "1688": {
      "prefix": "AddTextComponentFormattedInteger",
      "body": [
          "AddTextComponentFormattedInteger(${1:int* value}, ${2:BOOL* commaSeparated})${0}"
      ],
      "description": ""
  },
  "1689": {
      "prefix": "AddTextComponentSubstringKeyboardDisplay",
      "body": [
          "AddTextComponentSubstringKeyboardDisplay(${1:char* string})${0}"
      ],
      "description": ""
  },
  "1690": {
      "prefix": "AddTextComponentSubstringPlayerName",
      "body": [
          "AddTextComponentSubstringPlayerName(${1:char* text})${0}"
      ],
      "description": "Adds an arbitrary string as a text component placeholder, replacing `~a~` in the current text command's text label.\n\nSee the documentation on text formatting for more information."
  },
  "1691": {
      "prefix": "AddTextComponentSubstringBlipName",
      "body": [
          "AddTextComponentSubstringBlipName(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1692": {
      "prefix": "AddTextComponentSubstringPhoneNumber",
      "body": [
          "AddTextComponentSubstringPhoneNumber(${1:char* p0}, ${2:int* p1})${0}"
      ],
      "description": "```\np1 was always -1\n```"
  },
  "1693": {
      "prefix": "AddTextComponentSubstringTextLabel",
      "body": [
          "AddTextComponentSubstringTextLabel(${1:char* labelName})${0}"
      ],
      "description": ""
  },
  "1694": {
      "prefix": "AddTextComponentSubstringTextLabelHashKey",
      "body": [
          "AddTextComponentSubstringTextLabelHashKey(${1:Hash* gxtEntryHash})${0}"
      ],
      "description": "```\nIt adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY(\"ES_HELP\"), adds \"Continue\". Just uses a text labels hash key  \n```"
  },
  "1695": {
      "prefix": "AddTextComponentSubstringWebsite",
      "body": [
          "AddTextComponentSubstringWebsite(${1:char* website})${0}"
      ],
      "description": "```\nThis native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)  \n```"
  },
  "1696": {
      "prefix": "AllowPauseMenuWhenDeadThisFrame",
      "body": [
          "AllowPauseMenuWhenDeadThisFrame()${0}"
      ],
      "description": "Allows opening the pause menu this frame, when the player is dead."
  },
  "1697": {
      "prefix": "AddTextComponentSubstringTime",
      "body": [
          "AddTextComponentSubstringTime(${1:int* timestamp}, ${2:int* flags})${0}"
      ],
      "description": "```\nAdds a timer (e.g. \"00:00:00:000\"). The appearance of the timer depends on the flags, which needs more research.  \n```"
  },
  "1698": {
      "prefix": "AllowSonarBlips",
      "body": [
          "AllowSonarBlips(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1699": {
      "prefix": "BeginTextCommandBusyspinnerOn",
      "body": [
          "BeginTextCommandBusyspinnerOn(${1:char* string})${0}"
      ],
      "description": "```\nInitializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here  \nBEGIN_TEXT_COMMAND_PRINT  \ne.g  \nvoid StartLoadingMessage(char *text, int spinnerType = 3)  \n\t{  \n_SET_LOADING_PROMPT_TEXT_ENTRY(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n_SHOW_LOADING_PROMPT(spinnerType);  \n\t}  \n/*OR*/  \n\tvoid ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)  \n\t{  \n_SET_LOADING_PROMPT_TEXT_ENTRY(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n_SHOW_LOADING_PROMPT(spinnerType);  \nWAIT(timeMs);  \n_REMOVE_LOADING_PROMPT();  \n\t}  \nThese are some localized strings used in the loading spinner.  \n\"PM_WAIT\"                   = Please Wait  \n\"CELEB_WPLYRS\"              = Waiting For Players.  \n\"CELL_SPINNER2\"             = Scanning storage.  \n\"ERROR_CHECKYACHTNAME\" = Registering your yacht's name. Please wait.  \n\"ERROR_CHECKPROFANITY\"   = Checking your text for profanity. Please wait.  \n\"FM_COR_AUTOD\"                        = Just spinner no text  \n\"FM_IHELP_WAT2\"                        = Waiting for other players  \n\"FM_JIP_WAITO\"                            = Game options are being set  \n\"FMMC_DOWNLOAD\"                    = Downloading  \n\"FMMC_PLYLOAD\"                         = Loading  \n\"FMMC_STARTTRAN\"                    = Launching session  \n\"HUD_QUITTING\"                           =  Quiting session  \n\"KILL_STRIP_IDM\"                         = Waiting for to accept  \n\"MP_SPINLOADING\"                      = Loading  \n```"
  },
  "1700": {
      "prefix": "BeginTextCommandDisplayHelp",
      "body": [
          "BeginTextCommandDisplayHelp(${1:char* inputType})${0}"
      ],
      "description": "```\nUsed to be known as _SET_TEXT_COMPONENT_FORMAT  \n```"
  },
  "1701": {
      "prefix": "BeginTextCommandClearPrint",
      "body": [
          "BeginTextCommandClearPrint(${1:char* text})${0}"
      ],
      "description": "```\nclears a print text command with this text  \n```"
  },
  "1702": {
      "prefix": "BeginTextCommandGetWidth",
      "body": [
          "BeginTextCommandGetWidth(${1:char* text})${0}"
      ],
      "description": "```\nBEGIN_TEXT_COMMAND_*\nExample:\n_BEGIN_TEXT_COMMAND_GET_WIDTH(\"NUMBER\");\nADD_TEXT_COMPONENT_FLOAT(69.420f, 2);\nfloat width = _END_TEXT_COMMAND_GET_WIDTH(1);\n```"
  },
  "1703": {
      "prefix": "BeginTextCommandDisplayText",
      "body": [
          "BeginTextCommandDisplayText(${1:char* text})${0}"
      ],
      "description": "```\nThe following were found in the decompiled script files:  \nSTRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3  \nESDOLLA   \nESMINDOLLA - cash (negative)  \nUsed to be known as _SET_TEXT_ENTRY  \n```"
  },
  "1704": {
      "prefix": "BeginTextCommandIsMessageDisplayed",
      "body": [
          "BeginTextCommandIsMessageDisplayed(${1:char* text})${0}"
      ],
      "description": "```\nnothin doin.   \nBOOL Message(char* text)  \n\t{  \nBEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \nreturn END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();  \n\t}  \n```"
  },
  "1705": {
      "prefix": "BeginTextCommandLineCount",
      "body": [
          "BeginTextCommandLineCount(${1:char* entry})${0}"
      ],
      "description": "```\nget's line count  \nint GetLineCount(char *text, float x, float y)  \n\t{  \n_BEGIN_TEXT_COMMAND_LINE_COUNT(\"STRING\");  \n                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \nreturn _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);  \n\t}  \n```"
  },
  "1706": {
      "prefix": "BeginTextCommandOverrideButtonText",
      "body": [
          "BeginTextCommandOverrideButtonText(${1:char* gxtEntry})${0}"
      ],
      "description": ""
  },
  "1707": {
      "prefix": "BeginTextCommandIsThisHelpMessageBeingDisplayed",
      "body": [
          "BeginTextCommandIsThisHelpMessageBeingDisplayed(${1:char* labelName})${0}"
      ],
      "description": "```\nBOOL IsContextActive(char *ctx)  \n{  \n\tBEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);  \n\treturn END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);  \n}  \n```"
  },
  "1708": {
      "prefix": "BeginTextCommandThefeedPost",
      "body": [
          "BeginTextCommandThefeedPost(${1:char* text})${0}"
      ],
      "description": "Declares the entry type of a notification, for example \"STRING\".\nint ShowNotification(char \\*text)\n{\nBEGIN_TEXT_COMMAND_THEFEED_POST(\"STRING\");\nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);\nreturn \\_DRAW_NOTIFICATION(1, 1);\n}"
  },
  "1709": {
      "prefix": "BeginTextCommandObjective",
      "body": [
          "BeginTextCommandObjective(${1:char* p0})${0}"
      ],
      "description": ""
  },
  "1710": {
      "prefix": "BusyspinnerIsDisplaying",
      "body": [
          "BusyspinnerIsDisplaying()${0}"
      ],
      "description": ""
  },
  "1711": {
      "prefix": "BeginTextCommandPrint",
      "body": [
          "BeginTextCommandPrint(${1:char* GxtEntry})${0}"
      ],
      "description": "```\nUsed to be known as _SET_TEXT_ENTRY_2  \nvoid ShowSubtitle(char *text)  \n{  \n\tBEGIN_TEXT_COMMAND_PRINT(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\tEND_TEXT_COMMAND_PRINT(2000, 1);  \n}  \n```"
  },
  "1712": {
      "prefix": "BeginTextCommandSetBlipName",
      "body": [
          "BeginTextCommandSetBlipName(${1:char* textLabel})${0}"
      ],
      "description": "Starts a text command to change the name of a blip displayed in the pause menu.\n\nThis should be paired with [`END_TEXT_COMMAND_SET_BLIP_NAME`](#\\_0xBC38B49BCB83BC9B), once adding all required text components."
  },
  "1713": {
      "prefix": "ClearAdditionalText",
      "body": [
          "ClearAdditionalText(${1:int* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1714": {
      "prefix": "BusyspinnerIsOn",
      "body": [
          "BusyspinnerIsOn()${0}"
      ],
      "description": ""
  },
  "1715": {
      "prefix": "ClearAllBlipRoutes",
      "body": [
          "ClearAllBlipRoutes()${0}"
      ],
      "description": "Clears all active blip routes that have been set with [`SetBlipRoute`](#\\_0x3E160C90)."
  },
  "1716": {
      "prefix": "BusyspinnerOff",
      "body": [
          "BusyspinnerOff()${0}"
      ],
      "description": "```\nRemoves the loading prompt at the bottom right of the screen.\n```"
  },
  "1717": {
      "prefix": "ClearBrief",
      "body": [
          "ClearBrief()${0}"
      ],
      "description": ""
  },
  "1718": {
      "prefix": "ClearAllHelpMessages",
      "body": [
          "ClearAllHelpMessages()${0}"
      ],
      "description": ""
  },
  "1719": {
      "prefix": "ClearFloatingHelp",
      "body": [
          "ClearFloatingHelp(${1:int* hudIndex}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1720": {
      "prefix": "ClearDynamicPauseMenuErrorMessage",
      "body": [
          "ClearDynamicPauseMenuErrorMessage()${0}"
      ],
      "description": ""
  },
  "1721": {
      "prefix": "ClearGpsCustomRoute",
      "body": [
          "ClearGpsCustomRoute()${0}"
      ],
      "description": ""
  },
  "1722": {
      "prefix": "ClearGpsMultiRoute",
      "body": [
          "ClearGpsMultiRoute()${0}"
      ],
      "description": "Does the same as [`SET_GPS_MULTI_ROUTE_RENDER(false)`](https://runtime.fivem.net/doc/reference.html#\\_0x3DDA37128DD1ACA8)"
  },
  "1723": {
      "prefix": "ClearGpsFlags",
      "body": [
          "ClearGpsFlags()${0}"
      ],
      "description": "```\nClears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.  \nDoesn't seem like the flags are actually read by the game at all.  \n```"
  },
  "1724": {
      "prefix": "ClearGpsPlayerWaypoint",
      "body": [
          "ClearGpsPlayerWaypoint()${0}"
      ],
      "description": ""
  },
  "1725": {
      "prefix": "ClearGpsRaceTrack",
      "body": [
          "ClearGpsRaceTrack()${0}"
      ],
      "description": "```\nDoes the same as SET_RACE_TRACK_RENDER(false);\n```"
  },
  "1726": {
      "prefix": "ClearPedInPauseMenu",
      "body": [
          "ClearPedInPauseMenu()${0}"
      ],
      "description": ""
  },
  "1727": {
      "prefix": "ClearHelp",
      "body": [
          "ClearHelp(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1728": {
      "prefix": "ClearPrints",
      "body": [
          "ClearPrints()${0}"
      ],
      "description": ""
  },
  "1729": {
      "prefix": "ClearRaceGalleryBlips",
      "body": [
          "ClearRaceGalleryBlips()${0}"
      ],
      "description": ""
  },
  "1730": {
      "prefix": "ClearSmallPrints",
      "body": [
          "ClearSmallPrints()${0}"
      ],
      "description": ""
  },
  "1731": {
      "prefix": "ClearReminderMessage",
      "body": [
          "ClearReminderMessage()${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "1732": {
      "prefix": "ClearThisPrint",
      "body": [
          "ClearThisPrint(${1:char* p0})${0}"
      ],
      "description": "```\np0: found arguments in the b617d scripts: pastebin.com/X5akCN7z  \n```"
  },
  "1733": {
      "prefix": "CloseSocialClubMenu",
      "body": [
          "CloseSocialClubMenu()${0}"
      ],
      "description": ""
  },
  "1734": {
      "prefix": "CloseMultiplayerChat",
      "body": [
          "CloseMultiplayerChat()${0}"
      ],
      "description": ""
  },
  "1735": {
      "prefix": "CreateMpGamerTagWithCrewColor",
      "body": [
          "CreateMpGamerTagWithCrewColor(${1:Player* player}, ${2:char* username}, ${3:BOOL* pointedClanTag}, ${4:BOOL* isRockstarClan}, ${5:char* clanTag}, ${6:int* clanFlag}, ${7:int* r}, ${8:int* g}, ${9:int* b})${0}"
      ],
      "description": "```\nclanFlag: takes a number 0-5\n```"
  },
  "1736": {
      "prefix": "CreateFakeMpGamerTag",
      "body": [
          "CreateFakeMpGamerTag(${1:Ped* ped}, ${2:char* username}, ${3:BOOL* pointedClanTag}, ${4:BOOL* isRockstarClan}, ${5:char* clanTag}, ${6:int* clanFlag})${0}"
      ],
      "description": "```\nclanFlag: takes a number 0-5\n```"
  },
  "1737": {
      "prefix": "DeleteWaypoint",
      "body": [
          "DeleteWaypoint()${0}"
      ],
      "description": ""
  },
  "1738": {
      "prefix": "DisableFrontendThisFrame",
      "body": [
          "DisableFrontendThisFrame()${0}"
      ],
      "description": ""
  },
  "1739": {
      "prefix": "DisplayAreaName",
      "body": [
          "DisplayAreaName(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1740": {
      "prefix": "DisplayAmmoThisFrame",
      "body": [
          "DisplayAmmoThisFrame(${1:BOOL* display})${0}"
      ],
      "description": ""
  },
  "1741": {
      "prefix": "DisplayCash",
      "body": [
          "DisplayCash(${1:BOOL* toggle})${0}"
      ],
      "description": "```\n\"DISPLAY_CASH(false);\" makes the cash amount render on the screen when appropriate  \n\"DISPLAY_CASH(true);\" disables cash amount rendering  \n```"
  },
  "1742": {
      "prefix": "DisplayHud",
      "body": [
          "DisplayHud(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf Hud should be displayed  \n```"
  },
  "1743": {
      "prefix": "DisplayHelpTextThisFrame",
      "body": [
          "DisplayHelpTextThisFrame(${1:char* message}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nThe messages are localized strings.  \nExamples:  \n\"No_bus_money\"  \n\"Enter_bus\"  \n\"Tour_help\"  \n\"LETTERS_HELP2\"  \n\"Dummy\"  \n**The bool appears to always be false (if it even is a bool, as it's represented by a zero)**  \n--------  \np1 doesn't seem to make a difference, regardless of the state it's in.   \npicture of where on the screen this is displayed?  \n```"
  },
  "1744": {
      "prefix": "DisplayHudWhenDeadThisFrame",
      "body": [
          "DisplayHudWhenDeadThisFrame()${0}"
      ],
      "description": "Enables drawing some hud components, such as help labels, this frame, when the player is dead."
  },
  "1745": {
      "prefix": "DisplayHudWhenPausedThisFrame",
      "body": [
          "DisplayHudWhenPausedThisFrame()${0}"
      ],
      "description": ""
  },
  "1746": {
      "prefix": "DisplayRadar",
      "body": [
          "DisplayRadar(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf Minimap / Radar should be displayed.\n```"
  },
  "1747": {
      "prefix": "DisplayPlayerNameTagsOnBlips",
      "body": [
          "DisplayPlayerNameTagsOnBlips(${1:BOOL* toggle})${0}"
      ],
      "description": "Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.\nDoesn't need to be called every frame.\nPreview: https://i.imgur.com/DfqKWfJ.png\nMake sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip."
  },
  "1748": {
      "prefix": "DisplaySniperScopeThisFrame",
      "body": [
          "DisplaySniperScopeThisFrame()${0}"
      ],
      "description": "```\nDisplays the crosshair for this frame.  \n```"
  },
  "1749": {
      "prefix": "DoesBlipExist",
      "body": [
          "DoesBlipExist(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1750": {
      "prefix": "DoesPedHaveAiBlip",
      "body": [
          "DoesPedHaveAiBlip(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns whether the ped's blip is controlled by the game.   \nIt's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).  \n```"
  },
  "1751": {
      "prefix": "DoesBlipHaveGpsRoute",
      "body": [
          "DoesBlipHaveGpsRoute(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1752": {
      "prefix": "DoesTextBlockExist",
      "body": [
          "DoesTextBlockExist(${1:char* gxt})${0}"
      ],
      "description": ""
  },
  "1753": {
      "prefix": "DoesTextLabelExist",
      "body": [
          "DoesTextLabelExist(${1:char* gxt})${0}"
      ],
      "description": "```\nChecks if the passed gxt name exists in the game files.  \n```"
  },
  "1754": {
      "prefix": "EndTextCommandBusyspinnerOn",
      "body": [
          "EndTextCommandBusyspinnerOn(${1:int* busySpinnerType})${0}"
      ],
      "description": "```\nenum eBusySpinnerType\n{\n\tBUSY_SPINNER_LEFT,\n\tBUSY_SPINNER_LEFT_2,\n\tBUSY_SPINNER_LEFT_3,\n\tBUSY_SPINNER_SAVE,\n\tBUSY_SPINNER_RIGHT,\n};\n```"
  },
  "1755": {
      "prefix": "DontTiltMinimapThisFrame",
      "body": [
          "DontTiltMinimapThisFrame()${0}"
      ],
      "description": "```\nWhen calling this, the current frame will have the players \"arrow icon\" be focused on the dead center of the radar.\n```"
  },
  "1756": {
      "prefix": "EndTextCommandDisplayHelp",
      "body": [
          "EndTextCommandDisplayHelp(${1:int* p0}, ${2:BOOL* loop}, ${3:BOOL* beep}, ${4:int* shape})${0}"
      ],
      "description": "```\n-----------  \np3 (duration in MS) was previously mentioned as \"shape\", but with some more testing it seems that it's more likely to be a duration in MS. (Tested this when not calling it every tick, but instead only once and let it display for the specified duration).   \n-1 seems to be default delay (around 3 seconds), 5000 (ms) seems to be the max. Anything > 5000 will still result in 5 seconds of display time.  \nOld p3 (shape) description: \"shape goes from -1 to 50 (may be more).\"  \n--------------  \np0 is always 0.  \nExample:  \nvoid FloatingHelpText(char* text)  \n{  \n\tBEGIN_TEXT_COMMAND_DISPLAY_HELP(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\tEND_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);  \n}  \nImage:  \n- imgbin.org/images/26209.jpg  \nmore inputs/icons:  \n- pastebin.com/nqNYWMSB  \nUsed to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL  \n```"
  },
  "1757": {
      "prefix": "EndTextCommandClearPrint",
      "body": [
          "EndTextCommandClearPrint()${0}"
      ],
      "description": ""
  },
  "1758": {
      "prefix": "EndTextCommandDisplayText",
      "body": [
          "EndTextCommandDisplayText(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": "```\nAfter applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.  \n```\n\n```\nNativeDB Added Parameter 3: int p2\n```"
  },
  "1759": {
      "prefix": "EndTextCommandGetWidth",
      "body": [
          "EndTextCommandGetWidth(${1:BOOL* p0})${0}"
      ],
      "description": "```\nEND_TEXT_COMMAND_*\nIn scripts font most of the time is passed as 1.\nUse _BEGIN_TEXT_GET_COMMAND_GET_WIDTH\nparam is not font from what i've tested\n```"
  },
  "1760": {
      "prefix": "EndTextCommandIsMessageDisplayed",
      "body": [
          "EndTextCommandIsMessageDisplayed()${0}"
      ],
      "description": ""
  },
  "1761": {
      "prefix": "EndTextCommandIsThisHelpMessageBeingDisplayed",
      "body": [
          "EndTextCommandIsThisHelpMessageBeingDisplayed(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "1762": {
      "prefix": "EndTextCommandObjective",
      "body": [
          "EndTextCommandObjective(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1763": {
      "prefix": "EndTextCommandLineCount",
      "body": [
          "EndTextCommandLineCount(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": "```\nEND_TEXT_COMMAND_*\nDetermines how many lines the text string will use when drawn on screen.\nMust use 0x521FB041D93DD0E4 for setting up\n```"
  },
  "1764": {
      "prefix": "EndTextCommandOverrideButtonText",
      "body": [
          "EndTextCommandOverrideButtonText(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "1765": {
      "prefix": "EndTextCommandPrint",
      "body": [
          "EndTextCommandPrint(${1:int* duration}, ${2:BOOL* drawImmediately})${0}"
      ],
      "description": "```\nDraws the subtitle at middle center of the screen.  \nint duration = time in milliseconds to show text on screen before disappearing  \ndrawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished  \nUsed to be known as _DRAW_SUBTITLE_TIMED  \n```"
  },
  "1766": {
      "prefix": "EndTextCommandSetBlipName",
      "body": [
          "EndTextCommandSetBlipName(${1:Blip* blip})${0}"
      ],
      "description": "Finalizes a text command started with [`BEGIN_TEXT_COMMAND_SET_BLIP_NAME`](#\\_0xF9113A30DE5C6670), setting the name\nof the specified blip."
  },
  "1767": {
      "prefix": "EndTextCommandThefeedPostAward",
      "body": [
          "EndTextCommandThefeedPostAward(${1:char* textureDict}, ${2:char* textureName}, ${3:int* rpBonus}, ${4:int* colorOverlay}, ${5:char* titleLabel})${0}"
      ],
      "description": "Shows an \"award\" notification above the minimap, lua example result:\n\n![](https://i.imgur.com/e2DNaKX.png)\n\nOld description:\n\n```\nExample:  \nUI::_SET_NOTIFICATION_TEXT_ENTRY(\"HUNT\");  \nUI::_0xAA295B6F28BD587D(\"Hunting\", \"Hunting_Gold_128\", 0, 109, \"HUD_MED_UNLKED\");  \n```"
  },
  "1768": {
      "prefix": "EndTextCommandThefeedPostCrewRankup",
      "body": [
          "EndTextCommandThefeedPostCrewRankup(${1:char* chTitle}, ${2:char* clanTxd}, ${3:char* clanTxn}, ${4:BOOL* isImportant}, ${5:BOOL* showSubtitle})${0}"
      ],
      "description": ""
  },
  "1769": {
      "prefix": "EndTextCommandThefeedPostCrewtag",
      "body": [
          "EndTextCommandThefeedPostCrewtag(${1:BOOL* crewTypeIsPrivate}, ${2:BOOL* crewTagContainsRockstar}, ${3:int* crewTag}, ${4:int* rank}, ${5:BOOL* hasFounderStatus}, ${6:BOOL* isImportant}, ${7:int* clanHandle}, ${8:int* r}, ${9:int* g}, ${10:int* b})${0}"
      ],
      "description": "```\nThis function and the one below it are for after you receive an invite, not sending it.  \np0 = 1 or 0  \nnothin doin.   \nint invite(Player player)  \n\t{  \nint iVar2, iVar3;  \nnetworkHandleMgr handle;  \nNETWORK_HANDLE_FROM_PLAYER(player, &handle.netHandle, 13);  \nnetworkClanMgr clan;  \nchar *playerName = GET_PLAYER_NAME(player);  \n_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n_SET_NOTIFACTION_COLOR_NEXT(0);  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);  \nif (NETWORK_CLAN_PLAYER_GET_DESC(&clan, 35, &handle.netHandle))  \n{  \n\tiVar2 = 0;  \n\tif (ARE_STRINGS_EQUAL(clan.unk22, \"Leader\") && clan.unk30 == 0)  \n\t{  \niVar2 = 1;  \n\t}  \n\tif (clan.unk21 > 0)  \n\t{  \niVar3 = 0;  \n\t}  \n\telse  \n\t{  \niVar3 = 1;  \n\t}  \n\tBOOL unused = _0x54E79E9C(&clan.clanHandle, 35);  \n\treturn _DRAW_NOTIFICATION_APARTMENT_INVITE(iVar3, 0 /*unused*/, &clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);  \n}  \n\t}  \n```"
  },
  "1770": {
      "prefix": "EndTextCommandThefeedPostMessagetext",
      "body": [
          "EndTextCommandThefeedPostMessagetext(${1:char* textureDict}, ${2:char* textureName}, ${3:BOOL* flash}, ${4:int* iconType}, ${5:char* sender}, ${6:char* subject})${0}"
      ],
      "description": "Sets some extra options for a notification. It adds an image (or icon type) and sets a notification title (sender) and subtitle (subject).\n\nTexture dictionary and texture name parameters are usually the same exact value.\n\nExample result:\n\n![](https://i.imgur.com/LviutDl.png)\n\nOld description with list of possible icons and texture names:\n\n```\nList of picNames: pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n```"
  },
  "1771": {
      "prefix": "EndTextCommandThefeedPostCrewtagWithGameName",
      "body": [
          "EndTextCommandThefeedPostCrewtagWithGameName(${1:BOOL* crewTypeIsPrivate}, ${2:BOOL* crewTagContainsRockstar}, ${3:int* crewTag}, ${4:int* rank}, ${5:BOOL* isLeader}, ${6:BOOL* isImportant}, ${7:int* clanHandle}, ${8:char* gamerStr}, ${9:int* r}, ${10:int* g}, ${11:int* b})${0}"
      ],
      "description": "```\np0 = 1 or 0  \ncrashes my game...  \nthis is for sending invites to network players - jobs/apartment/ect...   \nreturn notification handle  \nint invite(Player player)  \n\t{  \nnetworkHandleMgr netHandle;  \nnetworkClanMgr clan;  \nchar *playerName = GET_PLAYER_NAME(player);  \n_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n_SET_NOTIFACTION_COLOR_NEXT(1);  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);  \nNETWORK_HANDLE_FROM_PLAYER(player, &netHandle.netHandle, 13);  \nif (NETWORK_CLAN_PLAYER_IS_ACTIVE(&netHandle.netHandle))  \n{  \n\tNETWORK_CLAN_PLAYER_GET_DESC(&clan.clanHandle, 35, &netHandle.netHandle);  \n\t_DRAW_NOTIFICATION_CLAN_INVITE(0, _0x54E79E9C(&clan.clanHandle, 35), &clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);  \n}  \n\t}  \n```"
  },
  "1772": {
      "prefix": "EndTextCommandThefeedPostMessagetextGxtEntry",
      "body": [
          "EndTextCommandThefeedPostMessagetextGxtEntry(${1:char* txdName}, ${2:char* textureName}, ${3:BOOL* flash}, ${4:int* iconType}, ${5:char* sender}, ${6:char* subject})${0}"
      ],
      "description": "This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.\nNeeds more research.\nOnly one type of usage in the scripts:\nHUD::\\_C6F580E4C94926AC(\"CHAR_ACTING_UP\", \"CHAR_ACTING_UP\", 0, 0, \"DI_FEED_CHAR\", a\\_0);"
  },
  "1773": {
      "prefix": "EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon",
      "body": [
          "EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(${1:char* picTxd}, ${2:char* picTxn}, ${3:BOOL* flash}, ${4:int* iconType1}, ${5:char* nameStr}, ${6:char* subtitleStr}, ${7:float* duration}, ${8:char* crewPackedStr}, ${9:int* iconType2}, ${10:int* textColor})${0}"
      ],
      "description": "```\nList of picNames: pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n\"duration\" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \n\"clanTag\" shows a crew tag in the \"sender\" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. \"MK\" becomes \"___MK\", \"ACE\" becomes \"___ACE\", etc.)  \niconType2 is a mirror of iconType. It shows in the \"subject\" line, right under the original iconType.  \nint IconNotification(char *text, char *text2, char *Subject)  \n{  \n\t_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\t_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2(\"CHAR_SOCIAL_CLUB\", \"CHAR_SOCIAL_CLUB\", 1, 7, text2, Subject, 1.0f, \"__EXAMPLE\", 7);  \n\treturn _DRAW_NOTIFICATION(1, 1);  \n}  \n```"
  },
  "1774": {
      "prefix": "EndTextCommandThefeedPostMessagetextTu",
      "body": [
          "EndTextCommandThefeedPostMessagetextTu(${1:char* picTxd}, ${2:char* picTxn}, ${3:BOOL* flash}, ${4:int* iconType}, ${5:char* nameStr}, ${6:char* subtitleStr}, ${7:float* duration})${0}"
      ],
      "description": "NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.\n\nExample, only occurrence in the scripts:\n\n```\nv_8 = UI::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(\"CHAR_SOCIAL_CLUB\", \"CHAR_SOCIAL_CLUB\", 0, 0, &v_9, \"\", a_5);\n```\n\nExample result:\n\n![](https://i.imgur.com/YrN4Bcm.png)"
  },
  "1775": {
      "prefix": "EndTextCommandThefeedPostReplayIcon",
      "body": [
          "EndTextCommandThefeedPostReplayIcon(${1:int* eType}, ${2:int* iIcon}, ${3:char* sTitle})${0}"
      ],
      "description": "```\nreturns a notification handle, prints out a notification like below:  \ntype range: 0   \nif you set type to 1, image goes from 0 - 39 - Xbox you can add text to  \nexample:   \nUI::_0xD202B92CBF1D816F(1, 20, \"Who you trynna get crazy with, ese? Don't you know I'm LOCO?!\");  \n```"
  },
  "1776": {
      "prefix": "EndTextCommandThefeedPostReplayInput",
      "body": [
          "EndTextCommandThefeedPostReplayInput(${1:int* type}, ${2:char* button}, ${3:char* text})${0}"
      ],
      "description": "```\nreturns a notification handle, prints out a notification like below:\ntype range: 0 - 2\nif you set type to 1, button accepts \"~INPUT_SOMETHING~\"\nexample:\nHUD::_0xDD6CB2CCE7C2735C(1, \"~INPUT_TALK~\", \"Who you trynna get crazy with, ese? Don't you know I'm LOCO?!\");\n- imgur.com/UPy0Ial\nExamples from the scripts:\nl_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING~\",\"\");\nl_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_SAVE_REPLAY_CLIP~\",\"\");\nl_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING~\",\"\");\nl_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~\",\"\");\n```"
  },
  "1777": {
      "prefix": "EndTextCommandThefeedPostMessagetextWithCrewTag",
      "body": [
          "EndTextCommandThefeedPostMessagetextWithCrewTag(${1:char* picTxd}, ${2:char* picTxn}, ${3:BOOL* flash}, ${4:int* iconType}, ${5:char* nameStr}, ${6:char* subtitleStr}, ${7:float* duration}, ${8:char* crewPackedStr})${0}"
      ],
      "description": "```\nList of picNames pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n\"duration\" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \n\"clanTag\" shows a crew tag in the \"sender\" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. \"MK\" becomes \"___MK\", \"ACE\" becomes \"___ACE\", etc.)  \n```"
  },
  "1778": {
      "prefix": "EndTextCommandThefeedPostMpticker",
      "body": [
          "EndTextCommandThefeedPostMpticker(${1:BOOL* blink}, ${2:BOOL* bHasTokens})${0}"
      ],
      "description": ""
  },
  "1779": {
      "prefix": "EndTextCommandThefeedPostTicker",
      "body": [
          "EndTextCommandThefeedPostTicker(${1:BOOL* isImportant}, ${2:BOOL* bHasTokens})${0}"
      ],
      "description": "Example output preview:\n\n![](https://i.imgur.com/TJvqkYq.png)"
  },
  "1780": {
      "prefix": "EndTextCommandThefeedPostUnlock",
      "body": [
          "EndTextCommandThefeedPostUnlock(${1:char* chTitle}, ${2:int* iconType}, ${3:char* chSubtitle})${0}"
      ],
      "description": ""
  },
  "1781": {
      "prefix": "EndTextCommandThefeedPostUnlockTu",
      "body": [
          "EndTextCommandThefeedPostUnlockTu(${1:char* chTitle}, ${2:int* iconType}, ${3:char* chSubtitle}, ${4:BOOL* isImportant})${0}"
      ],
      "description": ""
  },
  "1782": {
      "prefix": "EndTextCommandThefeedPostStats",
      "body": [
          "EndTextCommandThefeedPostStats(${1:char* statTitle}, ${2:int* iconEnum}, ${3:BOOL* stepVal}, ${4:int* barValue}, ${5:BOOL* isImportant}, ${6:char* picTxd}, ${7:char* picTxn})${0}"
      ],
      "description": "[List of picture names](https://pastebin.com/XdpJVbHz)\n\nExample result:\n\n![](https://i.imgur.com/SdEZ22m.png)"
  },
  "1783": {
      "prefix": "EndTextCommandThefeedPostTickerForced",
      "body": [
          "EndTextCommandThefeedPostTickerForced(${1:BOOL* blink}, ${2:BOOL* bHasTokens})${0}"
      ],
      "description": ""
  },
  "1784": {
      "prefix": "EndTextCommandThefeedPostUnlockTuWithColor",
      "body": [
          "EndTextCommandThefeedPostUnlockTuWithColor(${1:char* chTitle}, ${2:int* iconType}, ${3:char* chSubtitle}, ${4:BOOL* isImportant}, ${5:int* titleColor}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "1785": {
      "prefix": "EndTextCommandThefeedPostTickerWithTokens",
      "body": [
          "EndTextCommandThefeedPostTickerWithTokens(${1:BOOL* isImportant}, ${2:BOOL* bHasTokens})${0}"
      ],
      "description": ""
  },
  "1786": {
      "prefix": "EndTextCommandThefeedPostVersusTu",
      "body": [
          "EndTextCommandThefeedPostVersusTu(${1:char* ch1TXD}, ${2:char* ch1TXN}, ${3:int* val1}, ${4:char* ch2TXD}, ${5:char* ch2TXN}, ${6:int* val2})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 7: int hudColorIndex1\nNativeDB Added Parameter 8: int hudColorIndex2\n```"
  },
  "1787": {
      "prefix": "FlashAbilityBar",
      "body": [
          "FlashAbilityBar(${1:int* millisecondsToFlash})${0}"
      ],
      "description": ""
  },
  "1788": {
      "prefix": "FlashWantedDisplay",
      "body": [
          "FlashWantedDisplay(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "1789": {
      "prefix": "FlagPlayerContextInTournament",
      "body": [
          "FlagPlayerContextInTournament(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1790": {
      "prefix": "FlashMinimapDisplay",
      "body": [
          "FlashMinimapDisplay()${0}"
      ],
      "description": "```\nadds a short flash to the Radar/Minimap  \nUsage: UI.FLASH_MINIMAP_DISPLAY  \n```"
  },
  "1791": {
      "prefix": "FlashMinimapDisplayWithColor",
      "body": [
          "FlashMinimapDisplayWithColor(${1:int* hudColorIndex})${0}"
      ],
      "description": ""
  },
  "1792": {
      "prefix": "ForceCloseTextInputBox",
      "body": [
          "ForceCloseTextInputBox()${0}"
      ],
      "description": ""
  },
  "1793": {
      "prefix": "GetAiBlip",
      "body": [
          "GetAiBlip(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns the current AI BLIP for the specified ped  \n```"
  },
  "1794": {
      "prefix": "ForceCloseReportugcMenu",
      "body": [
          "ForceCloseReportugcMenu()${0}"
      ],
      "description": ""
  },
  "1795": {
      "prefix": "GetAiBlip2",
      "body": [
          "GetAiBlip2(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "1796": {
      "prefix": "ForceSonarBlipsThisFrame",
      "body": [
          "ForceSonarBlipsThisFrame()${0}"
      ],
      "description": "```\nDoesn't actually return anything.\n```"
  },
  "1797": {
      "prefix": "GetBlipCoords",
      "body": [
          "GetBlipCoords(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1798": {
      "prefix": "GetBlipAlpha",
      "body": [
          "GetBlipAlpha(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1799": {
      "prefix": "GetBlipColour",
      "body": [
          "GetBlipColour(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1800": {
      "prefix": "GetBlipFromEntity",
      "body": [
          "GetBlipFromEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns the Blip handle of given Entity.  \n```"
  },
  "1801": {
      "prefix": "GetBlipInfoIdCoord",
      "body": [
          "GetBlipInfoIdCoord(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1802": {
      "prefix": "GetBlipHudColour",
      "body": [
          "GetBlipHudColour(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1803": {
      "prefix": "GetBlipInfoIdDisplay",
      "body": [
          "GetBlipInfoIdDisplay(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1804": {
      "prefix": "GetBlipInfoIdEntityIndex",
      "body": [
          "GetBlipInfoIdEntityIndex(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1805": {
      "prefix": "GetBlipInfoIdPickupIndex",
      "body": [
          "GetBlipInfoIdPickupIndex(${1:Blip* blip})${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 0.  \n```"
  },
  "1806": {
      "prefix": "GetBlipInfoIdType",
      "body": [
          "GetBlipInfoIdType(${1:Blip* blip})${0}"
      ],
      "description": "```\nReturns a value based on what the blip is attached to\n1 - Vehicle\n2 - Ped\n3 - Object\n4 - Coord\n5 - unk\n6 - Pickup\n7 - Radius\n```"
  },
  "1807": {
      "prefix": "GetBlipRotation",
      "body": [
          "GetBlipRotation(${1:Blip* blip})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2060\n```"
  },
  "1808": {
      "prefix": "GetBlipSprite",
      "body": [
          "GetBlipSprite(${1:Blip* blip})${0}"
      ],
      "description": "```\nBlips Images + IDs:  \ngtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html  \n```"
  },
  "1809": {
      "prefix": "GetClosestBlipOfType",
      "body": [
          "GetClosestBlipOfType(${1:int* blipSprite})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "1810": {
      "prefix": "GetCurrentFrontendMenuVersion",
      "body": [
          "GetCurrentFrontendMenuVersion()${0}"
      ],
      "description": "```\nif (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat(\"fe_menu_version_empty_no_background\"))\n```"
  },
  "1811": {
      "prefix": "GetCurrentWebpageId",
      "body": [
          "GetCurrentWebpageId()${0}"
      ],
      "description": ""
  },
  "1812": {
      "prefix": "GetCurrentWebsiteId",
      "body": [
          "GetCurrentWebsiteId()${0}"
      ],
      "description": ""
  },
  "1813": {
      "prefix": "GetFirstBlipInfoId",
      "body": [
          "GetFirstBlipInfoId(${1:int* blipSprite})${0}"
      ],
      "description": ""
  },
  "1814": {
      "prefix": "GetDefaultScriptRendertargetRenderId",
      "body": [
          "GetDefaultScriptRendertargetRenderId()${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 1.  \n```"
  },
  "1815": {
      "prefix": "GetGlobalActionscriptFlag",
      "body": [
          "GetGlobalActionscriptFlag(${1:int* flagIndex})${0}"
      ],
      "description": "```\nReturns the ActionScript flagValue.\nActionScript flags are global flags that scaleforms use\nFlags found during testing\n0: Returns 1 if the web_browser keyboard is open, otherwise 0\n1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)\n2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed\n9: Returns the current selection on the mobile phone scaleform\nThere are 20 flags in total.\n```"
  },
  "1816": {
      "prefix": "GetHudComponentPosition",
      "body": [
          "GetHudComponentPosition(${1:int* id})${0}"
      ],
      "description": ""
  },
  "1817": {
      "prefix": "GetHudColour",
      "body": [
          "GetHudColour(${1:int* hudColorIndex}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* a})${0}"
      ],
      "description": "```\nHUD colors and their values: pastebin.com/d9aHPbXN  \n```"
  },
  "1818": {
      "prefix": "GetHudScreenPositionFromWorldPosition",
      "body": [
          "GetHudScreenPositionFromWorldPosition(${1:float* worldX}, ${2:float* worldY}, ${3:float* worldZ}, ${4:float* screenX}, ${5:float* screenY})${0}"
      ],
      "description": "```\nWorld to relative screen coords\nthis world to screen will keep the text on screen. it will keep it in the screen pos\n```"
  },
  "1819": {
      "prefix": "GetLengthOfLiteralString",
      "body": [
          "GetLengthOfLiteralString(${1:char* string})${0}"
      ],
      "description": "```\nReturns the length of the string passed (much like strlen).  \n```"
  },
  "1820": {
      "prefix": "GetLengthOfStringWithThisTextLabel",
      "body": [
          "GetLengthOfStringWithThisTextLabel(${1:char* gxt})${0}"
      ],
      "description": "```\nReturns the string length of the string from the gxt string .  \n```"
  },
  "1821": {
      "prefix": "GetLabelText",
      "body": [
          "GetLabelText(${1:char* labelName})${0}"
      ],
      "description": "```\nGets a string literal from a label name.\nGET_F*\n```"
  },
  "1822": {
      "prefix": "GetMenuPedBoolStat",
      "body": [
          "GetMenuPedBoolStat(${1:Hash* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\np0 was always 0xAE2602A3.\n```"
  },
  "1823": {
      "prefix": "GetLengthOfLiteralStringInBytes",
      "body": [
          "GetLengthOfLiteralStringInBytes(${1:char* string})${0}"
      ],
      "description": ""
  },
  "1824": {
      "prefix": "GetMainPlayerBlipId",
      "body": [
          "GetMainPlayerBlipId()${0}"
      ],
      "description": ""
  },
  "1825": {
      "prefix": "GetMenuPedIntStat",
      "body": [
          "GetMenuPedIntStat(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "1826": {
      "prefix": "GetMenuPedMaskedIntStat",
      "body": [
          "GetMenuPedMaskedIntStat(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "1827": {
      "prefix": "GetMinimapFowCoordinateIsRevealed",
      "body": [
          "GetMinimapFowCoordinateIsRevealed(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "1828": {
      "prefix": "GetMenuPedFloatStat",
      "body": [
          "GetMenuPedFloatStat(${1:Any* p0}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "1829": {
      "prefix": "GetMinimapFowDiscoveryRatio",
      "body": [
          "GetMinimapFowDiscoveryRatio()${0}"
      ],
      "description": ""
  },
  "1830": {
      "prefix": "GetNextBlipInfoId",
      "body": [
          "GetNextBlipInfoId(${1:int* blipSprite})${0}"
      ],
      "description": ""
  },
  "1831": {
      "prefix": "GetNorthRadarBlip",
      "body": [
          "GetNorthRadarBlip()${0}"
      ],
      "description": ""
  },
  "1832": {
      "prefix": "GetPauseMenuCursorPosition",
      "body": [
          "GetPauseMenuCursorPosition()${0}"
      ],
      "description": "Name between `GET_ONSCREEN_KEYBOARD_RESULT` and `GET_PAUSE_MENU_STATE`. Likely, `GET_PAUSE_MENU_*`."
  },
  "1833": {
      "prefix": "GetNamedRendertargetRenderId",
      "body": [
          "GetNamedRendertargetRenderId(${1:char* name})${0}"
      ],
      "description": ""
  },
  "1834": {
      "prefix": "GetPauseMenuSelection",
      "body": [
          "GetPauseMenuSelection(${1:int* lastItemMenuId}, ${2:int* selectedItemUniqueId})${0}"
      ],
      "description": ""
  },
  "1835": {
      "prefix": "GetNewSelectedMissionCreatorBlip",
      "body": [
          "GetNewSelectedMissionCreatorBlip()${0}"
      ],
      "description": ""
  },
  "1836": {
      "prefix": "GetNumberOfActiveBlips",
      "body": [
          "GetNumberOfActiveBlips()${0}"
      ],
      "description": ""
  },
  "1837": {
      "prefix": "GetRenderedCharacterHeight",
      "body": [
          "GetRenderedCharacterHeight(${1:float* size}, ${2:int* font})${0}"
      ],
      "description": "```\nThis gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.\nOld name: _GET_TEXT_SCALE_HEIGHT\n```"
  },
  "1838": {
      "prefix": "GetPauseMenuSelectionData",
      "body": [
          "GetPauseMenuSelectionData(${1:int* lastItemMenuId}, ${2:int* selectedItemMenuId}, ${3:int* selectedItemUniqueId})${0}"
      ],
      "description": "```\nlastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)\nselectedItemMenuId: same as lastItemMenuId except for the currently selected menu item\nselectedItemUniqueId: this is uniqueID of the currently selected menu item\nwhen the pausemenu is closed:\nlastItemMenuId = -1\nselectedItemMenuId = -1\nselectedItemUniqueId = 0\nwhen the header gains focus:\nlastItemMenuId updates as normal or 0 if the pausemenu was just opened\nselectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened\nselectedItemUniqueId = -1\nwhen focus is moved from the header to a pausemenu page:\nlastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)\nselectedItemMenuId = -1\nselectedItemUniqueId updates as normal\n```"
  },
  "1839": {
      "prefix": "GetStandardBlipEnumId",
      "body": [
          "GetStandardBlipEnumId()${0}"
      ],
      "description": ""
  },
  "1840": {
      "prefix": "GetPauseMenuState",
      "body": [
          "GetPauseMenuState()${0}"
      ],
      "description": "```\nReturns:\n0\n5\n10\n15\n20\n25\n30\n35\n```"
  },
  "1841": {
      "prefix": "GetStreetNameFromHashKey",
      "body": [
          "GetStreetNameFromHashKey(${1:Hash* hash})${0}"
      ],
      "description": "Converts the hash of a street name into a readable string. To retrieve a hash for a given (street) coordinate, see [`GET_STREET_NAME_AT_COORD`](#\\_0x2EB41072B4C1E4C0)."
  },
  "1842": {
      "prefix": "GetTextSubstring",
      "body": [
          "GetTextSubstring(${1:char* text}, ${2:int* position}, ${3:int* length})${0}"
      ],
      "description": "```\nReturns a substring of a specified length starting at a specified position.\nExample:\n// Get \"STRING\" text from \"MY_STRING\"\nsubStr = HUD::_GET_TEXT_SUBSTRING(\"MY_STRING\", 3, 6);\n```"
  },
  "1843": {
      "prefix": "GetWarningMessageTitleHash",
      "body": [
          "GetWarningMessageTitleHash()${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "1844": {
      "prefix": "GetTextSubstringSafe",
      "body": [
          "GetTextSubstringSafe(${1:char* text}, ${2:int* position}, ${3:int* length}, ${4:int* maxLength})${0}"
      ],
      "description": "```\nReturns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.\nNOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69\nExample:\n// Condensed example of how Rockstar uses this function\nstrLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());\nsubStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);\n--\n\"fm_race_creator.ysc\", line 85115:\n// parameters modified for clarity\nBOOL sub_8e5aa(char *text, int length) {\n    for (i = 0; i <= (length - 2); i += 1) {\n        if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), \" \")) {\n            return FALSE;\n        }\n    }\n    return TRUE;\n}\n```"
  },
  "1845": {
      "prefix": "GetWaypointBlipEnumId",
      "body": [
          "GetWaypointBlipEnumId()${0}"
      ],
      "description": ""
  },
  "1846": {
      "prefix": "GetTextSubstringSlice",
      "body": [
          "GetTextSubstringSlice(${1:char* text}, ${2:int* startPosition}, ${3:int* endPosition})${0}"
      ],
      "description": "```\nReturns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).\nExample:\n// Get \"STRING\" text from \"MY_STRING\"\nsubStr = HUD::_GET_TEXT_SUBSTRING_SLICE(\"MY_STRING\", 3, 9);\n// Overflows are possibly replaced with underscores (needs verification)\nsubStr = HUD::_GET_TEXT_SUBSTRING_SLICE(\"MY_STRING\", 3, 10); // \"STRING_\"?\n```"
  },
  "1847": {
      "prefix": "GivePedToPauseMenu",
      "body": [
          "GivePedToPauseMenu(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\np1 is either 1 or 2 in the PC scripts.  \n```\n\nThis native is used to \"give\"/duplicate a player ped to a frontend menu as configured via the `ACTIVATE_FRONTEND_MENU` native, you first must utilize the `CLONE_PED` ( https://runtime.fivem.net/doc/natives/#\\_0xEF29A16337FACADB ) to clone said ped."
  },
  "1848": {
      "prefix": "HasAdditionalTextLoaded",
      "body": [
          "HasAdditionalTextLoaded(${1:int* slot})${0}"
      ],
      "description": ""
  },
  "1849": {
      "prefix": "HasThisAdditionalTextLoaded",
      "body": [
          "HasThisAdditionalTextLoaded(${1:char* gxt}, ${2:int* slot})${0}"
      ],
      "description": "```\nChecks if the specified gxt has loaded into the passed slot.  \n```"
  },
  "1850": {
      "prefix": "HasDirectorModeBeenTriggered",
      "body": [
          "HasDirectorModeBeenTriggered()${0}"
      ],
      "description": "```\nHAS_*\n```"
  },
  "1851": {
      "prefix": "HideAreaAndVehicleNameThisFrame",
      "body": [
          "HideAreaAndVehicleNameThisFrame()${0}"
      ],
      "description": "```\nHIDE_*_THIS_FRAME\n\nHides area and vehicle name HUD components for one frame.\n```"
  },
  "1852": {
      "prefix": "HideHelpTextThisFrame",
      "body": [
          "HideHelpTextThisFrame()${0}"
      ],
      "description": ""
  },
  "1853": {
      "prefix": "HideHudAndRadarThisFrame",
      "body": [
          "HideHudAndRadarThisFrame()${0}"
      ],
      "description": "```\nI think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)  \n```"
  },
  "1854": {
      "prefix": "HideLoadingOnFadeThisFrame",
      "body": [
          "HideLoadingOnFadeThisFrame()${0}"
      ],
      "description": ""
  },
  "1855": {
      "prefix": "HideHudComponentThisFrame",
      "body": [
          "HideHudComponentThisFrame(${1:int* id})${0}"
      ],
      "description": "This function hides various HUD (Heads-up Display) components.\n\nListed below are the integers and the corresponding HUD component.\n\n*   1 : WANTED_STARS\n*   2 : WEAPON_ICON\n*   3 : CASH\n*   4 : MP_CASH\n*   5 : MP_MESSAGE\n*   6 : VEHICLE_NAME\n*   7 : AREA_NAME\n*   8 : VEHICLE_CLASS\n*   9 : STREET_NAME\n*   10 : HELP_TEXT\n*   11 : FLOATING_HELP_TEXT\\_1\n*   12 : FLOATING_HELP_TEXT\\_2\n*   13 : CASH_CHANGE\n*   14 : RETICLE\n*   15 : SUBTITLE_TEXT\n*   16 : RADIO_STATIONS\n*   17 : SAVING_GAME\n*   18 : GAME_STREAM\n*   19 : WEAPON_WHEEL\n*   20 : WEAPON_WHEEL_STATS\n*   21 : HUD_COMPONENTS\n*   22 : HUD_WEAPONS\n\nThese integers also work for the [`SHOW_HUD_COMPONENT_THIS_FRAME`](#\\_0x0B4DF1FA60C0E664) native, but instead shows the HUD Component."
  },
  "1856": {
      "prefix": "HideMinimapExteriorMapThisFrame",
      "body": [
          "HideMinimapExteriorMapThisFrame()${0}"
      ],
      "description": ""
  },
  "1857": {
      "prefix": "HideMinimapInteriorMapThisFrame",
      "body": [
          "HideMinimapInteriorMapThisFrame()${0}"
      ],
      "description": ""
  },
  "1858": {
      "prefix": "HideScriptedHudComponentThisFrame",
      "body": [
          "HideScriptedHudComponentThisFrame(${1:int* id})${0}"
      ],
      "description": ""
  },
  "1859": {
      "prefix": "HudSetWeaponWheelTopSlot",
      "body": [
          "HudSetWeaponWheelTopSlot(${1:Hash* weaponHash})${0}"
      ],
      "description": "```\nSet the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash\n```"
  },
  "1860": {
      "prefix": "HideNumberOnBlip",
      "body": [
          "HideNumberOnBlip(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1861": {
      "prefix": "HudWeaponWheelGetSelectedHash",
      "body": [
          "HudWeaponWheelGetSelectedHash()${0}"
      ],
      "description": "```\nReturns the weapon hash to the selected/highlighted weapon in the wheel\n```"
  },
  "1862": {
      "prefix": "HudDisplayLoadingScreenTips",
      "body": [
          "HudDisplayLoadingScreenTips()${0}"
      ],
      "description": "Displays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand."
  },
  "1863": {
      "prefix": "HudWeaponWheelIgnoreControlInput",
      "body": [
          "HudWeaponWheelIgnoreControlInput(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nSets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc\n```"
  },
  "1864": {
      "prefix": "HudForceWeaponWheel",
      "body": [
          "HudForceWeaponWheel(${1:BOOL* show})${0}"
      ],
      "description": "```\nForces the weapon wheel to show/hide.\n```"
  },
  "1865": {
      "prefix": "IsBlipFlashing",
      "body": [
          "IsBlipFlashing(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1866": {
      "prefix": "HudWeaponWheelGetSlotHash",
      "body": [
          "HudWeaponWheelGetSlotHash(${1:int* weaponTypeIndex})${0}"
      ],
      "description": "```\nReturns the weapon hash active in a specific weapon wheel slotList\n```"
  },
  "1867": {
      "prefix": "HudWeaponWheelIgnoreSelection",
      "body": [
          "HudWeaponWheelIgnoreSelection()${0}"
      ],
      "description": "```\nCalling this each frame, stops the player from receiving a weapon via the weapon wheel.\n```"
  },
  "1868": {
      "prefix": "IsBlipOnMinimap",
      "body": [
          "IsBlipOnMinimap(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1869": {
      "prefix": "IsBlipShortRange",
      "body": [
          "IsBlipShortRange(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1870": {
      "prefix": "IsFrontendReadyForControl",
      "body": [
          "IsFrontendReadyForControl()${0}"
      ],
      "description": ""
  },
  "1871": {
      "prefix": "IsHelpMessageBeingDisplayed",
      "body": [
          "IsHelpMessageBeingDisplayed()${0}"
      ],
      "description": ""
  },
  "1872": {
      "prefix": "IsFloatingHelpTextOnScreen",
      "body": [
          "IsFloatingHelpTextOnScreen(${1:int* hudIndex})${0}"
      ],
      "description": ""
  },
  "1873": {
      "prefix": "IsHelpMessageFadingOut",
      "body": [
          "IsHelpMessageFadingOut()${0}"
      ],
      "description": ""
  },
  "1874": {
      "prefix": "IsHoveringOverMissionCreatorBlip",
      "body": [
          "IsHoveringOverMissionCreatorBlip()${0}"
      ],
      "description": ""
  },
  "1875": {
      "prefix": "IsHelpMessageOnScreen",
      "body": [
          "IsHelpMessageOnScreen()${0}"
      ],
      "description": ""
  },
  "1876": {
      "prefix": "IsHudHidden",
      "body": [
          "IsHudHidden()${0}"
      ],
      "description": ""
  },
  "1877": {
      "prefix": "IsHudComponentActive",
      "body": [
          "IsHudComponentActive(${1:int* id})${0}"
      ],
      "description": "```\nFull list of components below  \nHUD = 0;  \nHUD_WANTED_STARS = 1;  \nHUD_WEAPON_ICON = 2;  \nHUD_CASH = 3;  \nHUD_MP_CASH = 4;  \nHUD_MP_MESSAGE = 5;  \nHUD_VEHICLE_NAME = 6;  \nHUD_AREA_NAME = 7;  \nHUD_VEHICLE_CLASS = 8;  \nHUD_STREET_NAME = 9;  \nHUD_HELP_TEXT = 10;  \nHUD_FLOATING_HELP_TEXT_1 = 11;  \nHUD_FLOATING_HELP_TEXT_2 = 12;  \nHUD_CASH_CHANGE = 13;  \nHUD_RETICLE = 14;  \nHUD_SUBTITLE_TEXT = 15;  \nHUD_RADIO_STATIONS = 16;  \nHUD_SAVING_GAME = 17;  \nHUD_GAME_STREAM = 18;  \nHUD_WEAPON_WHEEL = 19;  \nHUD_WEAPON_WHEEL_STATS = 20;  \nMAX_HUD_COMPONENTS = 21;  \nMAX_HUD_WEAPONS = 22;  \nMAX_SCRIPTED_HUD_COMPONENTS = 141;  \n```"
  },
  "1878": {
      "prefix": "IsHudPreferenceSwitchedOn",
      "body": [
          "IsHudPreferenceSwitchedOn()${0}"
      ],
      "description": ""
  },
  "1879": {
      "prefix": "IsMinimapInInterior",
      "body": [
          "IsMinimapInInterior()${0}"
      ],
      "description": ""
  },
  "1880": {
      "prefix": "IsMissionCreatorBlip",
      "body": [
          "IsMissionCreatorBlip(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1881": {
      "prefix": "IsMpGamerTagFree",
      "body": [
          "IsMpGamerTagFree(${1:int* gamerTagId})${0}"
      ],
      "description": ""
  },
  "1882": {
      "prefix": "IsMessageBeingDisplayed",
      "body": [
          "IsMessageBeingDisplayed()${0}"
      ],
      "description": ""
  },
  "1883": {
      "prefix": "IsMinimapRendering",
      "body": [
          "IsMinimapRendering()${0}"
      ],
      "description": ""
  },
  "1884": {
      "prefix": "IsMultiplayerChatActive",
      "body": [
          "IsMultiplayerChatActive()${0}"
      ],
      "description": "```\nReturns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.  \n```"
  },
  "1885": {
      "prefix": "IsMpGamerTagActive",
      "body": [
          "IsMpGamerTagActive(${1:int* gamerTagId})${0}"
      ],
      "description": ""
  },
  "1886": {
      "prefix": "IsNamedRendertargetLinked",
      "body": [
          "IsNamedRendertargetLinked(${1:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1887": {
      "prefix": "IsMpGamerTagMovieActive",
      "body": [
          "IsMpGamerTagMovieActive()${0}"
      ],
      "description": ""
  },
  "1888": {
      "prefix": "IsNamedRendertargetRegistered",
      "body": [
          "IsNamedRendertargetRegistered(${1:char* name})${0}"
      ],
      "description": ""
  },
  "1889": {
      "prefix": "IsNavigatingMenuContent",
      "body": [
          "IsNavigatingMenuContent()${0}"
      ],
      "description": ""
  },
  "1890": {
      "prefix": "IsPauseMenuRestarting",
      "body": [
          "IsPauseMenuRestarting()${0}"
      ],
      "description": ""
  },
  "1891": {
      "prefix": "IsOnlinePoliciesMenuActive",
      "body": [
          "IsOnlinePoliciesMenuActive()${0}"
      ],
      "description": "Returns the same as `IS_SOCIAL_CLUB_ACTIVE`."
  },
  "1892": {
      "prefix": "IsRadarHidden",
      "body": [
          "IsRadarHidden()${0}"
      ],
      "description": ""
  },
  "1893": {
      "prefix": "IsReportugcMenuOpen",
      "body": [
          "IsReportugcMenuOpen()${0}"
      ],
      "description": ""
  },
  "1894": {
      "prefix": "IsPauseMenuActive",
      "body": [
          "IsPauseMenuActive()${0}"
      ],
      "description": ""
  },
  "1895": {
      "prefix": "IsScriptedHudComponentHiddenThisFrame",
      "body": [
          "IsScriptedHudComponentHiddenThisFrame(${1:int* id})${0}"
      ],
      "description": ""
  },
  "1896": {
      "prefix": "IsRadarPreferenceSwitchedOn",
      "body": [
          "IsRadarPreferenceSwitchedOn()${0}"
      ],
      "description": ""
  },
  "1897": {
      "prefix": "IsScriptedHudComponentActive",
      "body": [
          "IsScriptedHudComponentActive(${1:int* id})${0}"
      ],
      "description": ""
  },
  "1898": {
      "prefix": "IsStreamingAdditionalText",
      "body": [
          "IsStreamingAdditionalText(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "1899": {
      "prefix": "IsSubtitlePreferenceSwitchedOn",
      "body": [
          "IsSubtitlePreferenceSwitchedOn()${0}"
      ],
      "description": ""
  },
  "1900": {
      "prefix": "IsSocialClubActive",
      "body": [
          "IsSocialClubActive()${0}"
      ],
      "description": ""
  },
  "1901": {
      "prefix": "IsWarningMessageActive2",
      "body": [
          "IsWarningMessageActive2()${0}"
      ],
      "description": "```\nIS_WARNING_MESSAGE_*\n```"
  },
  "1902": {
      "prefix": "IsValidMpGamerTagMovie",
      "body": [
          "IsValidMpGamerTagMovie(${1:int* gamerTagId})${0}"
      ],
      "description": "```\nIS_*\n```"
  },
  "1903": {
      "prefix": "IsWaypointActive",
      "body": [
          "IsWaypointActive()${0}"
      ],
      "description": ""
  },
  "1904": {
      "prefix": "IsWarningMessageActive",
      "body": [
          "IsWarningMessageActive()${0}"
      ],
      "description": ""
  },
  "1905": {
      "prefix": "LockMinimapAngle",
      "body": [
          "LockMinimapAngle(${1:int* angle})${0}"
      ],
      "description": "```\nLocks the minimap to the specified angle in integer degrees.  \nangle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.  \n```"
  },
  "1906": {
      "prefix": "LinkNamedRendertarget",
      "body": [
          "LinkNamedRendertarget(${1:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "1907": {
      "prefix": "LockMinimapPosition",
      "body": [
          "LockMinimapPosition(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": "```\nLocks the minimap to the specified world position.  \n```"
  },
  "1908": {
      "prefix": "LogDebugInfo",
      "body": [
          "LogDebugInfo(${1:char* p0})${0}"
      ],
      "description": "```\nNot present in retail version of the game, actual definiton seems to be\n_LOG_DEBUG_INFO(const char* category, const char* debugText);\n```"
  },
  "1909": {
      "prefix": "ThefeedForceRenderOff",
      "body": [
          "ThefeedForceRenderOff()${0}"
      ],
      "description": "Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again."
  },
  "1910": {
      "prefix": "ThefeedCommentTeleportPoolOff",
      "body": [
          "ThefeedCommentTeleportPoolOff()${0}"
      ],
      "description": "```\nDisplays \"normal\" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).\n```"
  },
  "1911": {
      "prefix": "OpenOnlinePoliciesMenu",
      "body": [
          "OpenOnlinePoliciesMenu()${0}"
      ],
      "description": ""
  },
  "1912": {
      "prefix": "OpenSocialClubMenu",
      "body": [
          "OpenSocialClubMenu()${0}"
      ],
      "description": "Uses the `SOCIAL_CLUB2` scaleform."
  },
  "1913": {
      "prefix": "OpenReportugcMenu",
      "body": [
          "OpenReportugcMenu()${0}"
      ],
      "description": "```\nShows a menu for reporting UGC content.\n```"
  },
  "1914": {
      "prefix": "OverrideMultiplayerChatColour",
      "body": [
          "OverrideMultiplayerChatColour(${1:int* p0}, ${2:int* hudColor})${0}"
      ],
      "description": ""
  },
  "1915": {
      "prefix": "PauseMenuActivateContext",
      "body": [
          "PauseMenuActivateContext(${1:Hash* hash})${0}"
      ],
      "description": "Activates the specified frontend menu context.\n\npausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.\n\nThe `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.\n\nThe `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.\n\nThis basically allows you to hide certain menu sections, or things like instructional buttons.\n\nSee the old description below for more info.\n\n***\n\n> Seems to add/set the current menu context (to show/hide buttons?)\n> Pausemenu.xml:\n> `<Contexts>*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION</Contexts>`\n> Code:\n>\n> ```\n> if (...) {\n>     sub_bbd34(a_0, 0, \"FM_BET_HELP\");\n>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_available}); // This native\n>     UI::OBJECT_DECAL_TOGGLE(${bet_locked});\n> } else {\n>     sub_bbd34(a_0, 0, \"\");\n>     UI::OBJECT_DECAL_TOGGLE(${bet_available});\n>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_locked}); // This native\n> }\n> ```\n>\n> OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision\n> // Old\n> Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, \"OBJECT_DECAL_TOGGLE\" is called prior."
  },
  "1916": {
      "prefix": "PauseMenuDeactivateContext",
      "body": [
          "PauseMenuDeactivateContext(${1:Hash* contextHash})${0}"
      ],
      "description": ""
  },
  "1917": {
      "prefix": "OverrideMultiplayerChatPrefix",
      "body": [
          "OverrideMultiplayerChatPrefix(${1:Hash* gxtEntryHash})${0}"
      ],
      "description": ""
  },
  "1918": {
      "prefix": "PauseMenuIsContextActive",
      "body": [
          "PauseMenuIsContextActive(${1:Hash* contextHash})${0}"
      ],
      "description": ""
  },
  "1919": {
      "prefix": "PauseMenuIsContextMenuActive",
      "body": [
          "PauseMenuIsContextMenuActive()${0}"
      ],
      "description": ""
  },
  "1920": {
      "prefix": "PulseBlip",
      "body": [
          "PulseBlip(${1:Blip* blip})${0}"
      ],
      "description": ""
  },
  "1921": {
      "prefix": "PauseMenuSetBusySpinner",
      "body": [
          "PauseMenuSetBusySpinner(${1:BOOL* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "1922": {
      "prefix": "PreloadBusyspinner",
      "body": [
          "PreloadBusyspinner()${0}"
      ],
      "description": ""
  },
  "1923": {
      "prefix": "RaceGalleryAddBlip",
      "body": [
          "RaceGalleryAddBlip(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nAdd a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.\n```"
  },
  "1924": {
      "prefix": "RaceGalleryFullscreen",
      "body": [
          "RaceGalleryFullscreen(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf toggle is true, the map is shown in full screen\nIf toggle is false, the map is shown in normal mode\n```"
  },
  "1925": {
      "prefix": "RefreshWaypoint",
      "body": [
          "RefreshWaypoint()${0}"
      ],
      "description": ""
  },
  "1926": {
      "prefix": "RaceGalleryNextBlipSprite",
      "body": [
          "RaceGalleryNextBlipSprite(${1:int* spriteId})${0}"
      ],
      "description": "```\nSets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).\n```"
  },
  "1927": {
      "prefix": "RegisterNamedRendertarget",
      "body": [
          "RegisterNamedRendertarget(${1:char* name}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "1928": {
      "prefix": "ReleaseControlOfFrontend",
      "body": [
          "ReleaseControlOfFrontend()${0}"
      ],
      "description": "Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.\n\nTo disable the keys, use [`0xEC9264727EEC0F28`](#\\_0xEC9264727EEC0F28)."
  },
  "1929": {
      "prefix": "ReleaseNamedRendertarget",
      "body": [
          "ReleaseNamedRendertarget(${1:char* name})${0}"
      ],
      "description": ""
  },
  "1930": {
      "prefix": "RemoveBlip",
      "body": [
          "RemoveBlip(${1:Blip* blip})${0}"
      ],
      "description": "```\nIn the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.\nE.g.:\nPed pped = PLAYER::PLAYER_PED_ID();\nVehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);\nBlip b = HUD::ADD_BLIP_FOR_ENTITY(v);\nworks fine.\nBut later attempting to delete it with:\nBlip b = HUD::GET_BLIP_FROM_ENTITY(v);\nif (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);\ndoesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).\nThus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.\n-------------\nPassing the address of the variable instead of the value works for me.\ne.g.\nint blip = HUD::ADD_BLIP_FOR_ENTITY(ped);\nHUD::REMOVE_BLIP(&blip);\nRemove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.\n--\nIt crashes my game.\n```"
  },
  "1931": {
      "prefix": "RemoveMultiplayerBankCash",
      "body": [
          "RemoveMultiplayerBankCash()${0}"
      ],
      "description": ""
  },
  "1932": {
      "prefix": "RemoveMultiplayerWalletCash",
      "body": [
          "RemoveMultiplayerWalletCash()${0}"
      ],
      "description": ""
  },
  "1933": {
      "prefix": "ReplaceHudColourWithRgba",
      "body": [
          "ReplaceHudColourWithRgba(${1:int* hudColorIndex}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* a})${0}"
      ],
      "description": "```\nHUD colors and their values: pastebin.com/d9aHPbXN  \n```"
  },
  "1934": {
      "prefix": "RemoveMpGamerTag",
      "body": [
          "RemoveMpGamerTag(${1:int* gamerTagId})${0}"
      ],
      "description": ""
  },
  "1935": {
      "prefix": "RemoveMultiplayerHudCash",
      "body": [
          "RemoveMultiplayerHudCash()${0}"
      ],
      "description": "```\nRemoves multiplayer cash hud each frame  \n```"
  },
  "1936": {
      "prefix": "RequestAdditionalText",
      "body": [
          "RequestAdditionalText(${1:char* gxt}, ${2:int* slot})${0}"
      ],
      "description": "```\nRequest a gxt into the passed slot.  \n```"
  },
  "1937": {
      "prefix": "ResetHudComponentValues",
      "body": [
          "ResetHudComponentValues(${1:int* id})${0}"
      ],
      "description": ""
  },
  "1938": {
      "prefix": "RemoveWarningMessageListItems",
      "body": [
          "RemoveWarningMessageListItems()${0}"
      ],
      "description": ""
  },
  "1939": {
      "prefix": "ResetReticuleValues",
      "body": [
          "ResetReticuleValues()${0}"
      ],
      "description": ""
  },
  "1940": {
      "prefix": "ReplaceHudColour",
      "body": [
          "ReplaceHudColour(${1:int* hudColorIndex}, ${2:int* hudColorIndex2})${0}"
      ],
      "description": "```\nHUD colors and their values: pastebin.com/d9aHPbXN  \n--------------------------------------------------  \nmakes hudColorIndex2 color into hudColorIndex color  \n```"
  },
  "1941": {
      "prefix": "RequestAdditionalTextForDlc",
      "body": [
          "RequestAdditionalTextForDlc(${1:char* gxt}, ${2:int* slot})${0}"
      ],
      "description": ""
  },
  "1942": {
      "prefix": "RestartFrontendMenu",
      "body": [
          "RestartFrontendMenu(${1:Hash* menuHash}, ${2:int* p1})${0}"
      ],
      "description": "```\nBefore using this native click the native above and look at the decription.  \nExample:  \nint GetHash = Function.Call<int>(Hash.GET_HASH_KEY, \"fe_menu_version_corona_lobby\");  \nFunction.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);  \nFunction.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);  \nThis native refreshes the frontend menu.  \np1 = Hash of Menu  \np2 = Unknown but always works with -1.  \n```"
  },
  "1943": {
      "prefix": "SetAbilityBarValue",
      "body": [
          "SetAbilityBarValue(${1:float* value}, ${2:float* maxValue})${0}"
      ],
      "description": ""
  },
  "1944": {
      "prefix": "ResetGlobalActionscriptFlag",
      "body": [
          "ResetGlobalActionscriptFlag(${1:int* flagIndex})${0}"
      ],
      "description": ""
  },
  "1945": {
      "prefix": "SetAbilityBarVisibilityInMultiplayer",
      "body": [
          "SetAbilityBarVisibilityInMultiplayer(${1:BOOL* visible})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "1946": {
      "prefix": "SetAllowAbilityBarInMultiplayer",
      "body": [
          "SetAllowAbilityBarInMultiplayer(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "1947": {
      "prefix": "SetBigmapActive",
      "body": [
          "SetBigmapActive(${1:BOOL* toggleBigMap}, ${2:BOOL* showFullMap})${0}"
      ],
      "description": "Toggles the big minimap state like in GTA:Online.\n\nTo get the current state of the minimap, use [`GetBigmapActive`](#\\_0xF6AE18A7)."
  },
  "1948": {
      "prefix": "SetBlipAsMissionCreatorBlip",
      "body": [
          "SetBlipAsMissionCreatorBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1949": {
      "prefix": "SetBlipAlpha",
      "body": [
          "SetBlipAlpha(${1:Blip* blip}, ${2:int* alpha})${0}"
      ],
      "description": "```\nSets alpha-channel for blip color.\nExample:\nBlip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);\nHUD::SET_BLIP_COLOUR(blip , 3);\nHUD::SET_BLIP_ALPHA(blip , 64);\n```"
  },
  "1950": {
      "prefix": "SetBlipAsShortRange",
      "body": [
          "SetBlipAsShortRange(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Sets whether or not the specified blip should only be displayed when nearby, or on the minimap."
  },
  "1951": {
      "prefix": "SetBlipAsFriendly",
      "body": [
          "SetBlipAsFriendly(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nfalse for enemy  \ntrue for friendly  \n```"
  },
  "1952": {
      "prefix": "SetBlipBright",
      "body": [
          "SetBlipBright(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1953": {
      "prefix": "SetBlipColour",
      "body": [
          "SetBlipColour(${1:Blip* blip}, ${2:int* color})${0}"
      ],
      "description": "```\n(Hex code are approximate)  \n0: White (#fefefe)  \n1: Red (#e03232)  \n2: Green (#71cb71)  \n3: Blue (#5db6e5)  \n4: White (#fefefe)  \n5: Taxi Yellow (#eec64e)  \n6: Light Red (#c25050)  \n7: Violet (#9c6eaf)  \n8: Pink (#fe7ac3)  \n9: Light Orange (#f59d79)  \n10: Light Brown (#b18f83)  \n11: Light Green (#8dcea7)  \n12: Light Blue (Teal) (#70a8ae)  \n13: Very Light Purple (#d3d1e7)  \n14: Dark Purple (#8f7e98)  \n15: Cyan (#6ac4bf)  \n16: Light Yellow (#d5c398)  \n17: Orange (#ea8e50)  \n18: Light Blue (#97cae9)  \n19: Dark Pink (#b26287)  \n20: Dark Yellow (#8f8d79)  \n21: Dark Orange (#a6755e)  \n22: Light Gray (#afa8a8)  \n23: Light Pink (#e78d9a)  \n24: Lemon Green (#bbd65b)  \n25: Forest Green (#0c7b56)  \n26: Electric Blue (#7ac3fe)  \n27: Bright Purple (#ab3ce6)  \n28: Dark Taxi Yellow (#cda80c)  \n29: Dark Blue (#4561ab)  \n30: Dark Cyan (#29a5b8)  \n31: Light Brown (#b89b7b)  \n32: Very Light Blue (#c8e0fe)  \n33: Light Yellow (#f0f096)  \n34: Light Pink (#ed8ca1)  \n35: Light Red (#f98a8a)  \n36: Light Yellow (#fbeea5)  \n37: White (#fefefe)  \n38: Blue (#2c6db8)  \n39: Light Gray (#9a9a9a)  \n40: Dark Gray (#4c4c4c)  \nCertainly a lot more remaining.  \n```"
  },
  "1954": {
      "prefix": "SetBlipCoords",
      "body": [
          "SetBlipCoords(${1:Blip* blip}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})${0}"
      ],
      "description": ""
  },
  "1955": {
      "prefix": "SetBlipCategory",
      "body": [
          "SetBlipCategory(${1:Blip* blip}, ${2:int* index})${0}"
      ],
      "description": "Examples result:\n\n![](https://i.imgur.com/skY6vAJ.png)\n\n**index:**\n\n```\n1 = No distance shown in legend\n2 = Distance shown in legend\n7 = \"Other Players\" category, also shows distance in legend\n10 = \"Property\" category\n11 = \"Owned Property\" category\n```\n\nAny other value behaves like `index = 1`, `index` wraps around after 255\n\nBlips with categories `7`, `10` or `11` will all show under the specific categories listing in the map legend, regardless of sprite or name.\n\n**Legend entries**\n\n| index | Legend entry | Label |\n| --- | --- | --- |\n| 7 | Other Players | `BLIP_OTHPLYR` |\n| 10 | Property | `BLIP_PROPCAT` |\n| 11 | Owned Property | `BLIP_APARTCAT` |"
  },
  "1956": {
      "prefix": "SetBlipFade",
      "body": [
          "SetBlipFade(${1:Blip* blip}, ${2:int* opacity}, ${3:int* duration})${0}"
      ],
      "description": ""
  },
  "1957": {
      "prefix": "SetBlipDisplay",
      "body": [
          "SetBlipDisplay(${1:Blip* blip}, ${2:int* displayId})${0}"
      ],
      "description": "**displayId Behaviour** <br>\n0 = Doesn't show up, ever, anywhere. <br>\n1 = Doesn't show up, ever, anywhere. <br>\n2 = Shows on both main map and minimap. (Selectable on map) <br>\n3 = Shows on main map only. (Selectable on map) <br>\n4 = Shows on main map only. (Selectable on map) <br>\n5 = Shows on minimap only. <br>\n6 = Shows on both main map and minimap. (Selectable on map) <br>\n7 = Doesn't show up, ever, anywhere. <br>\n8 = Shows on both main map and minimap. (Not selectable on map) <br>\n9 = Shows on minimap only. <br>\n10 = Shows on both main map and minimap. (Not selectable on map) <br>\nAnything higher than 10 seems to be exactly the same as 10. <br>\n<br>\nRockstar seem to only use 0, 2, 3, 4, 5 and 8 in the decompiled scripts."
  },
  "1958": {
      "prefix": "SetBlipDisplayIndicatorOnBlip",
      "body": [
          "SetBlipDisplayIndicatorOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nMust be toggled before being queued for animation\n```"
  },
  "1959": {
      "prefix": "SetBlipFlashTimer",
      "body": [
          "SetBlipFlashTimer(${1:Blip* blip}, ${2:int* duration})${0}"
      ],
      "description": "```\nAdds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.  \n```"
  },
  "1960": {
      "prefix": "SetBlipFlashInterval",
      "body": [
          "SetBlipFlashInterval(${1:Blip* blip}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "1961": {
      "prefix": "SetBlipFlashes",
      "body": [
          "SetBlipFlashes(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1962": {
      "prefix": "SetBlipFlashesAlternate",
      "body": [
          "SetBlipFlashesAlternate(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1963": {
      "prefix": "SetBlipHighDetail",
      "body": [
          "SetBlipHighDetail(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1964": {
      "prefix": "SetBlipHiddenOnLegend",
      "body": [
          "SetBlipHiddenOnLegend(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1965": {
      "prefix": "SetBlipNameFromTextFile",
      "body": [
          "SetBlipNameFromTextFile(${1:Blip* blip}, ${2:char* gxtEntry})${0}"
      ],
      "description": "```\nDoesn't work if the label text of gxtEntry is >= 80.  \n```"
  },
  "1966": {
      "prefix": "SetBlipNameToPlayerName",
      "body": [
          "SetBlipNameToPlayerName(${1:Blip* blip}, ${2:Player* player})${0}"
      ],
      "description": ""
  },
  "1967": {
      "prefix": "SetBlipRotation",
      "body": [
          "SetBlipRotation(${1:Blip* blip}, ${2:int* rotation})${0}"
      ],
      "description": "```\nAfter some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.\n```"
  },
  "1968": {
      "prefix": "SetBlipPriority",
      "body": [
          "SetBlipPriority(${1:Blip* blip}, ${2:int* priority})${0}"
      ],
      "description": "```\nSee this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935  \n```"
  },
  "1969": {
      "prefix": "SetBlipRoute",
      "body": [
          "SetBlipRoute(${1:Blip* blip}, ${2:BOOL* enabled})${0}"
      ],
      "description": "```\nEnable / disable showing route for the Blip-object.  \n```"
  },
  "1970": {
      "prefix": "SetBlipScale",
      "body": [
          "SetBlipScale(${1:Blip* blip}, ${2:float* scale})${0}"
      ],
      "description": ""
  },
  "1971": {
      "prefix": "SetBlipRouteColour",
      "body": [
          "SetBlipRouteColour(${1:Blip* blip}, ${2:int* colour})${0}"
      ],
      "description": ""
  },
  "1972": {
      "prefix": "SetBlipScaleTransformation",
      "body": [
          "SetBlipScaleTransformation(${1:Blip* blip}, ${2:float* xScale}, ${3:float* yScale})${0}"
      ],
      "description": "See https://imgur.com/a/lLkEsMN\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "1973": {
      "prefix": "SetBlipSprite",
      "body": [
          "SetBlipSprite(${1:Blip* blip}, ${2:int* spriteId})${0}"
      ],
      "description": "<!--\n_loc1_.map((name, idx) => `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\\n')\n-->\n\nSets the displayed sprite for a specific blip.\n\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site."
  },
  "1974": {
      "prefix": "SetBlipSecondaryColour",
      "body": [
          "SetBlipSecondaryColour(${1:Blip* blip}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "1975": {
      "prefix": "SetBlipSquaredRotation",
      "body": [
          "SetBlipSquaredRotation(${1:Blip* blip}, ${2:float* heading})${0}"
      ],
      "description": "```\nDoes not require whole number/integer rotations.\n```"
  },
  "1976": {
      "prefix": "SetBlipShowCone",
      "body": [
          "SetBlipShowCone(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "1977": {
      "prefix": "SetColourOfNextTextComponent",
      "body": [
          "SetColourOfNextTextComponent(${1:int* hudColor})${0}"
      ],
      "description": ""
  },
  "1978": {
      "prefix": "SetBlipShrink",
      "body": [
          "SetBlipShrink(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nMakes a blip go small when off the minimap.\nSET_BLIP_AS_*\n```"
  },
  "1979": {
      "prefix": "SetFloatingHelpTextScreenPosition",
      "body": [
          "SetFloatingHelpTextScreenPosition(${1:int* hudIndex}, ${2:float* x}, ${3:float* y})${0}"
      ],
      "description": ""
  },
  "1980": {
      "prefix": "SetDirectorModeClearTriggeredFlag",
      "body": [
          "SetDirectorModeClearTriggeredFlag()${0}"
      ],
      "description": "```\nSET_*\n```"
  },
  "1981": {
      "prefix": "SetFloatingHelpTextToEntity",
      "body": [
          "SetFloatingHelpTextToEntity(${1:int* hudIndex}, ${2:Entity* entity}, ${3:float* offsetX}, ${4:float* offsetY})${0}"
      ],
      "description": ""
  },
  "1982": {
      "prefix": "SetFloatingHelpTextStyle",
      "body": [
          "SetFloatingHelpTextStyle(${1:int* hudIndex}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3}, ${5:int* p4}, ${6:int* p5})${0}"
      ],
      "description": ""
  },
  "1983": {
      "prefix": "SetFrontendActive",
      "body": [
          "SetFrontendActive(${1:BOOL* active})${0}"
      ],
      "description": ""
  },
  "1984": {
      "prefix": "SetGpsCustomRouteRender",
      "body": [
          "SetGpsCustomRouteRender(${1:BOOL* toggle}, ${2:int* radarThickness}, ${3:int* mapThickness})${0}"
      ],
      "description": ""
  },
  "1985": {
      "prefix": "SetFloatingHelpTextWorldPosition",
      "body": [
          "SetFloatingHelpTextWorldPosition(${1:int* hudIndex}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "1986": {
      "prefix": "SetGpsFlags",
      "body": [
          "SetGpsFlags(${1:int* p0}, ${2:float* p1})${0}"
      ],
      "description": "```\nOnly the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.\nDoesn't seem like the flags are actually read by the game at all.\n```"
  },
  "1987": {
      "prefix": "SetGpsFlashes",
      "body": [
          "SetGpsFlashes(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1988": {
      "prefix": "SetHudComponentPosition",
      "body": [
          "SetHudComponentPosition(${1:int* id}, ${2:float* x}, ${3:float* y})${0}"
      ],
      "description": ""
  },
  "1989": {
      "prefix": "SetGpsMultiRouteRender",
      "body": [
          "SetGpsMultiRouteRender(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1990": {
      "prefix": "SetInteriorZoomLevelDecreased",
      "body": [
          "SetInteriorZoomLevelDecreased(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "1991": {
      "prefix": "SetHealthHudDisplayValues",
      "body": [
          "SetHealthHudDisplayValues(${1:int* health}, ${2:int* capacity}, ${3:BOOL* wasAdded})${0}"
      ],
      "description": ""
  },
  "1992": {
      "prefix": "SetInteriorZoomLevelIncreased",
      "body": [
          "SetInteriorZoomLevelIncreased(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "1993": {
      "prefix": "SetHelpMessageTextStyle",
      "body": [
          "SetHelpMessageTextStyle(${1:int* style}, ${2:int* hudColor}, ${3:int* alpha}, ${4:int* p3}, ${5:int* p4})${0}"
      ],
      "description": ""
  },
  "1994": {
      "prefix": "SetMainPlayerBlipColour",
      "body": [
          "SetMainPlayerBlipColour(${1:int* color})${0}"
      ],
      "description": ""
  },
  "1995": {
      "prefix": "SetMaxArmourHudDisplay",
      "body": [
          "SetMaxArmourHudDisplay(${1:int* maximumValue})${0}"
      ],
      "description": ""
  },
  "1996": {
      "prefix": "SetMaxHealthHudDisplay",
      "body": [
          "SetMaxHealthHudDisplay(${1:int* maximumValue})${0}"
      ],
      "description": ""
  },
  "1997": {
      "prefix": "SetMinimapAltitudeIndicatorLevel",
      "body": [
          "SetMinimapAltitudeIndicatorLevel(${1:float* altitude}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nArgument must be 0.0f or above 38.0f, or it will be ignored.  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "1998": {
      "prefix": "SetMinimapBlockWaypoint",
      "body": [
          "SetMinimapBlockWaypoint(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "1999": {
      "prefix": "SetMinimapComponent",
      "body": [
          "SetMinimapComponent(${1:int* componentID}, ${2:BOOL* toggle}, ${3:int* hudColor})${0}"
      ],
      "description": "This native is used to colorize certain map components like the army base at the top of the map.\n\nAn incomplete list of components ID:\n\n0: Los Santos' air port yellow lift-off markers.\n1: Sandy Shore's air port yellow lift-off markers.\n2: Trevor's air port yellow lift-off markers.\n6: Vespucci Beach lifeguard building.\n15: Army base.\n\n[List of hud colors](https://pastebin.com/d9aHPbXN)"
  },
  "2000": {
      "prefix": "SetMinimapFowRevealCoordinate",
      "body": [
          "SetMinimapFowRevealCoordinate(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "2001": {
      "prefix": "SetMinimapGolfCourseOff",
      "body": [
          "SetMinimapGolfCourseOff()${0}"
      ],
      "description": ""
  },
  "2002": {
      "prefix": "SetMinimapHideFow",
      "body": [
          "SetMinimapHideFow(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf true, the entire map will be revealed.\n```"
  },
  "2003": {
      "prefix": "SetMinimapGolfCourse",
      "body": [
          "SetMinimapGolfCourse(${1:int* hole})${0}"
      ],
      "description": "Not much is known so far on what it does *exactly*.\nAll I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.\n\nYou need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.\nYou'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.\n\nUse [`N_0x35edd5b2e3ff01c0()`](https://runtime.fivem.net/doc/reference.html#\\_0x35EDD5B2E3FF01C0) to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this)."
  },
  "2004": {
      "prefix": "SetMinimapInPrologue",
      "body": [
          "SetMinimapInPrologue(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles the North Yankton map\n```"
  },
  "2005": {
      "prefix": "SetMinimapInSpectatorMode",
      "body": [
          "SetMinimapInSpectatorMode(${1:BOOL* toggle}, ${2:Ped* ped})${0}"
      ],
      "description": ""
  },
  "2006": {
      "prefix": "SetMissionName",
      "body": [
          "SetMissionName(${1:BOOL* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2007": {
      "prefix": "SetMinimapSonarEnabled",
      "body": [
          "SetMinimapSonarEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2008": {
      "prefix": "SetMissionName2",
      "body": [
          "SetMissionName2(${1:BOOL* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2009": {
      "prefix": "SetMouseCursorActiveThisFrame",
      "body": [
          "SetMouseCursorActiveThisFrame()${0}"
      ],
      "description": "```\nShows the cursor on screen for one frame.\n```"
  },
  "2010": {
      "prefix": "SetMouseCursorSprite",
      "body": [
          "SetMouseCursorSprite(${1:int* spriteId})${0}"
      ],
      "description": "```\nChanges the mouse cursor's sprite.   \npublic enum CursorType  \n{  \n    None = 0,  \n    Normal = 1,  \n    TransparentNormal = 2,  \n    PreGrab = 3,  \n    Grab = 4,  \n    MiddleFinger = 5,  \n    LeftArrow = 6,  \n    RightArrow = 7,  \n    UpArrow = 8,  \n    DownArrow = 9,  \n    HorizontalExpand = 10,  \n    Add = 11,  \n    Remove = 12,  \n}  \n```"
  },
  "2011": {
      "prefix": "SetMouseCursorVisibleInMenus",
      "body": [
          "SetMouseCursorVisibleInMenus(${1:BOOL* enable})${0}"
      ],
      "description": "Shows/hides the frontend cursor on the pause menu or similar menus.\nClicking off and then on the game window will show it again."
  },
  "2012": {
      "prefix": "SetMpGamerHealthBarDisplay",
      "body": [
          "SetMpGamerHealthBarDisplay(${1:int* gamerTagId}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "2013": {
      "prefix": "SetMpGamerHealthBarMax",
      "body": [
          "SetMpGamerHealthBarMax(${1:int* gamerTagId}, ${2:int* value}, ${3:int* maximumValue})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "2014": {
      "prefix": "SetMpGamerTagBigText",
      "body": [
          "SetMpGamerTagBigText(${1:int* gamerTagId}, ${2:char* string})${0}"
      ],
      "description": ""
  },
  "2015": {
      "prefix": "SetMpGamerTagEnabled",
      "body": [
          "SetMpGamerTagEnabled(${1:int* gamerTagId}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2016": {
      "prefix": "SetMpGamerTagAlpha",
      "body": [
          "SetMpGamerTagAlpha(${1:int* gamerTagId}, ${2:int* component}, ${3:int* alpha})${0}"
      ],
      "description": "```\nSets flag's sprite transparency. 0-255.  \n```"
  },
  "2017": {
      "prefix": "SetMpGamerTagIcons",
      "body": [
          "SetMpGamerTagIcons(${1:int* gamerTagId}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nDisplays a bunch of icons above the players name, and level, and their name twice  \n```"
  },
  "2018": {
      "prefix": "SetMpGamerTagColour",
      "body": [
          "SetMpGamerTagColour(${1:int* gamerTagId}, ${2:int* component}, ${3:int* hudColorIndex})${0}"
      ],
      "description": "Sets a gamer tag's component colour"
  },
  "2019": {
      "prefix": "SetMpGamerTagName",
      "body": [
          "SetMpGamerTagName(${1:int* gamerTagId}, ${2:char* string})${0}"
      ],
      "description": ""
  },
  "2020": {
      "prefix": "SetMpGamerTagWantedLevel",
      "body": [
          "SetMpGamerTagWantedLevel(${1:int* gamerTagId}, ${2:int* wantedlvl})${0}"
      ],
      "description": "```\ndisplays wanted star above head  \n```"
  },
  "2021": {
      "prefix": "SetMpGamerTagHealthBarColour",
      "body": [
          "SetMpGamerTagHealthBarColour(${1:int* gamerTagId}, ${2:int* hudColorIndex})${0}"
      ],
      "description": "Should be enabled as component (2). Has 0 alpha by default."
  },
  "2022": {
      "prefix": "SetMpGamerTagMpBagLargeCount",
      "body": [
          "SetMpGamerTagMpBagLargeCount(${1:int* gamerTagId}, ${2:int* count})${0}"
      ],
      "description": "```\ndisplays wanted star above head  \n```"
  },
  "2023": {
      "prefix": "SetMultiplayerBankCash",
      "body": [
          "SetMultiplayerBankCash()${0}"
      ],
      "description": "Preview image:\n\n![](https://i.imgur.com/1BTmdyv.png)\n\nTo change the bank balance use [`STAT_SET_INT`](#\\_0xB3271D7AB655B441) with \"BANK_BALANCE\" to whatever value you need to."
  },
  "2024": {
      "prefix": "SetMpGamerTagVisibility",
      "body": [
          "SetMpGamerTagVisibility(${1:int* gamerTagId}, ${2:int* component}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```cpp\nenum eMpGamerTagComponent\n{\n\tMP_TAG_GAMER_NAME,\n\tMP_TAG_CREW_TAG,\n\tMP_TAG_HEALTH_ARMOUR,\n\tMP_TAG_BIG_TEXT,\n\tMP_TAG_AUDIO_ICON,\n\tMP_TAG_USING_MENU,\n\tMP_TAG_PASSIVE_MODE,\n\tMP_TAG_WANTED_STARS,\n\tMP_TAG_DRIVER,\n\tMP_TAG_CO_DRIVER,\n\tMP_TAG_TAGGED,\n\tMP_TAG_GAMER_NAME_NEARBY,\n\tMP_TAG_ARROW,\n\tMP_TAG_PACKAGES,\n\tMP_TAG_INV_IF_PED_FOLLOWING,\n\tMP_TAG_RANK_TEXT,\n\tMP_TAG_TYPING,\n\tMP_TAG_BAG_LARGE,\n\tMP_TAG_ARROW,\n\tMP_TAG_GANG_CEO,\n\tMP_TAG_GANG_BIKER,\n\tMP_TAG_BIKER_ARROW,\n\tMP_TAG_MC_ROLE_PRESIDENT,\n\tMP_TAG_MC_ROLE_VICE_PRESIDENT,\n\tMP_TAG_MC_ROLE_ROAD_CAPTAIN,\n\tMP_TAG_MC_ROLE_SARGEANT,\n\tMP_TAG_MC_ROLE_ENFORCER,\n\tMP_TAG_MC_ROLE_PROSPECT,\n\tMP_TAG_TRANSMITTER,\n\tMP_TAG_BOMB\n};\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "2025": {
      "prefix": "SetMultiplayerHudCash",
      "body": [
          "SetMultiplayerHudCash(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "2026": {
      "prefix": "SetMultiplayerWalletCash",
      "body": [
          "SetMultiplayerWalletCash()${0}"
      ],
      "description": "Preview image:\n\n![](https://i.imgur.com/1BTmdyv.png)\n\nTo change money value use [`STAT_SET_INT`](#\\_0xB3271D7AB655B441) with \"MP0\\_WALLET_BALANCE\" to whatever value you need to."
  },
  "2027": {
      "prefix": "SetPauseMenuActive",
      "body": [
          "SetPauseMenuActive(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2028": {
      "prefix": "SetNewWaypoint",
      "body": [
          "SetNewWaypoint(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": ""
  },
  "2029": {
      "prefix": "SetPauseMenuPedSleepState",
      "body": [
          "SetPauseMenuPedSleepState(${1:BOOL* state})${0}"
      ],
      "description": "Toggles the pause menu ped sleep state for frontend menus.\n\n[Example GIF](https://vespura.com/hi/i/2019-04-01\\_15-51\\_8ed38\\_1014.gif)"
  },
  "2030": {
      "prefix": "SetPedAiBlipGangId",
      "body": [
          "SetPedAiBlipGangId(${1:Ped* ped}, ${2:int* gangId})${0}"
      ],
      "description": ""
  },
  "2031": {
      "prefix": "SetPauseMenuPedLighting",
      "body": [
          "SetPauseMenuPedLighting(${1:BOOL* state})${0}"
      ],
      "description": "Toggles the light state for the pause menu ped in frontend menus.\n\nThis is used by R\\* in combination with [`SET_PAUSE_MENU_PED_SLEEP_STATE`](#\\_0xECF128344E9FF9F1) to toggle the \"offline\" or \"online\" state in the \"friends\" tab of the pause menu in GTA Online.\n\nExample:\nOn: ![lights on](https://vespura.com/hi/i/2019-04-01\\_16-09\\_540ee\\_1015.png)\nOff: ![lights off](https://vespura.com/hi/i/2019-04-01\\_16-10\\_8b5e7\\_1016.png)"
  },
  "2032": {
      "prefix": "SetPedAiBlipForcedOn",
      "body": [
          "SetPedAiBlipForcedOn(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nif \"flag\" is true, the AI blip will always be displayed for the specified ped, if it has an AI blip  \nIf \"flag\" is false, the AI blip will only be displayed when the player is in combat with the specified ped, if it has an AI blip  \n```"
  },
  "2033": {
      "prefix": "SetPedAiBlipNoticeRange",
      "body": [
          "SetPedAiBlipNoticeRange(${1:Ped* ped}, ${2:float* range})${0}"
      ],
      "description": ""
  },
  "2034": {
      "prefix": "SetPedAiBlipHasCone",
      "body": [
          "SetPedAiBlipHasCone(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2035": {
      "prefix": "SetPedAiBlipSprite",
      "body": [
          "SetPedAiBlipSprite(${1:Ped* ped}, ${2:int* spriteId})${0}"
      ],
      "description": ""
  },
  "2036": {
      "prefix": "SetPedHasAiBlipWithColor",
      "body": [
          "SetPedHasAiBlipWithColor(${1:Ped* ped}, ${2:BOOL* hasCone}, ${3:int* color})${0}"
      ],
      "description": ""
  },
  "2037": {
      "prefix": "SetPedHasAiBlip",
      "body": [
          "SetPedHasAiBlip(${1:Ped* ped}, ${2:BOOL* hasCone})${0}"
      ],
      "description": "```\nThis native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.\nSee gtaforums.com/topic/884370-native-research-ai-blips for further information.\n```"
  },
  "2038": {
      "prefix": "SetPlayerBlipPositionThisFrame",
      "body": [
          "SetPlayerBlipPositionThisFrame(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": "```\nSets the position of the arrow icon representing the player on both the minimap and world map.  \nToo bad this wouldn't work over the network (obviously not). Could spoof where we would be.  \n```"
  },
  "2039": {
      "prefix": "SetPlayerCashChange",
      "body": [
          "SetPlayerCashChange(${1:int* cash}, ${2:int* bank})${0}"
      ],
      "description": "```\nDisplays cash change notifications on HUD.  \n```"
  },
  "2040": {
      "prefix": "SetPlayerIsInDirectorMode",
      "body": [
          "SetPlayerIsInDirectorMode(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf toggle is true, hides special ability bar / character name in the pause menu\nIf toggle is false, shows special ability bar / character name in the pause menu\nSET_PLAYER_*\n```"
  },
  "2041": {
      "prefix": "SetRaceTrackRender",
      "body": [
          "SetRaceTrackRender(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2042": {
      "prefix": "SetRadarAsInteriorThisFrame",
      "body": [
          "SetRadarAsInteriorThisFrame(${1:Hash* interior}, ${2:float* x}, ${3:float* y}, ${4:int* heading}, ${5:int* zoom})${0}"
      ],
      "description": "```\nList of interior hashes: pastebin.com/1FUyXNqY  \nNot for every interior zoom > 0 available.  \n```"
  },
  "2043": {
      "prefix": "SetRadarAsExteriorThisFrame",
      "body": [
          "SetRadarAsExteriorThisFrame()${0}"
      ],
      "description": ""
  },
  "2044": {
      "prefix": "SetRadarZoom",
      "body": [
          "SetRadarZoom(${1:int* zoomLevel})${0}"
      ],
      "description": "```\nzoomLevel ranges from 0 to 200  \n```"
  },
  "2045": {
      "prefix": "SetRadarZoomPrecise",
      "body": [
          "SetRadarZoomPrecise(${1:float* zoom})${0}"
      ],
      "description": ""
  },
  "2046": {
      "prefix": "SetRadarZoomToBlip",
      "body": [
          "SetRadarZoomToBlip(${1:Blip* blip}, ${2:float* zoom})${0}"
      ],
      "description": ""
  },
  "2047": {
      "prefix": "SetRadarZoomToDistance",
      "body": [
          "SetRadarZoomToDistance(${1:float* zoom})${0}"
      ],
      "description": ""
  },
  "2048": {
      "prefix": "SetRadiusBlipEdge",
      "body": [
          "SetRadiusBlipEdge(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nEnabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png\n```"
  },
  "2049": {
      "prefix": "SetScriptVariableHudColour",
      "body": [
          "SetScriptVariableHudColour(${1:int* r}, ${2:int* g}, ${3:int* b}, ${4:int* a})${0}"
      ],
      "description": "```\nSets the color of HUD_COLOUR_SCRIPT_VARIABLE\n```"
  },
  "2050": {
      "prefix": "SetSocialClubTour",
      "body": [
          "SetSocialClubTour(${1:char* name})${0}"
      ],
      "description": "```\nHUD::SET_SOCIAL_CLUB_TOUR(\"Gallery\");\nHUD::SET_SOCIAL_CLUB_TOUR(\"Missions\");\nHUD::SET_SOCIAL_CLUB_TOUR(\"General\");\nHUD::SET_SOCIAL_CLUB_TOUR(\"Playlists\");\n```"
  },
  "2051": {
      "prefix": "SetScriptVariable2HudColour",
      "body": [
          "SetScriptVariable2HudColour(${1:int* r}, ${2:int* g}, ${3:int* b}, ${4:int* a})${0}"
      ],
      "description": "```\nSets the color of HUD_COLOUR_SCRIPT_VARIABLE_2\n```"
  },
  "2052": {
      "prefix": "SetTextCentre",
      "body": [
          "SetTextCentre(${1:BOOL* align})${0}"
      ],
      "description": ""
  },
  "2053": {
      "prefix": "SetTextColour",
      "body": [
          "SetTextColour(${1:int* red}, ${2:int* green}, ${3:int* blue}, ${4:int* alpha})${0}"
      ],
      "description": "```\ncolors you input not same as you think?\nA: for some reason its R B G A\n```"
  },
  "2054": {
      "prefix": "SetTextChatUnk",
      "body": [
          "SetTextChatUnk(${1:BOOL* p0})${0}"
      ],
      "description": "```\nSets an unknown boolean value in the text chat.  \n```"
  },
  "2055": {
      "prefix": "SetTextDropShadow",
      "body": [
          "SetTextDropShadow()${0}"
      ],
      "description": ""
  },
  "2056": {
      "prefix": "SetTextDropshadow",
      "body": [
          "SetTextDropshadow(${1:int* distance}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* a})${0}"
      ],
      "description": "distance - shadow distance in pixels, both horizontal and vertical\nr, g, b, a - color"
  },
  "2057": {
      "prefix": "SetTextEdge",
      "body": [
          "SetTextEdge(${1:int* p0}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* a})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "2058": {
      "prefix": "SetTextFont",
      "body": [
          "SetTextFont(${1:int* fontType})${0}"
      ],
      "description": "```\nfonts that mess up your text where made for number values/misc stuff  \n```"
  },
  "2059": {
      "prefix": "SetTextJustification",
      "body": [
          "SetTextJustification(${1:int* justifyType})${0}"
      ],
      "description": "```\nTypes -  \n0: Center-Justify  \n1: Left-Justify  \n2: Right-Justify  \nRight-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen  \n```"
  },
  "2060": {
      "prefix": "SetTextOutline",
      "body": [
          "SetTextOutline()${0}"
      ],
      "description": ""
  },
  "2061": {
      "prefix": "SetTextLeading",
      "body": [
          "SetTextLeading(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2062": {
      "prefix": "SetTextRenderId",
      "body": [
          "SetTextRenderId(${1:int* renderId})${0}"
      ],
      "description": ""
  },
  "2063": {
      "prefix": "SetTextRightJustify",
      "body": [
          "SetTextRightJustify(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2064": {
      "prefix": "SetTextProportional",
      "body": [
          "SetTextProportional(${1:BOOL* p0})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "2065": {
      "prefix": "SetTextScale",
      "body": [
          "SetTextScale(${1:float* scale}, ${2:float* size})${0}"
      ],
      "description": "```\nSize range : 0F to 1.0F\np0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.\n```"
  },
  "2066": {
      "prefix": "SetWarningMessage",
      "body": [
          "SetWarningMessage(${1:char* entryLine1}, ${2:int* instructionalKey}, ${3:char* entryLine2}, ${4:BOOL* p3}, ${5:int* p4}, ${6:char* background}, ${7:char* p6}, ${8:BOOL* showBg}, ${9:int* errorCode})${0}"
      ],
      "description": "**instructionalKey enum list**:\n\n```\nenum INSTRUCTIONAL_BUTTON_TYPES\n{\n    NONE = 0,\n    SELECT = 1,\n    OK = 2,\n    YES = 4,\n    BACK = 8,\n    BACK_SELECT = 9,\n    BACK_OK = 10,\n    BACK_YES = 12,\n    CANCEL = 16,\n    CANCEL_SELECT = 17,\n    CANCEL_OK = 18,\n    CANCEL_YES = 20,\n    NO = 32,\n    NO_SELECT = 33,\n    NO_OK = 34,\n    YES_NO = 36,\n    RETRY = 64,\n    RETRY_SELECT = 65,\n    RETRY_OK = 66,\n    RETRY_YES = 68,\n    RETRY_BACK = 72,\n    RETRY_BACK_SELECT = 73,\n    RETRY_BACK_OK = 74,\n    RETRY_BACK_YES = 76,\n    RETRY_CANCEL = 80,\n    RETRY_CANCEL_SELECT = 81,\n    RETRY_CANCEL_OK = 82,\n    RETRY_CANCEL_YES = 84,\n    SKIP = 256,\n    SKIP_SELECT = 257,\n    SKIP_OK = 258,\n    SKIP_YES = 260,\n    SKIP_BACK = 264,\n    SKIP_BACK_SELECT = 265,\n    SKIP_BACK_OK = 266,\n    SKIP_BACK_YES = 268,\n    SKIP_CANCEL = 272,\n    SKIP_CANCEL_SELECT = 273,\n    SKIP_CANCEL_OK = 274,\n    SKIP_CANCEL_YES = 276,\n    CONTINUE = 16384,\n    BACK_CONTINUE = 16392,\n    CANCEL_CONTINUE = 16400,\n    LOADING_SPINNER = 134217728,\n    SELECT_LOADING_SPINNER = 134217729,\n    OK_LOADING_SPINNER = 134217730,\n    YES_LOADING_SPINNER = 134217732,\n    BACK_LOADING_SPINNER = 134217736,\n    BACK_SELECT_LOADING_SPINNER = 134217737,\n    BACK_OK_LOADING_SPINNER = 134217738,\n    BACK_YES_LOADING_SPINNER = 134217740,\n    CANCEL_LOADING_SPINNER = 134217744,\n    CANCEL_SELECT_LOADING_SPINNER = 134217745,\n    CANCEL_OK_LOADING_SPINNER = 134217746,\n    CANCEL_YES_LOADING_SPINNER = 134217748\n}\n```\n\nNote: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations.\n\n**Result of the example code:**\n<https://i.imgur.com/imwoimm.png>"
  },
  "2067": {
      "prefix": "SetTextWrap",
      "body": [
          "SetTextWrap(${1:float* start}, ${2:float* end})${0}"
      ],
      "description": "```\nIt sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.  \nstart - left boundry on screen position (0.0 - 1.0)  \nend - right boundry on screen position (0.0 - 1.0)  \n```"
  },
  "2068": {
      "prefix": "SetToggleMinimapHeistIsland",
      "body": [
          "SetToggleMinimapHeistIsland(${1:BOOL* toggle})${0}"
      ],
      "description": "Toggles the Cayo Perico map.\n\n```\nNativeDB Introduced: v2189\n```"
  },
  "2069": {
      "prefix": "SetWarningMessageWithAlert",
      "body": [
          "SetWarningMessageWithAlert(${1:char* labelTitle}, ${2:char* labelMsg}, ${3:int* p2}, ${4:int* p3}, ${5:char* labelMsg2}, ${6:BOOL* p5}, ${7:int* p6}, ${8:int* p7}, ${9:char* p8}, ${10:char* p9}, ${11:BOOL* background}, ${12:int* errorCode})${0}"
      ],
      "description": "instructionalKey enum list:\n\n```\nButtons = {\n      Empty = 0,\n      Select = 1, -- (RETURN)\n      Ok = 2, -- (RETURN)\n      Yes = 4, -- (RETURN)\n      Back = 8, -- (ESC)\n      Cancel = 16, -- (ESC)\n      No = 32, -- (ESC)\n      RetrySpace = 64, -- (SPACE)\n      Restart = 128, -- (SPACE)\n      Skip = 256, -- (SPACE)\n      Quit = 512, -- (ESC)\n      Adjust = 1024, -- (ARROWS)\n      SpaceKey = 2048, -- (SPACE)\n      Share = 4096, -- (SPACE)\n      SignIn = 8192, -- (SPACE)\n      Continue = 16384, -- (RETURN)\n      AdjustLeftRight = 32768, -- (SCROLL L/R)\n      AdjustUpDown = 65536, -- (SCROLL U/D)\n      Overwrite = 131072, -- (SPACE)\n      SocialClubSignup = 262144, -- (RETURN)\n      Confirm = 524288, -- (RETURN)\n      Queue = 1048576, -- (RETURN)\n      RetryReturn = 2097152, -- (RETURN)\n      BackEsc = 4194304, -- (ESC)\n      SocialClub = 8388608, -- (RETURN)\n      Spectate = 16777216, -- (SPACE)\n      OkEsc = 33554432, -- (ESC)\n      CancelTransfer = 67108864, -- (ESC)\n      LoadingSpinner = 134217728,\n      NoReturnToGTA = 268435456, -- (ESC)\n      CancelEsc = 536870912, -- (ESC)\n}\n\nAlt = {\n      Empty = 0,\n      No = 1, -- (SPACE)\n      Host = 2, -- (ESC)\n      SearchForJob = 4, -- (RETURN)\n      ReturnKey = 8, -- (TURN)\n      Freemode = 16, -- (ESC)\n}\n```\n\n**Result of the example code:** <https://i.imgur.com/TvmNF4k.png>"
  },
  "2070": {
      "prefix": "SetWarningMessageListRow",
      "body": [
          "SetWarningMessageListRow(${1:int* index}, ${2:char* name}, ${3:int* cash}, ${4:int* rp}, ${5:int* lvl}, ${6:int* colour})${0}"
      ],
      "description": "```\nParam names copied from the corresponding scaleform function \"SET_LIST_ROW\"\n```"
  },
  "2071": {
      "prefix": "SetWarningMessageWithHeaderAndSubstringFlags",
      "body": [
          "SetWarningMessageWithHeaderAndSubstringFlags(${1:char* entryHeader}, ${2:char* entryLine1}, ${3:Any* instructionalKey}, ${4:char* entryLine2}, ${5:BOOL* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:BOOL* p9})${0}"
      ],
      "description": "```\nYou can only use text entries. No custom text.  \n```\n\n```\nNativeDB Added Parameter 11: Any p10\n```"
  },
  "2072": {
      "prefix": "SetWarningMessageWithHeaderUnk",
      "body": [
          "SetWarningMessageWithHeaderUnk(${1:char* entryHeader}, ${2:char* entryLine1}, ${3:int* flags}, ${4:char* entryLine2}, ${5:BOOL* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:BOOL* showBg}, ${10:Any* p9}, ${11:Any* p10})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2073": {
      "prefix": "ShowFriendIndicatorOnBlip",
      "body": [
          "ShowFriendIndicatorOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Highlights a blip by a half cyan circle on the right side of the blip. ![](https://i.imgur.com/FrV9M4e.png) Indicating that that player is a friend (in GTA:O). This color can not be changed.\n\nTo toggle the left side (crew member indicator) of the half circle around the blip, use: [`SHOW_CREW_INDICATOR_ON_BLIP`](#\\_0xDCFB5D4DB8BF367E)."
  },
  "2074": {
      "prefix": "SetWarningMessageWithHeader",
      "body": [
          "SetWarningMessageWithHeader(${1:char* titleMsg}, ${2:char* entryLine1}, ${3:int* flags}, ${4:char* promptMsg}, ${5:BOOL* p4}, ${6:Any* p5}, ${7:BOOL* background}, ${8:Any* p7}, ${9:BOOL* showBg})${0}"
      ],
      "description": "```\nYou can only use text entries. No custom text.  \nC# Example :  \nFunction.Call(Hash._SET_WARNING_MESSAGE_2, \"HUD_QUIT\", \"HUD_CGIGNORE\", 2, \"HUD_CGINVITE\", 0, -1, 0, 0, 1);  \nyou can recreate this easily with scaleforms  \n---------------  \nFixed native name, from before nativedb restoration.  \n```\n\n```\nNativeDB Added Parameter 10: Any p9\n```"
  },
  "2075": {
      "prefix": "SetWaypointOff",
      "body": [
          "SetWaypointOff()${0}"
      ],
      "description": "```\nThis native removes the current waypoint from the map.\nExample:\nC#:\nFunction.Call(Hash.SET_WAYPOINT_OFF);\nC++:\nHUD::SET_WAYPOINT_OFF();\n```"
  },
  "2076": {
      "prefix": "ShowHeadingIndicatorOnBlip",
      "body": [
          "ShowHeadingIndicatorOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nAdds the GTA: Online player heading indicator to a blip.  \n```"
  },
  "2077": {
      "prefix": "ShowHudComponentThisFrame",
      "body": [
          "ShowHudComponentThisFrame(${1:int* id})${0}"
      ],
      "description": "This function shows various HUD (Heads-up Display) components.\n\nListed below are the integers and the corresponding HUD component.\n\n*   1 : WANTED_STARS\n*   2 : WEAPON_ICON\n*   3 : CASH\n*   4 : MP_CASH\n*   5 : MP_MESSAGE\n*   6 : VEHICLE_NAME\n*   7 : AREA_NAME\n*   8 : VEHICLE_CLASS\n*   9 : STREET_NAME\n*   10 : HELP_TEXT\n*   11 : FLOATING_HELP_TEXT\\_1\n*   12 : FLOATING_HELP_TEXT\\_2\n*   13 : CASH_CHANGE\n*   14 : RETICLE\n*   15 : SUBTITLE_TEXT\n*   16 : RADIO_STATIONS\n*   17 : SAVING_GAME\n*   18 : GAME_STREAM\n*   19 : WEAPON_WHEEL\n*   20 : WEAPON_WHEEL_STATS\n*   21 : HUD_COMPONENTS\n*   22 : HUD_WEAPONS\n\nThese integers also work for the [`HIDE_HUD_COMPONENT_THIS_FRAME`](#\\_0x6806C51AD12B83B8) native, but instead hides the HUD component."
  },
  "2078": {
      "prefix": "SetWidescreenFormat",
      "body": [
          "SetWidescreenFormat(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2079": {
      "prefix": "ShowOutlineIndicatorOnBlip",
      "body": [
          "ShowOutlineIndicatorOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Toggles a cyan outline around the blip.\n\nColor can be changed with [`SET_BLIP_SECONDARY_COLOUR`](#\\_0x14892474891E09EB). Enabling this circle will override the \"crew\" and \"friend\" half-circles (see [`SHOW_CREW_INDICATOR_ON_BLIP`](#\\_0xDCFB5D4DB8BF367E) and [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\\_0x23C3EB807312F01A))."
  },
  "2080": {
      "prefix": "ShowCrewIndicatorOnBlip",
      "body": [
          "ShowCrewIndicatorOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Enables or disables the blue half circle ![](https://i.imgur.com/iZes9Ec.png) around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using [`SET_BLIP_SECONDARY_COLOUR`](#\\_0x14892474891E09EB).\n\nTo toggle the right side of the circle use: [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\\_0x23C3EB807312F01A).\n\nExample code result:\n![](https://i.imgur.com/iZ9tNWl.png)"
  },
  "2081": {
      "prefix": "ShowHeightOnBlip",
      "body": [
          "ShowHeightOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2082": {
      "prefix": "ShowScriptedHudComponentThisFrame",
      "body": [
          "ShowScriptedHudComponentThisFrame(${1:int* id})${0}"
      ],
      "description": "SHOW_\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2083": {
      "prefix": "ShowNumberOnBlip",
      "body": [
          "ShowNumberOnBlip(${1:Blip* blip}, ${2:int* number})${0}"
      ],
      "description": ""
  },
  "2084": {
      "prefix": "ShowStartMissionInstructionalButton",
      "body": [
          "ShowStartMissionInstructionalButton(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2085": {
      "prefix": "ShowSigninUi",
      "body": [
          "ShowSigninUi()${0}"
      ],
      "description": ""
  },
  "2086": {
      "prefix": "StartGpsCustomRoute",
      "body": [
          "StartGpsCustomRoute(${1:int* hudColor}, ${2:BOOL* displayOnFoot}, ${3:BOOL* followPlayer})${0}"
      ],
      "description": "Starts a new GPS custom-route, allowing you to plot lines on the map.\nLines are drawn directly between points.\nThe GPS custom route works like the GPS multi route, except it does not follow roads.\n\n**Example result:**\n\n![](https://i.imgur.com/BDm5pzt.png)"
  },
  "2087": {
      "prefix": "StartGpsMultiRoute",
      "body": [
          "StartGpsMultiRoute(${1:int* hudColor}, ${2:BOOL* routeFromPlayer}, ${3:BOOL* displayOnFoot})${0}"
      ],
      "description": "Starts a new GPS multi-route, allowing you to create custom GPS paths.\nGPS functions like the waypoint, except it can contain multiple points it's forced to go through.\nOnce the player has passed a point, the GPS will no longer force its path through it.\n\nWorks independently from the player-placed waypoint and blip routes.\n\n**Example result:**\n\n![](https://i.imgur.com/ZZHQatX.png)"
  },
  "2088": {
      "prefix": "ShowTickOnBlip",
      "body": [
          "ShowTickOnBlip(${1:Blip* blip}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nAdds a green checkmark on top of a blip.  \n```"
  },
  "2089": {
      "prefix": "TakeControlOfFrontend",
      "body": [
          "TakeControlOfFrontend()${0}"
      ],
      "description": "Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.\n\nTo enable the keys again, use [`0x14621BB1DF14E2B2`](#\\_0x14621BB1DF14E2B2)."
  },
  "2090": {
      "prefix": "SuppressFrontendRenderingThisFrame",
      "body": [
          "SuppressFrontendRenderingThisFrame()${0}"
      ],
      "description": ""
  },
  "2091": {
      "prefix": "ThefeedCommentTeleportPoolOn",
      "body": [
          "ThefeedCommentTeleportPoolOn()${0}"
      ],
      "description": "```\nEnables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.\n```"
  },
  "2092": {
      "prefix": "ThefeedAddTxdRef",
      "body": [
          "ThefeedAddTxdRef(${1:char* txdString1}, ${2:char* txnString1}, ${3:char* txdString2}, ${4:char* txnString2})${0}"
      ],
      "description": "```\nUsed in the native scripts to reference \"GET_PEDHEADSHOT_TXD_STRING\" and \"CHAR_DEFAULT\".\n\nNativeDB Introduced: v323\n```"
  },
  "2093": {
      "prefix": "ThefeedClearFrozenPost",
      "body": [
          "ThefeedClearFrozenPost()${0}"
      ],
      "description": ""
  },
  "2094": {
      "prefix": "ThefeedDisableLoadingScreenTips",
      "body": [
          "ThefeedDisableLoadingScreenTips()${0}"
      ],
      "description": "Stops loading screen tips shown by invoking either `0x488043841BBE156F` or `0x15CFA549788D35EF`"
  },
  "2095": {
      "prefix": "ThefeedDisplayLoadingScreenTips",
      "body": [
          "ThefeedDisplayLoadingScreenTips()${0}"
      ],
      "description": "Displays loading screen tips, requires `0x56C8B608CFD49854` to be called beforehand."
  },
  "2096": {
      "prefix": "ThefeedFreezeNextPost",
      "body": [
          "ThefeedFreezeNextPost()${0}"
      ],
      "description": "```\nRequires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).\n```"
  },
  "2097": {
      "prefix": "ThefeedFlushQueue",
      "body": [
          "ThefeedFlushQueue()${0}"
      ],
      "description": ""
  },
  "2098": {
      "prefix": "ThefeedGetFirstVisibleDeleteRemaining",
      "body": [
          "ThefeedGetFirstVisibleDeleteRemaining()${0}"
      ],
      "description": "```\nReturns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.\n```"
  },
  "2099": {
      "prefix": "ThefeedForceRenderOn",
      "body": [
          "ThefeedForceRenderOn()${0}"
      ],
      "description": ""
  },
  "2100": {
      "prefix": "ThefeedIsPaused",
      "body": [
          "ThefeedIsPaused()${0}"
      ],
      "description": ""
  },
  "2101": {
      "prefix": "ThefeedHideThisFrame",
      "body": [
          "ThefeedHideThisFrame()${0}"
      ],
      "description": "Once called each frame hides all above radar notifications."
  },
  "2102": {
      "prefix": "ThefeedOnlyShowTooltips",
      "body": [
          "ThefeedOnlyShowTooltips(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2103": {
      "prefix": "ThefeedPause",
      "body": [
          "ThefeedPause()${0}"
      ],
      "description": ""
  },
  "2104": {
      "prefix": "ThefeedResume",
      "body": [
          "ThefeedResume()${0}"
      ],
      "description": ""
  },
  "2105": {
      "prefix": "ThefeedRemoveItem",
      "body": [
          "ThefeedRemoveItem(${1:int* notificationId})${0}"
      ],
      "description": "```\nRemoves a notification instantly instead of waiting for it to disappear  \n```"
  },
  "2106": {
      "prefix": "ThefeedSetAnimpostfxCount",
      "body": [
          "ThefeedSetAnimpostfxCount(${1:int* count})${0}"
      ],
      "description": "Related to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification."
  },
  "2107": {
      "prefix": "ThefeedResetAllParameters",
      "body": [
          "ThefeedResetAllParameters()${0}"
      ],
      "description": ""
  },
  "2108": {
      "prefix": "ThefeedSetFlushAnimpostfx",
      "body": [
          "ThefeedSetFlushAnimpostfx(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf true, remove all feed components instantly. Otherwise tween/animate close each component\n```"
  },
  "2109": {
      "prefix": "ThefeedSetAnimpostfxColor",
      "body": [
          "ThefeedSetAnimpostfxColor(${1:int* red}, ${2:int* green}, ${3:int* blue}, ${4:int* alpha})${0}"
      ],
      "description": ""
  },
  "2110": {
      "prefix": "ThefeedSetNextPostBackgroundColor",
      "body": [
          "ThefeedSetNextPostBackgroundColor(${1:int* hudColorIndex})${0}"
      ],
      "description": "```\nFrom the decompiled scripts:\nHUD::_92F0DA1E27DB96DC(6);\nHUD::_92F0DA1E27DB96DC(184);\nHUD::_92F0DA1E27DB96DC(190);\nsets background color for the next notification\n6 = red\n184 = green\n190 = yellow\nHere is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15\n```"
  },
  "2111": {
      "prefix": "ThefeedSetAnimpostfxSound",
      "body": [
          "ThefeedSetAnimpostfxSound(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nRequires GAME_STREAM_ENUMS.MSGTEXT. Default sounds: \"DPAD_WEAPON_SCROLL\" and \"HUD_FRONTEND_DEFAULT_SOUNDSET\"\n```"
  },
  "2112": {
      "prefix": "ThefeedSpsExtendWidescreenOn",
      "body": [
          "ThefeedSpsExtendWidescreenOn()${0}"
      ],
      "description": ""
  },
  "2113": {
      "prefix": "ThefeedSetScriptedMenuHeight",
      "body": [
          "ThefeedSetScriptedMenuHeight(${1:float* pos})${0}"
      ],
      "description": ""
  },
  "2114": {
      "prefix": "ToggleStealthRadar",
      "body": [
          "ToggleStealthRadar(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2115": {
      "prefix": "ThefeedSpsExtendWidescreenOff",
      "body": [
          "ThefeedSpsExtendWidescreenOff()${0}"
      ],
      "description": ""
  },
  "2116": {
      "prefix": "UnlockMinimapAngle",
      "body": [
          "UnlockMinimapAngle()${0}"
      ],
      "description": ""
  },
  "2117": {
      "prefix": "TriggerSonarBlip",
      "body": [
          "TriggerSonarBlip(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* radius}, ${5:int* p4})${0}"
      ],
      "description": ""
  },
  "2118": {
      "prefix": "UnlockMinimapPosition",
      "body": [
          "UnlockMinimapPosition()${0}"
      ],
      "description": ""
  },
  "2119": {
      "prefix": "ActivateInteriorEntitySet",
      "body": [
          "ActivateInteriorEntitySet(${1:int* interior}, ${2:char* entitySetName})${0}"
      ],
      "description": "```\nMore info: http://gtaforums.com/topic/836367-adding-props-to-interiors/  \n```"
  },
  "2120": {
      "prefix": "CapInterior",
      "body": [
          "CapInterior(${1:int* interiorID}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nDoes something similar to INTERIOR::DISABLE_INTERIOR  \n```"
  },
  "2121": {
      "prefix": "AddPickupToInteriorRoomByName",
      "body": [
          "AddPickupToInteriorRoomByName(${1:Pickup* pickup}, ${2:char* roomName})${0}"
      ],
      "description": ""
  },
  "2122": {
      "prefix": "ClearInteriorForEntity",
      "body": [
          "ClearInteriorForEntity(${1:Entity* entity})${0}"
      ],
      "description": "Immediately removes entity from an interior. Like sets entity to `limbo` room.\n\n```\nNativeDB Introduced: v2189\n```"
  },
  "2123": {
      "prefix": "ClearRoomForEntity",
      "body": [
          "ClearRoomForEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2124": {
      "prefix": "ClearRoomForGameViewport",
      "body": [
          "ClearRoomForGameViewport()${0}"
      ],
      "description": ""
  },
  "2125": {
      "prefix": "DeactivateInteriorEntitySet",
      "body": [
          "DeactivateInteriorEntitySet(${1:int* interior}, ${2:char* entitySetName})${0}"
      ],
      "description": ""
  },
  "2126": {
      "prefix": "DisableInterior",
      "body": [
          "DisableInterior(${1:int* interiorID}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nExample:   \nThis removes the interior from the strip club and when trying to walk inside the player just falls:  \nINTERIOR::DISABLE_INTERIOR(118018, true);  \n```"
  },
  "2127": {
      "prefix": "EnableScriptCullModelThisFrame",
      "body": [
          "EnableScriptCullModelThisFrame(${1:Hash* mapObjectHash})${0}"
      ],
      "description": ""
  },
  "2128": {
      "prefix": "EnableExteriorCullModelThisFrame",
      "body": [
          "EnableExteriorCullModelThisFrame(${1:Hash* mapObjectHash})${0}"
      ],
      "description": "```\nThis is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.\n```"
  },
  "2129": {
      "prefix": "ForceRoomForGameViewport",
      "body": [
          "ForceRoomForGameViewport(${1:int* interiorID}, ${2:Hash* roomHashKey})${0}"
      ],
      "description": ""
  },
  "2130": {
      "prefix": "ForceRoomForEntity",
      "body": [
          "ForceRoomForEntity(${1:Entity* entity}, ${2:int* interior}, ${3:Hash* roomHashKey})${0}"
      ],
      "description": "```\nForces the particular room in an interior to load incase not teleporting into the portal.\n```"
  },
  "2131": {
      "prefix": "GetInteriorAtCoords",
      "body": [
          "GetInteriorAtCoords(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nReturns interior ID from specified coordinates. If coordinates are outside, then it returns 0.  \nExample for VB.NET  \nDim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)  \n```"
  },
  "2132": {
      "prefix": "GetInteriorAtCoordsWithType",
      "body": [
          "GetInteriorAtCoordsWithType(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:char* interiorType})${0}"
      ],
      "description": "```\nReturns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.  \nUse: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))  \nInterior types include: \"V_Michael\", \"V_Franklins\", \"V_Franklinshouse\", etc.. you can find them in the scripts.  \nNot a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.  \n```"
  },
  "2133": {
      "prefix": "GetInteriorAtCoordsWithTypehash",
      "body": [
          "GetInteriorAtCoordsWithTypehash(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Hash* typeHash})${0}"
      ],
      "description": "```\nHashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE\n```"
  },
  "2134": {
      "prefix": "GetInteriorFromCollision",
      "body": [
          "GetInteriorFromCollision(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "2135": {
      "prefix": "GetInteriorFromEntity",
      "body": [
          "GetInteriorFromEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nReturns the handle of the interior that the entity is in. Returns 0 if outside.  \n```"
  },
  "2136": {
      "prefix": "GetInteriorGroupId",
      "body": [
          "GetInteriorGroupId(${1:int* interior})${0}"
      ],
      "description": "```\nReturns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.  \n```"
  },
  "2137": {
      "prefix": "GetInteriorFromGameplayCam",
      "body": [
          "GetInteriorFromGameplayCam()${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2138": {
      "prefix": "GetInteriorHeading",
      "body": [
          "GetInteriorHeading(${1:int* interior})${0}"
      ],
      "description": "```\nGET_INTERIOR_*\n\nNativeDB Introduced: v1493\n```"
  },
  "2139": {
      "prefix": "GetInteriorInfo",
      "body": [
          "GetInteriorInfo(${1:int* interior}, ${2:Vector3* position}, ${3:Hash* nameHash})${0}"
      ],
      "description": "```\nGET_INTERIOR_*\n\nNativeDB Introduced: v1290\n```"
  },
  "2140": {
      "prefix": "GetKeyForEntityInRoom",
      "body": [
          "GetKeyForEntityInRoom(${1:Entity* entity})${0}"
      ],
      "description": "```\nSeems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY  \n```"
  },
  "2141": {
      "prefix": "GetOffsetFromInteriorInWorldCoords",
      "body": [
          "GetOffsetFromInteriorInWorldCoords(${1:int* interior}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "2142": {
      "prefix": "GetRoomKeyForGameViewport",
      "body": [
          "GetRoomKeyForGameViewport()${0}"
      ],
      "description": ""
  },
  "2143": {
      "prefix": "GetRoomKeyFromEntity",
      "body": [
          "GetRoomKeyFromEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nGets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.  \n```"
  },
  "2144": {
      "prefix": "IsCollisionMarkedOutside",
      "body": [
          "IsCollisionMarkedOutside(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)"
  },
  "2145": {
      "prefix": "IsInteriorCapped",
      "body": [
          "IsInteriorCapped(${1:int* interiorID})${0}"
      ],
      "description": ""
  },
  "2146": {
      "prefix": "IsInteriorDisabled",
      "body": [
          "IsInteriorDisabled(${1:int* interior})${0}"
      ],
      "description": ""
  },
  "2147": {
      "prefix": "IsInteriorReady",
      "body": [
          "IsInteriorReady(${1:int* interiorID})${0}"
      ],
      "description": ""
  },
  "2148": {
      "prefix": "IsInteriorEntitySetActive",
      "body": [
          "IsInteriorEntitySetActive(${1:int* interior}, ${2:char* entitySetName})${0}"
      ],
      "description": ""
  },
  "2149": {
      "prefix": "IsInteriorScene",
      "body": [
          "IsInteriorScene()${0}"
      ],
      "description": ""
  },
  "2150": {
      "prefix": "IsValidInterior",
      "body": [
          "IsValidInterior(${1:int* interior})${0}"
      ],
      "description": ""
  },
  "2151": {
      "prefix": "PinInteriorInMemory",
      "body": [
          "PinInteriorInMemory(${1:int* interior})${0}"
      ],
      "description": ""
  },
  "2152": {
      "prefix": "SetInteriorEntitySetColor",
      "body": [
          "SetInteriorEntitySetColor(${1:int* interior}, ${2:char* entitySetName}, ${3:int* color})${0}"
      ],
      "description": ""
  },
  "2153": {
      "prefix": "RefreshInterior",
      "body": [
          "RefreshInterior(${1:int* interiorID})${0}"
      ],
      "description": ""
  },
  "2154": {
      "prefix": "UnpinInterior",
      "body": [
          "UnpinInterior(${1:int* interior})${0}"
      ],
      "description": "```\nDoes something similar to INTERIOR::DISABLE_INTERIOR.  \nYou don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.  \n```"
  },
  "2155": {
      "prefix": "AddToItemset",
      "body": [
          "AddToItemset(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2156": {
      "prefix": "CreateItemset",
      "body": [
          "CreateItemset(${1:BOOL* distri})${0}"
      ],
      "description": ""
  },
  "2157": {
      "prefix": "GetIndexedItemInItemset",
      "body": [
          "GetIndexedItemInItemset(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2158": {
      "prefix": "GetItemsetSize",
      "body": [
          "GetItemsetSize(${1:ScrHandle* x})${0}"
      ],
      "description": ""
  },
  "2159": {
      "prefix": "RemoveFromItemset",
      "body": [
          "RemoveFromItemset(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2160": {
      "prefix": "CleanItemset",
      "body": [
          "CleanItemset(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2161": {
      "prefix": "DestroyItemset",
      "body": [
          "DestroyItemset(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2162": {
      "prefix": "IsInItemset",
      "body": [
          "IsInItemset(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2163": {
      "prefix": "IsItemsetValid",
      "body": [
          "IsItemsetValid(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2164": {
      "prefix": "LoadingscreenGetLoadFreemode",
      "body": [
          "LoadingscreenGetLoadFreemode()${0}"
      ],
      "description": ""
  },
  "2165": {
      "prefix": "LoadingscreenGetLoadFreemodeWithEventName",
      "body": [
          "LoadingscreenGetLoadFreemodeWithEventName()${0}"
      ],
      "description": ""
  },
  "2166": {
      "prefix": "LoadingscreenSetLoadFreemode",
      "body": [
          "LoadingscreenSetLoadFreemode(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2167": {
      "prefix": "LoadingscreenSetLoadFreemodeWithEventName",
      "body": [
          "LoadingscreenSetLoadFreemodeWithEventName(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nOnly occurrence was false, in maintransition.  \n```"
  },
  "2168": {
      "prefix": "LoadingscreenIsLoadingFreemode",
      "body": [
          "LoadingscreenIsLoadingFreemode()${0}"
      ],
      "description": ""
  },
  "2169": {
      "prefix": "LoadingscreenSetIsLoadingFreemode",
      "body": [
          "LoadingscreenSetIsLoadingFreemode(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2170": {
      "prefix": "LocalizationGetSystemLanguage",
      "body": [
          "LocalizationGetSystemLanguage()${0}"
      ],
      "description": "```\nSame return values as GET_CURRENT_LANGUAGE\n```"
  },
  "2171": {
      "prefix": "GetCurrentLanguage",
      "body": [
          "GetCurrentLanguage()${0}"
      ],
      "description": "```\n0 = american (en-US)\n1 = french (fr-FR)\n2 = german (de-DE)\n3 = italian (it-IT)\n4 = spanish (es-ES)\n5 = brazilian (pt-BR)\n6 = polish (pl-PL)\n7 = russian (ru-RU)\n8 = korean (ko-KR)\n9 = chinesetrad (zh-TW)\n10 = japanese (ja-JP)\n11 = mexican (es-MX)\n12 = chinesesimp (zh-CN)\n```"
  },
  "2172": {
      "prefix": "LocalizationGetSystemDateFormat",
      "body": [
          "LocalizationGetSystemDateFormat()${0}"
      ],
      "description": "```\nPossible return values: 0, 1, 2\n```"
  },
  "2173": {
      "prefix": "Absf",
      "body": [
          "Absf(${1:float* value})${0}"
      ],
      "description": ""
  },
  "2174": {
      "prefix": "Acos",
      "body": [
          "Acos(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2175": {
      "prefix": "AddDispatchSpawnBlockingAngledArea",
      "body": [
          "AddDispatchSpawnBlockingAngledArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width})${0}"
      ],
      "description": "To remove, see: [`REMOVE_DISPATCH_SPAWN_BLOCKING_AREA`](#\\_0x264AC28B01B353A5).\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area."
  },
  "2176": {
      "prefix": "AddDispatchSpawnBlockingArea",
      "body": [
          "AddDispatchSpawnBlockingArea(${1:float* x1}, ${2:float* y1}, ${3:float* x2}, ${4:float* y2})${0}"
      ],
      "description": ""
  },
  "2177": {
      "prefix": "AddHospitalRestart",
      "body": [
          "AddHospitalRestart(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nReturns the index of the newly created hospital spawn point.  \np3 might be radius?  \n```"
  },
  "2178": {
      "prefix": "Absi",
      "body": [
          "Absi(${1:int* value})${0}"
      ],
      "description": ""
  },
  "2179": {
      "prefix": "AddPopMultiplierArea",
      "body": [
          "AddPopMultiplierArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* p6}, ${8:float* p7}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 10: BOOL p9\n```"
  },
  "2180": {
      "prefix": "AddPopMultiplierSphere",
      "body": [
          "AddPopMultiplierSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:float* pedMultiplier}, ${6:float* vehicleMultiplier}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\nThis native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE\n```"
  },
  "2181": {
      "prefix": "AddStuntJump",
      "body": [
          "AddStuntJump(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* x3}, ${8:float* y3}, ${9:float* z3}, ${10:float* x4}, ${11:float* y4}, ${12:float* z4}, ${13:float* camX}, ${14:float* camY}, ${15:float* camZ}, ${16:int* unk1}, ${17:int* unk2}, ${18:int* unk3})${0}"
      ],
      "description": "See description of [`ADD_STUNT_JUMP_ANGLED`](#\\_0xBBE5D803A5360CBF) for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones."
  },
  "2182": {
      "prefix": "AddTacticalAnalysisPoint",
      "body": [
          "AddTacticalAnalysisPoint(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nAdds a point related to CTacticalAnalysis\n```"
  },
  "2183": {
      "prefix": "AddPoliceRestart",
      "body": [
          "AddPoliceRestart(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "2184": {
      "prefix": "AddReplayStatValue",
      "body": [
          "AddReplayStatValue(${1:Any* value})${0}"
      ],
      "description": ""
  },
  "2185": {
      "prefix": "AreStringsEqual",
      "body": [
          "AreStringsEqual(${1:char* string1}, ${2:char* string2})${0}"
      ],
      "description": ""
  },
  "2186": {
      "prefix": "AddStuntJumpAngled",
      "body": [
          "AddStuntJumpAngled(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* radius1}, ${8:float* x3}, ${9:float* y3}, ${10:float* z3}, ${11:float* x4}, ${12:float* y4}, ${13:float* z4}, ${14:float* radius2}, ${15:float* camX}, ${16:float* camY}, ${17:float* camZ}, ${18:int* unk1}, ${19:int* unk2}, ${20:int* unk3})${0}"
      ],
      "description": "Creates a new stunt jump.\n\nThe radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP\\_**ANGLED**.\n\nInfo about the specific 'parameter sections':\n\n**x1, y1, z1, x2, y2, z2 and radius1:**\n\nFirst coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.\n\n**x3, y3, z3, x4, y4, z4 and radius2:**\n\nNext part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).\n\n**camX, camY and camZ:**\n\nThe final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.\n\n**unk1, unk2 and unk3:**\n\nNot sure what these are for, but they're always `150, 0, 0` in decompiled scripts.\n\nVisualized example in-game:\n\n![](https://d.fivem.dev/2019-03-15\\_18-24\\_c7802\\_846.png)\n\nHere is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY"
  },
  "2187": {
      "prefix": "Atan2",
      "body": [
          "Atan2(${1:float* p0}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "2188": {
      "prefix": "BeginReplayStats",
      "body": [
          "BeginReplayStats(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2189": {
      "prefix": "BlockDispatchServiceResourceCreation",
      "body": [
          "BlockDispatchServiceResourceCreation(${1:int* dispatchService}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2190": {
      "prefix": "AllowMissionCreatorWarp",
      "body": [
          "AllowMissionCreatorWarp(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2191": {
      "prefix": "AreProfileSettingsValid",
      "body": [
          "AreProfileSettingsValid()${0}"
      ],
      "description": ""
  },
  "2192": {
      "prefix": "CancelStuntJump",
      "body": [
          "CancelStuntJump()${0}"
      ],
      "description": ""
  },
  "2193": {
      "prefix": "Asin",
      "body": [
          "Asin(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2194": {
      "prefix": "Atan",
      "body": [
          "Atan(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2195": {
      "prefix": "ClearAngledAreaOfVehicles",
      "body": [
          "ClearAngledAreaOfVehicles(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:BOOL* p9}, ${11:BOOL* p10}, ${12:BOOL* p11})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 13: Any p12\n```"
  },
  "2196": {
      "prefix": "CancelOnscreenKeyboard",
      "body": [
          "CancelOnscreenKeyboard()${0}"
      ],
      "description": "```\nDO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.\nUse _FORCE_CLOSE_TEXT_INPUT_BOX instead.\nCANCEL_*\n```"
  },
  "2197": {
      "prefix": "ClearAreaLeaveVehicleHealth",
      "body": [
          "ClearAreaLeaveVehicleHealth(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\nMISC::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.\n```"
  },
  "2198": {
      "prefix": "ClearAreaOfCops",
      "body": [
          "ClearAreaOfCops(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* flags})${0}"
      ],
      "description": "```\nflags appears to always be 0\n```"
  },
  "2199": {
      "prefix": "CleanupAsyncInstall",
      "body": [
          "CleanupAsyncInstall()${0}"
      ],
      "description": ""
  },
  "2200": {
      "prefix": "ClearArea",
      "body": [
          "ClearArea(${1:float* X}, ${2:float* Y}, ${3:float* Z}, ${4:float* radius}, ${5:BOOL* p4}, ${6:BOOL* ignoreCopCars}, ${7:BOOL* ignoreObjects}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\nExample: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);  \n```"
  },
  "2201": {
      "prefix": "ClearAreaOfObjects",
      "body": [
          "ClearAreaOfObjects(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* flags})${0}"
      ],
      "description": "```\nI looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.  \n```"
  },
  "2202": {
      "prefix": "ClearAreaOfPeds",
      "body": [
          "ClearAreaOfPeds(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* flags})${0}"
      ],
      "description": "```\nExample:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);\n```"
  },
  "2203": {
      "prefix": "ClearAreaOfProjectiles",
      "body": [
          "ClearAreaOfProjectiles(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* flags})${0}"
      ],
      "description": ""
  },
  "2204": {
      "prefix": "ClearAreaOfVehicles",
      "body": [
          "ClearAreaOfVehicles(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:BOOL* p6}, ${8:BOOL* p7}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nExample: \t\tCLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false);  \n```\n\n```\nNativeDB Added Parameter 10: BOOL p9\n```"
  },
  "2205": {
      "prefix": "ClearBit",
      "body": [
          "ClearBit(${1:int* address}, ${2:int* offset})${0}"
      ],
      "description": "```\nThis sets bit [offset] of [address] to off.\nExample:\nMISC::CLEAR_BIT(&bitAddress, 1);\nTo check if this bit has been enabled:\nMISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards\n```"
  },
  "2206": {
      "prefix": "ClearCloudHat",
      "body": [
          "ClearCloudHat()${0}"
      ],
      "description": ""
  },
  "2207": {
      "prefix": "ClearOverrideWeather",
      "body": [
          "ClearOverrideWeather()${0}"
      ],
      "description": ""
  },
  "2208": {
      "prefix": "ClearTacticalAnalysisPoints",
      "body": [
          "ClearTacticalAnalysisPoints()${0}"
      ],
      "description": ""
  },
  "2209": {
      "prefix": "ClearReplayStats",
      "body": [
          "ClearReplayStats()${0}"
      ],
      "description": ""
  },
  "2210": {
      "prefix": "ClearRestartCustomPosition",
      "body": [
          "ClearRestartCustomPosition()${0}"
      ],
      "description": ""
  },
  "2211": {
      "prefix": "ClearWeatherTypePersist",
      "body": [
          "ClearWeatherTypePersist()${0}"
      ],
      "description": ""
  },
  "2212": {
      "prefix": "CopyMemory",
      "body": [
          "CopyMemory(${1:Any* dst}, ${2:Any* src}, ${3:int* size})${0}"
      ],
      "description": ""
  },
  "2213": {
      "prefix": "CompareStrings",
      "body": [
          "CompareStrings(${1:char* str1}, ${2:char* str2}, ${3:BOOL* matchCase}, ${4:int* maxLength})${0}"
      ],
      "description": "```\nCompares two strings up to a specified number of characters.\nParameters:\nstr1 - String to be compared.\nstr2 - String to be compared.\nmatchCase - Comparison will be case-sensitive.\nmaxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.\nReturns:\nA value indicating the relationship between the strings:\n<0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)\n0 - The contents of both strings are equal.\n>0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)\nExamples:\nMISC::COMPARE_STRINGS(\"STRING\", \"string\", false, -1); // 0; equal\nMISC::COMPARE_STRINGS(\"TESTING\", \"test\", false, 4); // 0; equal\nMISC::COMPARE_STRINGS(\"R2D2\", \"R2xx\", false, 2); // 0; equal\nMISC::COMPARE_STRINGS(\"foo\", \"bar\", false, -1); // 4; 'f' > 'b'\nMISC::COMPARE_STRINGS(\"A\", \"A\", true, 1); // 0; equal\nWhen comparing case-sensitive strings, lower-case characters are greater than upper-case characters:\nMISC::COMPARE_STRINGS(\"A\", \"a\", true, 1); // -1; 'A' < 'a'\nMISC::COMPARE_STRINGS(\"a\", \"A\", true, 1); // 1; 'a' > 'A'\n```"
  },
  "2214": {
      "prefix": "CreateIncidentWithEntity",
      "body": [
          "CreateIncidentWithEntity(${1:int* dispatchService}, ${2:Ped* ped}, ${3:int* numUnits}, ${4:float* radius}, ${5:int* outIncidentID})${0}"
      ],
      "description": "```\np0 could be type (valueused in scripts: 14, 7, 5, 3, 11)  \np1 is a return from get_player_ped() in am_gang_call.c, but player_ped_id() in other (non am) scripts.  \np3 is usually 0f or 3f  \n=====================================================  \nenum IncidentTypes  \n{  \n    FireDepartment = 3,  \n    Paramedics = 5,  \n    Police = 7,  \n    PedsInCavalcades = 11,   \n    Merryweather = 14  \n};  \nAs for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.   \nSide Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).  \nSide Note 2: I say it breaks as if you call this proper,  \nif(CREATE_INCIDENT) etc it will return false if you do as I said above.  \n=====================================================  \n```\n\n```\nNativeDB Added Parameter 6: Any p5\nNativeDB Added Parameter 7: Any p6\n```"
  },
  "2215": {
      "prefix": "CreateIncident",
      "body": [
          "CreateIncident(${1:int* dispatchService}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* numUnits}, ${6:float* radius}, ${7:int* outIncidentID})${0}"
      ],
      "description": "```\nenum IncidentTypes  \n{  \n    FireDepartment = 3,  \n    Paramedics = 5,  \n    Police = 7,  \n    PedsInCavalcades = 11,   \n    Merryweather = 14  \n};  \nAs for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.   \nSide Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).  \nSide Note 2: I say it breaks as if you call this proper,  \nif(CREATE_INCIDENT) etc it will return false if you do as I said above.  \n=====================================================  \n```\n\n```\nNativeDB Added Parameter 8: Any p7\nNativeDB Added Parameter 9: Any p8\n```"
  },
  "2216": {
      "prefix": "DeleteStuntJump",
      "body": [
          "DeleteStuntJump(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2217": {
      "prefix": "DeleteIncident",
      "body": [
          "DeleteIncident(${1:int* incidentId})${0}"
      ],
      "description": "```\nDelete an incident with a given id.  \n=======================================================  \nCorrection, I have change this to int, instead of int*  \nas it doesn't use a pointer to the createdIncident.  \nIf you try it you will crash (or) freeze.  \n=======================================================  \n```"
  },
  "2218": {
      "prefix": "DisableHospitalRestart",
      "body": [
          "DisableHospitalRestart(${1:int* hospitalIndex}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nThe game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.\n```"
  },
  "2219": {
      "prefix": "DisablePoliceRestart",
      "body": [
          "DisablePoliceRestart(${1:int* policeIndex}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nDisables the spawn point at the police house on the specified index.\npoliceIndex: The police house index.\ntoggle: true to enable the spawn point, false to disable.\n- Nacorpio\n```"
  },
  "2220": {
      "prefix": "DisplayOnscreenKeyboard",
      "body": [
          "DisplayOnscreenKeyboard(${1:int* p0}, ${2:char* windowTitle}, ${3:char* p2}, ${4:char* defaultText}, ${5:char* defaultConcat1}, ${6:char* defaultConcat2}, ${7:char* defaultConcat3}, ${8:int* maxInputLength})${0}"
      ],
      "description": "```\nwindowTitle's  \n-----------------  \nCELL_EMAIL_BOD\t=\t\"Enter your Eyefind message\"  \nCELL_EMAIL_BODE\t=\t\"Message too long. Try again\"  \nCELL_EMAIL_BODF\t=\t\"Forbidden message. Try again\"  \nCELL_EMAIL_SOD\t=\t\"Enter your Eyefind subject\"  \nCELL_EMAIL_SODE\t=\t\"Subject too long. Try again\"  \nCELL_EMAIL_SODF\t=\t\"Forbidden text. Try again\"  \nCELL_EMASH_BOD\t=\t\"Enter your Eyefind message\"  \nCELL_EMASH_BODE\t=\t\"Message too long. Try again\"  \nCELL_EMASH_BODF\t=\t\"Forbidden message. Try again\"  \nCELL_EMASH_SOD\t=\t\"Enter your Eyefind subject\"  \nCELL_EMASH_SODE\t=\t\"Subject too long. Try again\"  \nCELL_EMASH_SODF\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP10\t=\t\"Enter Synopsis\"  \nFMMC_KEY_TIP12\t=\t\"Enter Custom Team Name\"  \nFMMC_KEY_TIP12F\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP12N\t=\t\"Custom Team Name\"  \nFMMC_KEY_TIP8\t=\t\"Enter Message\"  \nFMMC_KEY_TIP8F\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP8FS\t=\t\"Invalid Message. Try again\"  \nFMMC_KEY_TIP8S\t=\t\"Enter Message\"  \nFMMC_KEY_TIP9\t=\t\"Enter Outfit Name\"  \nFMMC_KEY_TIP9F\t=\t\"Invalid Outfit Name. Try again\"  \nFMMC_KEY_TIP9N\t=\t\"Outfit Name\"  \nPM_NAME_CHALL\t=\t\"Enter Challenge Name\"  \n```"
  },
  "2221": {
      "prefix": "DisableStuntJumpSet",
      "body": [
          "DisableStuntJumpSet(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2222": {
      "prefix": "DisplayOnscreenKeyboardWithLongerInitialString",
      "body": [
          "DisplayOnscreenKeyboardWithLongerInitialString(${1:int* p0}, ${2:char* windowTitle}, ${3:Any* p2}, ${4:char* defaultText}, ${5:char* defaultConcat1}, ${6:char* defaultConcat2}, ${7:char* defaultConcat3}, ${8:char* defaultConcat4}, ${9:char* defaultConcat5}, ${10:char* defaultConcat6}, ${11:char* defaultConcat7}, ${12:int* maxInputLength})${0}"
      ],
      "description": ""
  },
  "2223": {
      "prefix": "DoesPopMultiplierSphereExist",
      "body": [
          "DoesPopMultiplierSphereExist(${1:int* id})${0}"
      ],
      "description": ""
  },
  "2224": {
      "prefix": "EnableStuntJumpSet",
      "body": [
          "EnableStuntJumpSet(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2225": {
      "prefix": "DoAutoSave",
      "body": [
          "DoAutoSave()${0}"
      ],
      "description": ""
  },
  "2226": {
      "prefix": "EndReplayStats",
      "body": [
          "EndReplayStats()${0}"
      ],
      "description": ""
  },
  "2227": {
      "prefix": "DoesPopMultiplierAreaExist",
      "body": [
          "DoesPopMultiplierAreaExist(${1:int* id})${0}"
      ],
      "description": ""
  },
  "2228": {
      "prefix": "FindSpawnPointInDirection",
      "body": [
          "FindSpawnPointInDirection(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* dirX}, ${5:float* dirY}, ${6:float* dirZ}, ${7:float* distance}, ${8:Vector3* spawnPoint})${0}"
      ],
      "description": "```\nFinds a position ahead of the player by predicting the players next actions.  \nThe positions match path finding node positions.  \nWhen roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.  \n```"
  },
  "2229": {
      "prefix": "EnableDispatchService",
      "body": [
          "EnableDispatchService(${1:int* dispatchService}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nhttps://alloc8or.re/gta5/doc/enums/DispatchType.txt\n```"
  },
  "2230": {
      "prefix": "EnableTennisMode",
      "body": [
          "EnableTennisMode(${1:Ped* ped}, ${2:BOOL* toggle}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nMakes the ped jump around like they're in a tennis match  \n```"
  },
  "2231": {
      "prefix": "ForceSocialClubUpdate",
      "body": [
          "ForceSocialClubUpdate()${0}"
      ],
      "description": "```\nExits the game and downloads a fresh social club update on next restart.  \n```"
  },
  "2232": {
      "prefix": "GetAllocatedStackSize",
      "body": [
          "GetAllocatedStackSize()${0}"
      ],
      "description": ""
  },
  "2233": {
      "prefix": "ForceGameStatePlaying",
      "body": [
          "ForceGameStatePlaying()${0}"
      ],
      "description": "```\nSets the localplayer playerinfo state back to playing (State 0)  \nStates are:  \n-1: \"Invalid\"  \n0: \"Playing\"  \n1: \"Died\"  \n2: \"Arrested\"  \n3: \"Failed Mission\"  \n4: \"Left Game\"  \n5: \"Respawn\"  \n6: \"In MP Cutscene\"  \n```"
  },
  "2234": {
      "prefix": "GetBaseElementMetadata",
      "body": [
          "GetBaseElementMetadata(${1:Any* p1}, ${2:Any* p2}, ${3:Any* p3}, ${4:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "2235": {
      "prefix": "ForceLightningFlash",
      "body": [
          "ForceLightningFlash()${0}"
      ],
      "description": "```\ncreates single lightning+thunder at random position  \n```"
  },
  "2236": {
      "prefix": "GetBenchmarkPassFromCommandLine",
      "body": [
          "GetBenchmarkPassFromCommandLine()${0}"
      ],
      "description": "```\nReturns value of the '-benchmarkPass' command line option.\n```"
  },
  "2237": {
      "prefix": "GetBitsInRange",
      "body": [
          "GetBitsInRange(${1:int* var}, ${2:int* rangeStart}, ${3:int* rangeEnd})${0}"
      ],
      "description": ""
  },
  "2238": {
      "prefix": "GetAngleBetween2dVectors",
      "body": [
          "GetAngleBetween2dVectors(${1:float* x1}, ${2:float* y1}, ${3:float* x2}, ${4:float* y2})${0}"
      ],
      "description": ""
  },
  "2239": {
      "prefix": "GetCoordsOfProjectileTypeInArea",
      "body": [
          "GetCoordsOfProjectileTypeInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:Hash* projectileHash}, ${8:Vector3* projectilePos}, ${9:BOOL* ownedByPlayer})${0}"
      ],
      "description": ""
  },
  "2240": {
      "prefix": "GetBenchmarkIterationsFromCommandLine",
      "body": [
          "GetBenchmarkIterationsFromCommandLine()${0}"
      ],
      "description": "```\nReturns value of the '-benchmarkIterations' command line option.\n```"
  },
  "2241": {
      "prefix": "GetBenchmarkTime",
      "body": [
          "GetBenchmarkTime()${0}"
      ],
      "description": ""
  },
  "2242": {
      "prefix": "GetCoordsOfProjectileTypeWithinDistance",
      "body": [
          "GetCoordsOfProjectileTypeWithinDistance(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:float* distance}, ${4:Vector3* outCoords}, ${5:BOOL* ownedByPlayer})${0}"
      ],
      "description": ""
  },
  "2243": {
      "prefix": "GetCloudHatOpacity",
      "body": [
          "GetCloudHatOpacity()${0}"
      ],
      "description": ""
  },
  "2244": {
      "prefix": "GetDistanceBetweenCoords",
      "body": [
          "GetDistanceBetweenCoords(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* useZ})${0}"
      ],
      "description": "Returns the distance between two three-dimensional points, optionally ignoring the Z values.\nIf useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.\nConsider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates."
  },
  "2245": {
      "prefix": "GetFrameCount",
      "body": [
          "GetFrameCount()${0}"
      ],
      "description": ""
  },
  "2246": {
      "prefix": "GetGameTimer",
      "body": [
          "GetGameTimer()${0}"
      ],
      "description": ""
  },
  "2247": {
      "prefix": "GetFakeWantedLevel",
      "body": [
          "GetFakeWantedLevel()${0}"
      ],
      "description": ""
  },
  "2248": {
      "prefix": "GetGroundZFor3dCoord",
      "body": [
          "GetGroundZFor3dCoord(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* groundZ}, ${5:BOOL* ignoreWater})${0}"
      ],
      "description": "```\nBear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.\n```\n\n```\nNativeDB Added Parameter 6: BOOL p5\n```"
  },
  "2249": {
      "prefix": "GetGroundZFor3dCoord2",
      "body": [
          "GetGroundZFor3dCoord2(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* groundZ}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 6: BOOL p5\n```"
  },
  "2250": {
      "prefix": "GetFrameTime",
      "body": [
          "GetFrameTime()${0}"
      ],
      "description": ""
  },
  "2251": {
      "prefix": "GetGlobalCharBuffer",
      "body": [
          "GetGlobalCharBuffer()${0}"
      ],
      "description": "```\nReturns pointer to an empty string.\nGET_C*\n```"
  },
  "2252": {
      "prefix": "GetHeadingFromVector2d",
      "body": [
          "GetHeadingFromVector2d(${1:float* dx}, ${2:float* dy})${0}"
      ],
      "description": "```\ndx = x1 - x2\ndy = y1 - y2\n```"
  },
  "2253": {
      "prefix": "GetGroundZAndNormalFor3dCoord",
      "body": [
          "GetGroundZAndNormalFor3dCoord(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* groundZ}, ${5:Vector3* normal})${0}"
      ],
      "description": ""
  },
  "2254": {
      "prefix": "GetIsAutoSaveOff",
      "body": [
          "GetIsAutoSaveOff()${0}"
      ],
      "description": "```\nReturns true if profile setting 208 is equal to 0.\n```"
  },
  "2255": {
      "prefix": "GetIsPlayerInAnimalForm",
      "body": [
          "GetIsPlayerInAnimalForm()${0}"
      ],
      "description": "```\nAlthough we don't have a jenkins hash for this one, the name is 100% confirmed.\n```"
  },
  "2256": {
      "prefix": "GetHashKey",
      "body": [
          "GetHashKey(${1:char* string})${0}"
      ],
      "description": "This native converts its past string to hash. It is hashed using jenkins one at a time method."
  },
  "2257": {
      "prefix": "GetIndexOfCurrentLevel",
      "body": [
          "GetIndexOfCurrentLevel()${0}"
      ],
      "description": ""
  },
  "2258": {
      "prefix": "GetModelDimensions",
      "body": [
          "GetModelDimensions(${1:Hash* modelHash}, ${2:Vector3* minimum}, ${3:Vector3* maximum})${0}"
      ],
      "description": "```\nGets the dimensions of a model.\nCalculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.\nExample from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);\n```"
  },
  "2259": {
      "prefix": "GetMissionFlag",
      "body": [
          "GetMissionFlag()${0}"
      ],
      "description": ""
  },
  "2260": {
      "prefix": "GetNextWeatherTypeHashName",
      "body": [
          "GetNextWeatherTypeHashName()${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2261": {
      "prefix": "GetNumDispatchedUnitsForPlayer",
      "body": [
          "GetNumDispatchedUnitsForPlayer(${1:int* dispatchService})${0}"
      ],
      "description": ""
  },
  "2262": {
      "prefix": "GetNumberOfFreeStacksOfThisSize",
      "body": [
          "GetNumberOfFreeStacksOfThisSize(${1:int* stackSize})${0}"
      ],
      "description": ""
  },
  "2263": {
      "prefix": "GetNumSuccessfulStuntJumps",
      "body": [
          "GetNumSuccessfulStuntJumps()${0}"
      ],
      "description": ""
  },
  "2264": {
      "prefix": "GetOnscreenKeyboardResult",
      "body": [
          "GetOnscreenKeyboardResult()${0}"
      ],
      "description": "```\nReturns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.  \n```"
  },
  "2265": {
      "prefix": "GetPowerSavingModeDuration",
      "body": [
          "GetPowerSavingModeDuration()${0}"
      ],
      "description": "```\nReturns duration of how long the game has been in power-saving mode (aka \"constrained\") in milliseconds.\n```"
  },
  "2266": {
      "prefix": "GetPrevWeatherTypeHashName",
      "body": [
          "GetPrevWeatherTypeHashName()${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2267": {
      "prefix": "GetProfileSetting",
      "body": [
          "GetProfileSetting(${1:int* profileSetting})${0}"
      ],
      "description": ""
  },
  "2268": {
      "prefix": "GetRandomEventFlag",
      "body": [
          "GetRandomEventFlag()${0}"
      ],
      "description": ""
  },
  "2269": {
      "prefix": "GetProjectileNearPed",
      "body": [
          "GetProjectileNearPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:float* distance}, ${4:Vector3* outCoords}, ${5:Object* outProjectile}, ${6:BOOL* ownedByPlayer})${0}"
      ],
      "description": ""
  },
  "2270": {
      "prefix": "GetRandomFloatInRange",
      "body": [
          "GetRandomFloatInRange(${1:float* startRange}, ${2:float* endRange})${0}"
      ],
      "description": ""
  },
  "2271": {
      "prefix": "GetRainLevel",
      "body": [
          "GetRainLevel()${0}"
      ],
      "description": ""
  },
  "2272": {
      "prefix": "GetRandomIntInRange2",
      "body": [
          "GetRandomIntInRange2(${1:int* startRange}, ${2:int* endRange})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2273": {
      "prefix": "GetRandomIntInRange",
      "body": [
          "GetRandomIntInRange(${1:int* startRange}, ${2:int* endRange})${0}"
      ],
      "description": ""
  },
  "2274": {
      "prefix": "GetReplayStatAtIndex",
      "body": [
          "GetReplayStatAtIndex(${1:int* index})${0}"
      ],
      "description": ""
  },
  "2275": {
      "prefix": "GetReplayStatCount",
      "body": [
          "GetReplayStatCount()${0}"
      ],
      "description": ""
  },
  "2276": {
      "prefix": "GetReplayStatMissionType",
      "body": [
          "GetReplayStatMissionType()${0}"
      ],
      "description": ""
  },
  "2277": {
      "prefix": "GetSizeOfSaveData",
      "body": [
          "GetSizeOfSaveData(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2278": {
      "prefix": "GetSnowLevel",
      "body": [
          "GetSnowLevel()${0}"
      ],
      "description": ""
  },
  "2279": {
      "prefix": "GetStatusOfMissionRepeatSave",
      "body": [
          "GetStatusOfMissionRepeatSave()${0}"
      ],
      "description": ""
  },
  "2280": {
      "prefix": "GetTennisSwingAnimComplete",
      "body": [
          "GetTennisSwingAnimComplete(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "2281": {
      "prefix": "GetTotalSuccessfulStuntJumps",
      "body": [
          "GetTotalSuccessfulStuntJumps()${0}"
      ],
      "description": ""
  },
  "2282": {
      "prefix": "GetWindDirection",
      "body": [
          "GetWindDirection()${0}"
      ],
      "description": ""
  },
  "2283": {
      "prefix": "GetWeatherTypeTransition",
      "body": [
          "GetWeatherTypeTransition(${1:Hash* weatherType1}, ${2:Hash* weatherType2}, ${3:float* percentWeather2})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2284": {
      "prefix": "GetWindSpeed",
      "body": [
          "GetWindSpeed()${0}"
      ],
      "description": ""
  },
  "2285": {
      "prefix": "HasAsyncInstallFinished",
      "body": [
          "HasAsyncInstallFinished()${0}"
      ],
      "description": "```\nHardcoded to always return true.\n```"
  },
  "2286": {
      "prefix": "HasBulletImpactedInArea",
      "body": [
          "HasBulletImpactedInArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\np3 - possibly radius?  \n```"
  },
  "2287": {
      "prefix": "HasBulletImpactedInBox",
      "body": [
          "HasBulletImpactedInBox(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": ""
  },
  "2288": {
      "prefix": "HasButtonCombinationJustBeenEntered",
      "body": [
          "HasButtonCombinationJustBeenEntered(${1:Hash* hash}, ${2:int* amount})${0}"
      ],
      "description": "```\nThis native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the \"amount\" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/\nINT_SCORES_SCORTED was a hash collision\n```"
  },
  "2289": {
      "prefix": "HasCheatStringJustBeenEntered",
      "body": [
          "HasCheatStringJustBeenEntered(${1:Hash* hash})${0}"
      ],
      "description": "```\nGet inputted \"Cheat code\", for example:\nwhile (TRUE)\n{\n    if (MISC::_557E43C447E700A8(${fugitive}))\n    {\n       // Do something.\n    }\n    SYSTEM::WAIT(0);\n}\nCalling this will also set the last saved string hash to zero.\n```"
  },
  "2290": {
      "prefix": "HasResumedFromSuspend",
      "body": [
          "HasResumedFromSuspend()${0}"
      ],
      "description": "```\nHardcoded to return false.\n```"
  },
  "2291": {
      "prefix": "HaveCreditsReachedEnd",
      "body": [
          "HaveCreditsReachedEnd()${0}"
      ],
      "description": ""
  },
  "2292": {
      "prefix": "IgnoreNextRestart",
      "body": [
          "IgnoreNextRestart(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2293": {
      "prefix": "IsAreaOccupied",
      "body": [
          "IsAreaOccupied(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:BOOL* p6}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:BOOL* p9}, ${11:BOOL* p10}, ${12:Any* p11}, ${13:BOOL* p12})${0}"
      ],
      "description": ""
  },
  "2294": {
      "prefix": "IsBitSet",
      "body": [
          "IsBitSet(${1:int* address}, ${2:int* offset})${0}"
      ],
      "description": "```\nReturns bit's boolean state from [offset] of [address].\nExample:\nMISC::IS_BIT_SET(bitAddress, 1);\nTo enable and disable bits, see:\nMISC::SET_BIT(&bitAddress, 1);   // enable\nMISC::CLEAR_BIT(&bitAddress, 1); // disable\n```"
  },
  "2295": {
      "prefix": "IsBulletInAngledArea",
      "body": [
          "IsBulletInAngledArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width}, ${8:BOOL* ownedByPlayer})${0}"
      ],
      "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.\n\nFor projectiles, see: [`IS_PROJECTILE_TYPE_IN_ANGLED_AREA`](#\\_0xF0BC12401061DEA0)"
  },
  "2296": {
      "prefix": "IsAussieVersion",
      "body": [
          "IsAussieVersion()${0}"
      ],
      "description": "```\nif (MISC::IS_AUSSIE_VERSION()) {\n    sub_127a9(&l_31, 1024); // l_31 |= 1024\n    l_129 = 3;\n    sub_129d2(\"AUSSIE VERSION IS TRUE!?!?!\"); // DEBUG\n}\nUsed to block some of the prostitute stuff due to laws in Australia.\n```"
  },
  "2297": {
      "prefix": "IsAutoSaveInProgress",
      "body": [
          "IsAutoSaveInProgress()${0}"
      ],
      "description": ""
  },
  "2298": {
      "prefix": "IsBulletInBox",
      "body": [
          "IsBulletInBox(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* ownedByPlayer})${0}"
      ],
      "description": ""
  },
  "2299": {
      "prefix": "IsCommandLineBenchmarkValueSet",
      "body": [
          "IsCommandLineBenchmarkValueSet()${0}"
      ],
      "description": "```\nReturns true if command line option '-benchmark' is set.\n```"
  },
  "2300": {
      "prefix": "IsBulletInArea",
      "body": [
          "IsBulletInArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:BOOL* ownedByPlayer})${0}"
      ],
      "description": ""
  },
  "2301": {
      "prefix": "IsDurangoVersion",
      "body": [
          "IsDurangoVersion()${0}"
      ],
      "description": ""
  },
  "2302": {
      "prefix": "IsInPowerSavingMode",
      "body": [
          "IsInPowerSavingMode()${0}"
      ],
      "description": "```\naka \"constrained\"\n```"
  },
  "2303": {
      "prefix": "IsFrontendFading",
      "body": [
          "IsFrontendFading()${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 0.  \n```"
  },
  "2304": {
      "prefix": "IsIncidentValid",
      "body": [
          "IsIncidentValid(${1:int* incidentId})${0}"
      ],
      "description": "```\n=======================================================  \nCorrection, I have change this to int, instead of int*  \nas it doesn't use a pointer to the createdIncident.  \nIf you try it you will crash (or) freeze.  \n=======================================================  \n```"
  },
  "2305": {
      "prefix": "IsMemoryCardInUse",
      "body": [
          "IsMemoryCardInUse()${0}"
      ],
      "description": ""
  },
  "2306": {
      "prefix": "IsNextWeatherType",
      "body": [
          "IsNextWeatherType(${1:char* weatherType})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2307": {
      "prefix": "IsMinigameInProgress",
      "body": [
          "IsMinigameInProgress()${0}"
      ],
      "description": ""
  },
  "2308": {
      "prefix": "IsOrbisVersion",
      "body": [
          "IsOrbisVersion()${0}"
      ],
      "description": ""
  },
  "2309": {
      "prefix": "IsPointObscuredByAMissionEntity",
      "body": [
          "IsPointObscuredByAMissionEntity(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "2310": {
      "prefix": "IsPcVersion",
      "body": [
          "IsPcVersion()${0}"
      ],
      "description": ""
  },
  "2311": {
      "prefix": "IsPopMultiplierAreaUnk",
      "body": [
          "IsPopMultiplierAreaUnk(${1:int* id})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2312": {
      "prefix": "IsPositionOccupied",
      "body": [
          "IsPositionOccupied(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* range}, ${5:BOOL* p4}, ${6:BOOL* checkVehicles}, ${7:BOOL* checkPeds}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:Entity* ignoreEntity}, ${11:BOOL* p10})${0}"
      ],
      "description": "The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases."
  },
  "2313": {
      "prefix": "IsProjectileInArea",
      "body": [
          "IsProjectileInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* ownedByPlayer})${0}"
      ],
      "description": "```\nDetermines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.  \nownedByPlayer = only projectiles fired by the player will be detected.  \n```"
  },
  "2314": {
      "prefix": "IsPrevWeatherType",
      "body": [
          "IsPrevWeatherType(${1:char* weatherType})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2315": {
      "prefix": "IsProjectileTypeInArea",
      "body": [
          "IsProjectileTypeInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* type}, ${8:BOOL* ownedByPlayer})${0}"
      ],
      "description": "```\nDetermines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.  \n```"
  },
  "2316": {
      "prefix": "IsProjectileTypeInAngledArea",
      "body": [
          "IsProjectileTypeInAngledArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width}, ${8:float* p7}, ${9:Hash* weaponHash}, ${10:BOOL* ownedByPlayer})${0}"
      ],
      "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.\n\n```\nNativeDB Removed Parameter 7: float p7\n```"
  },
  "2317": {
      "prefix": "IsProjectileTypeWithinDistance",
      "body": [
          "IsProjectileTypeWithinDistance(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Hash* projHash}, ${5:float* radius}, ${6:BOOL* ownedByPlayer})${0}"
      ],
      "description": ""
  },
  "2318": {
      "prefix": "IsPs3Version",
      "body": [
          "IsPs3Version()${0}"
      ],
      "description": ""
  },
  "2319": {
      "prefix": "IsSniperInverted",
      "body": [
          "IsSniperInverted()${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 0.  \n```"
  },
  "2320": {
      "prefix": "IsSniperBulletInArea",
      "body": [
          "IsSniperBulletInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nDetermines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.  \n```"
  },
  "2321": {
      "prefix": "IsStringNull",
      "body": [
          "IsStringNull(${1:char* string})${0}"
      ],
      "description": ""
  },
  "2322": {
      "prefix": "IsStuntJumpInProgress",
      "body": [
          "IsStuntJumpInProgress()${0}"
      ],
      "description": ""
  },
  "2323": {
      "prefix": "IsStringNullOrEmpty",
      "body": [
          "IsStringNullOrEmpty(${1:char* string})${0}"
      ],
      "description": ""
  },
  "2324": {
      "prefix": "IsStuntJumpMessageShowing",
      "body": [
          "IsStuntJumpMessageShowing()${0}"
      ],
      "description": ""
  },
  "2325": {
      "prefix": "IsTennisMode",
      "body": [
          "IsTennisMode(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "2326": {
      "prefix": "IsXbox360Version",
      "body": [
          "IsXbox360Version()${0}"
      ],
      "description": ""
  },
  "2327": {
      "prefix": "IsThisAMinigameScript",
      "body": [
          "IsThisAMinigameScript()${0}"
      ],
      "description": ""
  },
  "2328": {
      "prefix": "LandingMenuIsActive",
      "body": [
          "LandingMenuIsActive()${0}"
      ],
      "description": "```\nReturns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU\n```"
  },
  "2329": {
      "prefix": "LoadCloudHat",
      "body": [
          "LoadCloudHat(${1:char* name}, ${2:float* transitionTime})${0}"
      ],
      "description": "```\nThe following cloudhats are useable:\naltostratus\nCirrus\ncirrocumulus\nClear 01\nCloudy 01\nContrails\nHorizon\nhorizonband1\nhorizonband2\nhorizonband3\nhorsey\nNimbus\nPuffs\nRAIN\nSnowy 01\nStormy 01\nstratoscumulus\nStripey\nshower\nWispy\n```"
  },
  "2330": {
      "prefix": "OverrideSaveHouse",
      "body": [
          "OverrideSaveHouse(${1:BOOL* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:BOOL* p5}, ${7:float* p6}, ${8:float* p7})${0}"
      ],
      "description": ""
  },
  "2331": {
      "prefix": "PauseDeathArrestRestart",
      "body": [
          "PauseDeathArrestRestart(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2332": {
      "prefix": "PlayTennisDiveAnim",
      "body": [
          "PlayTennisDiveAnim(${1:Ped* ped}, ${2:int* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "2333": {
      "prefix": "NetworkSetScriptIsSafeForNetworkGame",
      "body": [
          "NetworkSetScriptIsSafeForNetworkGame()${0}"
      ],
      "description": ""
  },
  "2334": {
      "prefix": "PopulateNow",
      "body": [
          "PopulateNow()${0}"
      ],
      "description": "```\nspawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called  \n```"
  },
  "2335": {
      "prefix": "NextOnscreenKeyboardResultWillDisplayUsingTheseFonts",
      "body": [
          "NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(${1:int* p0})${0}"
      ],
      "description": "```\np0 was always 2 in R* scripts.\nCalled before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.\n```"
  },
  "2336": {
      "prefix": "QueueMissionRepeatLoad",
      "body": [
          "QueueMissionRepeatLoad()${0}"
      ],
      "description": ""
  },
  "2337": {
      "prefix": "QueueMissionRepeatSave",
      "body": [
          "QueueMissionRepeatSave()${0}"
      ],
      "description": "Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over."
  },
  "2338": {
      "prefix": "PlayTennisSwingAnim",
      "body": [
          "PlayTennisSwingAnim(${1:Ped* ped}, ${2:char* animDict}, ${3:char* animName}, ${4:float* p3}, ${5:float* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "2339": {
      "prefix": "PreloadCloudHat",
      "body": [
          "PreloadCloudHat(${1:char* name})${0}"
      ],
      "description": "```\nFound in the scripts:\nMISC::_11B56FBBF7224868(\"CONTRAILS\");\n```"
  },
  "2340": {
      "prefix": "RegisterEnumToSave",
      "body": [
          "RegisterEnumToSave(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2341": {
      "prefix": "RegisterBoolToSave",
      "body": [
          "RegisterBoolToSave(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2342": {
      "prefix": "RegisterInt64ToSave",
      "body": [
          "RegisterInt64ToSave(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2343": {
      "prefix": "RegisterIntToSave",
      "body": [
          "RegisterIntToSave(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2344": {
      "prefix": "RegisterFloatToSave",
      "body": [
          "RegisterFloatToSave(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2345": {
      "prefix": "RegisterSaveHouse",
      "body": [
          "RegisterSaveHouse(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "2346": {
      "prefix": "RegisterTextLabelToSave",
      "body": [
          "RegisterTextLabelToSave(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "2347": {
      "prefix": "RemoveDispatchSpawnBlockingArea",
      "body": [
          "RemoveDispatchSpawnBlockingArea(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2348": {
      "prefix": "RegisterTextLabelToSave2",
      "body": [
          "RegisterTextLabelToSave2(${1:Any* p0}, ${2:char* name})${0}"
      ],
      "description": "```\nSeems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?\nMISC::_6F7794F28C6B2535(&a_0._f1, \"tlPlateText\");\nMISC::_6F7794F28C6B2535(&a_0._f1C, \"tlPlateText_pending\");\nMISC::_6F7794F28C6B2535(&a_0._f10B, \"tlCarAppPlateText\");\n\"tl\" prefix sounds like \"Text Label\"\n```"
  },
  "2349": {
      "prefix": "RemovePopMultiplierArea",
      "body": [
          "RemovePopMultiplierArea(${1:int* id}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "2350": {
      "prefix": "RemovePopMultiplierSphere",
      "body": [
          "RemovePopMultiplierSphere(${1:int* id}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "2351": {
      "prefix": "RemoveStealthKill",
      "body": [
          "RemoveStealthKill(${1:Hash* hash}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nAppears to remove stealth kill action from memory\n```"
  },
  "2352": {
      "prefix": "ResetBenchmarkRecording",
      "body": [
          "ResetBenchmarkRecording()${0}"
      ],
      "description": "```\nBegins with RESET_*. Next character in the name is either D or E.\n```"
  },
  "2353": {
      "prefix": "ResetDispatchSpawnBlockingAreas",
      "body": [
          "ResetDispatchSpawnBlockingAreas()${0}"
      ],
      "description": ""
  },
  "2354": {
      "prefix": "ResetDispatchIdealSpawnDistance",
      "body": [
          "ResetDispatchIdealSpawnDistance()${0}"
      ],
      "description": ""
  },
  "2355": {
      "prefix": "ResetDispatchTimeBetweenSpawnAttempts",
      "body": [
          "ResetDispatchTimeBetweenSpawnAttempts(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2356": {
      "prefix": "ResetDispatchSpawnLocation",
      "body": [
          "ResetDispatchSpawnLocation()${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2357": {
      "prefix": "RestartGame",
      "body": [
          "RestartGame()${0}"
      ],
      "description": "In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game."
  },
  "2358": {
      "prefix": "SaveBenchmarkRecording",
      "body": [
          "SaveBenchmarkRecording()${0}"
      ],
      "description": "```\nSaves the benchmark recording to %USERPROFILE%\\Documents\\Rockstar Games\\GTA V\\Benchmarks and submits some metrics.\n```"
  },
  "2359": {
      "prefix": "ScriptRaceInit",
      "body": [
          "ScriptRaceInit(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2360": {
      "prefix": "ScriptRaceGetPlayerSplitTime",
      "body": [
          "ScriptRaceGetPlayerSplitTime(${1:Player* player}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "2361": {
      "prefix": "SetBeastModeActive",
      "body": [
          "SetBeastModeActive(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2362": {
      "prefix": "ScriptRaceShutdown",
      "body": [
          "ScriptRaceShutdown()${0}"
      ],
      "description": ""
  },
  "2363": {
      "prefix": "SetBit",
      "body": [
          "SetBit(${1:int* address}, ${2:int* offset})${0}"
      ],
      "description": "```\nThis sets bit [offset] of [address] to on.\nThe offsets used are different bits to be toggled on and off, typically there is only one address used in a script.\nExample:\nMISC::SET_BIT(&bitAddress, 1);\nTo check if this bit has been enabled:\nMISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards\nPlease note, this method may assign a value to [address] when used.\n```"
  },
  "2364": {
      "prefix": "SetCloudHatOpacity",
      "body": [
          "SetCloudHatOpacity(${1:float* opacity})${0}"
      ],
      "description": ""
  },
  "2365": {
      "prefix": "SetBitsInRange",
      "body": [
          "SetBitsInRange(${1:int* var}, ${2:int* rangeStart}, ${3:int* rangeEnd}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "2366": {
      "prefix": "SetCreditsActive",
      "body": [
          "SetCreditsActive(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2367": {
      "prefix": "SetDispatchIdealSpawnDistance",
      "body": [
          "SetDispatchIdealSpawnDistance(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2368": {
      "prefix": "SetDispatchTimeBetweenSpawnAttempts",
      "body": [
          "SetDispatchTimeBetweenSpawnAttempts(${1:Any* p0}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "2369": {
      "prefix": "SetDispatchSpawnLocation",
      "body": [
          "SetDispatchSpawnLocation(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "2370": {
      "prefix": "SetExplosiveAmmoThisFrame",
      "body": [
          "SetExplosiveAmmoThisFrame(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2371": {
      "prefix": "SetDispatchTimeBetweenSpawnAttemptsMultiplier",
      "body": [
          "SetDispatchTimeBetweenSpawnAttemptsMultiplier(${1:Any* p0}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "2372": {
      "prefix": "SetFadeInAfterDeathArrest",
      "body": [
          "SetFadeInAfterDeathArrest(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nSets whether the game should fade in after the player dies or is arrested.  \n```"
  },
  "2373": {
      "prefix": "SetExplosiveMeleeThisFrame",
      "body": [
          "SetExplosiveMeleeThisFrame(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2374": {
      "prefix": "SetFadeInAfterLoad",
      "body": [
          "SetFadeInAfterLoad(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2375": {
      "prefix": "SetFadeOutAfterArrest",
      "body": [
          "SetFadeOutAfterArrest(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nSets whether the game should fade out after the player is arrested.  \n```"
  },
  "2376": {
      "prefix": "SetFakeWantedLevel",
      "body": [
          "SetFakeWantedLevel(${1:int* fakeWantedLevel})${0}"
      ],
      "description": "```\nSets a visually fake wanted level on the user interface. Used by Rockstar's scripts to \"override\" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.\nMax is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.\n```"
  },
  "2377": {
      "prefix": "SetFadeOutAfterDeath",
      "body": [
          "SetFadeOutAfterDeath(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nSets whether the game should fade out after the player dies.  \n```"
  },
  "2378": {
      "prefix": "SetFireAmmoThisFrame",
      "body": [
          "SetFireAmmoThisFrame(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2379": {
      "prefix": "SetForcePlayerToJump",
      "body": [
          "SetForcePlayerToJump(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2380": {
      "prefix": "SetGravityLevel",
      "body": [
          "SetGravityLevel(${1:int* level})${0}"
      ],
      "description": "```\nlevel can be from 0 to 3  \n0: 9.8   \n1: 2.4   \n2: 0.1 - very low  \n3: 0.0  \n```"
  },
  "2381": {
      "prefix": "SetGamePaused",
      "body": [
          "SetGamePaused(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nMake sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe  \n```"
  },
  "2382": {
      "prefix": "SetIncidentUnk",
      "body": [
          "SetIncidentUnk(${1:int* incidentId}, ${2:float* p1})${0}"
      ],
      "description": "```\nSET_INCIDENT_*\n```"
  },
  "2383": {
      "prefix": "SetIncidentRequestedUnits",
      "body": [
          "SetIncidentRequestedUnits(${1:int* incidentId}, ${2:int* dispatchService}, ${3:int* numUnits})${0}"
      ],
      "description": ""
  },
  "2384": {
      "prefix": "SetInstancePriorityMode",
      "body": [
          "SetInstancePriorityMode(${1:int* toggle})${0}"
      ],
      "description": "Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. It causes a loading screen to show as it reloads map data."
  },
  "2385": {
      "prefix": "SetInstancePriorityHint",
      "body": [
          "SetInstancePriorityHint(${1:int* flag})${0}"
      ],
      "description": "```\nSets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.\n```"
  },
  "2386": {
      "prefix": "SetMissionFlag",
      "body": [
          "SetMissionFlag(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf true, the player can't save the game.   \nIf the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.  \n^ also, if the mission flag is already set, the function does nothing at all  \n```"
  },
  "2387": {
      "prefix": "SetMinigameInProgress",
      "body": [
          "SetMinigameInProgress(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2388": {
      "prefix": "SetPlayerIsInAnimalForm",
      "body": [
          "SetPlayerIsInAnimalForm(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf toggle is true, the ped's head is shown in the pause menu\nIf toggle is false, the ped's head is not shown in the pause menu\n```"
  },
  "2389": {
      "prefix": "SetOverrideWeather",
      "body": [
          "SetOverrideWeather(${1:char* weatherType})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2390": {
      "prefix": "SetPlayerRockstarEditorDisabled",
      "body": [
          "SetPlayerRockstarEditorDisabled(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nSET_PLAYER_*\n```"
  },
  "2391": {
      "prefix": "SetRainLevel",
      "body": [
          "SetRainLevel(${1:float* level})${0}"
      ],
      "description": "Controls rain, rain sounds and the creation of puddles.\n\nWith an `level` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.\n\nWith an `level` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.\n\nTo use the rain level of the current weather, call this native with `-1f` as `level`."
  },
  "2392": {
      "prefix": "SetRandomSeed",
      "body": [
          "SetRandomSeed(${1:int* seed})${0}"
      ],
      "description": ""
  },
  "2393": {
      "prefix": "SetRandomEventFlag",
      "body": [
          "SetRandomEventFlag(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.  \nDoes nothing if the mission flag is set.  \n```"
  },
  "2394": {
      "prefix": "SetRestartCustomPosition",
      "body": [
          "SetRestartCustomPosition(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* heading})${0}"
      ],
      "description": ""
  },
  "2395": {
      "prefix": "SetRandomWeatherType",
      "body": [
          "SetRandomWeatherType()${0}"
      ],
      "description": ""
  },
  "2396": {
      "prefix": "SetSaveHouse",
      "body": [
          "SetSaveHouse(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2397": {
      "prefix": "SetRiotModeEnabled",
      "body": [
          "SetRiotModeEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nActivates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.\n```"
  },
  "2398": {
      "prefix": "SetSnowLevel",
      "body": [
          "SetSnowLevel(${1:float* level})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2399": {
      "prefix": "SetSaveMenuActive",
      "body": [
          "SetSaveMenuActive(${1:BOOL* ignoreVehicle})${0}"
      ],
      "description": "```\nignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)\n```"
  },
  "2400": {
      "prefix": "SetStuntJumpsCanTrigger",
      "body": [
          "SetStuntJumpsCanTrigger(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2401": {
      "prefix": "SetSuperJumpThisFrame",
      "body": [
          "SetSuperJumpThisFrame(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2402": {
      "prefix": "SetThisScriptCanRemoveBlipsCreatedByAnyScript",
      "body": [
          "SetThisScriptCanRemoveBlipsCreatedByAnyScript(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2403": {
      "prefix": "SetThisScriptCanBePaused",
      "body": [
          "SetThisScriptCanBePaused(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2404": {
      "prefix": "SetWeatherTypeNow",
      "body": [
          "SetWeatherTypeNow(${1:char* weatherType})${0}"
      ],
      "description": "```\n// timecycle_keyframe_data\nBLIZZARD = 0x27EA2814\nCLEAR = 0x36A83D84\nCLEARING = 0x6DB1A50D\nCLOUDS = 0x30FDAF5C\nEXTRASUNNY = 0x97AA0A79\nFOGGY = 0xAE737644\nHALLOWEEN = 0xC91A3202\nNEUTRAL = 0xA4CA1326\nOVERCAST = 0xBB898D2D\nRAIN = 0x54A69840\nSMOG = 0x10DCF4B5\nSNOW = 0xEFB6EFF6\nSNOWLIGHT = 0x23FB812B\nTHUNDER = 0xB677829F\nXMAS = 0xAAC9C895\n```"
  },
  "2405": {
      "prefix": "SetTimeScale",
      "body": [
          "SetTimeScale(${1:float* timeScale})${0}"
      ],
      "description": "```\nMaximum value is 1.  \nAt a value of 0 the game will still run at a minimum time scale.  \nSlow Motion 1: 0.6  \nSlow Motion 2: 0.4  \nSlow Motion 3: 0.2  \n```"
  },
  "2406": {
      "prefix": "SetWeatherTypeOvertimePersist",
      "body": [
          "SetWeatherTypeOvertimePersist(${1:char* weatherType}, ${2:float* time})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2407": {
      "prefix": "SetWeatherTypeNowPersist",
      "body": [
          "SetWeatherTypeNowPersist(${1:char* weatherType})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2408": {
      "prefix": "SetWeatherTypeTransition",
      "body": [
          "SetWeatherTypeTransition(${1:Hash* weatherType1}, ${2:Hash* weatherType2}, ${3:float* percentWeather2})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.\n\n```\nMixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:  \nexecute \"NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(\"\"RAIN\"\"), Game.GetHashKey(\"\"SMOG\"\"), 0.50f);  \n```"
  },
  "2409": {
      "prefix": "SetWeatherTypePersist",
      "body": [
          "SetWeatherTypePersist(${1:char* weatherType})${0}"
      ],
      "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types."
  },
  "2410": {
      "prefix": "SetWind",
      "body": [
          "SetWind(${1:float* speed})${0}"
      ],
      "description": "```\nSets the the raw wind speed value.  \n```"
  },
  "2411": {
      "prefix": "SetWindDirection",
      "body": [
          "SetWindDirection(${1:float* direction})${0}"
      ],
      "description": "Sets the wind direction."
  },
  "2412": {
      "prefix": "SetWindSpeed",
      "body": [
          "SetWindSpeed(${1:float* speed})${0}"
      ],
      "description": "```\nUsing this native will clamp the wind speed value to a range of 0.0- 12.0. Using SET_WIND sets the same value but without the restriction.  \n```"
  },
  "2413": {
      "prefix": "ShootSingleBulletBetweenCoords",
      "body": [
          "ShootSingleBulletBetweenCoords(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* damage}, ${8:BOOL* p7}, ${9:Hash* weaponHash}, ${10:Ped* ownerPed}, ${11:BOOL* isAudible}, ${12:BOOL* isInvisible}, ${13:float* speed})${0}"
      ],
      "description": ""
  },
  "2414": {
      "prefix": "ShootSingleBulletBetweenCoordsIgnoreEntity",
      "body": [
          "ShootSingleBulletBetweenCoordsIgnoreEntity(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* damage}, ${8:BOOL* p7}, ${9:Hash* weaponHash}, ${10:Ped* ownerPed}, ${11:BOOL* isAudible}, ${12:BOOL* isInvisible}, ${13:float* speed}, ${14:Entity* entity})${0}"
      ],
      "description": "```\nentity - entity to ignore  \n```\n\n```\nNativeDB Added Parameter 15: Any p14\n```"
  },
  "2415": {
      "prefix": "ShootSingleBulletBetweenCoordsIgnoreEntityNew",
      "body": [
          "ShootSingleBulletBetweenCoordsIgnoreEntityNew(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* damage}, ${8:BOOL* p7}, ${9:Hash* weaponHash}, ${10:Ped* ownerPed}, ${11:BOOL* isAudible}, ${12:BOOL* isInvisible}, ${13:float* speed}, ${14:Entity* entity}, ${15:BOOL* p14}, ${16:BOOL* p15}, ${17:BOOL* p16}, ${18:BOOL* p17})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 19: Any p18\nNativeDB Added Parameter 20: Any p19\nNativeDB Added Parameter 21: Any p20\n```"
  },
  "2416": {
      "prefix": "ShouldUseMetricMeasurements",
      "body": [
          "ShouldUseMetricMeasurements()${0}"
      ],
      "description": "Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used."
  },
  "2417": {
      "prefix": "SlerpNearQuaternion",
      "body": [
          "SlerpNearQuaternion(${1:float* t}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* w}, ${6:float* x1}, ${7:float* y1}, ${8:float* z1}, ${9:float* w1}, ${10:float* outX}, ${11:float* outY}, ${12:float* outZ}, ${13:float* outW})${0}"
      ],
      "description": "This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12"
  },
  "2418": {
      "prefix": "StartBenchmarkRecording",
      "body": [
          "StartBenchmarkRecording()${0}"
      ],
      "description": "```\nBegins with START_*. Next character in the name is either D or E.\n```"
  },
  "2419": {
      "prefix": "StartSaveData",
      "body": [
          "StartSaveData(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2420": {
      "prefix": "StartSaveArrayWithSize",
      "body": [
          "StartSaveArrayWithSize(${1:Any* p0}, ${2:int* size}, ${3:char* arrayName})${0}"
      ],
      "description": ""
  },
  "2421": {
      "prefix": "StartSaveStructWithSize",
      "body": [
          "StartSaveStructWithSize(${1:Any* p0}, ${2:int* size}, ${3:char* structName})${0}"
      ],
      "description": ""
  },
  "2422": {
      "prefix": "StopSaveArray",
      "body": [
          "StopSaveArray()${0}"
      ],
      "description": ""
  },
  "2423": {
      "prefix": "StopBenchmarkRecording",
      "body": [
          "StopBenchmarkRecording()${0}"
      ],
      "description": "```\nBegins with STOP_*. Next character in the name is either D or E.\n```"
  },
  "2424": {
      "prefix": "StopSaveData",
      "body": [
          "StopSaveData()${0}"
      ],
      "description": ""
  },
  "2425": {
      "prefix": "StopSaveStruct",
      "body": [
          "StopSaveStruct()${0}"
      ],
      "description": ""
  },
  "2426": {
      "prefix": "Tan",
      "body": [
          "Tan(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2427": {
      "prefix": "TerminateAllScriptsWithThisName",
      "body": [
          "TerminateAllScriptsWithThisName(${1:char* scriptName})${0}"
      ],
      "description": "```\nFor a full list, see here: pastebin.com/yLNWicUi  \n```"
  },
  "2428": {
      "prefix": "StringToInt",
      "body": [
          "StringToInt(${1:char* string}, ${2:int* outInteger})${0}"
      ],
      "description": "```\nReturns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.  \nIf all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.  \n```"
  },
  "2429": {
      "prefix": "UnloadCloudHat",
      "body": [
          "UnloadCloudHat(${1:char* name}, ${2:float* p1})${0}"
      ],
      "description": "```\nCalled 4 times in the b617d scripts:\nMISC::_A74802FB8D0B7814(\"CONTRAILS\", 0);\n```"
  },
  "2430": {
      "prefix": "UiIsSingleplayerPauseMenuActive",
      "body": [
          "UiIsSingleplayerPauseMenuActive()${0}"
      ],
      "description": "```\nReturns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE\n\nU*\n```"
  },
  "2431": {
      "prefix": "UpdateOnscreenKeyboard",
      "body": [
          "UpdateOnscreenKeyboard()${0}"
      ],
      "description": "```\nReturns the current status of the onscreen keyboard, and updates the output.\nStatus Codes:\n-1: Keyboard isn't active\n0: User still editing\n1: User has finished editing\n2: User has canceled editing\n```"
  },
  "2432": {
      "prefix": "WaterOverrideFadeIn",
      "body": [
          "WaterOverrideFadeIn(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2433": {
      "prefix": "UsingMissionCreator",
      "body": [
          "UsingMissionCreator(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2434": {
      "prefix": "WaterOverrideFadeOut",
      "body": [
          "WaterOverrideFadeOut(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "2435": {
      "prefix": "WaterOverrideSetOceanwavemaxamplitude",
      "body": [
          "WaterOverrideSetOceanwavemaxamplitude(${1:float* maxAmplitude})${0}"
      ],
      "description": ""
  },
  "2436": {
      "prefix": "WaterOverrideSetOceanwaveminamplitude",
      "body": [
          "WaterOverrideSetOceanwaveminamplitude(${1:float* minAmplitude})${0}"
      ],
      "description": ""
  },
  "2437": {
      "prefix": "WaterOverrideSetOceannoiseminamplitude",
      "body": [
          "WaterOverrideSetOceannoiseminamplitude(${1:float* minAmplitude})${0}"
      ],
      "description": ""
  },
  "2438": {
      "prefix": "WaterOverrideSetRipplebumpiness",
      "body": [
          "WaterOverrideSetRipplebumpiness(${1:float* bumpiness})${0}"
      ],
      "description": ""
  },
  "2439": {
      "prefix": "WaterOverrideSetOceanwaveamplitude",
      "body": [
          "WaterOverrideSetOceanwaveamplitude(${1:float* amplitude})${0}"
      ],
      "description": ""
  },
  "2440": {
      "prefix": "WaterOverrideSetRippleminbumpiness",
      "body": [
          "WaterOverrideSetRippleminbumpiness(${1:float* minBumpiness})${0}"
      ],
      "description": ""
  },
  "2441": {
      "prefix": "WaterOverrideSetRippledisturb",
      "body": [
          "WaterOverrideSetRippledisturb(${1:float* disturb})${0}"
      ],
      "description": ""
  },
  "2442": {
      "prefix": "WaterOverrideSetShorewavemaxamplitude",
      "body": [
          "WaterOverrideSetShorewavemaxamplitude(${1:float* maxAmplitude})${0}"
      ],
      "description": ""
  },
  "2443": {
      "prefix": "WaterOverrideSetRipplemaxbumpiness",
      "body": [
          "WaterOverrideSetRipplemaxbumpiness(${1:float* maxBumpiness})${0}"
      ],
      "description": ""
  },
  "2444": {
      "prefix": "WaterOverrideSetShorewaveamplitude",
      "body": [
          "WaterOverrideSetShorewaveamplitude(${1:float* amplitude})${0}"
      ],
      "description": ""
  },
  "2445": {
      "prefix": "WaterOverrideSetShorewaveminamplitude",
      "body": [
          "WaterOverrideSetShorewaveminamplitude(${1:float* minAmplitude})${0}"
      ],
      "description": ""
  },
  "2446": {
      "prefix": "WaterOverrideSetStrength",
      "body": [
          "WaterOverrideSetStrength(${1:float* strength})${0}"
      ],
      "description": "```\nThis seems to edit the water wave, intensity around your current location.  \n0.0f = Normal  \n1.0f = So Calm and Smooth, a boat will stay still.  \n3.0f = Really Intense.  \n```"
  },
  "2447": {
      "prefix": "CanPhoneBeSeenOnScreen",
      "body": [
          "CanPhoneBeSeenOnScreen()${0}"
      ],
      "description": "```\nThis one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.  \nI can confirm the above. This function is hard-coded to always return 1.  \n```"
  },
  "2448": {
      "prefix": "CellCamDisableThisFrame",
      "body": [
          "CellCamDisableThisFrame(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nDisables the phone up-button, oddly enough.   \ni.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.   \nWhen the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.  \nThis can be used for creating menu's when trying to disable the phone from being used.   \nYou do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.  \n```"
  },
  "2449": {
      "prefix": "CellCamActivate",
      "body": [
          "CellCamActivate(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "2450": {
      "prefix": "CellCamSetLean",
      "body": [
          "CellCamSetLean(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nif the bool \"Toggle\" is \"true\" so the phone is lean.  \nif the bool \"Toggle\" is \"false\" so the phone is not lean.  \n```"
  },
  "2451": {
      "prefix": "CellCamIsCharVisibleNoFaceCheck",
      "body": [
          "CellCamIsCharVisibleNoFaceCheck(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2452": {
      "prefix": "DestroyMobilePhone",
      "body": [
          "DestroyMobilePhone()${0}"
      ],
      "description": "```\nDestroys the currently active mobile phone.  \n```"
  },
  "2453": {
      "prefix": "CellCamMoveFinger",
      "body": [
          "CellCamMoveFinger(${1:int* direction})${0}"
      ],
      "description": "```\nFor move the finger of player, the value of int goes 1 at 5.  \n```"
  },
  "2454": {
      "prefix": "GetMobilePhonePosition",
      "body": [
          "GetMobilePhonePosition(${1:Vector3* position})${0}"
      ],
      "description": ""
  },
  "2455": {
      "prefix": "CreateMobilePhone",
      "body": [
          "CreateMobilePhone(${1:int* phoneType})${0}"
      ],
      "description": "```\nCreates a mobile phone of the specified type.  \nPossible phone types:  \n0 - Default phone / Michael's phone  \n1 - Trevor's phone  \n2 - Franklin's phone  \n4 - Prologue phone  \nThese values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.  \n```"
  },
  "2456": {
      "prefix": "GetMobilePhoneRenderId",
      "body": [
          "GetMobilePhoneRenderId(${1:int* renderId})${0}"
      ],
      "description": ""
  },
  "2457": {
      "prefix": "GetMobilePhoneRotation",
      "body": [
          "GetMobilePhoneRotation(${1:Vector3* rotation}, ${2:Vehicle* p1})${0}"
      ],
      "description": ""
  },
  "2458": {
      "prefix": "ScriptIsMovingMobilePhoneOffscreen",
      "body": [
          "ScriptIsMovingMobilePhoneOffscreen(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf bool Toggle = true so the mobile is hide to screen.  \nIf bool Toggle = false so the mobile is show to screen.  \n```"
  },
  "2459": {
      "prefix": "SetMobilePhonePosition",
      "body": [
          "SetMobilePhonePosition(${1:float* posX}, ${2:float* posY}, ${3:float* posZ})${0}"
      ],
      "description": ""
  },
  "2460": {
      "prefix": "SetMobilePhoneScale",
      "body": [
          "SetMobilePhoneScale(${1:float* scale})${0}"
      ],
      "description": "```\nThe minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.  \n```"
  },
  "2461": {
      "prefix": "SetMobilePhoneRotation",
      "body": [
          "SetMobilePhoneRotation(${1:float* rotX}, ${2:float* rotY}, ${3:float* rotZ}, ${4:Any* p3})${0}"
      ],
      "description": "```\nLast parameter is unknown and always zero.  \n```"
  },
  "2462": {
      "prefix": "SetMobilePhoneUnk",
      "body": [
          "SetMobilePhoneUnk(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2463": {
      "prefix": "CanPayGoon",
      "body": [
          "CanPayGoon()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: int p1\nNativeDB Added Parameter 3: int amount\nNativeDB Added Parameter 4: int* p3\n```"
  },
  "2464": {
      "prefix": "DepositVc",
      "body": [
          "DepositVc(${1:int* amount})${0}"
      ],
      "description": "```\nDoes nothing and always returns false.\n```"
  },
  "2465": {
      "prefix": "NetworkBuyBackupGang",
      "body": [
          "NetworkBuyBackupGang(${1:int* p0}, ${2:int* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2466": {
      "prefix": "NetworkBuyContraband",
      "body": [
          "NetworkBuyContraband(${1:int* p0}, ${2:int* p1}, ${3:Hash* p2}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "2467": {
      "prefix": "NetworkBuyAirstrike",
      "body": [
          "NetworkBuyAirstrike(${1:int* cost}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np1 = 0 (always)  \np2 = 1 (always)  \n```"
  },
  "2468": {
      "prefix": "NetworkBuyBounty",
      "body": [
          "NetworkBuyBounty(${1:int* amount}, ${2:Player* victim}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\np1 is just an assumption. p2 was false and p3 was true.  \n```"
  },
  "2469": {
      "prefix": "NetworkBuyHealthcare",
      "body": [
          "NetworkBuyHealthcare(${1:int* cost}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2470": {
      "prefix": "NetworkBuyFairgroundRide",
      "body": [
          "NetworkBuyFairgroundRide(${1:int* amountSpent}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nThe first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.  \nThe last 3 parameters are,   \n2,0,1 in the am_ferriswheel.c  \n1,0,1 in the am_rollercoaster.c  \n```"
  },
  "2471": {
      "prefix": "NetworkBuyHeliStrike",
      "body": [
          "NetworkBuyHeliStrike(${1:int* cost}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np1 = 0 (always)  \np2 = 1 (always)  \n```"
  },
  "2472": {
      "prefix": "NetworkBuyItem",
      "body": [
          "NetworkBuyItem(${1:int* amount}, ${2:Hash* item}, ${3:Any* p2}, ${4:Any* p3}, ${5:BOOL* p4}, ${6:char* item_name}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:BOOL* p9})${0}"
      ],
      "description": ""
  },
  "2473": {
      "prefix": "NetworkBuyLotteryTicket",
      "body": [
          "NetworkBuyLotteryTicket(${1:int* p0}, ${2:int* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2474": {
      "prefix": "NetworkBuyProperty",
      "body": [
          "NetworkBuyProperty(${1:int* propertyCost}, ${2:Hash* propertyName}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2475": {
      "prefix": "NetworkCanBuyLotteryTicket",
      "body": [
          "NetworkCanBuyLotteryTicket(${1:int* cost})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2476": {
      "prefix": "NetworkBuySmokes",
      "body": [
          "NetworkBuySmokes(${1:int* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2477": {
      "prefix": "NetworkCanReceivePlayerCash",
      "body": [
          "NetworkCanReceivePlayerCash(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2478": {
      "prefix": "NetworkCanBet",
      "body": [
          "NetworkCanBet(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2479": {
      "prefix": "NetworkCanShareJobCash",
      "body": [
          "NetworkCanShareJobCash()${0}"
      ],
      "description": ""
  },
  "2480": {
      "prefix": "NetworkCanSpendMoney",
      "body": [
          "NetworkCanSpendMoney(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "2481": {
      "prefix": "NetworkCanSpendMoney2",
      "body": [
          "NetworkCanSpendMoney2(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNETWORK_CAN_R??? or NETWORK_CAN_S???  \n```\n\n```\nNativeDB Added Parameter 7: Any p6\n```"
  },
  "2482": {
      "prefix": "NetworkCasinoCanGamble",
      "body": [
          "NetworkCasinoCanGamble(${1:Any* p0})${0}"
      ],
      "description": "NETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2483": {
      "prefix": "NetworkCasinoCanPurchaseChipsWithPvc",
      "body": [
          "NetworkCasinoCanPurchaseChipsWithPvc()${0}"
      ],
      "description": "Same as 0x8968D4D8C6C40C11.\nNETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2484": {
      "prefix": "NetworkCasinoCanUseGamblingType",
      "body": [
          "NetworkCasinoCanUseGamblingType(${1:Hash* hash})${0}"
      ],
      "description": "GTAO_CASINO_HOUSE\nGTAO_CASINO_INSIDETRACK\nGTAO_CASINO_LUCKYWHEEL\nGTAO_CASINO_BLACKJACK\nGTAO_CASINO_ROULETTE\nGTAO_CASINO_SLOTS\nGTAO_CASINO_PURCHASE_CHIPS\nNETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2485": {
      "prefix": "NetworkCasinoSellChips",
      "body": [
          "NetworkCasinoSellChips(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": "NETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2486": {
      "prefix": "NetworkCasinoCanPurchaseChipsWithPvc2",
      "body": [
          "NetworkCasinoCanPurchaseChipsWithPvc2()${0}"
      ],
      "description": "Same as 0x394DCDB9E836B7A9.\nNETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2487": {
      "prefix": "NetworkClearCharacterWallet",
      "body": [
          "NetworkClearCharacterWallet(${1:int* characterSlot})${0}"
      ],
      "description": ""
  },
  "2488": {
      "prefix": "NetworkCasinoPurchaseChips",
      "body": [
          "NetworkCasinoPurchaseChips(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": "NETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```"
  },
  "2489": {
      "prefix": "NetworkDeleteCharacter",
      "body": [
          "NetworkDeleteCharacter(${1:int* characterSlot}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNote the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);  \n```"
  },
  "2490": {
      "prefix": "NetworkDeductCash",
      "body": [
          "NetworkDeductCash(${1:int* amount}, ${2:char* p1}, ${3:char* p2}, ${4:BOOL* p3}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2491": {
      "prefix": "NetworkEarnBossAgency",
      "body": [
          "NetworkEarnBossAgency(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2492": {
      "prefix": "NetworkEarnBoss",
      "body": [
          "NetworkEarnBoss(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2493": {
      "prefix": "NetworkEarnBountyHunterReward",
      "body": [
          "NetworkEarnBountyHunterReward(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2494": {
      "prefix": "NetworkEarnCasinoHeist",
      "body": [
          "NetworkEarnCasinoHeist(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2495": {
      "prefix": "NetworkEarnCasinoHeistBonus",
      "body": [
          "NetworkEarnCasinoHeistBonus(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2496": {
      "prefix": "NetworkEarnCollectableCompletedCollection",
      "body": [
          "NetworkEarnCollectableCompletedCollection(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2060\n```"
  },
  "2497": {
      "prefix": "NetworkEarnFmbbWageBonus",
      "body": [
          "NetworkEarnFmbbWageBonus(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2498": {
      "prefix": "NetworkEarnFromAiTargetKill",
      "body": [
          "NetworkEarnFromAiTargetKill(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nDSPORT  \n```"
  },
  "2499": {
      "prefix": "NetworkEarnFromAmbientJob",
      "body": [
          "NetworkEarnFromAmbientJob(${1:int* p0}, ${2:char* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nExample for p1: \"AM_DISTRACT_COPS\"  \n```"
  },
  "2500": {
      "prefix": "NetworkEarnFromArenaCareerProgression",
      "body": [
          "NetworkEarnFromArenaCareerProgression(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2501": {
      "prefix": "NetworkEarnFromArenaSkillLevelProgression",
      "body": [
          "NetworkEarnFromArenaSkillLevelProgression(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2502": {
      "prefix": "NetworkEarnFromArenaWar",
      "body": [
          "NetworkEarnFromArenaWar(${1:int* amount}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2503": {
      "prefix": "NetworkEarnFromArmourTruck",
      "body": [
          "NetworkEarnFromArmourTruck(${1:int* amount})${0}"
      ],
      "description": "```\nFor the money bags that drop a max of $40,000. Often called 40k bags.\nMost likely NETWORK_EARN_FROM_ROB***\n```"
  },
  "2504": {
      "prefix": "NetworkEarnFromAssassinateTargetKilled",
      "body": [
          "NetworkEarnFromAssassinateTargetKilled(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2505": {
      "prefix": "NetworkEarnFromAutoshopBusiness",
      "body": [
          "NetworkEarnFromAutoshopBusiness(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2506": {
      "prefix": "NetworkEarnFromAssassinateTargetKilled2",
      "body": [
          "NetworkEarnFromAssassinateTargetKilled2(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2507": {
      "prefix": "NetworkEarnFromBbEventBonus",
      "body": [
          "NetworkEarnFromBbEventBonus(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2508": {
      "prefix": "NetworkEarnFromAutoshopIncome",
      "body": [
          "NetworkEarnFromAutoshopIncome(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2509": {
      "prefix": "NetworkEarnFromBendJob",
      "body": [
          "NetworkEarnFromBendJob(${1:int* amount}, ${2:char* heistHash})${0}"
      ],
      "description": ""
  },
  "2510": {
      "prefix": "NetworkEarnFromBbEventCargo",
      "body": [
          "NetworkEarnFromBbEventCargo(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2511": {
      "prefix": "NetworkEarnFromBetting",
      "body": [
          "NetworkEarnFromBetting(${1:int* amount}, ${2:char* p1})${0}"
      ],
      "description": ""
  },
  "2512": {
      "prefix": "NetworkEarnFromBounty",
      "body": [
          "NetworkEarnFromBounty(${1:int* amount}, ${2:int* networkHandle}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2513": {
      "prefix": "NetworkEarnFromBusinessBattle",
      "body": [
          "NetworkEarnFromBusinessBattle(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2514": {
      "prefix": "NetworkEarnFromBusinessProduct",
      "body": [
          "NetworkEarnFromBusinessProduct(${1:int* amount}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2515": {
      "prefix": "NetworkEarnFromBusinessHubSell",
      "body": [
          "NetworkEarnFromBusinessHubSell(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2516": {
      "prefix": "NetworkEarnFromCashingOut",
      "body": [
          "NetworkEarnFromCashingOut(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2517": {
      "prefix": "NetworkEarnFromCarclubMembership",
      "body": [
          "NetworkEarnFromCarclubMembership(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2518": {
      "prefix": "NetworkEarnFromCasinoMissionParticipation",
      "body": [
          "NetworkEarnFromCasinoMissionParticipation(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2519": {
      "prefix": "NetworkEarnFromCasinoAward",
      "body": [
          "NetworkEarnFromCasinoAward(${1:int* amount}, ${2:Hash* hash})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2520": {
      "prefix": "NetworkEarnFromCasinoStoryMissionReward",
      "body": [
          "NetworkEarnFromCasinoStoryMissionReward(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2521": {
      "prefix": "NetworkEarnFromChallengeWin",
      "body": [
          "NetworkEarnFromChallengeWin(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2522": {
      "prefix": "NetworkEarnFromCasinoMissionReward",
      "body": [
          "NetworkEarnFromCasinoMissionReward(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2523": {
      "prefix": "NetworkEarnFromCollectablesActionFigures",
      "body": [
          "NetworkEarnFromCollectablesActionFigures(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2524": {
      "prefix": "NetworkEarnFromCompleteCollection",
      "body": [
          "NetworkEarnFromCompleteCollection(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2525": {
      "prefix": "NetworkEarnFromCrateDrop",
      "body": [
          "NetworkEarnFromCrateDrop(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2526": {
      "prefix": "NetworkEarnFromDailyObjectiveEvent",
      "body": [
          "NetworkEarnFromDailyObjectiveEvent(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2527": {
      "prefix": "NetworkEarnFromClubManagementParticipation",
      "body": [
          "NetworkEarnFromClubManagementParticipation(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2528": {
      "prefix": "NetworkEarnFromDailyObjectives",
      "body": [
          "NetworkEarnFromDailyObjectives(${1:int* p0}, ${2:char* p1}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "2529": {
      "prefix": "NetworkEarnFromCollectionItem",
      "body": [
          "NetworkEarnFromCollectionItem(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2530": {
      "prefix": "NetworkEarnFromContraband",
      "body": [
          "NetworkEarnFromContraband(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2531": {
      "prefix": "NetworkEarnFromCriminalMastermindBonus",
      "body": [
          "NetworkEarnFromCriminalMastermindBonus(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2532": {
      "prefix": "NetworkEarnFromDoomsdayFinaleBonus",
      "body": [
          "NetworkEarnFromDoomsdayFinaleBonus(${1:int* amount}, ${2:Hash* vehicleHash})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2533": {
      "prefix": "NetworkEarnFromDarChallenge",
      "body": [
          "NetworkEarnFromDarChallenge(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2534": {
      "prefix": "NetworkEarnFromFmbbPhonecallMission",
      "body": [
          "NetworkEarnFromFmbbPhonecallMission(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2535": {
      "prefix": "NetworkEarnFromDestroyingContraband",
      "body": [
          "NetworkEarnFromDestroyingContraband(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2536": {
      "prefix": "NetworkEarnFromGangopsAwards",
      "body": [
          "NetworkEarnFromGangopsAwards(${1:int* amount}, ${2:char* unk}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2537": {
      "prefix": "NetworkEarnFromFmbbBossWork",
      "body": [
          "NetworkEarnFromFmbbBossWork(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2538": {
      "prefix": "NetworkEarnFromGangopsJobsFinale",
      "body": [
          "NetworkEarnFromGangopsJobsFinale(${1:int* amount}, ${2:char* unk})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2539": {
      "prefix": "NetworkEarnFromGangPickup",
      "body": [
          "NetworkEarnFromGangPickup(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2540": {
      "prefix": "NetworkEarnFromGangopsElite",
      "body": [
          "NetworkEarnFromGangopsElite(${1:int* amount}, ${2:char* unk}, ${3:int* actIndex})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2541": {
      "prefix": "NetworkEarnFromGangopsJobsPrepParticipation",
      "body": [
          "NetworkEarnFromGangopsJobsPrepParticipation(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2542": {
      "prefix": "NetworkEarnFromGangopsWages",
      "body": [
          "NetworkEarnFromGangopsWages(${1:int* amount}, ${2:int* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2543": {
      "prefix": "NetworkEarnFromGangopsJobsSetup",
      "body": [
          "NetworkEarnFromGangopsJobsSetup(${1:int* amount}, ${2:char* unk})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2544": {
      "prefix": "NetworkEarnFromGangopsWagesBonus",
      "body": [
          "NetworkEarnFromGangopsWagesBonus(${1:int* amount}, ${2:int* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2545": {
      "prefix": "NetworkEarnFromHackerTruckMission",
      "body": [
          "NetworkEarnFromHackerTruckMission(${1:Any* p0}, ${2:int* amount}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2546": {
      "prefix": "NetworkEarnFromHoldups",
      "body": [
          "NetworkEarnFromHoldups(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2547": {
      "prefix": "NetworkEarnFromImportExport",
      "body": [
          "NetworkEarnFromImportExport(${1:int* amount}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "2548": {
      "prefix": "NetworkEarnFromJob",
      "body": [
          "NetworkEarnFromJob(${1:int* amount}, ${2:char* p1})${0}"
      ],
      "description": ""
  },
  "2549": {
      "prefix": "NetworkEarnFromJobBonus",
      "body": [
          "NetworkEarnFromJobBonus(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2550": {
      "prefix": "NetworkEarnFromJobX2",
      "body": [
          "NetworkEarnFromJobX2(${1:int* amount}, ${2:char* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2551": {
      "prefix": "NetworkEarnFromNotBadsport",
      "body": [
          "NetworkEarnFromNotBadsport(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2552": {
      "prefix": "NetworkEarnFromPersonalVehicle",
      "body": [
          "NetworkEarnFromPersonalVehicle(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8})${0}"
      ],
      "description": ""
  },
  "2553": {
      "prefix": "NetworkEarnFromPremiumJob",
      "body": [
          "NetworkEarnFromPremiumJob(${1:int* amount}, ${2:char* p1})${0}"
      ],
      "description": ""
  },
  "2554": {
      "prefix": "NetworkEarnFromPickup",
      "body": [
          "NetworkEarnFromPickup(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2555": {
      "prefix": "NetworkEarnFromRcTimeTrial",
      "body": [
          "NetworkEarnFromRcTimeTrial(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2556": {
      "prefix": "NetworkEarnFromProperty",
      "body": [
          "NetworkEarnFromProperty(${1:int* amount}, ${2:Hash* propertyName})${0}"
      ],
      "description": ""
  },
  "2557": {
      "prefix": "NetworkEarnFromRockstar",
      "body": [
          "NetworkEarnFromRockstar(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2558": {
      "prefix": "NetworkEarnFromRdrBonus",
      "body": [
          "NetworkEarnFromRdrBonus(${1:int* amount}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2559": {
      "prefix": "NetworkEarnFromSellingVehicle",
      "body": [
          "NetworkEarnFromSellingVehicle(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\nNativeDB Added Parameter 3: Any p2\nNativeDB Introduced: v1734\n```"
  },
  "2560": {
      "prefix": "NetworkEarnFromSmuggling",
      "body": [
          "NetworkEarnFromSmuggling(${1:int* amount}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2561": {
      "prefix": "NetworkEarnFromSellBase",
      "body": [
          "NetworkEarnFromSellBase(${1:int* amount}, ${2:Hash* baseNameHash})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2562": {
      "prefix": "NetworkEarnFromSellBunker",
      "body": [
          "NetworkEarnFromSellBunker(${1:int* amount}, ${2:Hash* bunkerHash})${0}"
      ],
      "description": ""
  },
  "2563": {
      "prefix": "NetworkEarnFromTargetRefund",
      "body": [
          "NetworkEarnFromTargetRefund(${1:int* amount}, ${2:int* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2564": {
      "prefix": "NetworkEarnFromTimeTrialWin",
      "body": [
          "NetworkEarnFromTimeTrialWin(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2565": {
      "prefix": "NetworkEarnFromSpinTheWheelCash",
      "body": [
          "NetworkEarnFromSpinTheWheelCash(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2566": {
      "prefix": "NetworkEarnFromTunerAward",
      "body": [
          "NetworkEarnFromTunerAward(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2567": {
      "prefix": "NetworkEarnFromUpgradeAutoshopLocation",
      "body": [
          "NetworkEarnFromUpgradeAutoshopLocation(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2568": {
      "prefix": "NetworkEarnFromTunerFinale",
      "body": [
          "NetworkEarnFromTunerFinale(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2569": {
      "prefix": "NetworkEarnFromVehicle",
      "body": [
          "NetworkEarnFromVehicle(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7})${0}"
      ],
      "description": ""
  },
  "2570": {
      "prefix": "NetworkEarnFromVehicleExport",
      "body": [
          "NetworkEarnFromVehicleExport(${1:int* amount}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2571": {
      "prefix": "NetworkEarnFromVehicleAutoshop",
      "body": [
          "NetworkEarnFromVehicleAutoshop(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2572": {
      "prefix": "NetworkEarnFromWagePayment",
      "body": [
          "NetworkEarnFromWagePayment(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2573": {
      "prefix": "NetworkEarnFromVehicleAutoshopBonus",
      "body": [
          "NetworkEarnFromVehicleAutoshopBonus(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2574": {
      "prefix": "NetworkEarnFromWarehouse",
      "body": [
          "NetworkEarnFromWarehouse()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int amount\nNativeDB Added Parameter 2: int id\n```"
  },
  "2575": {
      "prefix": "NetworkEarnIslandHeist",
      "body": [
          "NetworkEarnIslandHeist(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2576": {
      "prefix": "NetworkEarnFromWagePaymentBonus",
      "body": [
          "NetworkEarnFromWagePaymentBonus(${1:int* amount})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2577": {
      "prefix": "NetworkEarnGoon",
      "body": [
          "NetworkEarnGoon(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2578": {
      "prefix": "NetworkEarnJobBonusHeistAward",
      "body": [
          "NetworkEarnJobBonusHeistAward(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2579": {
      "prefix": "NetworkEarnJobBonusFirstTimeBonus",
      "body": [
          "NetworkEarnJobBonusFirstTimeBonus(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2580": {
      "prefix": "NetworkGetEvcBalance",
      "body": [
          "NetworkGetEvcBalance()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2581": {
      "prefix": "NetworkGetIsHighEarner",
      "body": [
          "NetworkGetIsHighEarner()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2582": {
      "prefix": "NetworkGetPvcBalance",
      "body": [
          "NetworkGetPvcBalance()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2583": {
      "prefix": "NetworkGetPvcTransferBalance",
      "body": [
          "NetworkGetPvcTransferBalance()${0}"
      ],
      "description": "```\nSame as 0xEA560AC9EEB1E19B.\n```\n\n```\nSame as 0xEA560AC9EEB1E19B.\n\nNativeDB Introduced: v323\n```"
  },
  "2584": {
      "prefix": "NetworkGetRemainingTransferBalance",
      "body": [
          "NetworkGetRemainingTransferBalance()${0}"
      ],
      "description": "```\nSame as 0x13A8DE2FD77D04F3.\n\nNativeDB Introduced: v323\n```"
  },
  "2585": {
      "prefix": "NetworkGetStringBankBalance",
      "body": [
          "NetworkGetStringBankBalance()${0}"
      ],
      "description": ""
  },
  "2586": {
      "prefix": "NetworkGetStringBankWalletBalance",
      "body": [
          "NetworkGetStringBankWalletBalance()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2587": {
      "prefix": "NetworkGetStringWalletBalance",
      "body": [
          "NetworkGetStringWalletBalance(${1:int* characterSlot})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2588": {
      "prefix": "NetworkGetVcBalance",
      "body": [
          "NetworkGetVcBalance()${0}"
      ],
      "description": ""
  },
  "2589": {
      "prefix": "NetworkGetVcBankBalance",
      "body": [
          "NetworkGetVcBankBalance()${0}"
      ],
      "description": ""
  },
  "2590": {
      "prefix": "NetworkGetVcBankBalanceIsNotLessThan",
      "body": [
          "NetworkGetVcBankBalanceIsNotLessThan(${1:int* amount})${0}"
      ],
      "description": "```\nReturns true if bank balance >= amount.\n\nNativeDB Introduced: v323\n```"
  },
  "2591": {
      "prefix": "NetworkGetVcBankWalletBalanceIsNotLessThan",
      "body": [
          "NetworkGetVcBankWalletBalanceIsNotLessThan(${1:int* amount}, ${2:int* characterSlot})${0}"
      ],
      "description": "```\nReturns true if bank balance + wallet balance >= amount.\n```"
  },
  "2592": {
      "prefix": "NetworkGetVcWalletBalance",
      "body": [
          "NetworkGetVcWalletBalance(${1:int* characterSlot})${0}"
      ],
      "description": ""
  },
  "2593": {
      "prefix": "NetworkGetVcWalletBalanceIsNotLessThan",
      "body": [
          "NetworkGetVcWalletBalanceIsNotLessThan(${1:int* amount}, ${2:int* characterSlot})${0}"
      ],
      "description": "```\nReturns true if wallet balance >= amount.\n\nNativeDB Introduced: v323\n```"
  },
  "2594": {
      "prefix": "NetworkGivePlayerJobshareCash",
      "body": [
          "NetworkGivePlayerJobshareCash(${1:int* amount}, ${2:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2595": {
      "prefix": "NetworkInitializeCash",
      "body": [
          "NetworkInitializeCash(${1:int* wallet}, ${2:int* bank})${0}"
      ],
      "description": ""
  },
  "2596": {
      "prefix": "NetworkManualDeleteCharacter",
      "body": [
          "NetworkManualDeleteCharacter(${1:int* characterSlot})${0}"
      ],
      "description": ""
  },
  "2597": {
      "prefix": "NetworkMoneyCanBet",
      "body": [
          "NetworkMoneyCanBet(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2598": {
      "prefix": "NetworkPayEmployeeWage",
      "body": [
          "NetworkPayEmployeeWage(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2599": {
      "prefix": "NetworkPayMatchEntryFee",
      "body": [
          "NetworkPayMatchEntryFee(${1:int* amount}, ${2:char* matchId}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2600": {
      "prefix": "NetworkPayUtilityBill",
      "body": [
          "NetworkPayUtilityBill(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2601": {
      "prefix": "NetworkReceivePlayerJobshareCash",
      "body": [
          "NetworkReceivePlayerJobshareCash(${1:int* value}, ${2:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2602": {
      "prefix": "NetworkRivalDeliveryCompleted",
      "body": [
          "NetworkRivalDeliveryCompleted(${1:int* earnedMoney})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2603": {
      "prefix": "NetworkRefundCash",
      "body": [
          "NetworkRefundCash(${1:int* index}, ${2:char* context}, ${3:char* reason}, ${4:BOOL* unk})${0}"
      ],
      "description": "```\nindex  \n-------  \nSee function sub_1005 in am_boat_taxi.ysc  \ncontext  \n----------  \n\"BACKUP_VAGOS\"  \n\"BACKUP_LOST\"  \n\"BACKUP_FAMILIES\"  \n\"HIRE_MUGGER\"  \n\"HIRE_MERCENARY\"  \n\"BUY_CARDROPOFF\"  \n\"HELI_PICKUP\"  \n\"BOAT_PICKUP\"  \n\"CLEAR_WANTED\"  \n\"HEAD_2_HEAD\"  \n\"CHALLENGE\"  \n\"SHARE_LAST_JOB\"  \n\"DEFAULT\"  \nreason  \n---------  \n\"NOTREACHTARGET\"  \n\"TARGET_ESCAPE\"  \n\"DELIVERY_FAIL\"  \n\"NOT_USED\"  \n\"TEAM_QUIT\"  \n\"SERVER_ERROR\"  \n\"RECEIVE_LJ_L\"  \n\"CHALLENGE_PLAYER_LEFT\"  \n\"DEFAULT\"  \nunk  \n-----  \nUnknown bool value  \n```"
  },
  "2604": {
      "prefix": "NetworkSpentAmmoDrop",
      "body": [
          "NetworkSpentAmmoDrop(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2605": {
      "prefix": "NetworkSpentArcadeGame",
      "body": [
          "NetworkSpentArcadeGame(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2606": {
      "prefix": "NetworkSpentArcadeGeneric",
      "body": [
          "NetworkSpentArcadeGeneric(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2607": {
      "prefix": "NetworkSpentArenaJoinSpectator",
      "body": [
          "NetworkSpentArenaJoinSpectator(${1:int* amount}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2608": {
      "prefix": "NetworkSpentArenaPremium",
      "body": [
          "NetworkSpentArenaPremium(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2609": {
      "prefix": "NetworkSpentArrestBail",
      "body": [
          "NetworkSpentArrestBail(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2610": {
      "prefix": "NetworkSpentArenaSpectatorBox",
      "body": [
          "NetworkSpentArenaSpectatorBox(${1:int* amount}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2611": {
      "prefix": "NetworkSpentAutoshopPropertyUtilityFee",
      "body": [
          "NetworkSpentAutoshopPropertyUtilityFee(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2612": {
      "prefix": "NetworkSpentAutoshopModifications",
      "body": [
          "NetworkSpentAutoshopModifications(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2613": {
      "prefix": "NetworkSpentBaService",
      "body": [
          "NetworkSpentBaService(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "2614": {
      "prefix": "NetworkSpentBallisticEquipment",
      "body": [
          "NetworkSpentBallisticEquipment(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2615": {
      "prefix": "NetworkSpentBeachPartyGeneric",
      "body": [
          "NetworkSpentBeachPartyGeneric(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2616": {
      "prefix": "NetworkSpentBetting",
      "body": [
          "NetworkSpentBetting(${1:int* amount}, ${2:int* p1}, ${3:char* matchId}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "2617": {
      "prefix": "NetworkSpentBankInterest",
      "body": [
          "NetworkSpentBankInterest(${1:int* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2618": {
      "prefix": "NetworkSpentBoatPickup",
      "body": [
          "NetworkSpentBoatPickup(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2619": {
      "prefix": "NetworkSpentBoss",
      "body": [
          "NetworkSpentBoss()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int amount\nNativeDB Added Parameter 2: BOOL p1\nNativeDB Added Parameter 3: BOOL p2\n```"
  },
  "2620": {
      "prefix": "NetworkSpentBounty",
      "body": [
          "NetworkSpentBounty(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2621": {
      "prefix": "NetworkSpentBountyHunterMission",
      "body": [
          "NetworkSpentBountyHunterMission(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2622": {
      "prefix": "NetworkSpentBullShark",
      "body": [
          "NetworkSpentBullShark(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2623": {
      "prefix": "NetworkSpentBusiness",
      "body": [
          "NetworkSpentBusiness(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2624": {
      "prefix": "NetworkSpentBuyArena",
      "body": [
          "NetworkSpentBuyArena(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:char* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2625": {
      "prefix": "NetworkSpentBuyAutoshop",
      "body": [
          "NetworkSpentBuyAutoshop(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2626": {
      "prefix": "NetworkSpentBuyBase",
      "body": [
          "NetworkSpentBuyBase(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2627": {
      "prefix": "NetworkSpentBuyBunker",
      "body": [
          "NetworkSpentBuyBunker(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2628": {
      "prefix": "NetworkSpentBuyCasino",
      "body": [
          "NetworkSpentBuyCasino(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2629": {
      "prefix": "NetworkSpentBuyOfftheradar",
      "body": [
          "NetworkSpentBuyOfftheradar(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2630": {
      "prefix": "NetworkSpentBuyPassiveMode",
      "body": [
          "NetworkSpentBuyPassiveMode(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2631": {
      "prefix": "NetworkSpentBuyTiltrotor",
      "body": [
          "NetworkSpentBuyTiltrotor(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2632": {
      "prefix": "NetworkSpentBuyRevealPlayers",
      "body": [
          "NetworkSpentBuyRevealPlayers(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2633": {
      "prefix": "NetworkSpentBuyWantedlevel",
      "body": [
          "NetworkSpentBuyWantedlevel(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2634": {
      "prefix": "NetworkSpentBuyTruck",
      "body": [
          "NetworkSpentBuyTruck(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2635": {
      "prefix": "NetworkSpentCarclubMembership",
      "body": [
          "NetworkSpentCarclubMembership(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2636": {
      "prefix": "NetworkSpentCallPlayer",
      "body": [
          "NetworkSpentCallPlayer(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2637": {
      "prefix": "NetworkSpentCarclubTakeover",
      "body": [
          "NetworkSpentCarclubTakeover(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2638": {
      "prefix": "NetworkSpentCashDrop",
      "body": [
          "NetworkSpentCashDrop(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2639": {
      "prefix": "NetworkSpentCarclub",
      "body": [
          "NetworkSpentCarclub(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2640": {
      "prefix": "NetworkSpentCarwash",
      "body": [
          "NetworkSpentCarwash(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "2641": {
      "prefix": "NetworkSpentCasinoGeneric",
      "body": [
          "NetworkSpentCasinoGeneric(${1:int* amount}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2642": {
      "prefix": "NetworkSpentCasinoHeistSkipMission",
      "body": [
          "NetworkSpentCasinoHeistSkipMission(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2643": {
      "prefix": "NetworkSpentCasinoClubGeneric",
      "body": [
          "NetworkSpentCasinoClubGeneric(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2644": {
      "prefix": "NetworkSpentCinema",
      "body": [
          "NetworkSpentCinema(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2645": {
      "prefix": "NetworkSpentCasinoHeist",
      "body": [
          "NetworkSpentCasinoHeist(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:Any* p9}, ${11:Any* p10})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "2646": {
      "prefix": "NetworkSpentEmployAssassins",
      "body": [
          "NetworkSpentEmployAssassins(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2647": {
      "prefix": "NetworkSpentCasinoMembership",
      "body": [
          "NetworkSpentCasinoMembership(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:int* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2648": {
      "prefix": "NetworkSpentFromRockstar",
      "body": [
          "NetworkSpentFromRockstar(${1:int* bank}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2649": {
      "prefix": "NetworkSpentGangopsStartStrand",
      "body": [
          "NetworkSpentGangopsStartStrand(${1:int* type}, ${2:int* amount}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2650": {
      "prefix": "NetworkSpentFromBank",
      "body": [
          "NetworkSpentFromBank(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2651": {
      "prefix": "NetworkSpentGangopsTripSkip",
      "body": [
          "NetworkSpentGangopsTripSkip(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2652": {
      "prefix": "NetworkSpentGangopsCannon",
      "body": [
          "NetworkSpentGangopsCannon(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2653": {
      "prefix": "NetworkSpentGangopsStartMission",
      "body": [
          "NetworkSpentGangopsStartMission(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2654": {
      "prefix": "NetworkSpentHangarUtilityCharges",
      "body": [
          "NetworkSpentHangarUtilityCharges(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2655": {
      "prefix": "NetworkSpentHangarStaffCharges",
      "body": [
          "NetworkSpentHangarStaffCharges(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2656": {
      "prefix": "NetworkSpentHireMercenary",
      "body": [
          "NetworkSpentHireMercenary(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2657": {
      "prefix": "NetworkSpentHeliPickup",
      "body": [
          "NetworkSpentHeliPickup(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2658": {
      "prefix": "NetworkSpentHoldups",
      "body": [
          "NetworkSpentHoldups(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2659": {
      "prefix": "NetworkSpentHireMugger",
      "body": [
          "NetworkSpentHireMugger(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nOnly used once in a script (am_contact_requests)  \np1 = 0  \np2 = 1  \n```"
  },
  "2660": {
      "prefix": "NetworkSpentImAbility",
      "body": [
          "NetworkSpentImAbility(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2661": {
      "prefix": "NetworkSpentImportExportRepair",
      "body": [
          "NetworkSpentImportExportRepair(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2662": {
      "prefix": "NetworkSpentIslandHeist",
      "body": [
          "NetworkSpentIslandHeist(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2663": {
      "prefix": "NetworkSpentInStripclub",
      "body": [
          "NetworkSpentInStripclub(${1:Any* p0}, ${2:BOOL* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2664": {
      "prefix": "NetworkSpentJukebox",
      "body": [
          "NetworkSpentJukebox(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2665": {
      "prefix": "NetworkSpentMoveYacht",
      "body": [
          "NetworkSpentMoveYacht(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2666": {
      "prefix": "NetworkSpentJobSkip",
      "body": [
          "NetworkSpentJobSkip(${1:int* amount}, ${2:char* matchId}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2667": {
      "prefix": "NetworkSpentMakeItRain",
      "body": [
          "NetworkSpentMakeItRain(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2668": {
      "prefix": "NetworkSpentNoCops",
      "body": [
          "NetworkSpentNoCops(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2669": {
      "prefix": "NetworkSpentOrderWarehouseVehicle",
      "body": [
          "NetworkSpentOrderWarehouseVehicle(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2670": {
      "prefix": "NetworkSpentNightclubBarDrink",
      "body": [
          "NetworkSpentNightclubBarDrink(${1:int* amount}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2671": {
      "prefix": "NetworkSpentPaServiceDancer",
      "body": [
          "NetworkSpentPaServiceDancer(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2672": {
      "prefix": "NetworkSpentNightclubEntryFee",
      "body": [
          "NetworkSpentNightclubEntryFee(${1:Player* player}, ${2:int* amount}, ${3:Any* p1}, ${4:BOOL* p2}, ${5:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2673": {
      "prefix": "NetworkSpentPayBoss",
      "body": [
          "NetworkSpentPayBoss(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2674": {
      "prefix": "NetworkSpentOrderBodyguardVehicle",
      "body": [
          "NetworkSpentOrderBodyguardVehicle(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2675": {
      "prefix": "NetworkSpentPayVehicleInsurancePremium",
      "body": [
          "NetworkSpentPayVehicleInsurancePremium(${1:int* amount}, ${2:Hash* vehicleModel}, ${3:int* networkHandle}, ${4:BOOL* notBankrupt}, ${5:BOOL* hasTheMoney})${0}"
      ],
      "description": "```\nAccording to how I understood this in the freemode script alone,\nThe first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.\nThe second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.\nThe third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, \"Previous_Owner\").\nThe fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.\nThe fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,\nbool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.\n```"
  },
  "2676": {
      "prefix": "NetworkSpentPaServiceHeliPickup",
      "body": [
          "NetworkSpentPaServiceHeliPickup(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2677": {
      "prefix": "NetworkSpentPlayerHealthcare",
      "body": [
          "NetworkSpentPlayerHealthcare(${1:int* p0}, ${2:int* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2678": {
      "prefix": "NetworkSpentPayGoon",
      "body": [
          "NetworkSpentPayGoon(${1:int* p0}, ${2:int* p1}, ${3:int* amount})${0}"
      ],
      "description": ""
  },
  "2679": {
      "prefix": "NetworkSpentPurchaseHangar",
      "body": [
          "NetworkSpentPurchaseHangar(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2680": {
      "prefix": "NetworkSpentProstitutes",
      "body": [
          "NetworkSpentProstitutes(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2681": {
      "prefix": "NetworkSpentRdrhatchetBonus",
      "body": [
          "NetworkSpentRdrhatchetBonus(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2682": {
      "prefix": "NetworkSpentPurchaseWarehouse",
      "body": [
          "NetworkSpentPurchaseWarehouse(${1:int* amount}, ${2:Any* data}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "2683": {
      "prefix": "NetworkSpentRenameOrganization",
      "body": [
          "NetworkSpentRenameOrganization(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2684": {
      "prefix": "NetworkSpentRehireDj",
      "body": [
          "NetworkSpentRehireDj(${1:int* amount}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "2685": {
      "prefix": "NetworkSpentRequestJob",
      "body": [
          "NetworkSpentRequestJob(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2686": {
      "prefix": "NetworkSpentRequestHeist",
      "body": [
          "NetworkSpentRequestHeist(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2687": {
      "prefix": "NetworkSpentRobbedByMugger",
      "body": [
          "NetworkSpentRobbedByMugger(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2688": {
      "prefix": "NetworkSpentSpinTheWheelPayment",
      "body": [
          "NetworkSpentSpinTheWheelPayment(${1:int* amount}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n\nNativeDB Removed Parameter 4: BOOL p3\n```"
  },
  "2689": {
      "prefix": "NetworkSpentTaxi",
      "body": [
          "NetworkSpentTaxi(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2690": {
      "prefix": "NetworkSpentSubmarine",
      "body": [
          "NetworkSpentSubmarine(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2691": {
      "prefix": "NetworkSpentUpgradeArena",
      "body": [
          "NetworkSpentUpgradeArena(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:char* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "2692": {
      "prefix": "NetworkSpentTelescope",
      "body": [
          "NetworkSpentTelescope(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2693": {
      "prefix": "NetworkSpentUpgradeBase",
      "body": [
          "NetworkSpentUpgradeBase(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2694": {
      "prefix": "NetworkSpentUpgradeAutoshop",
      "body": [
          "NetworkSpentUpgradeAutoshop(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2695": {
      "prefix": "NetworkSpentUpgradeBunker",
      "body": [
          "NetworkSpentUpgradeBunker(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2696": {
      "prefix": "NetworkSpentUpgradeCasino",
      "body": [
          "NetworkSpentUpgradeCasino(${1:int* amount}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "2697": {
      "prefix": "NetworkSpentUpgradeHangar",
      "body": [
          "NetworkSpentUpgradeHangar(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "2698": {
      "prefix": "NetworkSpentUpgradeSub",
      "body": [
          "NetworkSpentUpgradeSub(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "2699": {
      "prefix": "NetworkSpentUpgradeTiltrotor",
      "body": [
          "NetworkSpentUpgradeTiltrotor(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2700": {
      "prefix": "NetworkSpentUpgradeTruck",
      "body": [
          "NetworkSpentUpgradeTruck(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2701": {
      "prefix": "NetworkSpentVehicleExportMods",
      "body": [
          "NetworkSpentVehicleExportMods(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:Any* p9})${0}"
      ],
      "description": ""
  },
  "2702": {
      "prefix": "NetworkSpentVipUtilityCharges",
      "body": [
          "NetworkSpentVipUtilityCharges(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2703": {
      "prefix": "NetworkSpentWager",
      "body": [
          "NetworkSpentWager(${1:Any* p0}, ${2:Any* p1}, ${3:int* amount})${0}"
      ],
      "description": ""
  },
  "2704": {
      "prefix": "ProcessCashGift",
      "body": [
          "ProcessCashGift(${1:int* p0}, ${2:int* p1}, ${3:char* p2})${0}"
      ],
      "description": ""
  },
  "2705": {
      "prefix": "WithdrawVc",
      "body": [
          "WithdrawVc(${1:int* amount})${0}"
      ],
      "description": "```\nDoes nothing and always returns 0.\n```"
  },
  "2706": {
      "prefix": "NetGameserverBasketAddItem",
      "body": [
          "NetGameserverBasketAddItem(${1:Any* itemData}, ${2:int* quantity})${0}"
      ],
      "description": ""
  },
  "2707": {
      "prefix": "NetGameserverBasketDelete",
      "body": [
          "NetGameserverBasketDelete()${0}"
      ],
      "description": "```\nNativeDB Introduced: v372\n```"
  },
  "2708": {
      "prefix": "NetGameserverBasketApplyServerData",
      "body": [
          "NetGameserverBasketApplyServerData(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2709": {
      "prefix": "NetGameserverBasketIsFull",
      "body": [
          "NetGameserverBasketIsFull()${0}"
      ],
      "description": ""
  },
  "2710": {
      "prefix": "NetGameserverBasketEnd",
      "body": [
          "NetGameserverBasketEnd()${0}"
      ],
      "description": ""
  },
  "2711": {
      "prefix": "NetGameserverBeginService",
      "body": [
          "NetGameserverBeginService(${1:int* transactionId}, ${2:Hash* categoryHash}, ${3:Hash* itemHash}, ${4:Hash* actionTypeHash}, ${5:int* value}, ${6:int* flags})${0}"
      ],
      "description": ""
  },
  "2712": {
      "prefix": "NetGameserverCatalogItemExists",
      "body": [
          "NetGameserverCatalogItemExists(${1:char* name})${0}"
      ],
      "description": ""
  },
  "2713": {
      "prefix": "NetGameserverBasketStart",
      "body": [
          "NetGameserverBasketStart(${1:int* transactionId}, ${2:Hash* categoryHash}, ${3:Hash* actionHash}, ${4:int* flags})${0}"
      ],
      "description": ""
  },
  "2714": {
      "prefix": "NetGameserverCatalogIsReady",
      "body": [
          "NetGameserverCatalogIsReady()${0}"
      ],
      "description": ""
  },
  "2715": {
      "prefix": "NetGameserverCatalogItemExistsHash",
      "body": [
          "NetGameserverCatalogItemExistsHash(${1:Hash* hash})${0}"
      ],
      "description": ""
  },
  "2716": {
      "prefix": "NetGameserverDeleteCharacterSlot",
      "body": [
          "NetGameserverDeleteCharacterSlot(${1:int* slot}, ${2:BOOL* transfer}, ${3:Hash* reason})${0}"
      ],
      "description": ""
  },
  "2717": {
      "prefix": "NetGameserverCheckoutStart",
      "body": [
          "NetGameserverCheckoutStart(${1:int* transactionId})${0}"
      ],
      "description": ""
  },
  "2718": {
      "prefix": "NetGameserverDeleteCharacterSlotGetStatus",
      "body": [
          "NetGameserverDeleteCharacterSlotGetStatus()${0}"
      ],
      "description": ""
  },
  "2719": {
      "prefix": "NetGameserverDeleteSetTelemetryNonceSeed",
      "body": [
          "NetGameserverDeleteSetTelemetryNonceSeed()${0}"
      ],
      "description": ""
  },
  "2720": {
      "prefix": "NetGameserverGetBalance",
      "body": [
          "NetGameserverGetBalance(${1:BOOL* inventory}, ${2:BOOL* playerbalance})${0}"
      ],
      "description": "```\nNote: only one of the arguments can be set to true at a time\n```"
  },
  "2721": {
      "prefix": "NetGameserverEndService",
      "body": [
          "NetGameserverEndService(${1:int* transactionId})${0}"
      ],
      "description": ""
  },
  "2722": {
      "prefix": "NetGameserverGetCatalogState",
      "body": [
          "NetGameserverGetCatalogState(${1:int* state})${0}"
      ],
      "description": ""
  },
  "2723": {
      "prefix": "NetGameserverGetTransactionManagerData",
      "body": [
          "NetGameserverGetTransactionManagerData(${1:int* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "2724": {
      "prefix": "NetGameserverGetPrice",
      "body": [
          "NetGameserverGetPrice(${1:Hash* itemHash}, ${2:Hash* categoryHash}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nbool is always true in game scripts  \n```"
  },
  "2725": {
      "prefix": "NetGameserverIsSessionRefreshPending",
      "body": [
          "NetGameserverIsSessionRefreshPending()${0}"
      ],
      "description": ""
  },
  "2726": {
      "prefix": "NetGameserverIsCatalogValid",
      "body": [
          "NetGameserverIsCatalogValid()${0}"
      ],
      "description": ""
  },
  "2727": {
      "prefix": "NetGameserverIsSessionValid",
      "body": [
          "NetGameserverIsSessionValid(${1:int* charSlot})${0}"
      ],
      "description": ""
  },
  "2728": {
      "prefix": "NetGameserverSetTelemetryNonceSeed",
      "body": [
          "NetGameserverSetTelemetryNonceSeed(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2729": {
      "prefix": "NetGameserverSessionApplyReceivedData",
      "body": [
          "NetGameserverSessionApplyReceivedData(${1:int* charSlot})${0}"
      ],
      "description": ""
  },
  "2730": {
      "prefix": "NetGameserverTransferBankToWallet",
      "body": [
          "NetGameserverTransferBankToWallet(${1:int* charSlot}, ${2:int* amount})${0}"
      ],
      "description": ""
  },
  "2731": {
      "prefix": "NetGameserverStartSession",
      "body": [
          "NetGameserverStartSession(${1:int* charSlot})${0}"
      ],
      "description": ""
  },
  "2732": {
      "prefix": "NetGameserverTransferCashGetStatus",
      "body": [
          "NetGameserverTransferCashGetStatus()${0}"
      ],
      "description": "```\nSame as 0x350AA5EBC03D3BD2\n```"
  },
  "2733": {
      "prefix": "NetGameserverTransferCashGetStatus2",
      "body": [
          "NetGameserverTransferCashGetStatus2()${0}"
      ],
      "description": "```\nSame as 0x23789E777D14CE44\n```"
  },
  "2734": {
      "prefix": "NetGameserverTransferCashSetTelemetryNonceSeed",
      "body": [
          "NetGameserverTransferCashSetTelemetryNonceSeed()${0}"
      ],
      "description": "```\nUsed to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED\n```"
  },
  "2735": {
      "prefix": "NetGameserverUseServerTransactions",
      "body": [
          "NetGameserverUseServerTransactions()${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "2736": {
      "prefix": "NetGameserverTransferWalletToBank",
      "body": [
          "NetGameserverTransferWalletToBank(${1:int* charSlot}, ${2:int* amount})${0}"
      ],
      "description": ""
  },
  "2737": {
      "prefix": "ActivateDamageTrackerOnPlayer",
      "body": [
          "ActivateDamageTrackerOnPlayer(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2738": {
      "prefix": "ActivateDamageTrackerOnNetworkId",
      "body": [
          "ActivateDamageTrackerOnNetworkId(${1:int* netID}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2739": {
      "prefix": "BadSportPlayerLeftDetected",
      "body": [
          "BadSportPlayerLeftDetected(${1:int* networkHandle}, ${2:int* event}, ${3:int* amountReceived})${0}"
      ],
      "description": ""
  },
  "2740": {
      "prefix": "CanRegisterMissionEntities",
      "body": [
          "CanRegisterMissionEntities(${1:int* ped_amt}, ${2:int* vehicle_amt}, ${3:int* object_amt}, ${4:int* pickup_amt})${0}"
      ],
      "description": ""
  },
  "2741": {
      "prefix": "CanRegisterMissionObjects",
      "body": [
          "CanRegisterMissionObjects(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2742": {
      "prefix": "CanRegisterMissionPickups",
      "body": [
          "CanRegisterMissionPickups(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2743": {
      "prefix": "CanRegisterMissionPeds",
      "body": [
          "CanRegisterMissionPeds(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2744": {
      "prefix": "ClearLaunchParams",
      "body": [
          "ClearLaunchParams()${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "2745": {
      "prefix": "CanRegisterMissionVehicles",
      "body": [
          "CanRegisterMissionVehicles(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "2746": {
      "prefix": "CloudCheckAvailability",
      "body": [
          "CloudCheckAvailability()${0}"
      ],
      "description": "```\nDownloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json\n```"
  },
  "2747": {
      "prefix": "CloudDeleteMemberFile",
      "body": [
          "CloudDeleteMemberFile(${1:char* p0})${0}"
      ],
      "description": ""
  },
  "2748": {
      "prefix": "CloudDidRequestSucceed",
      "body": [
          "CloudDidRequestSucceed(${1:int* handle})${0}"
      ],
      "description": ""
  },
  "2749": {
      "prefix": "CloudGetAvailabilityCheckResult",
      "body": [
          "CloudGetAvailabilityCheckResult()${0}"
      ],
      "description": ""
  },
  "2750": {
      "prefix": "CloudHasRequestCompleted",
      "body": [
          "CloudHasRequestCompleted(${1:int* handle})${0}"
      ],
      "description": ""
  },
  "2751": {
      "prefix": "CloudIsCheckingAvailability",
      "body": [
          "CloudIsCheckingAvailability()${0}"
      ],
      "description": ""
  },
  "2752": {
      "prefix": "ConvertPosixTime",
      "body": [
          "ConvertPosixTime(${1:int* posixTime}, ${2:Any* timeStructure})${0}"
      ],
      "description": "```\nTakes the specified time and writes it to the structure specified in the second argument.  \nstruct date_time  \n{ \n    alignas(8) int year;  \n    alignas(8) int month;  \n    alignas(8) int day;  \n    alignas(8) int hour;  \n    alignas(8) int minute;  \n    alignas(8) int second;  \n};\n```"
  },
  "2753": {
      "prefix": "FacebookDoUnkCheck",
      "body": [
          "FacebookDoUnkCheck()${0}"
      ],
      "description": ""
  },
  "2754": {
      "prefix": "FacebookIsAvailable",
      "body": [
          "FacebookIsAvailable()${0}"
      ],
      "description": ""
  },
  "2755": {
      "prefix": "FacebookIsSendingData",
      "body": [
          "FacebookIsSendingData()${0}"
      ],
      "description": ""
  },
  "2756": {
      "prefix": "FacebookSetCreateCharacterComplete",
      "body": [
          "FacebookSetCreateCharacterComplete()${0}"
      ],
      "description": ""
  },
  "2757": {
      "prefix": "FacebookSetMilestoneComplete",
      "body": [
          "FacebookSetMilestoneComplete(${1:int* milestoneId})${0}"
      ],
      "description": "```\nmilestoneId:  \n0 = \"percentcomplete\"  \n1 = \"storycomplete\"  \n2 = \"vehicles\"  \n3 = \"properties\"  \n4 = \"psych\"  \n5 = \"mapreveal\"  \n6 = \"prologue\"  \n```"
  },
  "2758": {
      "prefix": "FacebookSetHeistComplete",
      "body": [
          "FacebookSetHeistComplete(${1:char* heistName}, ${2:int* cashEarned}, ${3:int* xpEarned})${0}"
      ],
      "description": ""
  },
  "2759": {
      "prefix": "FadeOutLocalPlayer",
      "body": [
          "FadeOutLocalPlayer(${1:BOOL* p0})${0}"
      ],
      "description": "```\nHardcoded to not work in SP.  \n```"
  },
  "2760": {
      "prefix": "FilloutPmPlayerList",
      "body": [
          "FilloutPmPlayerList(${1:int* networkHandle}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2761": {
      "prefix": "FilloutPmPlayerListWithNames",
      "body": [
          "FilloutPmPlayerListWithNames(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2762": {
      "prefix": "GetCloudTimeAsInt",
      "body": [
          "GetCloudTimeAsInt()${0}"
      ],
      "description": "Returns POSIX timestamp.\n\nRenamed from `_GET_POSIX_TIME` to `GET_CLOUD_TIME_AS_INT` because of conflicting native names ([`0xDA488F299A5B164E`](#\\_0xDA488F299A5B164E))"
  },
  "2763": {
      "prefix": "GetCloudTimeAsString",
      "body": [
          "GetCloudTimeAsString()${0}"
      ],
      "description": "```\nSame as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).\n```"
  },
  "2764": {
      "prefix": "GetCommerceItemCat",
      "body": [
          "GetCommerceItemCat(${1:int* index}, ${2:int* index2})${0}"
      ],
      "description": "```\nindex2 is unused\n```"
  },
  "2765": {
      "prefix": "GetCommerceItemId",
      "body": [
          "GetCommerceItemId(${1:int* index})${0}"
      ],
      "description": ""
  },
  "2766": {
      "prefix": "GetCommerceItemNumCats",
      "body": [
          "GetCommerceItemNumCats(${1:int* index})${0}"
      ],
      "description": ""
  },
  "2767": {
      "prefix": "GetCommerceItemName",
      "body": [
          "GetCommerceItemName(${1:int* index})${0}"
      ],
      "description": ""
  },
  "2768": {
      "prefix": "GetCommerceItemTexturename",
      "body": [
          "GetCommerceItemTexturename(${1:int* index})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: int p2\n```"
  },
  "2769": {
      "prefix": "GetMaxNumNetworkObjects",
      "body": [
          "GetMaxNumNetworkObjects()${0}"
      ],
      "description": ""
  },
  "2770": {
      "prefix": "GetCommerceProductPrice",
      "body": [
          "GetCommerceProductPrice(${1:int* index})${0}"
      ],
      "description": ""
  },
  "2771": {
      "prefix": "GetMaxNumNetworkPickups",
      "body": [
          "GetMaxNumNetworkPickups()${0}"
      ],
      "description": ""
  },
  "2772": {
      "prefix": "GetMaxNumNetworkPeds",
      "body": [
          "GetMaxNumNetworkPeds()${0}"
      ],
      "description": ""
  },
  "2773": {
      "prefix": "GetMaxNumNetworkVehicles",
      "body": [
          "GetMaxNumNetworkVehicles()${0}"
      ],
      "description": ""
  },
  "2774": {
      "prefix": "GetNetworkTime",
      "body": [
          "GetNetworkTime()${0}"
      ],
      "description": ""
  },
  "2775": {
      "prefix": "GetNumCommerceItems",
      "body": [
          "GetNumCommerceItems()${0}"
      ],
      "description": ""
  },
  "2776": {
      "prefix": "GetNetworkTimeAccurate",
      "body": [
          "GetNetworkTimeAccurate()${0}"
      ],
      "description": "Returns the same value as [`GetNetworkTime`](#\\_0x7A5487FE9FAA6B48) in freemode, but as opposed to `GetNetworkTime` it always gets the most recent time, instead of once per tick.\n\nCould be used for benchmarking since it can return times in ticks."
  },
  "2777": {
      "prefix": "GetNumCreatedMissionPeds",
      "body": [
          "GetNumCreatedMissionPeds(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2778": {
      "prefix": "GetNumCreatedMissionObjects",
      "body": [
          "GetNumCreatedMissionObjects(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2779": {
      "prefix": "GetNumCreatedMissionVehicles",
      "body": [
          "GetNumCreatedMissionVehicles(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2780": {
      "prefix": "GetNumReservedMissionObjects",
      "body": [
          "GetNumReservedMissionObjects(${1:BOOL* p0})${0}"
      ],
      "description": "```\np0 appears to be for MP  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "2781": {
      "prefix": "GetNumReservedMissionPeds",
      "body": [
          "GetNumReservedMissionPeds(${1:BOOL* p0})${0}"
      ],
      "description": "```\np0 appears to be for MP  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "2782": {
      "prefix": "GetNumReservedMissionVehicles",
      "body": [
          "GetNumReservedMissionVehicles(${1:BOOL* p0})${0}"
      ],
      "description": "```\np0 appears to be for MP  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "2783": {
      "prefix": "GetStatusOfTextureDownload",
      "body": [
          "GetStatusOfTextureDownload(${1:int* p0})${0}"
      ],
      "description": "```\n0 = succeeded\n1 = pending\n2 = failed\n```"
  },
  "2784": {
      "prefix": "GetOnlineVersion",
      "body": [
          "GetOnlineVersion()${0}"
      ],
      "description": "```\nOnline version is defined here: update\\update.rpf\\common\\data\\version.txt\nExample:\n[ONLINE_VERSION_NUMBER]\n1.33\n_GET_ONLINE_VERSION() will return \"1.33\"\n```"
  },
  "2785": {
      "prefix": "GetTimeAsString",
      "body": [
          "GetTimeAsString(${1:int* time})${0}"
      ],
      "description": ""
  },
  "2786": {
      "prefix": "GetTimeDifference",
      "body": [
          "GetTimeDifference(${1:int* timeA}, ${2:int* timeB})${0}"
      ],
      "description": "```\nSubtracts the second argument from the first.  \n```"
  },
  "2787": {
      "prefix": "GetTimeOffset",
      "body": [
          "GetTimeOffset(${1:int* timeA}, ${2:int* timeB})${0}"
      ],
      "description": "```\nAdds the first argument to the second.  \n```"
  },
  "2788": {
      "prefix": "HasNetworkTimeStarted",
      "body": [
          "HasNetworkTimeStarted()${0}"
      ],
      "description": ""
  },
  "2789": {
      "prefix": "IsCommerceStoreOpen",
      "body": [
          "IsCommerceStoreOpen()${0}"
      ],
      "description": ""
  },
  "2790": {
      "prefix": "IsCommerceDataValid",
      "body": [
          "IsCommerceDataValid()${0}"
      ],
      "description": ""
  },
  "2791": {
      "prefix": "IsDamageTrackerActiveOnPlayer",
      "body": [
          "IsDamageTrackerActiveOnPlayer(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2792": {
      "prefix": "IsEntityGhostedToLocalPlayer",
      "body": [
          "IsEntityGhostedToLocalPlayer(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2793": {
      "prefix": "IsDamageTrackerActiveOnNetworkId",
      "body": [
          "IsDamageTrackerActiveOnNetworkId(${1:int* netID})${0}"
      ],
      "description": ""
  },
  "2794": {
      "prefix": "IsNetworkIdOwnedByParticipant",
      "body": [
          "IsNetworkIdOwnedByParticipant(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "2795": {
      "prefix": "IsPlayerInCutscene",
      "body": [
          "IsPlayerInCutscene(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2796": {
      "prefix": "IsStoreAvailableToUser",
      "body": [
          "IsStoreAvailableToUser()${0}"
      ],
      "description": ""
  },
  "2797": {
      "prefix": "IsSphereVisibleToAnotherMachine",
      "body": [
          "IsSphereVisibleToAnotherMachine(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "2798": {
      "prefix": "IsSphereVisibleToPlayer",
      "body": [
          "IsSphereVisibleToPlayer(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "2799": {
      "prefix": "IsTimeMoreThan",
      "body": [
          "IsTimeMoreThan(${1:int* timeA}, ${2:int* timeB})${0}"
      ],
      "description": "```\nSubtracts the first argument from the second, then returns whether the result is negative.  \n```"
  },
  "2800": {
      "prefix": "IsTimeEqualTo",
      "body": [
          "IsTimeEqualTo(${1:int* timeA}, ${2:int* timeB})${0}"
      ],
      "description": "```\nReturns true if the two times are equal; otherwise returns false.  \n```"
  },
  "2801": {
      "prefix": "IsTimeLessThan",
      "body": [
          "IsTimeLessThan(${1:int* timeA}, ${2:int* timeB})${0}"
      ],
      "description": "```\nSubtracts the second argument from the first, then returns whether the result is negative.  \n```"
  },
  "2802": {
      "prefix": "NetworkBlockJoinQueueInvites",
      "body": [
          "NetworkBlockJoinQueueInvites(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2803": {
      "prefix": "NetToObj",
      "body": [
          "NetToObj(${1:int* netHandle})${0}"
      ],
      "description": "```\ngets the object id of a network id  \n```"
  },
  "2804": {
      "prefix": "NetToVeh",
      "body": [
          "NetToVeh(${1:int* netHandle})${0}"
      ],
      "description": ""
  },
  "2805": {
      "prefix": "NetToEnt",
      "body": [
          "NetToEnt(${1:int* netHandle})${0}"
      ],
      "description": "```\ngets the entity id of a network id  \n```"
  },
  "2806": {
      "prefix": "NetToPed",
      "body": [
          "NetToPed(${1:int* netHandle})${0}"
      ],
      "description": "```\ngets the ped id of a network id  \n```"
  },
  "2807": {
      "prefix": "NetworkAcceptPresenceInvite",
      "body": [
          "NetworkAcceptPresenceInvite(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2808": {
      "prefix": "NetworkAcceptInvite",
      "body": [
          "NetworkAcceptInvite()${0}"
      ],
      "description": "```\nNETWORK_RE*\n\nTriggers a CEventNetworkInviteConfirmed event\n```"
  },
  "2809": {
      "prefix": "NetworkAccessTunableBool",
      "body": [
          "NetworkAccessTunableBool(${1:char* tunableContext}, ${2:char* tunableName})${0}"
      ],
      "description": ""
  },
  "2810": {
      "prefix": "NetworkAccessTunableBoolHash",
      "body": [
          "NetworkAccessTunableBoolHash(${1:Hash* tunableContext}, ${2:Hash* tunableName})${0}"
      ],
      "description": ""
  },
  "2811": {
      "prefix": "NetworkAccessTunableFloatHash",
      "body": [
          "NetworkAccessTunableFloatHash(${1:Hash* tunableContext}, ${2:Hash* tunableName}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "2812": {
      "prefix": "NetworkAccessTunableFloat",
      "body": [
          "NetworkAccessTunableFloat(${1:char* tunableContext}, ${2:char* tunableName}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "2813": {
      "prefix": "NetworkAccessTunableIntHash",
      "body": [
          "NetworkAccessTunableIntHash(${1:Hash* tunableContext}, ${2:Hash* tunableName}, ${3:int* value})${0}"
      ],
      "description": ""
  },
  "2814": {
      "prefix": "NetworkAccessTunableInt",
      "body": [
          "NetworkAccessTunableInt(${1:char* tunableContext}, ${2:char* tunableName}, ${3:int* value})${0}"
      ],
      "description": ""
  },
  "2815": {
      "prefix": "NetworkActionFollowInvite",
      "body": [
          "NetworkActionFollowInvite()${0}"
      ],
      "description": ""
  },
  "2816": {
      "prefix": "NetworkAddEntityAngledArea",
      "body": [
          "NetworkAddEntityAngledArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width})${0}"
      ],
      "description": "To remove, see: [`NETWORK_REMOVE_ENTITY_AREA`](#\\_0x93CF869BAA0C4874).\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area."
  },
  "2817": {
      "prefix": "NetworkAddEntityDisplayedBoundaries",
      "body": [
          "NetworkAddEntityDisplayedBoundaries(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": ""
  },
  "2818": {
      "prefix": "NetworkAddEntityArea",
      "body": [
          "NetworkAddEntityArea(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": ""
  },
  "2819": {
      "prefix": "NetworkAddEntityToSynchronisedScene",
      "body": [
          "NetworkAddEntityToSynchronisedScene(${1:Entity* entity}, ${2:int* netScene}, ${3:char* animDict}, ${4:char* animName}, ${5:float* speed}, ${6:float* speedMulitiplier}, ${7:int* flag})${0}"
      ],
      "description": ""
  },
  "2820": {
      "prefix": "NetworkAddFollowers",
      "body": [
          "NetworkAddFollowers(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": "```\n..  \n```"
  },
  "2821": {
      "prefix": "NetworkAddPedToSynchronisedScene",
      "body": [
          "NetworkAddPedToSynchronisedScene(${1:Ped* ped}, ${2:int* netScene}, ${3:char* animDict}, ${4:char* animnName}, ${5:float* blendInSpeed}, ${6:float* blendOutSpeed}, ${7:int* duration}, ${8:int* flag}, ${9:float* playbackRate}, ${10:Any* p9})${0}"
      ],
      "description": ""
  },
  "2822": {
      "prefix": "NetworkAmIBlockedByGamer",
      "body": [
          "NetworkAmIBlockedByGamer(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "2823": {
      "prefix": "NetworkAmIBlockedByPlayer",
      "body": [
          "NetworkAmIBlockedByPlayer(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2824": {
      "prefix": "NetworkAddFriend",
      "body": [
          "NetworkAddFriend(${1:int* networkHandle}, ${2:char* message})${0}"
      ],
      "description": ""
  },
  "2825": {
      "prefix": "NetworkAllocateTunablesRegistrationDataMap",
      "body": [
          "NetworkAllocateTunablesRegistrationDataMap()${0}"
      ],
      "description": ""
  },
  "2826": {
      "prefix": "NetworkAllowLocalEntityAttachment",
      "body": [
          "NetworkAllowLocalEntityAttachment(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2827": {
      "prefix": "NetworkAmIMutedByGamer",
      "body": [
          "NetworkAmIMutedByGamer(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "2828": {
      "prefix": "NetworkApplyPedScarData",
      "body": [
          "NetworkApplyPedScarData(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "2829": {
      "prefix": "NetworkAmIMutedByPlayer",
      "body": [
          "NetworkAmIMutedByPlayer(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2830": {
      "prefix": "NetworkApplyCachedPlayerHeadBlendData",
      "body": [
          "NetworkApplyCachedPlayerHeadBlendData(${1:Ped* ped}, ${2:Player* player})${0}"
      ],
      "description": ""
  },
  "2831": {
      "prefix": "NetworkApplyTransitionParameter",
      "body": [
          "NetworkApplyTransitionParameter(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "2832": {
      "prefix": "NetworkApplyTransitionParameterString",
      "body": [
          "NetworkApplyTransitionParameterString(${1:int* p0}, ${2:char* string}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2833": {
      "prefix": "NetworkApplyVoiceProximityOverride",
      "body": [
          "NetworkApplyVoiceProximityOverride(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "2834": {
      "prefix": "NetworkAreHandlesTheSame",
      "body": [
          "NetworkAreHandlesTheSame(${1:int* netHandle1}, ${2:int* netHandle2})${0}"
      ],
      "description": ""
  },
  "2835": {
      "prefix": "NetworkAreTransitionDetailsValid",
      "body": [
          "NetworkAreTransitionDetailsValid(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2836": {
      "prefix": "NetworkAreSocialClubPoliciesCurrent",
      "body": [
          "NetworkAreSocialClubPoliciesCurrent()${0}"
      ],
      "description": ""
  },
  "2837": {
      "prefix": "NetworkAttachSynchronisedSceneToEntity",
      "body": [
          "NetworkAttachSynchronisedSceneToEntity(${1:int* netScene}, ${2:Entity* entity}, ${3:int* bone})${0}"
      ],
      "description": ""
  },
  "2838": {
      "prefix": "NetworkBail",
      "body": [
          "NetworkBail()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: int p1\nNativeDB Added Parameter 3: int p2\n```"
  },
  "2839": {
      "prefix": "NetworkBailTransition",
      "body": [
          "NetworkBailTransition()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: int p1\nNativeDB Added Parameter 3: int p2\n```"
  },
  "2840": {
      "prefix": "NetworkBlockInvites",
      "body": [
          "NetworkBlockInvites(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2841": {
      "prefix": "NetworkCanAccessMultiplayer",
      "body": [
          "NetworkCanAccessMultiplayer(${1:int* loadingState})${0}"
      ],
      "description": "```\n11 - Need to download tunables.  \n12 - Need to download background script.  \nReturns 1 if the multiplayer is loaded, otherwhise 0.  \n```"
  },
  "2842": {
      "prefix": "NetworkCanBail",
      "body": [
          "NetworkCanBail()${0}"
      ],
      "description": ""
  },
  "2843": {
      "prefix": "NetworkBlockKickedPlayers",
      "body": [
          "NetworkBlockKickedPlayers(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2844": {
      "prefix": "NetworkCanCommunicateWithGamer",
      "body": [
          "NetworkCanCommunicateWithGamer(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2845": {
      "prefix": "NetworkCacheLocalPlayerHeadBlendData",
      "body": [
          "NetworkCacheLocalPlayerHeadBlendData()${0}"
      ],
      "description": ""
  },
  "2846": {
      "prefix": "NetworkCanCommunicateWithGamer2",
      "body": [
          "NetworkCanCommunicateWithGamer2(${1:Any* networkHandle})${0}"
      ],
      "description": "```\nSame as NETWORK_CAN_COMMUNICATE_WITH_GAMER\n\nNETWORK_CAN_*\n```"
  },
  "2847": {
      "prefix": "NetworkCanGamerPlayMultiplayerWithMe",
      "body": [
          "NetworkCanGamerPlayMultiplayerWithMe(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "2848": {
      "prefix": "NetworkCanPlayMultiplayerWithGamer",
      "body": [
          "NetworkCanPlayMultiplayerWithGamer(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "2849": {
      "prefix": "NetworkCanEnterMultiplayer",
      "body": [
          "NetworkCanEnterMultiplayer()${0}"
      ],
      "description": ""
  },
  "2850": {
      "prefix": "NetworkCanSessionEnd",
      "body": [
          "NetworkCanSessionEnd()${0}"
      ],
      "description": ""
  },
  "2851": {
      "prefix": "NetworkCanViewGamerUserContent",
      "body": [
          "NetworkCanViewGamerUserContent(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "2852": {
      "prefix": "NetworkCanSetWaypoint",
      "body": [
          "NetworkCanSetWaypoint()${0}"
      ],
      "description": ""
  },
  "2853": {
      "prefix": "NetworkCancelRespawnSearch",
      "body": [
          "NetworkCancelRespawnSearch()${0}"
      ],
      "description": ""
  },
  "2854": {
      "prefix": "NetworkChangeTransitionSlots",
      "body": [
          "NetworkChangeTransitionSlots(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2855": {
      "prefix": "NetworkCheckCommunicationPrivileges",
      "body": [
          "NetworkCheckCommunicationPrivileges(${1:int* p0}, ${2:int* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2856": {
      "prefix": "NetworkCheckDataManagerSucceededForHandle",
      "body": [
          "NetworkCheckDataManagerSucceededForHandle(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2857": {
      "prefix": "NetworkCheckUserContentPrivileges",
      "body": [
          "NetworkCheckUserContentPrivileges(${1:int* p0}, ${2:int* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2858": {
      "prefix": "NetworkClanAnimation",
      "body": [
          "NetworkClanAnimation(${1:char* animDict}, ${2:char* animName})${0}"
      ],
      "description": "```\nOnly documented...  \n```"
  },
  "2859": {
      "prefix": "NetworkClanDownloadMembership",
      "body": [
          "NetworkClanDownloadMembership(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2860": {
      "prefix": "NetworkClanDownloadMembershipPending",
      "body": [
          "NetworkClanDownloadMembershipPending(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2861": {
      "prefix": "NetworkClanGetEmblemTxdName",
      "body": [
          "NetworkClanGetEmblemTxdName(${1:Any* netHandle}, ${2:char* txdName})${0}"
      ],
      "description": ""
  },
  "2862": {
      "prefix": "NetworkClanGetMembership",
      "body": [
          "NetworkClanGetMembership(${1:int* p0}, ${2:int* clanMembership}, ${3:int* p2})${0}"
      ],
      "description": "```\nBOOL DEBUG_MEMBRESHIP(int Param)  \n{  \n\tint membership;  \n\tnetworkHandleMgr handle;  \n\tNETWORK_HANDLE_FROM_PLAYER(iSelectedPlayer, &handle.netHandle, 13);  \n\tif (!_NETWORK_IS_CLAN_MEMBERSHIP_FINISHED_DOWNLOADING())  \n\t{  \n\t\tif (NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&Param))  \n\t\t{  \nif (NETWORK_CLAN_GET_MEMBERSHIP_COUNT(&Param) > 0)  \n{  \n\tif (NETWORK_CLAN_GET_MEMBERSHIP_VALID(&Param, 0))  \n\t{  \n\t\tif (NETWORK_CLAN_GET_MEMBERSHIP(&Param, &membership, -1))  \n\t\t{  \n_0xF633805A(&membership, 35, &handle.netHandle);  \n\t\t}  \n\t}  \n}  \n\t\t}  \n\t}  \n\telse  \n\t{  \n\t\tNETWORK_CLAN_DOWNLOAD_MEMBERSHIP(&handle.netHandle);  \n\t}  \n}  \n```"
  },
  "2863": {
      "prefix": "NetworkClanGetLocalMembershipsCount",
      "body": [
          "NetworkClanGetLocalMembershipsCount()${0}"
      ],
      "description": ""
  },
  "2864": {
      "prefix": "NetworkClanGetMembershipDesc",
      "body": [
          "NetworkClanGetMembershipDesc(${1:int* memberDesc}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "2865": {
      "prefix": "NetworkClanGetMembershipCount",
      "body": [
          "NetworkClanGetMembershipCount(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2866": {
      "prefix": "NetworkClanGetUiFormattedTag",
      "body": [
          "NetworkClanGetUiFormattedTag(${1:int* clanDesc}, ${2:int* bufferSize}, ${3:char* formattedTag})${0}"
      ],
      "description": "```\nbufferSize is 35 in the scripts.\n```"
  },
  "2867": {
      "prefix": "NetworkClanGetMembershipValid",
      "body": [
          "NetworkClanGetMembershipValid(${1:int* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2868": {
      "prefix": "NetworkClanIsEmblemReady",
      "body": [
          "NetworkClanIsEmblemReady(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2869": {
      "prefix": "NetworkClanIsRockstarClan",
      "body": [
          "NetworkClanIsRockstarClan(${1:int* clanDesc}, ${2:int* bufferSize})${0}"
      ],
      "description": "```\nbufferSize is 35 in the scripts.  \n```"
  },
  "2870": {
      "prefix": "NetworkClanPlayerIsActive",
      "body": [
          "NetworkClanPlayerIsActive(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2871": {
      "prefix": "NetworkClanJoin",
      "body": [
          "NetworkClanJoin(${1:int* clanDesc})${0}"
      ],
      "description": ""
  },
  "2872": {
      "prefix": "NetworkClanReleaseEmblem",
      "body": [
          "NetworkClanReleaseEmblem(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2873": {
      "prefix": "NetworkClanRequestEmblem",
      "body": [
          "NetworkClanRequestEmblem(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2874": {
      "prefix": "NetworkClearClockTimeOverride",
      "body": [
          "NetworkClearClockTimeOverride()${0}"
      ],
      "description": ""
  },
  "2875": {
      "prefix": "NetworkClanPlayerGetDesc",
      "body": [
          "NetworkClanPlayerGetDesc(${1:int* clanDesc}, ${2:int* bufferSize}, ${3:int* networkHandle})${0}"
      ],
      "description": "```\nbufferSize is 35 in the scripts.  \nbufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.  \nthe answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]  \npastebin.com/cSZniHak  \n```"
  },
  "2876": {
      "prefix": "NetworkClanRemoteMembershipsAreInCache",
      "body": [
          "NetworkClanRemoteMembershipsAreInCache(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "2877": {
      "prefix": "NetworkClanServiceIsValid",
      "body": [
          "NetworkClanServiceIsValid()${0}"
      ],
      "description": ""
  },
  "2878": {
      "prefix": "NetworkClearFollowers",
      "body": [
          "NetworkClearFollowers()${0}"
      ],
      "description": ""
  },
  "2879": {
      "prefix": "NetworkClearFollowInvite",
      "body": [
          "NetworkClearFollowInvite()${0}"
      ],
      "description": ""
  },
  "2880": {
      "prefix": "NetworkClearGetGamerStatus",
      "body": [
          "NetworkClearGetGamerStatus()${0}"
      ],
      "description": ""
  },
  "2881": {
      "prefix": "NetworkClearTransitionCreatorHandle",
      "body": [
          "NetworkClearTransitionCreatorHandle()${0}"
      ],
      "description": ""
  },
  "2882": {
      "prefix": "NetworkClearVoiceProximityOverride",
      "body": [
          "NetworkClearVoiceProximityOverride()${0}"
      ],
      "description": ""
  },
  "2883": {
      "prefix": "NetworkClearFoundGamers",
      "body": [
          "NetworkClearFoundGamers()${0}"
      ],
      "description": ""
  },
  "2884": {
      "prefix": "NetworkCloseTransitionMatchmaking",
      "body": [
          "NetworkCloseTransitionMatchmaking()${0}"
      ],
      "description": ""
  },
  "2885": {
      "prefix": "NetworkClearPropertyId",
      "body": [
          "NetworkClearPropertyId()${0}"
      ],
      "description": ""
  },
  "2886": {
      "prefix": "NetworkConcealPlayer",
      "body": [
          "NetworkConcealPlayer(${1:Player* player}, ${2:BOOL* toggle}, ${3:BOOL* p2})${0}"
      ],
      "description": "This is what R\\* uses to hide players in MP interiors."
  },
  "2887": {
      "prefix": "NetworkClearVoiceChannel",
      "body": [
          "NetworkClearVoiceChannel()${0}"
      ],
      "description": ""
  },
  "2888": {
      "prefix": "NetworkConcealEntity",
      "body": [
          "NetworkConcealEntity(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2889": {
      "prefix": "NetworkCreateSynchronisedScene",
      "body": [
          "NetworkCreateSynchronisedScene(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* xRot}, ${5:float* yRot}, ${6:float* zRot}, ${7:int* rotationOrder}, ${8:BOOL* holdLastFrame}, ${9:BOOL* looped}, ${10:float* p9}, ${11:float* animTime}, ${12:float* animSpeed})${0}"
      ],
      "description": ""
  },
  "2890": {
      "prefix": "NetworkDidGetGamerStatusSucceed",
      "body": [
          "NetworkDidGetGamerStatusSucceed()${0}"
      ],
      "description": ""
  },
  "2891": {
      "prefix": "NetworkConvertSynchronisedSceneToSynchronizedScene",
      "body": [
          "NetworkConvertSynchronisedSceneToSynchronizedScene(${1:int* netScene})${0}"
      ],
      "description": "```\nnetScene to scene  \n```"
  },
  "2892": {
      "prefix": "NetworkDisableInvincibleFlashing",
      "body": [
          "NetworkDisableInvincibleFlashing(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2893": {
      "prefix": "NetworkDidFindGamersSucceed",
      "body": [
          "NetworkDidFindGamersSucceed()${0}"
      ],
      "description": ""
  },
  "2894": {
      "prefix": "NetworkDisableProximityMigration",
      "body": [
          "NetworkDisableProximityMigration(${1:int* netID})${0}"
      ],
      "description": ""
  },
  "2895": {
      "prefix": "NetworkDisableLeaveRemotePedBehind",
      "body": [
          "NetworkDisableLeaveRemotePedBehind(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "2896": {
      "prefix": "NetworkDisplaynamesFromHandlesStart",
      "body": [
          "NetworkDisplaynamesFromHandlesStart(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nHardcoded to return -1.\n```"
  },
  "2897": {
      "prefix": "NetworkDoTransitionQuickmatch",
      "body": [
          "NetworkDoTransitionQuickmatch(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "2898": {
      "prefix": "NetworkDoTransitionQuickmatchAsync",
      "body": [
          "NetworkDoTransitionQuickmatchAsync(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "2899": {
      "prefix": "NetworkDoTransitionQuickmatchWithGroup",
      "body": [
          "NetworkDoTransitionQuickmatchWithGroup(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 7: Any p6\nNativeDB Added Parameter 8: Any p7\n```"
  },
  "2900": {
      "prefix": "NetworkDoTransitionToFreemode",
      "body": [
          "NetworkDoTransitionToFreemode(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:int* players}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\np2 is true 3/4 of the occurrences I found.  \n'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.  \n```"
  },
  "2901": {
      "prefix": "NetworkDoTransitionToGame",
      "body": [
          "NetworkDoTransitionToGame(${1:BOOL* p0}, ${2:int* maxPlayers})${0}"
      ],
      "description": ""
  },
  "2902": {
      "prefix": "NetworkDoTransitionToNewFreemode",
      "body": [
          "NetworkDoTransitionToNewFreemode(${1:Any* p0}, ${2:Any* p1}, ${3:int* players}, ${4:BOOL* p3}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "2903": {
      "prefix": "NetworkDoTransitionToNewGame",
      "body": [
          "NetworkDoTransitionToNewGame(${1:BOOL* p0}, ${2:int* maxPlayers}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "2904": {
      "prefix": "NetworkDoesEntityExistWithNetworkId",
      "body": [
          "NetworkDoesEntityExistWithNetworkId(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "2905": {
      "prefix": "NetworkDoesNetworkIdExist",
      "body": [
          "NetworkDoesNetworkIdExist(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "2906": {
      "prefix": "NetworkDoesTunableExist",
      "body": [
          "NetworkDoesTunableExist(${1:char* tunableContext}, ${2:char* tunableName})${0}"
      ],
      "description": ""
  },
  "2907": {
      "prefix": "NetworkDoesTunableExistHash",
      "body": [
          "NetworkDoesTunableExistHash(${1:Hash* tunableContext}, ${2:Hash* tunableName})${0}"
      ],
      "description": ""
  },
  "2908": {
      "prefix": "NetworkEntityAreaDoesExist",
      "body": [
          "NetworkEntityAreaDoesExist(${1:int* areaHandle})${0}"
      ],
      "description": ""
  },
  "2909": {
      "prefix": "NetworkEndTutorialSession",
      "body": [
          "NetworkEndTutorialSession()${0}"
      ],
      "description": ""
  },
  "2910": {
      "prefix": "NetworkEntityAreaIsOccupied",
      "body": [
          "NetworkEntityAreaIsOccupied(${1:int* areaHandle})${0}"
      ],
      "description": ""
  },
  "2911": {
      "prefix": "NetworkFadeInEntity",
      "body": [
          "NetworkFadeInEntity(${1:Entity* entity}, ${2:BOOL* state})${0}"
      ],
      "description": "```\nstate - 0 does 5 fades  \nstate - 1 does 6 fades  \nnative is missing third argument, also boolean, setting to 1 made vehicle fade in slower, probably \"slow\" as per NETWORK_FADE_OUT_ENTITY  \n```\n\n```\nNativeDB Added Parameter 3: BOOL slow\n```"
  },
  "2912": {
      "prefix": "NetworkFindMatchedGamers",
      "body": [
          "NetworkFindMatchedGamers(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "2913": {
      "prefix": "NetworkExplodeVehicle",
      "body": [
          "NetworkExplodeVehicle(${1:Vehicle* vehicle}, ${2:BOOL* isAudible}, ${3:BOOL* isInvisible}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nIn the console script dumps, this is only referenced once.   \nNETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);  \n^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.  \nWhich as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?  \nam_plane_takedown.c   \nnetwork_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);  \narmenian2.c   \nnetwork_explode_vehicle(Local_80[6 <2>], 1, 0, 0);  \nfm_horde_controler.c  \nnetwork_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);  \nfm_mission_controller.c, has 6 hits so not going to list them.  \nSide note, setting the first parameter to 0 seems to mute sound or so?  \nSeems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.  \n```"
  },
  "2914": {
      "prefix": "NetworkFadeOutEntity",
      "body": [
          "NetworkFadeOutEntity(${1:Entity* entity}, ${2:BOOL* normal}, ${3:BOOL* slow})${0}"
      ],
      "description": "```\nnormal - transition like when your coming out of LSC  \nslow - transition like when you walk into a mission  \n```"
  },
  "2915": {
      "prefix": "NetworkFindGamersInCrew",
      "body": [
          "NetworkFindGamersInCrew(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2916": {
      "prefix": "NetworkGamerHasHeadset",
      "body": [
          "NetworkGamerHasHeadset(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "2917": {
      "prefix": "NetworkFinishBroadcastingData",
      "body": [
          "NetworkFinishBroadcastingData()${0}"
      ],
      "description": ""
  },
  "2918": {
      "prefix": "NetworkGamertagFromHandleStart",
      "body": [
          "NetworkGamertagFromHandleStart(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2919": {
      "prefix": "NetworkForceLocalUseOfSyncedSceneCamera",
      "body": [
          "NetworkForceLocalUseOfSyncedSceneCamera(${1:int* netScene}, ${2:char* animDict}, ${3:char* animName})${0}"
      ],
      "description": ""
  },
  "2920": {
      "prefix": "NetworkGamertagFromHandleSucceeded",
      "body": [
          "NetworkGamertagFromHandleSucceeded()${0}"
      ],
      "description": ""
  },
  "2921": {
      "prefix": "NetworkGetActivityPlayerNum",
      "body": [
          "NetworkGetActivityPlayerNum(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "2922": {
      "prefix": "NetworkGamertagFromHandlePending",
      "body": [
          "NetworkGamertagFromHandlePending()${0}"
      ],
      "description": ""
  },
  "2923": {
      "prefix": "NetworkGetAverageLatencyForPlayer",
      "body": [
          "NetworkGetAverageLatencyForPlayer(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2924": {
      "prefix": "NetworkGetAveragePacketLossForPlayer",
      "body": [
          "NetworkGetAveragePacketLossForPlayer(${1:Player* player})${0}"
      ],
      "description": "```\nNETWORK_GET_*\n\nNativeDB Introduced: v323\n```"
  },
  "2925": {
      "prefix": "NetworkGetAgeGroup",
      "body": [
          "NetworkGetAgeGroup()${0}"
      ],
      "description": ""
  },
  "2926": {
      "prefix": "NetworkGetAverageLatencyForPlayer2",
      "body": [
          "NetworkGetAverageLatencyForPlayer2(${1:Player* player})${0}"
      ],
      "description": "```\nSame as _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER (0xD414BE129BB81B32)\n```\n\n```\nNativeDB Introduced: v323\n```"
  },
  "2927": {
      "prefix": "NetworkGetContentModifierListId",
      "body": [
          "NetworkGetContentModifierListId(${1:Hash* contentHash})${0}"
      ],
      "description": "```\nReturn the content modifier id (the tunables context if you want) of a specific content.  \nIt takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.  \nThe mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'  \n'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.  \n```"
  },
  "2928": {
      "prefix": "NetworkGetDestroyerOfEntity",
      "body": [
          "NetworkGetDestroyerOfEntity(${1:Any* p0}, ${2:Any* p1}, ${3:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "2929": {
      "prefix": "NetworkGetBackgroundLoadingRecipients",
      "body": [
          "NetworkGetBackgroundLoadingRecipients(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "2930": {
      "prefix": "NetworkGetDestroyerOfNetworkId",
      "body": [
          "NetworkGetDestroyerOfNetworkId(${1:int* netId}, ${2:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "2931": {
      "prefix": "NetworkGetCurrentlySelectedGamerHandleFromInviteMenu",
      "body": [
          "NetworkGetCurrentlySelectedGamerHandleFromInviteMenu(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2932": {
      "prefix": "NetworkGetDisplaynamesFromHandles",
      "body": [
          "NetworkGetDisplaynamesFromHandles(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2933": {
      "prefix": "NetworkGetEntityFromNetworkId",
      "body": [
          "NetworkGetEntityFromNetworkId(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "2934": {
      "prefix": "NetworkGetEntityIsLocal",
      "body": [
          "NetworkGetEntityIsLocal(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2935": {
      "prefix": "NetworkGetEntityIsNetworked",
      "body": [
          "NetworkGetEntityIsNetworked(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2936": {
      "prefix": "NetworkGetEntityKillerOfPlayer",
      "body": [
          "NetworkGetEntityKillerOfPlayer(${1:Player* player}, ${2:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "2937": {
      "prefix": "NetworkGetEntityNetScriptId",
      "body": [
          "NetworkGetEntityNetScriptId(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2938": {
      "prefix": "NetworkGetFoundGamer",
      "body": [
          "NetworkGetFoundGamer(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2939": {
      "prefix": "NetworkGetFriendCount",
      "body": [
          "NetworkGetFriendCount()${0}"
      ],
      "description": ""
  },
  "2940": {
      "prefix": "NetworkGetFriendName",
      "body": [
          "NetworkGetFriendName(${1:int* friendIndex})${0}"
      ],
      "description": ""
  },
  "2941": {
      "prefix": "NetworkGetGamerStatusFromQueue",
      "body": [
          "NetworkGetGamerStatusFromQueue()${0}"
      ],
      "description": ""
  },
  "2942": {
      "prefix": "NetworkGetFriendNameFromIndex",
      "body": [
          "NetworkGetFriendNameFromIndex(${1:int* friendIndex})${0}"
      ],
      "description": ""
  },
  "2943": {
      "prefix": "NetworkGetGamerStatusResult",
      "body": [
          "NetworkGetGamerStatusResult(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2944": {
      "prefix": "NetworkGetGamertagFromHandle",
      "body": [
          "NetworkGetGamertagFromHandle(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2945": {
      "prefix": "NetworkGetHostOfThisScript",
      "body": [
          "NetworkGetHostOfThisScript()${0}"
      ],
      "description": ""
  },
  "2946": {
      "prefix": "NetworkGetGlobalMultiplayerClock",
      "body": [
          "NetworkGetGlobalMultiplayerClock(${1:int* hours}, ${2:int* minutes}, ${3:int* seconds})${0}"
      ],
      "description": ""
  },
  "2947": {
      "prefix": "NetworkGetHostOfScript",
      "body": [
          "NetworkGetHostOfScript(${1:char* scriptName}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nscriptName examples:  \n\"freemode\", \"AM_CR_SecurityVan\", ...  \nMost of the time, these values are used:  \np1 = -1  \np2 = 0  \n```"
  },
  "2948": {
      "prefix": "NetworkGetInstanceIdOfThisScript",
      "body": [
          "NetworkGetInstanceIdOfThisScript()${0}"
      ],
      "description": ""
  },
  "2949": {
      "prefix": "NetworkGetLastVelocityReceived",
      "body": [
          "NetworkGetLastVelocityReceived(${1:Entity* entity})${0}"
      ],
      "description": "```\nUsed by NetBlender\n```"
  },
  "2950": {
      "prefix": "NetworkGetLocalHandle",
      "body": [
          "NetworkGetLocalHandle(${1:int* networkHandle}, ${2:int* bufferSize})${0}"
      ],
      "description": "```\nRetrieves the local player's NetworkHandle* and stores it in the given buffer.  \n* Currently unknown struct  \n```"
  },
  "2951": {
      "prefix": "NetworkGetMaxFriends",
      "body": [
          "NetworkGetMaxFriends()${0}"
      ],
      "description": ""
  },
  "2952": {
      "prefix": "NetworkGetMaxNumParticipants",
      "body": [
          "NetworkGetMaxNumParticipants()${0}"
      ],
      "description": "```\nSeems to always return 0, but it's used in quite a few loops.\nfor (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)\n    {\n        if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)\n        {\n            var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));\n```"
  },
  "2953": {
      "prefix": "NetworkGetNetworkIdFromEntity",
      "body": [
          "NetworkGetNetworkIdFromEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "2954": {
      "prefix": "NetworkGetNumBodyTrackers",
      "body": [
          "NetworkGetNumBodyTrackers()${0}"
      ],
      "description": ""
  },
  "2955": {
      "prefix": "NetworkGetNumFoundGamers",
      "body": [
          "NetworkGetNumFoundGamers()${0}"
      ],
      "description": ""
  },
  "2956": {
      "prefix": "NetworkGetNumPresenceInvites",
      "body": [
          "NetworkGetNumPresenceInvites()${0}"
      ],
      "description": ""
  },
  "2957": {
      "prefix": "NetworkGetNumConnectedPlayers",
      "body": [
          "NetworkGetNumConnectedPlayers()${0}"
      ],
      "description": "```\nReturns the amount of players connected in the current session. Only works when connected to a session/server.  \n```"
  },
  "2958": {
      "prefix": "NetworkGetNumUnackedForPlayer",
      "body": [
          "NetworkGetNumUnackedForPlayer(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "2959": {
      "prefix": "NetworkGetNumParticipants",
      "body": [
          "NetworkGetNumParticipants()${0}"
      ],
      "description": ""
  },
  "2960": {
      "prefix": "NetworkGetParticipantIndex",
      "body": [
          "NetworkGetParticipantIndex(${1:int* index})${0}"
      ],
      "description": ""
  },
  "2961": {
      "prefix": "NetworkGetNumScriptParticipants",
      "body": [
          "NetworkGetNumScriptParticipants(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "2962": {
      "prefix": "NetworkGetOldestResendCountForPlayer",
      "body": [
          "NetworkGetOldestResendCountForPlayer(${1:Player* player})${0}"
      ],
      "description": "```\nNETWORK_GET_*\n\nNativeDB Introduced: v323\n```"
  },
  "2963": {
      "prefix": "NetworkGetPlatformPartyMembers",
      "body": [
          "NetworkGetPlatformPartyMembers(${1:Any* data}, ${2:int* dataSize})${0}"
      ],
      "description": ""
  },
  "2964": {
      "prefix": "NetworkGetPlatformPartyUnk",
      "body": [
          "NetworkGetPlatformPartyUnk()${0}"
      ],
      "description": ""
  },
  "2965": {
      "prefix": "NetworkGetPlayerFromGamerHandle",
      "body": [
          "NetworkGetPlayerFromGamerHandle(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "2966": {
      "prefix": "NetworkGetPlayerCoords",
      "body": [
          "NetworkGetPlayerCoords(${1:Player* player})${0}"
      ],
      "description": "Returns the coordinates of another player.\n\nDoes not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case)."
  },
  "2967": {
      "prefix": "NetworkGetPlayerIndex",
      "body": [
          "NetworkGetPlayerIndex(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2968": {
      "prefix": "NetworkGetPlayerIndexFromPed",
      "body": [
          "NetworkGetPlayerIndexFromPed(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns the Player associated to a given Ped when in an online session.  \n```"
  },
  "2969": {
      "prefix": "NetworkGetPlayerLoudness",
      "body": [
          "NetworkGetPlayerLoudness(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2970": {
      "prefix": "NetworkGetPlayerOwnsWaypoint",
      "body": [
          "NetworkGetPlayerOwnsWaypoint(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2971": {
      "prefix": "NetworkGetPlayerTutorialSessionInstance",
      "body": [
          "NetworkGetPlayerTutorialSessionInstance(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "2972": {
      "prefix": "NetworkGetPositionHashOfThisScript",
      "body": [
          "NetworkGetPositionHashOfThisScript()${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "2973": {
      "prefix": "NetworkGetPresenceInviteContentId",
      "body": [
          "NetworkGetPresenceInviteContentId(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2974": {
      "prefix": "NetworkGetPresenceInviteFromAdmin",
      "body": [
          "NetworkGetPresenceInviteFromAdmin(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2975": {
      "prefix": "NetworkGetPresenceInviteInviter",
      "body": [
          "NetworkGetPresenceInviteInviter(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2976": {
      "prefix": "NetworkGetPresenceInviteHandle",
      "body": [
          "NetworkGetPresenceInviteHandle(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2977": {
      "prefix": "NetworkGetPresenceInvitePlaylistCurrent",
      "body": [
          "NetworkGetPresenceInvitePlaylistCurrent(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2978": {
      "prefix": "NetworkGetPresenceInviteSessionId",
      "body": [
          "NetworkGetPresenceInviteSessionId(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2979": {
      "prefix": "NetworkGetPresenceInviteId",
      "body": [
          "NetworkGetPresenceInviteId(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2980": {
      "prefix": "NetworkGetPrimaryClanDataCancel",
      "body": [
          "NetworkGetPrimaryClanDataCancel()${0}"
      ],
      "description": ""
  },
  "2981": {
      "prefix": "NetworkGetPresenceInviteIsTournament",
      "body": [
          "NetworkGetPresenceInviteIsTournament(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2982": {
      "prefix": "NetworkGetPresenceInvitePlaylistLength",
      "body": [
          "NetworkGetPresenceInvitePlaylistLength(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2983": {
      "prefix": "NetworkGetPrimaryClanDataClear",
      "body": [
          "NetworkGetPrimaryClanDataClear()${0}"
      ],
      "description": ""
  },
  "2984": {
      "prefix": "NetworkGetPrimaryClanDataPending",
      "body": [
          "NetworkGetPrimaryClanDataPending()${0}"
      ],
      "description": ""
  },
  "2985": {
      "prefix": "NetworkGetPrimaryClanDataSuccess",
      "body": [
          "NetworkGetPrimaryClanDataSuccess()${0}"
      ],
      "description": ""
  },
  "2986": {
      "prefix": "NetworkGetPrimaryClanDataNew",
      "body": [
          "NetworkGetPrimaryClanDataNew(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2987": {
      "prefix": "NetworkGetRandomIntRanged",
      "body": [
          "NetworkGetRandomIntRanged(${1:int* rangeStart}, ${2:int* rangeEnd})${0}"
      ],
      "description": "```\nSame as GET_RANDOM_INT_IN_RANGE\n```"
  },
  "2988": {
      "prefix": "NetworkGetPrimaryClanDataStart",
      "body": [
          "NetworkGetPrimaryClanDataStart(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "2989": {
      "prefix": "NetworkGetRespawnResultFlags",
      "body": [
          "NetworkGetRespawnResultFlags(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "2990": {
      "prefix": "NetworkGetRandomInt",
      "body": [
          "NetworkGetRandomInt()${0}"
      ],
      "description": ""
  },
  "2991": {
      "prefix": "NetworkGetRespawnResult",
      "body": [
          "NetworkGetRespawnResult(${1:int* randomInt}, ${2:Vector3* coordinates}, ${3:float* heading})${0}"
      ],
      "description": "```\nBased on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..  \n```"
  },
  "2992": {
      "prefix": "NetworkGetRosPrivilege25",
      "body": [
          "NetworkGetRosPrivilege25()${0}"
      ],
      "description": ""
  },
  "2993": {
      "prefix": "NetworkGetRosPrivilege24",
      "body": [
          "NetworkGetRosPrivilege24()${0}"
      ],
      "description": ""
  },
  "2994": {
      "prefix": "NetworkGetRosPrivilege9",
      "body": [
          "NetworkGetRosPrivilege9()${0}"
      ],
      "description": ""
  },
  "2995": {
      "prefix": "NetworkGetScriptStatus",
      "body": [
          "NetworkGetScriptStatus()${0}"
      ],
      "description": ""
  },
  "2996": {
      "prefix": "NetworkGetTargetingMode",
      "body": [
          "NetworkGetTargetingMode()${0}"
      ],
      "description": ""
  },
  "2997": {
      "prefix": "NetworkGetTalkerProximity",
      "body": [
          "NetworkGetTalkerProximity()${0}"
      ],
      "description": ""
  },
  "2998": {
      "prefix": "NetworkGetThisScriptIsNetworkScript",
      "body": [
          "NetworkGetThisScriptIsNetworkScript()${0}"
      ],
      "description": ""
  },
  "2999": {
      "prefix": "NetworkGetTimeoutTime",
      "body": [
          "NetworkGetTimeoutTime()${0}"
      ],
      "description": ""
  },
  "3000": {
      "prefix": "NetworkGetTransitionHost",
      "body": [
          "NetworkGetTransitionHost(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3001": {
      "prefix": "NetworkGetTotalNumPlayers",
      "body": [
          "NetworkGetTotalNumPlayers()${0}"
      ],
      "description": ""
  },
  "3002": {
      "prefix": "NetworkGetTransitionMembers",
      "body": [
          "NetworkGetTransitionMembers(${1:Any* data}, ${2:int* dataCount})${0}"
      ],
      "description": "```\nReturns count.\n```"
  },
  "3003": {
      "prefix": "NetworkGetTunableCloudCrc",
      "body": [
          "NetworkGetTunableCloudCrc()${0}"
      ],
      "description": "```\nActually returns the version (TUNABLE_VERSION)\n```"
  },
  "3004": {
      "prefix": "NetworkGetUnreliableResendCountForPlayer",
      "body": [
          "NetworkGetUnreliableResendCountForPlayer(${1:Player* player})${0}"
      ],
      "description": "```\nNETWORK_*\n\nNativeDB Introduced: v323\n```"
  },
  "3005": {
      "prefix": "NetworkHandleFromMemberId",
      "body": [
          "NetworkHandleFromMemberId(${1:char* memberId}, ${2:int* networkHandle}, ${3:int* bufferSize})${0}"
      ],
      "description": "```\nReturns a NetworkHandle* from the specified member ID and stores it in a given buffer.  \n* Currently unknown struct  \n```"
  },
  "3006": {
      "prefix": "NetworkHandleFromFriend",
      "body": [
          "NetworkHandleFromFriend(${1:int* friendIndex}, ${2:int* networkHandle}, ${3:int* bufferSize})${0}"
      ],
      "description": ""
  },
  "3007": {
      "prefix": "NetworkHandleFromPlayer",
      "body": [
          "NetworkHandleFromPlayer(${1:Player* player}, ${2:int* networkHandle}, ${3:int* bufferSize})${0}"
      ],
      "description": "```\nReturns a handle to networkHandle* from the specified player handle and stores it in a given buffer.  \n* Currently unknown struct  \nExample:  \nstd::vector<UINT64> GetPlayerNetworkHandle(Player player) {  \n    const int size = 13;  \n    uint64_t *buffer = std::make_unique<uint64_t[]>(size).get();  \n    NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13);  \n    for (int i = 0; i < size; i++) {  \n        Log::Msg(\"networkhandle[%i]: %llx\", i, buffer[i]);  \n    }  \n    std::vector<UINT64> result(buffer, buffer + sizeof(buffer));  \n    return result;  \n}  \n```"
  },
  "3008": {
      "prefix": "NetworkHandleFromUserId",
      "body": [
          "NetworkHandleFromUserId(${1:char* userId}, ${2:int* networkHandle}, ${3:int* bufferSize})${0}"
      ],
      "description": "```\nReturns a NetworkHandle* from the specified user ID and stores it in a given buffer.  \n* Currently unknown struct  \n```"
  },
  "3009": {
      "prefix": "NetworkHasAgeRestrictedProfile",
      "body": [
          "NetworkHasAgeRestrictedProfile()${0}"
      ],
      "description": ""
  },
  "3010": {
      "prefix": "NetworkHasCachedPlayerHeadBlendData",
      "body": [
          "NetworkHasCachedPlayerHeadBlendData(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3011": {
      "prefix": "NetworkHasControlOfDoor",
      "body": [
          "NetworkHasControlOfDoor(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3012": {
      "prefix": "NetworkHasControlOfEntity",
      "body": [
          "NetworkHasControlOfEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3013": {
      "prefix": "NetworkHasControlOfNetworkId",
      "body": [
          "NetworkHasControlOfNetworkId(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "3014": {
      "prefix": "NetworkHasControlOfPickup",
      "body": [
          "NetworkHasControlOfPickup(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "3015": {
      "prefix": "NetworkHasEntityBeenRegisteredWithThisThread",
      "body": [
          "NetworkHasEntityBeenRegisteredWithThisThread(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3016": {
      "prefix": "NetworkHasFollowInvite",
      "body": [
          "NetworkHasFollowInvite()${0}"
      ],
      "description": ""
  },
  "3017": {
      "prefix": "NetworkHasGameBeenAltered",
      "body": [
          "NetworkHasGameBeenAltered()${0}"
      ],
      "description": "```\nReturns true if dinput8.dll is present in the game directory.\nYou will get following error message if that is true: \"You are attempting to access GTA Online servers with an altered version of the game.\"\n```"
  },
  "3018": {
      "prefix": "NetworkHasHeadset",
      "body": [
          "NetworkHasHeadset()${0}"
      ],
      "description": ""
  },
  "3019": {
      "prefix": "NetworkHasPendingInvite",
      "body": [
          "NetworkHasPendingInvite()${0}"
      ],
      "description": ""
  },
  "3020": {
      "prefix": "NetworkHasInvitedGamer",
      "body": [
          "NetworkHasInvitedGamer(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3021": {
      "prefix": "NetworkHasInvitedGamerToTransition",
      "body": [
          "NetworkHasInvitedGamerToTransition(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3022": {
      "prefix": "NetworkHasPlayerStartedTransition",
      "body": [
          "NetworkHasPlayerStartedTransition(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3023": {
      "prefix": "NetworkHasReceivedHostBroadcastData",
      "body": [
          "NetworkHasReceivedHostBroadcastData()${0}"
      ],
      "description": ""
  },
  "3024": {
      "prefix": "NetworkHasRosPrivilege",
      "body": [
          "NetworkHasRosPrivilege(${1:int* index})${0}"
      ],
      "description": "```\nindex is always 18 in scripts\n```"
  },
  "3025": {
      "prefix": "NetworkHasRosPrivilegeEndDate",
      "body": [
          "NetworkHasRosPrivilegeEndDate(${1:int* privilege}, ${2:int* banType}, ${3:Vector3* timeData})${0}"
      ],
      "description": ""
  },
  "3026": {
      "prefix": "NetworkHasSocialClubAccount",
      "body": [
          "NetworkHasSocialClubAccount()${0}"
      ],
      "description": ""
  },
  "3027": {
      "prefix": "NetworkHasValidRosCredentials",
      "body": [
          "NetworkHasValidRosCredentials()${0}"
      ],
      "description": "```\nReturns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.\n```"
  },
  "3028": {
      "prefix": "NetworkHasSocialNetworkingSharingPriv",
      "body": [
          "NetworkHasSocialNetworkingSharingPriv()${0}"
      ],
      "description": ""
  },
  "3029": {
      "prefix": "NetworkHasViewGamerUserContentResult",
      "body": [
          "NetworkHasViewGamerUserContentResult(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "3030": {
      "prefix": "NetworkHashFromGamerHandle",
      "body": [
          "NetworkHashFromGamerHandle(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3031": {
      "prefix": "NetworkHashFromPlayerHandle",
      "body": [
          "NetworkHashFromPlayerHandle(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3032": {
      "prefix": "NetworkHaveOnlinePrivilege2",
      "body": [
          "NetworkHaveOnlinePrivilege2()${0}"
      ],
      "description": ""
  },
  "3033": {
      "prefix": "NetworkHaveCommunicationPrivileges",
      "body": [
          "NetworkHaveCommunicationPrivileges(${1:int* p0}, ${2:Player* player})${0}"
      ],
      "description": ""
  },
  "3034": {
      "prefix": "NetworkHaveOnlinePrivileges",
      "body": [
          "NetworkHaveOnlinePrivileges()${0}"
      ],
      "description": ""
  },
  "3035": {
      "prefix": "NetworkHaveRosBannedPriv",
      "body": [
          "NetworkHaveRosBannedPriv()${0}"
      ],
      "description": ""
  },
  "3036": {
      "prefix": "NetworkHaveRosLeaderboardWritePriv",
      "body": [
          "NetworkHaveRosLeaderboardWritePriv()${0}"
      ],
      "description": ""
  },
  "3037": {
      "prefix": "NetworkHaveRosCreateTicketPriv",
      "body": [
          "NetworkHaveRosCreateTicketPriv()${0}"
      ],
      "description": ""
  },
  "3038": {
      "prefix": "NetworkHaveUserContentPrivileges",
      "body": [
          "NetworkHaveUserContentPrivileges(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3039": {
      "prefix": "NetworkHaveRosMultiplayerPriv",
      "body": [
          "NetworkHaveRosMultiplayerPriv()${0}"
      ],
      "description": ""
  },
  "3040": {
      "prefix": "NetworkHostTransition",
      "body": [
          "NetworkHostTransition(${1:int* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3}, ${5:Any* p4}, ${6:BOOL* p5}, ${7:BOOL* p6}, ${8:int* p7}, ${9:Any* p8}, ${10:int* p9})${0}"
      ],
      "description": "From what I can tell it looks like it does the following:\n\nCreates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.\n\nYou also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`."
  },
  "3041": {
      "prefix": "NetworkHaveRosSocialClubPriv",
      "body": [
          "NetworkHaveRosSocialClubPriv()${0}"
      ],
      "description": ""
  },
  "3042": {
      "prefix": "NetworkInviteGamers",
      "body": [
          "NetworkInviteGamers(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3043": {
      "prefix": "NetworkIsActivitySession",
      "body": [
          "NetworkIsActivitySession()${0}"
      ],
      "description": ""
  },
  "3044": {
      "prefix": "NetworkInviteGamersToTransition",
      "body": [
          "NetworkInviteGamersToTransition(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3045": {
      "prefix": "NetworkIsActivitySpectatorFromHandle",
      "body": [
          "NetworkIsActivitySpectatorFromHandle(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3046": {
      "prefix": "NetworkIsActivitySpectator",
      "body": [
          "NetworkIsActivitySpectator()${0}"
      ],
      "description": ""
  },
  "3047": {
      "prefix": "NetworkIsAddingFriend",
      "body": [
          "NetworkIsAddingFriend()${0}"
      ],
      "description": ""
  },
  "3048": {
      "prefix": "NetworkIsCableConnected",
      "body": [
          "NetworkIsCableConnected()${0}"
      ],
      "description": ""
  },
  "3049": {
      "prefix": "NetworkIsClanMembershipFinishedDownloading",
      "body": [
          "NetworkIsClanMembershipFinishedDownloading()${0}"
      ],
      "description": ""
  },
  "3050": {
      "prefix": "NetworkIsChattingInPlatformParty",
      "body": [
          "NetworkIsChattingInPlatformParty(${1:int* networkHandle})${0}"
      ],
      "description": "```\nThis would be nice to see if someone is in party chat, but 2 sad notes.  \n1) It only becomes true if said person is speaking in that party at the time.  \n2) It will never, become true unless you are in that party with said person.  \n```"
  },
  "3051": {
      "prefix": "NetworkIsClockTimeOverridden",
      "body": [
          "NetworkIsClockTimeOverridden()${0}"
      ],
      "description": ""
  },
  "3052": {
      "prefix": "NetworkIsCloudBackgroundScriptRequestPending",
      "body": [
          "NetworkIsCloudBackgroundScriptRequestPending()${0}"
      ],
      "description": ""
  },
  "3053": {
      "prefix": "NetworkIsCloudAvailable",
      "body": [
          "NetworkIsCloudAvailable()${0}"
      ],
      "description": ""
  },
  "3054": {
      "prefix": "NetworkIsConnectionEndpointRelayServer",
      "body": [
          "NetworkIsConnectionEndpointRelayServer(${1:Player* player})${0}"
      ],
      "description": "```\nNETWORK_IS_*\n\nNativeDB Introduced: v323\n```"
  },
  "3055": {
      "prefix": "NetworkIsDoorNetworked",
      "body": [
          "NetworkIsDoorNetworked(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3056": {
      "prefix": "NetworkIsEntityConcealed",
      "body": [
          "NetworkIsEntityConcealed(${1:Entity* entity})${0}"
      ],
      "description": "Note: This only works for vehicles, which appears to be a bug (since the setter *does* work for every entity type and the name is 99% correct)."
  },
  "3057": {
      "prefix": "NetworkIsEntityFading",
      "body": [
          "NetworkIsEntityFading(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3058": {
      "prefix": "NetworkIsFriend",
      "body": [
          "NetworkIsFriend(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3059": {
      "prefix": "NetworkIsFindingGamers",
      "body": [
          "NetworkIsFindingGamers()${0}"
      ],
      "description": ""
  },
  "3060": {
      "prefix": "NetworkIsFriendInMultiplayer",
      "body": [
          "NetworkIsFriendInMultiplayer(${1:char* friendName})${0}"
      ],
      "description": ""
  },
  "3061": {
      "prefix": "NetworkIsFriendHandleOnline",
      "body": [
          "NetworkIsFriendHandleOnline(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3062": {
      "prefix": "NetworkIsFriendInSameTitle",
      "body": [
          "NetworkIsFriendInSameTitle(${1:char* friendName})${0}"
      ],
      "description": "```\nIn scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.  \n```"
  },
  "3063": {
      "prefix": "NetworkIsFriendOnline",
      "body": [
          "NetworkIsFriendOnline(${1:char* name})${0}"
      ],
      "description": ""
  },
  "3064": {
      "prefix": "NetworkIsFriendIndexOnline",
      "body": [
          "NetworkIsFriendIndexOnline(${1:int* friendIndex})${0}"
      ],
      "description": ""
  },
  "3065": {
      "prefix": "NetworkIsGamerBlockedByMe",
      "body": [
          "NetworkIsGamerBlockedByMe(${1:Any* networkHandle})${0}"
      ],
      "description": ""
  },
  "3066": {
      "prefix": "NetworkIsGameInProgress",
      "body": [
          "NetworkIsGameInProgress()${0}"
      ],
      "description": ""
  },
  "3067": {
      "prefix": "NetworkIsGamerInMySession",
      "body": [
          "NetworkIsGamerInMySession(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3068": {
      "prefix": "NetworkIsGamerMutedByMe",
      "body": [
          "NetworkIsGamerMutedByMe(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3069": {
      "prefix": "NetworkIsGettingGamerStatus",
      "body": [
          "NetworkIsGettingGamerStatus()${0}"
      ],
      "description": ""
  },
  "3070": {
      "prefix": "NetworkIsGamerTalking",
      "body": [
          "NetworkIsGamerTalking(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3071": {
      "prefix": "NetworkIsHandleValid",
      "body": [
          "NetworkIsHandleValid(${1:int* networkHandle}, ${2:int* bufferSize})${0}"
      ],
      "description": ""
  },
  "3072": {
      "prefix": "NetworkIsHost",
      "body": [
          "NetworkIsHost()${0}"
      ],
      "description": "```\nIf you are host, returns true else returns false.\n```"
  },
  "3073": {
      "prefix": "NetworkIsHostOfThisScript",
      "body": [
          "NetworkIsHostOfThisScript()${0}"
      ],
      "description": ""
  },
  "3074": {
      "prefix": "NetworkIsInMpCutscene",
      "body": [
          "NetworkIsInMpCutscene()${0}"
      ],
      "description": ""
  },
  "3075": {
      "prefix": "NetworkIsInParty",
      "body": [
          "NetworkIsInParty()${0}"
      ],
      "description": "```\nNote according to IDA TU27 X360(Console),  \nThis native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.  \nSide note: This location just stops where it's at once jumped to.  \nScreenshot for side note,   \nh t t p ://i.imgur.com/m2ci1mF.png  \nh t t p://i.imgur.com/Z0Wx2B6.png  \n```"
  },
  "3076": {
      "prefix": "NetworkIsInPlatformPartyChat",
      "body": [
          "NetworkIsInPlatformPartyChat()${0}"
      ],
      "description": "```\nHardcoded to return false.\n```"
  },
  "3077": {
      "prefix": "NetworkIsInPlatformParty",
      "body": [
          "NetworkIsInPlatformParty()${0}"
      ],
      "description": "```\nHardcoded to return false.\n```"
  },
  "3078": {
      "prefix": "NetworkIsInSession",
      "body": [
          "NetworkIsInSession()${0}"
      ],
      "description": ""
  },
  "3079": {
      "prefix": "NetworkIsInSpectatorMode",
      "body": [
          "NetworkIsInSpectatorMode()${0}"
      ],
      "description": ""
  },
  "3080": {
      "prefix": "NetworkIsInTutorialSession",
      "body": [
          "NetworkIsInTutorialSession()${0}"
      ],
      "description": ""
  },
  "3081": {
      "prefix": "NetworkIsInTransition",
      "body": [
          "NetworkIsInTransition()${0}"
      ],
      "description": ""
  },
  "3082": {
      "prefix": "NetworkIsInactiveProfile",
      "body": [
          "NetworkIsInactiveProfile(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3083": {
      "prefix": "NetworkIsLocalPlayerInvincible",
      "body": [
          "NetworkIsLocalPlayerInvincible()${0}"
      ],
      "description": ""
  },
  "3084": {
      "prefix": "NetworkIsMultiplayerDisabled",
      "body": [
          "NetworkIsMultiplayerDisabled()${0}"
      ],
      "description": ""
  },
  "3085": {
      "prefix": "NetworkIsLocalTalking",
      "body": [
          "NetworkIsLocalTalking()${0}"
      ],
      "description": ""
  },
  "3086": {
      "prefix": "NetworkIsOfflineInvitePending",
      "body": [
          "NetworkIsOfflineInvitePending()${0}"
      ],
      "description": ""
  },
  "3087": {
      "prefix": "NetworkIsNetworkIdAClone",
      "body": [
          "NetworkIsNetworkIdAClone(${1:int* netId})${0}"
      ],
      "description": "Returns true if the specified network id is controlled by someone else."
  },
  "3088": {
      "prefix": "NetworkIsPendingFriend",
      "body": [
          "NetworkIsPendingFriend(${1:Any* p0})${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 0.\n```"
  },
  "3089": {
      "prefix": "NetworkIsPlayerAParticipant",
      "body": [
          "NetworkIsPlayerAParticipant(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3090": {
      "prefix": "NetworkIsParticipantActive",
      "body": [
          "NetworkIsParticipantActive(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3091": {
      "prefix": "NetworkIsPlayerActive",
      "body": [
          "NetworkIsPlayerActive(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3092": {
      "prefix": "NetworkIsPartyMember",
      "body": [
          "NetworkIsPartyMember(${1:int* networkHandle})${0}"
      ],
      "description": "```\nNote according to IDA TU27 X360(Console),  \nThis native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.  \nSide note: This location just stops where it's at once jumped to.  \nScreenshot for side note,   \nh t t p ://i.imgur.com/m2ci1mF.png  \nh t t p://i.imgur.com/Z0Wx2B6.png  \n```"
  },
  "3093": {
      "prefix": "NetworkIsPlayerAParticipantOnScript",
      "body": [
          "NetworkIsPlayerAParticipantOnScript(${1:Player* player1}, ${2:char* script}, ${3:Player* player2})${0}"
      ],
      "description": ""
  },
  "3094": {
      "prefix": "NetworkIsPlayerEqualToIndex",
      "body": [
          "NetworkIsPlayerEqualToIndex(${1:Player* player}, ${2:int* index})${0}"
      ],
      "description": "```\nNETWORK_ARE_*  \n```"
  },
  "3095": {
      "prefix": "NetworkIsPlayerBlockedByMe",
      "body": [
          "NetworkIsPlayerBlockedByMe(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3096": {
      "prefix": "NetworkIsPlayerConcealed",
      "body": [
          "NetworkIsPlayerConcealed(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3097": {
      "prefix": "NetworkIsPlayerInMpCutscene",
      "body": [
          "NetworkIsPlayerInMpCutscene(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3098": {
      "prefix": "NetworkIsPlayerMutedByMe",
      "body": [
          "NetworkIsPlayerMutedByMe(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3099": {
      "prefix": "NetworkIsPlayerConnected",
      "body": [
          "NetworkIsPlayerConnected(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3100": {
      "prefix": "NetworkIsPsnAvailable",
      "body": [
          "NetworkIsPsnAvailable()${0}"
      ],
      "description": ""
  },
  "3101": {
      "prefix": "NetworkIsPlayerFading",
      "body": [
          "NetworkIsPlayerFading(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3102": {
      "prefix": "NetworkIsPlayerTalking",
      "body": [
          "NetworkIsPlayerTalking(${1:Player* player})${0}"
      ],
      "description": "```\nreturns true if someone is screaming or talking in a microphone  \n```"
  },
  "3103": {
      "prefix": "NetworkIsScriptActive",
      "body": [
          "NetworkIsScriptActive(${1:char* scriptName}, ${2:Player* player}, ${3:BOOL* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3104": {
      "prefix": "NetworkIsScriptActiveByHash",
      "body": [
          "NetworkIsScriptActiveByHash(${1:Hash* scriptHash}, ${2:int* p1}, ${3:BOOL* p2}, ${4:int* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2245\n```"
  },
  "3105": {
      "prefix": "NetworkIsSessionBusy",
      "body": [
          "NetworkIsSessionBusy()${0}"
      ],
      "description": ""
  },
  "3106": {
      "prefix": "NetworkIsSignedIn",
      "body": [
          "NetworkIsSignedIn()${0}"
      ],
      "description": "```\nReturns whether the player is signed into Social Club.  \n```"
  },
  "3107": {
      "prefix": "NetworkIsSessionActive",
      "body": [
          "NetworkIsSessionActive()${0}"
      ],
      "description": ""
  },
  "3108": {
      "prefix": "NetworkIsSignedOnline",
      "body": [
          "NetworkIsSignedOnline()${0}"
      ],
      "description": "```\nReturns whether the game is not in offline mode.  \nseemed not to work for some ppl  \n```"
  },
  "3109": {
      "prefix": "NetworkIsSessionStarted",
      "body": [
          "NetworkIsSessionStarted()${0}"
      ],
      "description": "```\nThis checks if player is playing on gta online or not.  \nPlease add an if and block your mod if this is \"true\".  \n```"
  },
  "3110": {
      "prefix": "NetworkIsThisScriptMarked",
      "body": [
          "NetworkIsThisScriptMarked(${1:Any* p0}, ${2:BOOL* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "3111": {
      "prefix": "NetworkIsTextChatActive",
      "body": [
          "NetworkIsTextChatActive()${0}"
      ],
      "description": "```\nSame as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.  \n```"
  },
  "3112": {
      "prefix": "NetworkIsTransitionBusy",
      "body": [
          "NetworkIsTransitionBusy()${0}"
      ],
      "description": ""
  },
  "3113": {
      "prefix": "NetworkIsTransitionClosedFriends",
      "body": [
          "NetworkIsTransitionClosedFriends()${0}"
      ],
      "description": ""
  },
  "3114": {
      "prefix": "NetworkIsTransitionMatchmaking",
      "body": [
          "NetworkIsTransitionMatchmaking()${0}"
      ],
      "description": ""
  },
  "3115": {
      "prefix": "NetworkIsTransitionClosedCrew",
      "body": [
          "NetworkIsTransitionClosedCrew()${0}"
      ],
      "description": ""
  },
  "3116": {
      "prefix": "NetworkIsTransitionOpenToMatchmaking",
      "body": [
          "NetworkIsTransitionOpenToMatchmaking()${0}"
      ],
      "description": ""
  },
  "3117": {
      "prefix": "NetworkIsTransitionHost",
      "body": [
          "NetworkIsTransitionHost()${0}"
      ],
      "description": ""
  },
  "3118": {
      "prefix": "NetworkIsTransitionSolo",
      "body": [
          "NetworkIsTransitionSolo()${0}"
      ],
      "description": ""
  },
  "3119": {
      "prefix": "NetworkIsTransitionHostFromHandle",
      "body": [
          "NetworkIsTransitionHostFromHandle(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3120": {
      "prefix": "NetworkIsTransitionPrivate",
      "body": [
          "NetworkIsTransitionPrivate()${0}"
      ],
      "description": ""
  },
  "3121": {
      "prefix": "NetworkIsTransitionVisibilityLocked",
      "body": [
          "NetworkIsTransitionVisibilityLocked()${0}"
      ],
      "description": ""
  },
  "3122": {
      "prefix": "NetworkIsTransitionStarted",
      "body": [
          "NetworkIsTransitionStarted()${0}"
      ],
      "description": ""
  },
  "3123": {
      "prefix": "NetworkIsTunableCloudRequestPending",
      "body": [
          "NetworkIsTunableCloudRequestPending()${0}"
      ],
      "description": ""
  },
  "3124": {
      "prefix": "NetworkIsTransitionToGame",
      "body": [
          "NetworkIsTransitionToGame()${0}"
      ],
      "description": ""
  },
  "3125": {
      "prefix": "NetworkIsTutorialSessionChangePending",
      "body": [
          "NetworkIsTutorialSessionChangePending()${0}"
      ],
      "description": ""
  },
  "3126": {
      "prefix": "NetworkJoinGroupActivity",
      "body": [
          "NetworkJoinGroupActivity()${0}"
      ],
      "description": ""
  },
  "3127": {
      "prefix": "NetworkJoinTransition",
      "body": [
          "NetworkJoinTransition(${1:Player* player})${0}"
      ],
      "description": "```\nint handle[76];  \nNETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);  \nPlayer uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);  \nNETWORK_JOIN_TRANSITION(uVar2);  \n\t\tnothing doin.  \n```"
  },
  "3128": {
      "prefix": "NetworkJoinPreviouslyFailedSession",
      "body": [
          "NetworkJoinPreviouslyFailedSession()${0}"
      ],
      "description": ""
  },
  "3129": {
      "prefix": "NetworkLaunchTransition",
      "body": [
          "NetworkLaunchTransition()${0}"
      ],
      "description": ""
  },
  "3130": {
      "prefix": "NetworkJoinPreviouslyFailedTransition",
      "body": [
          "NetworkJoinPreviouslyFailedTransition()${0}"
      ],
      "description": ""
  },
  "3131": {
      "prefix": "NetworkLeaveTransition",
      "body": [
          "NetworkLeaveTransition()${0}"
      ],
      "description": ""
  },
  "3132": {
      "prefix": "NetworkMemberIdFromGamerHandle",
      "body": [
          "NetworkMemberIdFromGamerHandle(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3133": {
      "prefix": "NetworkMarkTransitionGamerAsFullyJoined",
      "body": [
          "NetworkMarkTransitionGamerAsFullyJoined(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3134": {
      "prefix": "NetworkOpenTransitionMatchmaking",
      "body": [
          "NetworkOpenTransitionMatchmaking()${0}"
      ],
      "description": ""
  },
  "3135": {
      "prefix": "NetworkOverrideChatRestrictions",
      "body": [
          "NetworkOverrideChatRestrictions(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nCould possibly bypass being muted or automatically muted  \n```"
  },
  "3136": {
      "prefix": "NetworkOverrideClockMillisecondsPerGameMinute",
      "body": [
          "NetworkOverrideClockMillisecondsPerGameMinute(${1:int* ms})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "3137": {
      "prefix": "NetworkOverrideClockTime",
      "body": [
          "NetworkOverrideClockTime(${1:int* hours}, ${2:int* minutes}, ${3:int* seconds})${0}"
      ],
      "description": "Works in Singleplayer too.\nPassing wrong data (e.g. hours above 23) will cause the game to crash."
  },
  "3138": {
      "prefix": "NetworkOverrideCoordsAndHeading",
      "body": [
          "NetworkOverrideCoordsAndHeading(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading})${0}"
      ],
      "description": ""
  },
  "3139": {
      "prefix": "NetworkOverrideReceiveRestrictions",
      "body": [
          "NetworkOverrideReceiveRestrictions(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nR* uses this to hear all player when spectating.   \nIt allows you to hear other online players when their chat is on none, crew and or friends  \n```"
  },
  "3140": {
      "prefix": "NetworkOverrideSendRestrictions",
      "body": [
          "NetworkOverrideSendRestrictions(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nThis is used alongside the native,\n'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.\n```"
  },
  "3141": {
      "prefix": "NetworkOverrideReceiveRestrictionsAll",
      "body": [
          "NetworkOverrideReceiveRestrictionsAll(${1:BOOL* toggle})${0}"
      ],
      "description": "```\np0 is always false in scripts.\n```"
  },
  "3142": {
      "prefix": "NetworkOverrideTeamRestrictions",
      "body": [
          "NetworkOverrideTeamRestrictions(${1:int* team}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3143": {
      "prefix": "NetworkPedForceGameStateUpdate",
      "body": [
          "NetworkPedForceGameStateUpdate(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "3144": {
      "prefix": "NetworkOverrideSendRestrictionsAll",
      "body": [
          "NetworkOverrideSendRestrictionsAll(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3145": {
      "prefix": "NetworkOverrideTransitionChat",
      "body": [
          "NetworkOverrideTransitionChat(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3146": {
      "prefix": "NetworkPlayerGetCheaterReason",
      "body": [
          "NetworkPlayerGetCheaterReason()${0}"
      ],
      "description": ""
  },
  "3147": {
      "prefix": "NetworkPlayerGetName",
      "body": [
          "NetworkPlayerGetName(${1:Player* player})${0}"
      ],
      "description": "```\nReturns the name of a given player. Returns \"**Invalid**\" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.\n```"
  },
  "3148": {
      "prefix": "NetworkPlayerHasHeadset",
      "body": [
          "NetworkPlayerHasHeadset(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3149": {
      "prefix": "NetworkPlayerGetUserid",
      "body": [
          "NetworkPlayerGetUserid(${1:Player* player}, ${2:int* userID})${0}"
      ],
      "description": "```\nTakes a 24 char buffer. Returns the buffer or \"**Invalid**\" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.\n```"
  },
  "3150": {
      "prefix": "NetworkPlayerIndexIsCheater",
      "body": [
          "NetworkPlayerIndexIsCheater(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3151": {
      "prefix": "NetworkPlayerIsBadsport",
      "body": [
          "NetworkPlayerIsBadsport()${0}"
      ],
      "description": ""
  },
  "3152": {
      "prefix": "NetworkPlayerIsRockstarDev",
      "body": [
          "NetworkPlayerIsRockstarDev(${1:Player* player})${0}"
      ],
      "description": "```\nChecks if a specific value (BYTE) in CPlayerInfo is nonzero.  \nReturns always false in Singleplayer.  \nNo longer used for dev checks since first mods were released on PS3 & 360.  \nR* now checks with the is_dlc_present native for the dlc hash 2532323046,  \nif that is present it will unlock dev stuff.  \n```"
  },
  "3153": {
      "prefix": "NetworkPlayerIsCheater",
      "body": [
          "NetworkPlayerIsCheater()${0}"
      ],
      "description": ""
  },
  "3154": {
      "prefix": "NetworkQueryRespawnResults",
      "body": [
          "NetworkQueryRespawnResults(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3155": {
      "prefix": "NetworkRegisterEntityAsNetworked",
      "body": [
          "NetworkRegisterEntityAsNetworked(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3156": {
      "prefix": "NetworkQueueGamerForStatus",
      "body": [
          "NetworkQueueGamerForStatus(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3157": {
      "prefix": "NetworkRegisterPlayerBroadcastVariables",
      "body": [
          "NetworkRegisterPlayerBroadcastVariables(${1:int* vars}, ${2:int* numVars})${0}"
      ],
      "description": ""
  },
  "3158": {
      "prefix": "NetworkRegisterHostBroadcastVariables",
      "body": [
          "NetworkRegisterHostBroadcastVariables(${1:int* vars}, ${2:int* numVars})${0}"
      ],
      "description": ""
  },
  "3159": {
      "prefix": "NetworkRegisterTunableFloatHash",
      "body": [
          "NetworkRegisterTunableFloatHash(${1:Hash* contextHash}, ${2:Hash* nameHash}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "3160": {
      "prefix": "NetworkRegisterTunableBoolHash",
      "body": [
          "NetworkRegisterTunableBoolHash(${1:Hash* contextHash}, ${2:Hash* nameHash}, ${3:BOOL* value})${0}"
      ],
      "description": ""
  },
  "3161": {
      "prefix": "NetworkRemoveAllTransitionInvite",
      "body": [
          "NetworkRemoveAllTransitionInvite()${0}"
      ],
      "description": ""
  },
  "3162": {
      "prefix": "NetworkRegisterTunableIntHash",
      "body": [
          "NetworkRegisterTunableIntHash(${1:Hash* contextHash}, ${2:Hash* nameHash}, ${3:int* value})${0}"
      ],
      "description": ""
  },
  "3163": {
      "prefix": "NetworkRemoveEntityArea",
      "body": [
          "NetworkRemoveEntityArea(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3164": {
      "prefix": "NetworkRemovePresenceInvite",
      "body": [
          "NetworkRemovePresenceInvite(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3165": {
      "prefix": "NetworkReportMyself",
      "body": [
          "NetworkReportMyself()${0}"
      ],
      "description": ""
  },
  "3166": {
      "prefix": "NetworkRequestCloudBackgroundScripts",
      "body": [
          "NetworkRequestCloudBackgroundScripts()${0}"
      ],
      "description": ""
  },
  "3167": {
      "prefix": "NetworkRemoveTransitionInvite",
      "body": [
          "NetworkRemoveTransitionInvite(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3168": {
      "prefix": "NetworkRequestCloudTunables",
      "body": [
          "NetworkRequestCloudTunables()${0}"
      ],
      "description": ""
  },
  "3169": {
      "prefix": "NetworkRequestControlOfDoor",
      "body": [
          "NetworkRequestControlOfDoor(${1:int* doorID})${0}"
      ],
      "description": ""
  },
  "3170": {
      "prefix": "NetworkRespawnCoords",
      "body": [
          "NetworkRespawnCoords(${1:Player* player}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\np4 and p5 are always 0 in scripts  \n```"
  },
  "3171": {
      "prefix": "NetworkRequestControlOfEntity",
      "body": [
          "NetworkRequestControlOfEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3172": {
      "prefix": "NetworkResurrectLocalPlayer",
      "body": [
          "NetworkResurrectLocalPlayer(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* heading}, ${5:BOOL* unk}, ${6:BOOL* changetime})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 7: Any p6\n```"
  },
  "3173": {
      "prefix": "NetworkRequestControlOfNetworkId",
      "body": [
          "NetworkRequestControlOfNetworkId(${1:int* netId})${0}"
      ],
      "description": ""
  },
  "3174": {
      "prefix": "NetworkSeedRandomNumberGenerator",
      "body": [
          "NetworkSeedRandomNumberGenerator(${1:int* seed})${0}"
      ],
      "description": ""
  },
  "3175": {
      "prefix": "NetworkResetBodyTracker",
      "body": [
          "NetworkResetBodyTracker()${0}"
      ],
      "description": ""
  },
  "3176": {
      "prefix": "NetworkSendPresenceTransitionInvite",
      "body": [
          "NetworkSendPresenceTransitionInvite(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nString \"NETWORK_SEND_PRESENCE_TRANSITION_INVITE\" is contained in the function in ida so this one is correct.  \n```"
  },
  "3177": {
      "prefix": "NetworkSendInviteViaPresence",
      "body": [
          "NetworkSendInviteViaPresence(${1:int* networkHandle}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3178": {
      "prefix": "NetworkSendTransitionGamerInstruction",
      "body": [
          "NetworkSendTransitionGamerInstruction(${1:int* networkHandle}, ${2:char* p1}, ${3:int* p2}, ${4:int* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nthe first arg seems to be the network player handle (&handle) and the second var is pretty much always \"\" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1  \ndoes this send an invite to a player?  \n```"
  },
  "3179": {
      "prefix": "NetworkSessionBlockJoinRequests",
      "body": [
          "NetworkSessionBlockJoinRequests(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3180": {
      "prefix": "NetworkSendTextMessage",
      "body": [
          "NetworkSendTextMessage(${1:char* message}, ${2:int* networkHandle})${0}"
      ],
      "description": "```\nMessage is limited to 64 characters.\n```"
  },
  "3181": {
      "prefix": "NetworkSessionChangeSlots",
      "body": [
          "NetworkSessionChangeSlots(${1:int* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3182": {
      "prefix": "NetworkSessionActivityQuickmatch",
      "body": [
          "NetworkSessionActivityQuickmatch(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3183": {
      "prefix": "NetworkSessionEnd",
      "body": [
          "NetworkSessionEnd(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np0 is always false and p1 varies.  \nNETWORK_SESSION_END(0, 1)  \nNETWORK_SESSION_END(0, 0)  \nResults in: \"Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later.\"  \n```"
  },
  "3184": {
      "prefix": "NetworkSessionCancelInvite",
      "body": [
          "NetworkSessionCancelInvite()${0}"
      ],
      "description": ""
  },
  "3185": {
      "prefix": "NetworkSessionEnter",
      "body": [
          "NetworkSessionEnter(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:int* maxPlayers}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nunknown params  \np0 = 0, 2, or 999 (The global is 999 by default.)  \np1 = 0 (Always in every script it's found in atleast.)  \np2 = 0, 3, or 4 (Based on a var that is determined by a function.)  \np3 = maxPlayers (It's obvious in x360 scripts it's always 18)  \np4 = 0 (Always in every script it's found in atleast.)  \np5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)  \np5 is reset to 0 if,  \nGlobal_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.  \n```"
  },
  "3186": {
      "prefix": "NetworkSessionCrewMatchmaking",
      "body": [
          "NetworkSessionCrewMatchmaking(${1:int* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* maxPlayers}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "3187": {
      "prefix": "NetworkSessionFriendMatchmaking",
      "body": [
          "NetworkSessionFriendMatchmaking(${1:int* p0}, ${2:int* p1}, ${3:int* maxPlayers}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "3188": {
      "prefix": "NetworkSessionForceCancelInvite",
      "body": [
          "NetworkSessionForceCancelInvite()${0}"
      ],
      "description": ""
  },
  "3189": {
      "prefix": "NetworkSessionGetKickVote",
      "body": [
          "NetworkSessionGetKickVote(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "3190": {
      "prefix": "NetworkSessionGetInviter",
      "body": [
          "NetworkSessionGetInviter(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3191": {
      "prefix": "NetworkSessionGetPrivateSlots",
      "body": [
          "NetworkSessionGetPrivateSlots()${0}"
      ],
      "description": ""
  },
  "3192": {
      "prefix": "NetworkSessionGetMatchmakingGroupFree",
      "body": [
          "NetworkSessionGetMatchmakingGroupFree(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3193": {
      "prefix": "NetworkSessionHostClosed",
      "body": [
          "NetworkSessionHostClosed(${1:int* p0}, ${2:int* maxPlayers})${0}"
      ],
      "description": ""
  },
  "3194": {
      "prefix": "NetworkSessionHost",
      "body": [
          "NetworkSessionHost(${1:int* p0}, ${2:int* maxPlayers}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nDoes nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.  \n```"
  },
  "3195": {
      "prefix": "NetworkSessionHostSinglePlayer",
      "body": [
          "NetworkSessionHostSinglePlayer(${1:int* p0})${0}"
      ],
      "description": "```\nLoads up the map that is loaded when beeing in mission creator  \nPlayer gets placed in a mix between online/offline mode  \np0 is always 2 in R* scripts.  \nAppears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812  \n```"
  },
  "3196": {
      "prefix": "NetworkSessionHostFriendsOnly",
      "body": [
          "NetworkSessionHostFriendsOnly(${1:int* p0}, ${2:int* maxPlayers})${0}"
      ],
      "description": "```\nDoes nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.  \n```"
  },
  "3197": {
      "prefix": "NetworkSessionIsClosedFriends",
      "body": [
          "NetworkSessionIsClosedFriends()${0}"
      ],
      "description": ""
  },
  "3198": {
      "prefix": "NetworkSessionIsClosedCrew",
      "body": [
          "NetworkSessionIsClosedCrew()${0}"
      ],
      "description": ""
  },
  "3199": {
      "prefix": "NetworkSessionIsInVoiceSession",
      "body": [
          "NetworkSessionIsInVoiceSession()${0}"
      ],
      "description": ""
  },
  "3200": {
      "prefix": "NetworkSessionIsPrivate",
      "body": [
          "NetworkSessionIsPrivate()${0}"
      ],
      "description": ""
  },
  "3201": {
      "prefix": "NetworkSessionIsSolo",
      "body": [
          "NetworkSessionIsSolo()${0}"
      ],
      "description": ""
  },
  "3202": {
      "prefix": "NetworkSessionIsVisible",
      "body": [
          "NetworkSessionIsVisible()${0}"
      ],
      "description": ""
  },
  "3203": {
      "prefix": "NetworkSessionIsVoiceSessionBusy",
      "body": [
          "NetworkSessionIsVoiceSessionBusy()${0}"
      ],
      "description": ""
  },
  "3204": {
      "prefix": "NetworkSessionJoinInvite",
      "body": [
          "NetworkSessionJoinInvite()${0}"
      ],
      "description": ""
  },
  "3205": {
      "prefix": "NetworkSessionKickPlayer",
      "body": [
          "NetworkSessionKickPlayer(${1:Player* player})${0}"
      ],
      "description": "```\nOnly works as host.\n```"
  },
  "3206": {
      "prefix": "NetworkSessionLeaveSinglePlayer",
      "body": [
          "NetworkSessionLeaveSinglePlayer()${0}"
      ],
      "description": ""
  },
  "3207": {
      "prefix": "NetworkSessionMarkVisible",
      "body": [
          "NetworkSessionMarkVisible(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3208": {
      "prefix": "NetworkSessionSetMatchmakingGroup",
      "body": [
          "NetworkSessionSetMatchmakingGroup(${1:int* matchmakingGroup})${0}"
      ],
      "description": ""
  },
  "3209": {
      "prefix": "NetworkSessionSetMatchmakingGroupMax",
      "body": [
          "NetworkSessionSetMatchmakingGroupMax(${1:int* playerType}, ${2:int* playerCount})${0}"
      ],
      "description": "```\nplayerTypes:\n0 = regular joiner\n4 = spectator\n8 = unknown\n```"
  },
  "3210": {
      "prefix": "NetworkSessionSetMatchmakingMentalState",
      "body": [
          "NetworkSessionSetMatchmakingMentalState(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3211": {
      "prefix": "NetworkSessionSetMatchmakingPropertyId",
      "body": [
          "NetworkSessionSetMatchmakingPropertyId(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3212": {
      "prefix": "NetworkSessionValidateJoin",
      "body": [
          "NetworkSessionValidateJoin(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3213": {
      "prefix": "NetworkSessionVoiceConnectToPlayer",
      "body": [
          "NetworkSessionVoiceConnectToPlayer(${1:Any* globalPtr})${0}"
      ],
      "description": "```\nOnly one occurence in the scripts:\nauto sub_cb43(auto a_0, auto a_1) {\n    if (g_2594CB._f1) {\n        if (NETWORK::_855BC38818F6F684()) {\n            NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);\n            g_2594CB._f14/*{13}*/ = a_0._fB93;\n            g_2594CB._f4/*\"64\"*/ = a_1;\n            return 1;\n        }\n    }\n    return 0;\n}\nother:\nlooks like it passes a player in the paramater\nContains string \"NETWORK_VOICE_CONNECT_TO_PLAYER\" in ida\n```"
  },
  "3214": {
      "prefix": "NetworkSessionVoiceHost",
      "body": [
          "NetworkSessionVoiceHost()${0}"
      ],
      "description": ""
  },
  "3215": {
      "prefix": "NetworkSessionVoiceLeave",
      "body": [
          "NetworkSessionVoiceLeave()${0}"
      ],
      "description": ""
  },
  "3216": {
      "prefix": "NetworkSessionVoiceRespondToRequest",
      "body": [
          "NetworkSessionVoiceRespondToRequest(${1:BOOL* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "3217": {
      "prefix": "NetworkSessionVoiceSetTimeout",
      "body": [
          "NetworkSessionVoiceSetTimeout(${1:int* timeout})${0}"
      ],
      "description": ""
  },
  "3218": {
      "prefix": "NetworkSetActivitySpectator",
      "body": [
          "NetworkSetActivitySpectator(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3219": {
      "prefix": "NetworkSessionWasInvited",
      "body": [
          "NetworkSessionWasInvited()${0}"
      ],
      "description": ""
  },
  "3220": {
      "prefix": "NetworkSetActivitySpectatorMax",
      "body": [
          "NetworkSetActivitySpectatorMax(${1:int* maxSpectators})${0}"
      ],
      "description": ""
  },
  "3221": {
      "prefix": "NetworkSetChoiceMigrateOptions",
      "body": [
          "NetworkSetChoiceMigrateOptions(${1:BOOL* toggle}, ${2:Player* player})${0}"
      ],
      "description": ""
  },
  "3222": {
      "prefix": "NetworkSetCurrentDataManagerHandle",
      "body": [
          "NetworkSetCurrentDataManagerHandle(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3223": {
      "prefix": "NetworkSetCurrentlySelectedGamerHandleFromInviteMenu",
      "body": [
          "NetworkSetCurrentlySelectedGamerHandleFromInviteMenu(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3224": {
      "prefix": "NetworkSetEntityGhostedWithOwner",
      "body": [
          "NetworkSetEntityGhostedWithOwner(${1:Entity* entity}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3225": {
      "prefix": "NetworkSetEntityCanBlend",
      "body": [
          "NetworkSetEntityCanBlend(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3226": {
      "prefix": "NetworkSetFriendlyFireOption",
      "body": [
          "NetworkSetFriendlyFireOption(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3227": {
      "prefix": "NetworkSetEntityInvisibleToNetwork",
      "body": [
          "NetworkSetEntityInvisibleToNetwork(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nif set to true other network players can't see it  \nif set to false other network player can see it  \n=========================================  \n^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.  \npc or last gen?  \n^^ last-gen  \n```"
  },
  "3228": {
      "prefix": "NetworkSetGamerInvitedToTransition",
      "body": [
          "NetworkSetGamerInvitedToTransition(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "3229": {
      "prefix": "NetworkSetInFreeCamMode",
      "body": [
          "NetworkSetInFreeCamMode(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3230": {
      "prefix": "NetworkSetInSpectatorMode",
      "body": [
          "NetworkSetInSpectatorMode(${1:BOOL* toggle}, ${2:Ped* playerPed})${0}"
      ],
      "description": ""
  },
  "3231": {
      "prefix": "NetworkSetInMpCutscene",
      "body": [
          "NetworkSetInMpCutscene(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3232": {
      "prefix": "NetworkSetInviteOnCallForInviteMenu",
      "body": [
          "NetworkSetInviteOnCallForInviteMenu(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3233": {
      "prefix": "NetworkSetInSpectatorModeExtended",
      "body": [
          "NetworkSetInSpectatorModeExtended(${1:BOOL* toggle}, ${2:Ped* playerPed}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3234": {
      "prefix": "NetworkSetLocalPlayerInvincibleTime",
      "body": [
          "NetworkSetLocalPlayerInvincibleTime(${1:int* time})${0}"
      ],
      "description": ""
  },
  "3235": {
      "prefix": "NetworkSetLocalPlayerSyncLookAt",
      "body": [
          "NetworkSetLocalPlayerSyncLookAt(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3236": {
      "prefix": "NetworkSetMissionFinished",
      "body": [
          "NetworkSetMissionFinished()${0}"
      ],
      "description": ""
  },
  "3237": {
      "prefix": "NetworkSetNoSpectatorChat",
      "body": [
          "NetworkSetNoSpectatorChat(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3238": {
      "prefix": "NetworkSetPlayerIsPassive",
      "body": [
          "NetworkSetPlayerIsPassive(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3239": {
      "prefix": "NetworkSetOverrideSpectatorMode",
      "body": [
          "NetworkSetOverrideSpectatorMode(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3240": {
      "prefix": "NetworkSetPropertyId",
      "body": [
          "NetworkSetPropertyId(${1:int* id})${0}"
      ],
      "description": "```\nvalue must be < 255\n```"
  },
  "3241": {
      "prefix": "NetworkSetRichPresence",
      "body": [
          "NetworkSetRichPresence(${1:int* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nOn PC it's a nullsub which means it does absolutely nothing.  \nNow that Discord supports Rich Presence, R* might finally implement this for PC. Or maybe in future games like RDR2, GTA VI...  \n```"
  },
  "3242": {
      "prefix": "NetworkSetRichPresenceString",
      "body": [
          "NetworkSetRichPresenceString(${1:int* p0}, ${2:char* textLabel})${0}"
      ],
      "description": "This native does absolutely nothing, just a nullsub"
  },
  "3243": {
      "prefix": "NetworkSetScriptReadyForEvents",
      "body": [
          "NetworkSetScriptReadyForEvents(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3244": {
      "prefix": "NetworkSetTeamOnlyChat",
      "body": [
          "NetworkSetTeamOnlyChat(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3245": {
      "prefix": "NetworkSetTalkerProximity",
      "body": [
          "NetworkSetTalkerProximity(${1:float* value})${0}"
      ],
      "description": ""
  },
  "3246": {
      "prefix": "NetworkSetTransitionActivityId",
      "body": [
          "NetworkSetTransitionActivityId(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3247": {
      "prefix": "NetworkSetThisScriptIsNetworkScript",
      "body": [
          "NetworkSetThisScriptIsNetworkScript(${1:int* maxNumMissionParticipants}, ${2:BOOL* p1}, ${3:int* instanceId})${0}"
      ],
      "description": ""
  },
  "3248": {
      "prefix": "NetworkSetTransitionCreatorHandle",
      "body": [
          "NetworkSetTransitionCreatorHandle(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3249": {
      "prefix": "NetworkSetTransitionVisibilityLock",
      "body": [
          "NetworkSetTransitionVisibilityLock(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3250": {
      "prefix": "NetworkSetVoiceActive",
      "body": [
          "NetworkSetVoiceActive(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3251": {
      "prefix": "NetworkSetVehicleWheelsDestructible",
      "body": [
          "NetworkSetVehicleWheelsDestructible(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nAllow vehicle wheels to be destructible even when the Vehicle entity is invincible.\n```\n\n```\nNativeDB Introduced: v1365\n```"
  },
  "3252": {
      "prefix": "NetworkShouldShowConnectivityTroubleshooting",
      "body": [
          "NetworkShouldShowConnectivityTroubleshooting()${0}"
      ],
      "description": "```\nReturns true if the NAT type is Strict (3) and a certain number of connections have failed.\n```"
  },
  "3253": {
      "prefix": "NetworkSetVoiceChannel",
      "body": [
          "NetworkSetVoiceChannel(${1:int* channel})${0}"
      ],
      "description": ""
  },
  "3254": {
      "prefix": "NetworkShowProfileUi",
      "body": [
          "NetworkShowProfileUi(${1:int* networkHandle})${0}"
      ],
      "description": "```\nExample:  \nint playerHandle;\t  \nNETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);  \nNETWORK_SHOW_PROFILE_UI(&playerHandle);  \n```"
  },
  "3255": {
      "prefix": "NetworkStartRespawnSearchForPlayer",
      "body": [
          "NetworkStartRespawnSearchForPlayer(${1:Player* player}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:int* flags})${0}"
      ],
      "description": "```\nOne of the first things it does is get the players ped.  \nThen it calls a function that is used in some tasks and ped based functions.  \n```\n\np5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS`, in the decompiled scripts."
  },
  "3256": {
      "prefix": "NetworkStartRespawnSearchInAngledAreaForPlayer",
      "body": [
          "NetworkStartRespawnSearchInAngledAreaForPlayer(${1:Player* player}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:float* width}, ${9:float* p8}, ${10:float* p9}, ${11:float* p10}, ${12:int* flags})${0}"
      ],
      "description": "p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS` in the decompiled scripts."
  },
  "3257": {
      "prefix": "NetworkStartSoloTutorialSession",
      "body": [
          "NetworkStartSoloTutorialSession()${0}"
      ],
      "description": ""
  },
  "3258": {
      "prefix": "NetworkStartSynchronisedScene",
      "body": [
          "NetworkStartSynchronisedScene(${1:int* netScene})${0}"
      ],
      "description": ""
  },
  "3259": {
      "prefix": "NetworkStartUserContentPermissionsCheck",
      "body": [
          "NetworkStartUserContentPermissionsCheck(${1:Any* netHandle})${0}"
      ],
      "description": "```\nAlways returns -1. Seems to be XB1 specific.\n```"
  },
  "3260": {
      "prefix": "NetworkStopSynchronisedScene",
      "body": [
          "NetworkStopSynchronisedScene(${1:int* netScene})${0}"
      ],
      "description": ""
  },
  "3261": {
      "prefix": "NetworkSuppressInvite",
      "body": [
          "NetworkSuppressInvite(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3262": {
      "prefix": "NetworkTransitionTrack",
      "body": [
          "NetworkTransitionTrack(${1:Hash* hash}, ${2:int* p1}, ${3:int* p2}, ${4:int* state}, ${5:int* p4})${0}"
      ],
      "description": ""
  },
  "3263": {
      "prefix": "NetworkTryAccessTunableBoolHash",
      "body": [
          "NetworkTryAccessTunableBoolHash(${1:Hash* tunableContext}, ${2:Hash* tunableName}, ${3:BOOL* defaultValue})${0}"
      ],
      "description": "```\nReturns defaultValue if the tunable doesn't exist.\n```"
  },
  "3264": {
      "prefix": "NetworkUnregisterNetworkedEntity",
      "body": [
          "NetworkUnregisterNetworkedEntity(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3265": {
      "prefix": "NetworkUgcNav",
      "body": [
          "NetworkUgcNav(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "3266": {
      "prefix": "NetworkUpdatePlayerScars",
      "body": [
          "NetworkUpdatePlayerScars()${0}"
      ],
      "description": ""
  },
  "3267": {
      "prefix": "NetworkUseHighPrecisionBlending",
      "body": [
          "NetworkUseHighPrecisionBlending(${1:int* netID}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nOld name: _NETWORK_SET_NETWORK_ID_DYNAMIC\n```"
  },
  "3268": {
      "prefix": "NetworkUseLogarithmicBlendingThisFrame",
      "body": [
          "NetworkUseLogarithmicBlendingThisFrame(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3269": {
      "prefix": "ObjToNet",
      "body": [
          "ObjToNet(${1:Object* object})${0}"
      ],
      "description": "```\nLets objects spawn online simply do it like this:  \nint createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));  \n```"
  },
  "3270": {
      "prefix": "ParticipantId",
      "body": [
          "ParticipantId()${0}"
      ],
      "description": "```\nReturn the local Participant ID  \n```"
  },
  "3271": {
      "prefix": "OpenCommerceStore",
      "body": [
          "OpenCommerceStore(${1:char* p0}, ${2:char* p1})${0}"
      ],
      "description": "```\nHas a 3rd param (int) since patch [???].  \n```\n\n```\nNativeDB Added Parameter 3: int p2\n```"
  },
  "3272": {
      "prefix": "PedToNet",
      "body": [
          "PedToNet(${1:Ped* ped})${0}"
      ],
      "description": "```\ngets the network id of a ped  \n```"
  },
  "3273": {
      "prefix": "ParticipantIdToInt",
      "body": [
          "ParticipantIdToInt()${0}"
      ],
      "description": "```\nReturn the local Participant ID.  \nThis native is exactly the same as 'PARTICIPANT_ID' native.  \n```"
  },
  "3274": {
      "prefix": "ReleaseAllCommerceItemImages",
      "body": [
          "ReleaseAllCommerceItemImages()${0}"
      ],
      "description": ""
  },
  "3275": {
      "prefix": "RefreshPlayerListStats",
      "body": [
          "RefreshPlayerListStats(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3276": {
      "prefix": "RemoteCheatDetected",
      "body": [
          "RemoteCheatDetected()${0}"
      ],
      "description": "```\nNativeDB Added Parameter 1: Player player\nNativeDB Added Parameter 2: int a\nNativeDB Added Parameter 3: int b\n```"
  },
  "3277": {
      "prefix": "RemoveAllStickyBombsFromEntity",
      "body": [
          "RemoveAllStickyBombsFromEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nUsed in am_mp_property_ext and am_mp_property_int  \n```\n\n```\nNativeDB Added Parameter 2: Ped ped\n```"
  },
  "3278": {
      "prefix": "ReserveNetworkLocalObjects",
      "body": [
          "ReserveNetworkLocalObjects(${1:int* amount})${0}"
      ],
      "description": "```\nInternal logging string: SCRIPT_RESERVING_LOCAL_OBJECTS\n```\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "3279": {
      "prefix": "RequestCommerceItemImage",
      "body": [
          "RequestCommerceItemImage(${1:int* index})${0}"
      ],
      "description": ""
  },
  "3280": {
      "prefix": "ReserveNetworkLocalPeds",
      "body": [
          "ReserveNetworkLocalPeds(${1:int* amount})${0}"
      ],
      "description": "```\nInternal logging string: SCRIPT_RESERVING_LOCAL_PEDS\n```\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "3281": {
      "prefix": "ReserveNetworkLocalVehicles",
      "body": [
          "ReserveNetworkLocalVehicles(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "3282": {
      "prefix": "ReserveNetworkMissionPeds",
      "body": [
          "ReserveNetworkMissionPeds(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "3283": {
      "prefix": "ReserveNetworkMissionObjects",
      "body": [
          "ReserveNetworkMissionObjects(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "3284": {
      "prefix": "ReserveNetworkMissionVehicles",
      "body": [
          "ReserveNetworkMissionVehicles(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "3285": {
      "prefix": "ResetGhostedEntityAlpha",
      "body": [
          "ResetGhostedEntityAlpha()${0}"
      ],
      "description": "Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\\_0x4BA166079D658ED4)."
  },
  "3286": {
      "prefix": "SetBalanceAddMachines",
      "body": [
          "SetBalanceAddMachines(${1:Any* data}, ${2:int* dataCount}, ${3:char* contentTypeName})${0}"
      ],
      "description": ""
  },
  "3287": {
      "prefix": "SetBalanceAddMachine",
      "body": [
          "SetBalanceAddMachine(${1:char* contentId}, ${2:char* contentTypeName})${0}"
      ],
      "description": ""
  },
  "3288": {
      "prefix": "SetEntityLocallyInvisible",
      "body": [
          "SetEntityLocallyInvisible(${1:Entity* entity})${0}"
      ],
      "description": "Sets the provided entity not visible for yourself for the current frame."
  },
  "3289": {
      "prefix": "SetEntityLocallyVisible",
      "body": [
          "SetEntityLocallyVisible(${1:Entity* entity})${0}"
      ],
      "description": "Sets the provided entity visible for yourself for the current frame."
  },
  "3290": {
      "prefix": "SetEntityVisibleInCutscene",
      "body": [
          "SetEntityVisibleInCutscene(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3291": {
      "prefix": "SetGhostedEntityAlpha",
      "body": [
          "SetGhostedEntityAlpha(${1:int* alpha})${0}"
      ],
      "description": "Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\\_0x4BA166079D658ED4).\n\n'Solidness' cannot be achieved using 255 - this will have the opposite effect of it defaulting to 128 it seems (or just having no effect at all)."
  },
  "3292": {
      "prefix": "SetLocalPlayerAsGhost",
      "body": [
          "SetLocalPlayerAsGhost(${1:BOOL* toggle})${0}"
      ],
      "description": "Formerly incorrectly named `USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR` due to incorrect treatment of console vs. PC native registration.\n\nNative name guessed through ordering.\n\n```\nNativeDB Added Parameter 2: BOOL p1\n```"
  },
  "3293": {
      "prefix": "SetLocalPlayerVisibleInCutscene",
      "body": [
          "SetLocalPlayerVisibleInCutscene(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3294": {
      "prefix": "SetLocalPlayerInvisibleLocally",
      "body": [
          "SetLocalPlayerInvisibleLocally(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3295": {
      "prefix": "SetLocalPlayerVisibleLocally",
      "body": [
          "SetLocalPlayerVisibleLocally(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3296": {
      "prefix": "SetNetworkEnableVehiclePositionCorrection",
      "body": [
          "SetNetworkEnableVehiclePositionCorrection(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nEnables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).\n```"
  },
  "3297": {
      "prefix": "SetNetworkCutsceneEntities",
      "body": [
          "SetNetworkCutsceneEntities(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3298": {
      "prefix": "SetNetworkIdAlwaysExistsForPlayer",
      "body": [
          "SetNetworkIdAlwaysExistsForPlayer(${1:int* netId}, ${2:Player* player}, ${3:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3299": {
      "prefix": "SetNetworkIdVisibleInCutscene",
      "body": [
          "SetNetworkIdVisibleInCutscene(${1:int* netId}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3300": {
      "prefix": "SetNetworkIdCanMigrate",
      "body": [
          "SetNetworkIdCanMigrate(${1:int* netId}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nWhether or not another player is allowed to take control of the entity  \n```"
  },
  "3301": {
      "prefix": "SetNetworkVehicleAsGhost",
      "body": [
          "SetNetworkVehicleAsGhost(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3302": {
      "prefix": "SetNetworkIdExistsOnAllMachines",
      "body": [
          "SetNetworkIdExistsOnAllMachines(${1:int* netId}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3303": {
      "prefix": "SetNetworkVehicleRespotTimer",
      "body": [
          "SetNetworkVehicleRespotTimer(${1:int* netId}, ${2:int* time})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "3304": {
      "prefix": "SetNetworkVehiclePositionUpdateMultiplier",
      "body": [
          "SetNetworkVehiclePositionUpdateMultiplier(${1:Vehicle* vehicle}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nrage::netBlenderLinInterp::GetPositionMaxForUpdateLevel\n```"
  },
  "3305": {
      "prefix": "SetPlayerVisibleLocally",
      "body": [
          "SetPlayerVisibleLocally(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3306": {
      "prefix": "SetPlayerInvisibleLocally",
      "body": [
          "SetPlayerInvisibleLocally(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3307": {
      "prefix": "SetRelationshipToPlayer",
      "body": [
          "SetRelationshipToPlayer(${1:Player* player}, ${2:BOOL* p1})${0}"
      ],
      "description": "Enables ghosting between specific players. Name is between `_SET_RELATIONSHIP_GROUP_DONT_AFFECT_WANTED_LEVEL` and `SET_ROADS_BACK_TO_ORIGINAL`."
  },
  "3308": {
      "prefix": "SetStoreEnabled",
      "body": [
          "SetStoreEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nAccess to the store for shark cards etc...  \n```"
  },
  "3309": {
      "prefix": "ShutdownAndLaunchSinglePlayerGame",
      "body": [
          "ShutdownAndLaunchSinglePlayerGame()${0}"
      ],
      "description": "```\nStarts a new singleplayer game (at the prologue).  \n```"
  },
  "3310": {
      "prefix": "ShutdownAndLoadMostRecentSave",
      "body": [
          "ShutdownAndLoadMostRecentSave()${0}"
      ],
      "description": "Disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.\n\nIf you're already in SP then it'll re-load singleplayer.\n\nYou might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.\n\nSomewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game."
  },
  "3311": {
      "prefix": "TextureDownloadGetName",
      "body": [
          "TextureDownloadGetName(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3312": {
      "prefix": "TextureDownloadHasFailed",
      "body": [
          "TextureDownloadHasFailed(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3313": {
      "prefix": "TextureDownloadRequest",
      "body": [
          "TextureDownloadRequest(${1:int* PlayerHandle}, ${2:char* FilePath}, ${3:char* Name}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "3314": {
      "prefix": "TextureDownloadRelease",
      "body": [
          "TextureDownloadRelease(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3315": {
      "prefix": "TitleTextureDownloadRequest",
      "body": [
          "TitleTextureDownloadRequest(${1:char* FilePath}, ${2:char* Name}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3316": {
      "prefix": "UgcCancelQuery",
      "body": [
          "UgcCancelQuery()${0}"
      ],
      "description": ""
  },
  "3317": {
      "prefix": "TriggerScriptCrcCheckOnPlayer",
      "body": [
          "TriggerScriptCrcCheckOnPlayer(${1:Player* player}, ${2:int* p1}, ${3:Hash* scriptHash})${0}"
      ],
      "description": "```\np1 = 6\n```"
  },
  "3318": {
      "prefix": "UgcClearCreateResult",
      "body": [
          "UgcClearCreateResult()${0}"
      ],
      "description": ""
  },
  "3319": {
      "prefix": "UgcClearOfflineQuery",
      "body": [
          "UgcClearOfflineQuery()${0}"
      ],
      "description": ""
  },
  "3320": {
      "prefix": "UgcClearModifyResult",
      "body": [
          "UgcClearModifyResult()${0}"
      ],
      "description": ""
  },
  "3321": {
      "prefix": "UgcCopyContent",
      "body": [
          "UgcCopyContent(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3322": {
      "prefix": "UgcClearQueryResults",
      "body": [
          "UgcClearQueryResults()${0}"
      ],
      "description": ""
  },
  "3323": {
      "prefix": "UgcGetBookmarkedContent",
      "body": [
          "UgcGetBookmarkedContent(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3324": {
      "prefix": "UgcDidGetSucceed",
      "body": [
          "UgcDidGetSucceed()${0}"
      ],
      "description": ""
  },
  "3325": {
      "prefix": "UgcGetContentCategory",
      "body": [
          "UgcGetContentCategory(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3326": {
      "prefix": "UgcGetContentDescriptionHash",
      "body": [
          "UgcGetContentDescriptionHash(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3327": {
      "prefix": "UgcGetCachedDescription",
      "body": [
          "UgcGetCachedDescription(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3328": {
      "prefix": "UgcGetContentFileVersion",
      "body": [
          "UgcGetContentFileVersion(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3329": {
      "prefix": "UgcGetContentHasPlayerBookmarked",
      "body": [
          "UgcGetContentHasPlayerBookmarked(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3330": {
      "prefix": "UgcGetContentHash",
      "body": [
          "UgcGetContentHash()${0}"
      ],
      "description": ""
  },
  "3331": {
      "prefix": "UgcGetContentHasPlayerRecord",
      "body": [
          "UgcGetContentHasPlayerRecord(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3332": {
      "prefix": "UgcGetContentIsPublished",
      "body": [
          "UgcGetContentIsPublished(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3333": {
      "prefix": "UgcGetContentId",
      "body": [
          "UgcGetContentId(${1:int* p0})${0}"
      ],
      "description": "```\nReturn the mission id of a job.\n```"
  },
  "3334": {
      "prefix": "UgcGetContentLanguage",
      "body": [
          "UgcGetContentLanguage(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3335": {
      "prefix": "UgcGetContentIsVerified",
      "body": [
          "UgcGetContentIsVerified(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3336": {
      "prefix": "UgcGetContentName",
      "body": [
          "UgcGetContentName(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3337": {
      "prefix": "UgcGetContentNum",
      "body": [
          "UgcGetContentNum()${0}"
      ],
      "description": ""
  },
  "3338": {
      "prefix": "UgcGetContentRating",
      "body": [
          "UgcGetContentRating(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3339": {
      "prefix": "UgcGetContentPath",
      "body": [
          "UgcGetContentPath(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "3340": {
      "prefix": "UgcGetContentRatingNegativeCount",
      "body": [
          "UgcGetContentRatingNegativeCount(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3341": {
      "prefix": "UgcGetContentTotal",
      "body": [
          "UgcGetContentTotal()${0}"
      ],
      "description": ""
  },
  "3342": {
      "prefix": "UgcGetContentRatingCount",
      "body": [
          "UgcGetContentRatingCount(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3343": {
      "prefix": "UgcGetContentRatingPositiveCount",
      "body": [
          "UgcGetContentRatingPositiveCount(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3344": {
      "prefix": "UgcGetContentUserId",
      "body": [
          "UgcGetContentUserId(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3345": {
      "prefix": "UgcGetContentUserName",
      "body": [
          "UgcGetContentUserName(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3346": {
      "prefix": "UgcGetContentUpdatedDate",
      "body": [
          "UgcGetContentUpdatedDate(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3347": {
      "prefix": "UgcGetCreateResult",
      "body": [
          "UgcGetCreateResult()${0}"
      ],
      "description": ""
  },
  "3348": {
      "prefix": "UgcGetCreateContentId",
      "body": [
          "UgcGetCreateContentId()${0}"
      ],
      "description": ""
  },
  "3349": {
      "prefix": "UgcGetCreatorNum",
      "body": [
          "UgcGetCreatorNum()${0}"
      ],
      "description": ""
  },
  "3350": {
      "prefix": "UgcGetFriendContent",
      "body": [
          "UgcGetFriendContent(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3351": {
      "prefix": "UgcGetCrewContent",
      "body": [
          "UgcGetCrewContent(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "3352": {
      "prefix": "UgcGetModifyResult",
      "body": [
          "UgcGetModifyResult()${0}"
      ],
      "description": ""
  },
  "3353": {
      "prefix": "UgcGetQueryResult",
      "body": [
          "UgcGetQueryResult()${0}"
      ],
      "description": ""
  },
  "3354": {
      "prefix": "UgcGetGetByCategory",
      "body": [
          "UgcGetGetByCategory(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "3355": {
      "prefix": "UgcGetMyContent",
      "body": [
          "UgcGetMyContent(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "3356": {
      "prefix": "UgcHasCreateFinished",
      "body": [
          "UgcHasCreateFinished()${0}"
      ],
      "description": ""
  },
  "3357": {
      "prefix": "UgcHasModifyFinished",
      "body": [
          "UgcHasModifyFinished()${0}"
      ],
      "description": ""
  },
  "3358": {
      "prefix": "UgcPoliciesMakePrivate",
      "body": [
          "UgcPoliciesMakePrivate(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3359": {
      "prefix": "UgcGetRootContentId",
      "body": [
          "UgcGetRootContentId(${1:int* p0})${0}"
      ],
      "description": "```\nReturn the root content id of a job.\n```"
  },
  "3360": {
      "prefix": "UgcPublish",
      "body": [
          "UgcPublish(${1:char* contentId}, ${2:char* baseContentId}, ${3:char* contentTypeName})${0}"
      ],
      "description": ""
  },
  "3361": {
      "prefix": "UgcHasGetFinished",
      "body": [
          "UgcHasGetFinished()${0}"
      ],
      "description": ""
  },
  "3362": {
      "prefix": "UgcQueryMyContent",
      "body": [
          "UgcQueryMyContent(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "3363": {
      "prefix": "UgcIsGetting",
      "body": [
          "UgcIsGetting()${0}"
      ],
      "description": ""
  },
  "3364": {
      "prefix": "UgcRequestCachedDescription",
      "body": [
          "UgcRequestCachedDescription(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "3365": {
      "prefix": "UgcIsLanguageSupported",
      "body": [
          "UgcIsLanguageSupported(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3366": {
      "prefix": "UgcQueryByContentId",
      "body": [
          "UgcQueryByContentId(${1:char* contentId}, ${2:BOOL* latestVersion}, ${3:char* contentTypeName})${0}"
      ],
      "description": ""
  },
  "3367": {
      "prefix": "UgcQueryByContentIds",
      "body": [
          "UgcQueryByContentIds(${1:Any* data}, ${2:int* count}, ${3:BOOL* latestVersion}, ${4:char* contentTypeName})${0}"
      ],
      "description": ""
  },
  "3368": {
      "prefix": "UgcRequestContentDataFromIndex",
      "body": [
          "UgcRequestContentDataFromIndex(${1:int* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "3369": {
      "prefix": "UgcQueryRecentlyCreatedContent",
      "body": [
          "UgcQueryRecentlyCreatedContent(${1:int* offset}, ${2:int* count}, ${3:char* contentTypeName}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "3370": {
      "prefix": "UgcRequestContentDataFromParams",
      "body": [
          "UgcRequestContentDataFromParams(${1:char* contentTypeName}, ${2:char* contentId}, ${3:int* p2}, ${4:int* p3}, ${5:int* p4})${0}"
      ],
      "description": ""
  },
  "3371": {
      "prefix": "UgcSetDeleted",
      "body": [
          "UgcSetDeleted(${1:Any* p0}, ${2:BOOL* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "3372": {
      "prefix": "UgcSetBookmarked",
      "body": [
          "UgcSetBookmarked(${1:char* contentId}, ${2:BOOL* bookmarked}, ${3:char* contentTypeName})${0}"
      ],
      "description": ""
  },
  "3373": {
      "prefix": "UgcSetQueryDataFromOffline",
      "body": [
          "UgcSetQueryDataFromOffline(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3374": {
      "prefix": "UgcTextureDownloadRequest",
      "body": [
          "UgcTextureDownloadRequest(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "3375": {
      "prefix": "UsePlayerColourInsteadOfTeamColour",
      "body": [
          "UsePlayerColourInsteadOfTeamColour(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3376": {
      "prefix": "VehToNet",
      "body": [
          "VehToNet(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\ncalls from vehicle to net.  \n```"
  },
  "3377": {
      "prefix": "AttachPortablePickupToPed",
      "body": [
          "AttachPortablePickupToPed(${1:Object* pickupObject}, ${2:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3378": {
      "prefix": "AddDoorToSystem",
      "body": [
          "AddDoorToSystem(${1:Hash* doorHash}, ${2:Hash* modelHash}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:BOOL* p5}, ${7:BOOL* scriptDoor}, ${8:BOOL* isLocal})${0}"
      ],
      "description": "p5 only set to true in single player native scripts. Door hashes normally look like `PROP_[int]_DOOR_[int]` for interior doors and `PROP_BUILDING_[int]_DOOR_[int]` exterior doors but you can just make up your own hash if you want.\n\nIf scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a \"Persists w/o netobj\" state.\n\nA simple \"localized\" door-system (with hundreds/thousands of doors) can be created by setting p5, p6, and p7 to false and using EventHandlers to synchronize the states to: [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53), [DOOR_SYSTEM_SET_OPEN_RATIO](#\\_0xB6E6FBA95C7324AC), [DOOR_SYSTEM_SET_HOLD_OPEN](#\\_0xD9B71952F78A2640), etc."
  },
  "3379": {
      "prefix": "AreEntitiesEntirelyInsideGarage",
      "body": [
          "AreEntitiesEntirelyInsideGarage(${1:Hash* garageHash}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "3380": {
      "prefix": "ClearGarageArea",
      "body": [
          "ClearGarageArea(${1:Hash* garageHash}, ${2:BOOL* isNetwork})${0}"
      ],
      "description": ""
  },
  "3381": {
      "prefix": "CreateAmbientPickup",
      "body": [
          "CreateAmbientPickup(${1:Hash* pickupHash}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:int* flags}, ${6:int* value}, ${7:Hash* modelHash}, ${8:BOOL* returnHandle}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nUsed for doing money drop  \nPickup hashes: pastebin.com/8EuSv2r1  \n```"
  },
  "3382": {
      "prefix": "BreakObjectFragmentChild",
      "body": [
          "BreakObjectFragmentChild(${1:Object* p0}, ${2:Any* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3383": {
      "prefix": "ClearObjectsInsideGarage",
      "body": [
          "ClearObjectsInsideGarage(${1:Hash* garageHash}, ${2:BOOL* vehicles}, ${3:BOOL* peds}, ${4:BOOL* objects}, ${5:BOOL* isNetwork})${0}"
      ],
      "description": ""
  },
  "3384": {
      "prefix": "CreateNonNetworkedAmbientPickup",
      "body": [
          "CreateNonNetworkedAmbientPickup(${1:Any* pickupHash}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:int* flags}, ${6:int* value}, ${7:Any* modelHash}, ${8:BOOL* p7}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "3385": {
      "prefix": "CreateNonNetworkedPortablePickup",
      "body": [
          "CreateNonNetworkedPortablePickup(${1:Hash* pickupHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* placeOnGround}, ${6:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "3386": {
      "prefix": "CreateMoneyPickups",
      "body": [
          "CreateMoneyPickups(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* value}, ${5:int* amount}, ${6:Hash* model})${0}"
      ],
      "description": "```\nSpawns one or more money pickups.  \nx: The X-component of the world position to spawn the money pickups at.  \ny: The Y-component of the world position to spawn the money pickups at.  \nz: The Z-component of the world position to spawn the money pickups at.  \nvalue: The combined value of the pickups (in dollars).  \namount: The number of pickups to spawn.  \nmodel: The model to use, or 0 for default money model.  \nExample:  \nCREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);  \nSpawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).  \n==============================================  \nMax is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000  \n```"
  },
  "3387": {
      "prefix": "CreateObject",
      "body": [
          "CreateObject(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* isNetwork}, ${6:BOOL* netMissionEntity}, ${7:BOOL* doorFlag})${0}"
      ],
      "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL)."
  },
  "3388": {
      "prefix": "CreatePickup",
      "body": [
          "CreatePickup(${1:Hash* pickupHash}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:int* p4}, ${6:int* value}, ${7:BOOL* p6}, ${8:Hash* modelHash})${0}"
      ],
      "description": "```\nPickup hashes: pastebin.com/8EuSv2r1  \n```"
  },
  "3389": {
      "prefix": "CreateObjectNoOffset",
      "body": [
          "CreateObjectNoOffset(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* isNetwork}, ${6:BOOL* netMissionEntity}, ${7:BOOL* doorFlag})${0}"
      ],
      "description": "Creates an object (prop) with the specified model centered at the specified position.\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL)."
  },
  "3390": {
      "prefix": "CreatePickupRotate",
      "body": [
          "CreatePickupRotate(${1:Hash* pickupHash}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ}, ${5:float* rotX}, ${6:float* rotY}, ${7:float* rotZ}, ${8:int* flag}, ${9:int* amount}, ${10:Any* p9}, ${11:BOOL* p10}, ${12:Hash* modelHash})${0}"
      ],
      "description": "```\nPickup hashes: pastebin.com/8EuSv2r1  \nflags:  \n8 (1 << 3): place on ground  \n512 (1 << 9): spin around  \n```"
  },
  "3391": {
      "prefix": "DeleteObject",
      "body": [
          "DeleteObject(${1:Object* object})${0}"
      ],
      "description": "```\nDeletes the specified object, then sets the handle pointed to by the pointer to NULL.\n```"
  },
  "3392": {
      "prefix": "CreatePortablePickup",
      "body": [
          "CreatePortablePickup(${1:Hash* pickupHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* placeOnGround}, ${6:Hash* modelHash})${0}"
      ],
      "description": "```\nPickup hashes: pastebin.com/8EuSv2r1\n```"
  },
  "3393": {
      "prefix": "DoesObjectOfTypeExistAtCoords",
      "body": [
          "DoesObjectOfTypeExistAtCoords(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* hash}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\np5 is usually 0.  \n```"
  },
  "3394": {
      "prefix": "DoesPickupExist",
      "body": [
          "DoesPickupExist(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "3395": {
      "prefix": "DetachPortablePickupFromPed",
      "body": [
          "DetachPortablePickupFromPed(${1:Object* pickupObject})${0}"
      ],
      "description": ""
  },
  "3396": {
      "prefix": "DoesPickupObjectExist",
      "body": [
          "DoesPickupObjectExist(${1:Object* pickupObject})${0}"
      ],
      "description": ""
  },
  "3397": {
      "prefix": "DoesPickupOfTypeExistInArea",
      "body": [
          "DoesPickupOfTypeExistInArea(${1:Hash* pickupHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius})${0}"
      ],
      "description": "```\nPickup hashes: pastebin.com/8EuSv2r1  \n```"
  },
  "3398": {
      "prefix": "DoesRayfireMapObjectExist",
      "body": [
          "DoesRayfireMapObjectExist(${1:Object* object})${0}"
      ],
      "description": "```\nReturns true if a destructible object with this handle exists, false otherwise.  \n```"
  },
  "3399": {
      "prefix": "DoorSystemFindExistingDoor",
      "body": [
          "DoorSystemFindExistingDoor(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Hash* modelHash}, ${5:Hash* doorOutPointer})${0}"
      ],
      "description": "Search radius: 0.5"
  },
  "3400": {
      "prefix": "DoorControl",
      "body": [
          "DoorControl(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* locked}, ${6:float* xRotMult}, ${7:float* yRotMult}, ${8:float* zRotMult})${0}"
      ],
      "description": "Hardcoded not to work in multiplayer environments.\nNative name between `SET_LOCAL_PLAYER_VISIBLE_LOCALLY` & `SET_MAX_WANTED_LEVEL`.\n\n```\nOBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door unlocked\nOBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door locked\n```"
  },
  "3401": {
      "prefix": "DoorSystemGetDoorPendingState",
      "body": [
          "DoorSystemGetDoorPendingState(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3402": {
      "prefix": "DoorSystemGetAutomaticDistance",
      "body": [
          "DoorSystemGetAutomaticDistance(${1:Hash* doorHash})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "3403": {
      "prefix": "DoorSystemGetDoorState",
      "body": [
          "DoorSystemGetDoorState(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3404": {
      "prefix": "DoorSystemGetIsPhysicsLoaded",
      "body": [
          "DoorSystemGetIsPhysicsLoaded(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3405": {
      "prefix": "DoorSystemSetAutomaticDistance",
      "body": [
          "DoorSystemSetAutomaticDistance(${1:Hash* doorHash}, ${2:float* distance}, ${3:BOOL* requestDoor}, ${4:BOOL* forceUpdate})${0}"
      ],
      "description": ""
  },
  "3406": {
      "prefix": "DoorSystemGetOpenRatio",
      "body": [
          "DoorSystemGetOpenRatio(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3407": {
      "prefix": "DoorSystemSetAutomaticRate",
      "body": [
          "DoorSystemSetAutomaticRate(${1:Hash* doorHash}, ${2:float* rate}, ${3:BOOL* requestDoor}, ${4:BOOL* forceUpdate})${0}"
      ],
      "description": "Includes networking check: ownership vs. or the door itself **isn't** networked."
  },
  "3408": {
      "prefix": "DoorSystemSetHoldOpen",
      "body": [
          "DoorSystemSetHoldOpen(${1:Hash* doorHash}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Includes networking check: ownership vs. or the door itself **isn't** networked."
  },
  "3409": {
      "prefix": "DoorSystemSetDoorState",
      "body": [
          "DoorSystemSetDoorState(${1:Hash* doorHash}, ${2:int* state}, ${3:BOOL* requestDoor}, ${4:BOOL* forceUpdate})${0}"
      ],
      "description": "Lockstates not applied and CNetObjDoor's not created until [DOOR_SYSTEM_GET_IS_PHYSICS_LOADED](#\\_0xDF97CDD4FC08FD34) returns true.\n\n### Door lock states: (v323)\n\n*   **0**: UNLOCKED\n*   **1**: LOCKED\n*   **2**: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA\n*   **3**: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME\n*   **4**: DOORSTATE_FORCE_LOCKED_THIS_FRAME\n*   **5**: DOORSTATE_FORCE_OPEN_THIS_FRAME\n*   **6**: DOORSTATE_FORCE_CLOSED_THIS_FRAME"
  },
  "3410": {
      "prefix": "DoorSystemSetOpenRatio",
      "body": [
          "DoorSystemSetOpenRatio(${1:Hash* doorHash}, ${2:float* ajar}, ${3:BOOL* requestDoor}, ${4:BOOL* forceUpdate})${0}"
      ],
      "description": "```\nSets the ajar angle of a door.\nRanges from -1.0 to 1.0, and 0.0 is closed / default.\n```"
  },
  "3411": {
      "prefix": "EnableSavingInGarage",
      "body": [
          "EnableSavingInGarage(${1:Hash* garageHash}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3412": {
      "prefix": "GetCoordsAndRotationOfClosestObjectOfType",
      "body": [
          "GetCoordsAndRotationOfClosestObjectOfType(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* modelHash}, ${6:Vector3* outPosition}, ${7:Vector3* outRotation}, ${8:int* rotationOrder})${0}"
      ],
      "description": ""
  },
  "3413": {
      "prefix": "GetIsArenaPropPhysicsDisabled",
      "body": [
          "GetIsArenaPropPhysicsDisabled(${1:Object* entity}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "3414": {
      "prefix": "DoorSystemSetSpringRemoved",
      "body": [
          "DoorSystemSetSpringRemoved(${1:Hash* doorHash}, ${2:BOOL* removed}, ${3:BOOL* requestDoor}, ${4:BOOL* forceUpdate})${0}"
      ],
      "description": "Includes networking check: ownership vs. or the door itself **isn't** networked."
  },
  "3415": {
      "prefix": "GetObjectOffsetFromCoords",
      "body": [
          "GetObjectOffsetFromCoords(${1:float* xPos}, ${2:float* yPos}, ${3:float* zPos}, ${4:float* heading}, ${5:float* xOffset}, ${6:float* yOffset}, ${7:float* zOffset})${0}"
      ],
      "description": ""
  },
  "3416": {
      "prefix": "ForcePickupRegenerate",
      "body": [
          "ForcePickupRegenerate(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3417": {
      "prefix": "GetPickupCoords",
      "body": [
          "GetPickupCoords(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "3418": {
      "prefix": "GetClosestObjectOfType",
      "body": [
          "GetClosestObjectOfType(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* modelHash}, ${6:BOOL* isMission}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\nHas 8 params in the latest patches.  \nisMission - if true doesn't return mission objects  \n```"
  },
  "3419": {
      "prefix": "GetPickupGenerationRangeMultiplier",
      "body": [
          "GetPickupGenerationRangeMultiplier()${0}"
      ],
      "description": ""
  },
  "3420": {
      "prefix": "GetObjectFragmentDamageHealth",
      "body": [
          "GetObjectFragmentDamageHealth(${1:Any* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3421": {
      "prefix": "GetPickupHashFromWeapon",
      "body": [
          "GetPickupHashFromWeapon(${1:Hash* weapon})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "3422": {
      "prefix": "GetObjectTextureVariation",
      "body": [
          "GetObjectTextureVariation(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3423": {
      "prefix": "GetRayfireMapObject",
      "body": [
          "GetRayfireMapObject(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:char* name})${0}"
      ],
      "description": "```\nExample:\nOBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, \"des_tvsmash\");\n```"
  },
  "3424": {
      "prefix": "GetPickupHash",
      "body": [
          "GetPickupHash(${1:Hash* pickupHash})${0}"
      ],
      "description": "```\nreturns pickup hash.\n```"
  },
  "3425": {
      "prefix": "GetPickupObject",
      "body": [
          "GetPickupObject(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "3426": {
      "prefix": "GetRayfireMapObjectAnimPhase",
      "body": [
          "GetRayfireMapObjectAnimPhase(${1:Object* object})${0}"
      ],
      "description": "```\n`object`: The des-object handle to get the animation progress from.\nReturn value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.\n```"
  },
  "3427": {
      "prefix": "GetStateOfClosestDoorOfType",
      "body": [
          "GetStateOfClosestDoorOfType(${1:Hash* type}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* locked}, ${6:float* heading})${0}"
      ],
      "description": "```\nlocked is 0 if no door is found  \nlocked is 0 if door is unlocked  \nlocked is 1 if door is found and unlocked.  \n-------------  \nthe locked bool is either 0(unlocked)(false) or 1(locked)(true)  \n```"
  },
  "3428": {
      "prefix": "GetSafePickupCoords",
      "body": [
          "GetSafePickupCoords(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "3429": {
      "prefix": "GetWeaponTypeFromPickupType",
      "body": [
          "GetWeaponTypeFromPickupType(${1:Hash* pickupHash})${0}"
      ],
      "description": ""
  },
  "3430": {
      "prefix": "HasClosestObjectOfTypeBeenBroken",
      "body": [
          "HasClosestObjectOfTypeBeenBroken(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Hash* modelHash}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "3431": {
      "prefix": "GetStateOfRayfireMapObject",
      "body": [
          "GetStateOfRayfireMapObject(${1:Object* object})${0}"
      ],
      "description": "See [`SET_STATE_OF_RAYFIRE_MAP_OBJECT`](#\\_0x5C29F698D404C5E1) to see the different states\n\nGet a destructible object's state. Substract 1 to get the real state. For example, if the object just spawned (state 2), the native will return 3."
  },
  "3432": {
      "prefix": "HasClosestObjectOfTypeBeenCompletelyDestroyed",
      "body": [
          "HasClosestObjectOfTypeBeenCompletelyDestroyed(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* modelHash}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "3433": {
      "prefix": "HasObjectBeenBroken",
      "body": [
          "HasObjectBeenBroken(${1:Object* object})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "3434": {
      "prefix": "HasPickupBeenCollected",
      "body": [
          "HasPickupBeenCollected(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "3435": {
      "prefix": "IsAnyEntityEntirelyInsideGarage",
      "body": [
          "IsAnyEntityEntirelyInsideGarage(${1:Hash* garageHash}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "3436": {
      "prefix": "HidePickup",
      "body": [
          "HidePickup(${1:Pickup* pickup}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3437": {
      "prefix": "IsDoorClosed",
      "body": [
          "IsDoorClosed(${1:Hash* doorHash})${0}"
      ],
      "description": ""
  },
  "3438": {
      "prefix": "IsAnyObjectNearPoint",
      "body": [
          "IsAnyObjectNearPoint(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* range}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "3439": {
      "prefix": "IsDoorRegisteredWithSystem",
      "body": [
          "IsDoorRegisteredWithSystem(${1:Hash* doorHash})${0}"
      ],
      "description": "```\nif (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))\n{\n    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);\n}\n```"
  },
  "3440": {
      "prefix": "IsGarageEmpty",
      "body": [
          "IsGarageEmpty(${1:Hash* garageHash}, ${2:BOOL* p1}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "3441": {
      "prefix": "IsObjectAPortablePickup",
      "body": [
          "IsObjectAPortablePickup(${1:Object* object})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "3442": {
      "prefix": "IsObjectAPickup",
      "body": [
          "IsObjectAPickup(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3443": {
      "prefix": "IsObjectEntirelyInsideGarage",
      "body": [
          "IsObjectEntirelyInsideGarage(${1:Hash* garageHash}, ${2:Entity* entity}, ${3:float* p2}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "3444": {
      "prefix": "IsObjectNearPoint",
      "body": [
          "IsObjectNearPoint(${1:Hash* objectHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* range})${0}"
      ],
      "description": ""
  },
  "3445": {
      "prefix": "IsObjectPartiallyInsideGarage",
      "body": [
          "IsObjectPartiallyInsideGarage(${1:Hash* garageHash}, ${2:Entity* entity}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "3446": {
      "prefix": "IsObjectVisible",
      "body": [
          "IsObjectVisible(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3447": {
      "prefix": "IsPickupWeaponObjectValid",
      "body": [
          "IsPickupWeaponObjectValid(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3448": {
      "prefix": "IsPlayerEntirelyInsideGarage",
      "body": [
          "IsPlayerEntirelyInsideGarage(${1:Hash* garageHash}, ${2:Player* player}, ${3:float* p2}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "3449": {
      "prefix": "IsPlayerPartiallyInsideGarage",
      "body": [
          "IsPlayerPartiallyInsideGarage(${1:Hash* garageHash}, ${2:Player* player}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "3450": {
      "prefix": "MarkObjectForDeletion",
      "body": [
          "MarkObjectForDeletion(${1:Object* object})${0}"
      ],
      "description": "```\nis this like setting is as no longer needed?  \n```"
  },
  "3451": {
      "prefix": "IsPointInAngledArea",
      "body": [
          "IsPointInAngledArea(${1:float* xPos}, ${2:float* yPos}, ${3:float* zPos}, ${4:float* x1}, ${5:float* y1}, ${6:float* z1}, ${7:float* x2}, ${8:float* y2}, ${9:float* z2}, ${10:float* width}, ${11:BOOL* p10}, ${12:BOOL* includez})${0}"
      ],
      "description": "An **angled area** is an X-Z oriented rectangle with three parameters:\n\n1.  **origin**: the mid-point along a base edge of the rectangle;\n2.  **extent**: the mid-point of opposite base edge on the other Z;\n3.  **width**: the length of the base edge; (named derived from logging strings `CNetworkRoadNodeWorldStateData`).\n\nThe oriented rectangle can then be derived from the direction of the two points (`norm(origin - extent)`), its orthonormal, and the width, e.g:\n\n1.  [golf_mp](https://i.imgur.com/JhsQAK9.png)\n2.  [am_taxi](https://i.imgur.com/TJWCZaT.jpg)"
  },
  "3452": {
      "prefix": "PlaceObjectOnGroundProperly",
      "body": [
          "PlaceObjectOnGroundProperly(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3453": {
      "prefix": "PreventCollectionOfPortablePickup",
      "body": [
          "PreventCollectionOfPortablePickup(${1:Object* object}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3454": {
      "prefix": "RemoveAllPickupsOfType",
      "body": [
          "RemoveAllPickupsOfType(${1:Hash* pickupHash})${0}"
      ],
      "description": "```\nPickup hashes: pastebin.com/8EuSv2r1  \n```"
  },
  "3455": {
      "prefix": "PlaceObjectOnGroundProperly2",
      "body": [
          "PlaceObjectOnGroundProperly2(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3456": {
      "prefix": "RemoveDoorFromSystem",
      "body": [
          "RemoveDoorFromSystem(${1:Hash* doorHash})${0}"
      ],
      "description": "CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).\n\nOnly its NetObj removed and flag `*(v2 + 192) |= 8u` (1604 retail) toggled."
  },
  "3457": {
      "prefix": "RemoveObjectHighDetailModel",
      "body": [
          "RemoveObjectHighDetailModel(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3458": {
      "prefix": "RemovePickup",
      "body": [
          "RemovePickup(${1:Pickup* pickup})${0}"
      ],
      "description": ""
  },
  "3459": {
      "prefix": "RenderFakePickupGlow",
      "body": [
          "RenderFakePickupGlow(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* colorIndex})${0}"
      ],
      "description": "```\ndraws circular marker at pos\n-1 = none\n0 = red\n1 = green\n2 = blue\n3 = green larger\n4 = nothing\n5 = green small\n```"
  },
  "3460": {
      "prefix": "SetCreateWeaponObjectLightSource",
      "body": [
          "SetCreateWeaponObjectLightSource(${1:Object* object}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nRequires a component_at_*_flsh to be attached to the weapon object\n```"
  },
  "3461": {
      "prefix": "SetActivateObjectPhysicsAsSoonAsItIsUnfrozen",
      "body": [
          "SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(${1:Object* object}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3462": {
      "prefix": "SetEnableArenaPropPhysicsOnPed",
      "body": [
          "SetEnableArenaPropPhysicsOnPed(${1:Object* entity}, ${2:BOOL* toggle}, ${3:int* p2}, ${4:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "3463": {
      "prefix": "SetForceObjectThisFrame",
      "body": [
          "SetForceObjectThisFrame(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "3464": {
      "prefix": "SetEnableArenaPropPhysics",
      "body": [
          "SetEnableArenaPropPhysics(${1:Object* entity}, ${2:BOOL* toggle}, ${3:int* p2})${0}"
      ],
      "description": "```\nActivate the physics to: \"xs_prop_arena_{flipper,wall,bollard,turntable,pit}\"\n```\n\n```\nNativeDB Introduced: v1604\n```"
  },
  "3465": {
      "prefix": "SetLocalPlayerCanUsePickupsWithThisModel",
      "body": [
          "SetLocalPlayerCanUsePickupsWithThisModel(${1:Hash* modelHash}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nMaximum amount of pickup models that can be disallowed is 30.\nSET_LOCAL_PLAYER_*\n```"
  },
  "3466": {
      "prefix": "SetLocalPlayerCanCollectPortablePickups",
      "body": [
          "SetLocalPlayerCanCollectPortablePickups(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3467": {
      "prefix": "SetObjectAllowLowLodBuoyancy",
      "body": [
          "SetObjectAllowLowLodBuoyancy(${1:Object* object}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nOverrides the climbing/blocking flags of the object, used in the native scripts mostly for \"prop_dock_bouy_*\"\n```"
  },
  "3468": {
      "prefix": "SetMaxNumPortablePickupsCarriedByPlayer",
      "body": [
          "SetMaxNumPortablePickupsCarriedByPlayer(${1:Hash* modelHash}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "3469": {
      "prefix": "SetObjectLightColor",
      "body": [
          "SetObjectLightColor(${1:Object* object}, ${2:BOOL* p1}, ${3:int* r}, ${4:int* g}, ${5:int* b})${0}"
      ],
      "description": "Sets color of embedded light source.\nOnly appears in am_mp_nightclub.c for the nightclub dancefloor.\n\nNot sure what p1 does, seems to only ever be '1' in scripts.\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "3470": {
      "prefix": "SetObjectPhysicsParams",
      "body": [
          "SetObjectPhysicsParams(${1:Object* object}, ${2:float* mass}, ${3:float* gravityFactor}, ${4:float* linearC}, ${5:float* linearV}, ${6:float* linearV2}, ${7:float* angularC}, ${8:float* angularV}, ${9:float* angularV2}, ${10:float* p9}, ${11:float* maxAngSpeed}, ${12:float* buoyancyFactor})${0}"
      ],
      "description": "```\nrage::phArchetypeDamp\np9: Some phBoundGeometry margin value, limited to (0.0, 0.1) exclusive.\n```"
  },
  "3471": {
      "prefix": "SetObjectSomething",
      "body": [
          "SetObjectSomething(${1:Object* object}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3472": {
      "prefix": "SetObjectStuntPropDuration",
      "body": [
          "SetObjectStuntPropDuration(${1:Object* object}, ${2:float* duration})${0}"
      ],
      "description": ""
  },
  "3473": {
      "prefix": "SetObjectTargettable",
      "body": [
          "SetObjectTargettable(${1:Object* object}, ${2:BOOL* targettable})${0}"
      ],
      "description": ""
  },
  "3474": {
      "prefix": "SetObjectStuntPropSpeedup",
      "body": [
          "SetObjectStuntPropSpeedup(${1:Object* object}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3475": {
      "prefix": "SetObjectTextureVariation",
      "body": [
          "SetObjectTextureVariation(${1:Object* object}, ${2:int* textureVariation})${0}"
      ],
      "description": "```\nenum ObjectPaintVariants  \n{  \n\tPacific = 0,  \n\tAzure = 1,  \n\tNautical = 2,  \n\tContinental = 3,  \n\tBattleship = 4,  \n\tIntrepid = 5,  \n\tUniform = 6,  \n\tClassico = 7,  \n\tMediterranean = 8,  \n\tCommand = 9,  \n\tMariner = 10,  \n\tRuby = 11,  \n\tVintage = 12,  \n\tPristine = 13,  \n\tMerchant = 14,  \n\tVoyager = 15  \n};  \n```"
  },
  "3476": {
      "prefix": "SetPickupGenerationRangeMultiplier",
      "body": [
          "SetPickupGenerationRangeMultiplier(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "3477": {
      "prefix": "SetPickupHiddenWhenUncollectable",
      "body": [
          "SetPickupHiddenWhenUncollectable(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3478": {
      "prefix": "SetPickupRegenerationTime",
      "body": [
          "SetPickupRegenerationTime(${1:Pickup* pickup}, ${2:int* duration})${0}"
      ],
      "description": ""
  },
  "3479": {
      "prefix": "SetPickupUncollectable",
      "body": [
          "SetPickupUncollectable(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3480": {
      "prefix": "SetStateOfClosestDoorOfType",
      "body": [
          "SetStateOfClosestDoorOfType(${1:Hash* type}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* locked}, ${6:float* heading}, ${7:BOOL* p6})${0}"
      ],
      "description": "```\nHardcoded to not work in multiplayer.  \nUsed to lock/unlock doors to interior areas of the game.  \n(Possible) Door Types:  \npastebin.com/9S2m3qA4  \nHeading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.  \nLocked means that the heading is locked.    \np6 is always 0.   \n225 door types, model names and coords found in stripclub.c4:  \npastebin.com/gywnbzsH  \nget door info: pastebin.com/i14rbekD  \n```"
  },
  "3481": {
      "prefix": "SetStateOfRayfireMapObject",
      "body": [
          "SetStateOfRayfireMapObject(${1:Object* object}, ${2:int* state})${0}"
      ],
      "description": "```\nDefines the state of a destructible object.\nUse the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.\nState 2 == object just spawned\nState 4 == Beginning of the animation\nState 6 == Start animation\nState 9 == End of the animation\n```"
  },
  "3482": {
      "prefix": "SetUnkGlobalBoolRelatedToDamage",
      "body": [
          "SetUnkGlobalBoolRelatedToDamage(${1:BOOL* value})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "3483": {
      "prefix": "SetTeamPickupObject",
      "body": [
          "SetTeamPickupObject(${1:Object* object}, ${2:Any* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3484": {
      "prefix": "SetTextureVariationOfClosestObjectOfType",
      "body": [
          "SetTextureVariationOfClosestObjectOfType(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* modelHash}, ${6:int* textureVariation})${0}"
      ],
      "description": ""
  },
  "3485": {
      "prefix": "SlideObject",
      "body": [
          "SlideObject(${1:Object* object}, ${2:float* toX}, ${3:float* toY}, ${4:float* toZ}, ${5:float* speedX}, ${6:float* speedY}, ${7:float* speedZ}, ${8:BOOL* collision})${0}"
      ],
      "description": "```\nReturns true if the object has finished moving.  \nIf false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.  \nSee also: https://gtagmodding.com/opcode-database/opcode/034E/\nHas to be looped until it returns true.   \n```"
  },
  "3486": {
      "prefix": "ToggleUsePickupsForPlayer",
      "body": [
          "ToggleUsePickupsForPlayer(${1:Player* player}, ${2:Hash* pickupHash}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```\nDisabling/enabling a player from getting pickups. From the scripts:\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);\nSET_PLAYER_*\n```"
  },
  "3487": {
      "prefix": "TrackObjectVisibility",
      "body": [
          "TrackObjectVisibility(${1:Object* object})${0}"
      ],
      "description": ""
  },
  "3488": {
      "prefix": "DisableAllControlActions",
      "body": [
          "DisableAllControlActions(${1:int* padIndex})${0}"
      ],
      "description": ""
  },
  "3489": {
      "prefix": "DisableInputGroup",
      "body": [
          "DisableInputGroup(${1:int* padIndex})${0}"
      ],
      "description": ""
  },
  "3490": {
      "prefix": "DisableControlAction",
      "body": [
          "DisableControlAction(${1:int* padIndex}, ${2:int* control}, ${3:BOOL* disable})${0}"
      ],
      "description": "[Control values and meaning](https://docs.fivem.net/docs/game-references/controls/#controls)\n\nExample: `CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true)` disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame.\nControl group 1 and 0 gives the same results as 2. Same results for all players."
  },
  "3491": {
      "prefix": "EnableControlAction",
      "body": [
          "EnableControlAction(${1:int* padIndex}, ${2:int* control}, ${3:BOOL* enable})${0}"
      ],
      "description": "```\ncontrol values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Control.cs  \nand  \nhttps://docs.fivem.net/game-references/controls/\n0, 1 and 2 used in the scripts.  \nControl values from the decompiled scripts:   \n0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,  \n37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100  \n,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19  \n0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2  \n20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,  \n261,262,263,264,286,287,288,289,337,338,339,340,341,342,343  \nINPUTGROUP_MOVE  \nINPUTGROUP_LOOK  \nINPUTGROUP_WHEEL  \nINPUTGROUP_CELLPHONE_NAVIGATE  \nINPUTGROUP_CELLPHONE_NAVIGATE_UD  \nINPUTGROUP_CELLPHONE_NAVIGATE_LR  \nINPUTGROUP_FRONTEND_DPAD_ALL  \nINPUTGROUP_FRONTEND_DPAD_UD  \nINPUTGROUP_FRONTEND_DPAD_LR  \nINPUTGROUP_FRONTEND_LSTICK_ALL  \nINPUTGROUP_FRONTEND_RSTICK_ALL  \nINPUTGROUP_FRONTEND_GENERIC_UD  \nINPUTGROUP_FRONTEND_GENERIC_LR  \nINPUTGROUP_FRONTEND_GENERIC_ALL  \nINPUTGROUP_FRONTEND_BUMPERS  \nINPUTGROUP_FRONTEND_TRIGGERS  \nINPUTGROUP_FRONTEND_STICKS  \nINPUTGROUP_SCRIPT_DPAD_ALL  \nINPUTGROUP_SCRIPT_DPAD_UD  \nINPUTGROUP_SCRIPT_DPAD_LR  \nINPUTGROUP_SCRIPT_LSTICK_ALL  \nINPUTGROUP_SCRIPT_RSTICK_ALL  \nINPUTGROUP_SCRIPT_BUMPERS  \nINPUTGROUP_SCRIPT_TRIGGERS  \nINPUTGROUP_WEAPON_WHEEL_CYCLE  \nINPUTGROUP_FLY  \nINPUTGROUP_SUB  \nINPUTGROUP_VEH_MOVE_ALL  \nINPUTGROUP_CURSOR  \nINPUTGROUP_CURSOR_SCROLL  \nINPUTGROUP_SNIPER_ZOOM_SECONDARY  \nINPUTGROUP_VEH_HYDRAULICS_CONTROL  \nTook those in IDA Pro.Not sure in which order they go  \n```"
  },
  "3492": {
      "prefix": "GetControlGroupInstructionalButton",
      "body": [
          "GetControlGroupInstructionalButton(${1:int* padIndex}, ${2:int* controlGroup}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3493": {
      "prefix": "EnableAllControlActions",
      "body": [
          "EnableAllControlActions(${1:int* padIndex})${0}"
      ],
      "description": "```\npadIndex: \n0 - PLAYER_CONTROL\n1 - Unknown \n2 - FRONTEND_CONTROL\n```"
  },
  "3494": {
      "prefix": "GetControlInstructionalButton",
      "body": [
          "GetControlInstructionalButton(${1:int* padIndex}, ${2:int* control}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nformerly called _GET_CONTROL_ACTION_NAME incorrectly  \np2 appears to always be true.  \np2 is unused variable in function.  \nEG:  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/  \ngtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n```"
  },
  "3495": {
      "prefix": "GetAllowMovementWhileZoomed",
      "body": [
          "GetAllowMovementWhileZoomed()${0}"
      ],
      "description": "```\nReturns profile setting 17.\n```"
  },
  "3496": {
      "prefix": "GetControlNormal",
      "body": [
          "GetControlNormal(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3497": {
      "prefix": "GetControlUnboundNormal",
      "body": [
          "GetControlUnboundNormal(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": "```\nSeems to return values between -1 and 1 for controls like gas and steering.\n```"
  },
  "3498": {
      "prefix": "GetControlValue",
      "body": [
          "GetControlValue(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3499": {
      "prefix": "GetDisabledControlNormal",
      "body": [
          "GetDisabledControlNormal(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3500": {
      "prefix": "GetDisabledControlUnboundNormal",
      "body": [
          "GetDisabledControlUnboundNormal(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3501": {
      "prefix": "GetIsUsingAlternateDriveby",
      "body": [
          "GetIsUsingAlternateDriveby()${0}"
      ],
      "description": "```\nReturns profile setting 225.\n```"
  },
  "3502": {
      "prefix": "GetLocalPlayerAimState",
      "body": [
          "GetLocalPlayerAimState()${0}"
      ],
      "description": "Returns the local player's targeting mode. See [`SET_PLAYER_TARGETING_MODE`](#\\_0xB1906895227793F3)."
  },
  "3503": {
      "prefix": "GetLocalPlayerAimState2",
      "body": [
          "GetLocalPlayerAimState2()${0}"
      ],
      "description": "```\nSame behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.  \n```"
  },
  "3504": {
      "prefix": "GetTimeSinceLastInput",
      "body": [
          "GetTimeSinceLastInput(${1:int* padIndex})${0}"
      ],
      "description": "```\nThe number of milliseconds since last padIndex registered pressed\n```"
  },
  "3505": {
      "prefix": "IsControlEnabled",
      "body": [
          "IsControlEnabled(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3506": {
      "prefix": "IsControlJustReleased",
      "body": [
          "IsControlJustReleased(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": "Returns whether a control was newly released since the last check."
  },
  "3507": {
      "prefix": "IsControlJustPressed",
      "body": [
          "IsControlJustPressed(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": "Returns whether a control was newly pressed since the last check."
  },
  "3508": {
      "prefix": "IsControlPressed",
      "body": [
          "IsControlPressed(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": "Returns whether a control is currently pressed."
  },
  "3509": {
      "prefix": "IsControlReleased",
      "body": [
          "IsControlReleased(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": "Returns whether a control is currently *not* pressed."
  },
  "3510": {
      "prefix": "IsDisabledControlJustReleased",
      "body": [
          "IsDisabledControlJustReleased(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3511": {
      "prefix": "IsDisabledControlJustPressed",
      "body": [
          "IsDisabledControlJustPressed(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3512": {
      "prefix": "IsDisabledControlPressed",
      "body": [
          "IsDisabledControlPressed(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3513": {
      "prefix": "IsDisabledControlReleased",
      "body": [
          "IsDisabledControlReleased(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3514": {
      "prefix": "IsLookInverted",
      "body": [
          "IsLookInverted()${0}"
      ],
      "description": ""
  },
  "3515": {
      "prefix": "IsUsingKeyboard",
      "body": [
          "IsUsingKeyboard(${1:int* padIndex})${0}"
      ],
      "description": ""
  },
  "3516": {
      "prefix": "IsUsingKeyboard2",
      "body": [
          "IsUsingKeyboard2(${1:int* padIndex})${0}"
      ],
      "description": ""
  },
  "3517": {
      "prefix": "SetControlLightEffectColor",
      "body": [
          "SetControlLightEffectColor(${1:int* padIndex}, ${2:int* red}, ${3:int* green}, ${4:int* blue})${0}"
      ],
      "description": ""
  },
  "3518": {
      "prefix": "SetControlNormal",
      "body": [
          "SetControlNormal(${1:int* padIndex}, ${2:int* control}, ${3:float* amount})${0}"
      ],
      "description": "This is for simulating player input."
  },
  "3519": {
      "prefix": "ResetInputMappingScheme",
      "body": [
          "ResetInputMappingScheme()${0}"
      ],
      "description": "```\nS*\n```"
  },
  "3520": {
      "prefix": "SetInputExclusive",
      "body": [
          "SetInputExclusive(${1:int* padIndex}, ${2:int* control})${0}"
      ],
      "description": ""
  },
  "3521": {
      "prefix": "SetCursorLocation",
      "body": [
          "SetCursorLocation(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": ""
  },
  "3522": {
      "prefix": "SetPlayerpadShakesWhenControllerDisabled",
      "body": [
          "SetPlayerpadShakesWhenControllerDisabled(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3523": {
      "prefix": "SetPadShake",
      "body": [
          "SetPadShake(${1:int* padIndex}, ${2:int* duration}, ${3:int* frequency})${0}"
      ],
      "description": "```\np0 always seems to be 0  \nduration in milliseconds   \nfrequency should range from about 10 (slow vibration) to 255 (very fast)  \nexample:  \nSET_PAD_SHAKE(0, 100, 200);  \n```"
  },
  "3524": {
      "prefix": "StopPadShake",
      "body": [
          "StopPadShake(${1:int* padIndex})${0}"
      ],
      "description": ""
  },
  "3525": {
      "prefix": "SwitchToInputMappingScheme",
      "body": [
          "SwitchToInputMappingScheme(${1:char* name})${0}"
      ],
      "description": "```\nUsed in carsteal3 script with p0 = \"Carsteal4_spycar\".\nS*\n```"
  },
  "3526": {
      "prefix": "SwitchToInputMappingScheme2",
      "body": [
          "SwitchToInputMappingScheme2(${1:char* name})${0}"
      ],
      "description": "```\nSame as 0x3D42B92563939375\n\nS*\n```"
  },
  "3527": {
      "prefix": "AddNavmeshBlockingObject",
      "body": [
          "AddNavmeshBlockingObject(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:BOOL* p7}, ${9:Any* p8})${0}"
      ],
      "description": ""
  },
  "3528": {
      "prefix": "AddNavmeshRequiredRegion",
      "body": [
          "AddNavmeshRequiredRegion(${1:float* x}, ${2:float* y}, ${3:float* radius})${0}"
      ],
      "description": ""
  },
  "3529": {
      "prefix": "AreAllNavmeshRegionsLoaded",
      "body": [
          "AreAllNavmeshRegionsLoaded()${0}"
      ],
      "description": ""
  },
  "3530": {
      "prefix": "AreNodesLoadedForArea",
      "body": [
          "AreNodesLoadedForArea(${1:float* x1}, ${2:float* y1}, ${3:float* x2}, ${4:float* y2})${0}"
      ],
      "description": ""
  },
  "3531": {
      "prefix": "CalculateTravelDistanceBetweenPoints",
      "body": [
          "CalculateTravelDistanceBetweenPoints(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "Calculates the travel distance between a set of points.\nDoesn't seem to correlate with distance on gps sometimes.\n\nThis function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind."
  },
  "3532": {
      "prefix": "DisableNavmeshInArea",
      "body": [
          "DisableNavmeshInArea(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "3533": {
      "prefix": "GetClosestMajorVehicleNode",
      "body": [
          "GetClosestMajorVehicleNode(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Vector3* outPosition}, ${5:float* unknown1}, ${6:int* unknown2})${0}"
      ],
      "description": "```\nGet the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0  \n```"
  },
  "3534": {
      "prefix": "ClearGpsDisabledZoneAtIndex",
      "body": [
          "ClearGpsDisabledZoneAtIndex(${1:int* index})${0}"
      ],
      "description": "Clears a disabled GPS route area from a certain index previously set using [`SET_GPS_DISABLED_ZONE_AT_INDEX`](#\\_0xD0BC1C6FB18EE154)."
  },
  "3535": {
      "prefix": "DoesNavmeshBlockingObjectExist",
      "body": [
          "DoesNavmeshBlockingObjectExist(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3536": {
      "prefix": "GetClosestVehicleNode",
      "body": [
          "GetClosestVehicleNode(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Vector3* outPosition}, ${5:int* nodeType}, ${6:float* p5}, ${7:float* p6})${0}"
      ],
      "description": "```\nFYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.\n----------\nVector3 nodePos;\nGET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...)\np4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road.\np5, p6 are always the same:\n0x40400000 (3.0), 0\np5 can also be 100.0 and p6 can be 2.5:\nPATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5)\nKnown node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.\nThe node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.\nStarting at 2, every fourth node is under the map, always same coords.\nSame with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).\ngtaforums.com/topic/843561-pathfind-node-types\n```"
  },
  "3537": {
      "prefix": "GenerateDirectionsToCoord",
      "body": [
          "GenerateDirectionsToCoord(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:BOOL* p3}, ${5:int* direction}, ${6:float* vehicle}, ${7:float* distToNxJunction})${0}"
      ],
      "description": "```\np3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference\ndistToNxJunction seems to be the distance in metres * 10.0f\ndirection:\n0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean \"Next frame, stop whatever's being said and tell the player the direction.\"\n1 = Route is being calculated or the player is going in the wrong direction\n2 = Please Proceed the Highlighted Route\n3 = In (distToNxJunction) Turn Left\n4 = In (distToNxJunction) Turn Right\n5 = In (distToNxJunction) Keep Straight\n6 = In (distToNxJunction) Turn Sharply To The Left\n7 = In (distToNxJunction) Turn Sharply To The Right\n8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of \"right.\" Either way, this seems to be the engine saying \"I don't know the route right now.\"\nreturn value set to 0 always\n```"
  },
  "3538": {
      "prefix": "GetClosestVehicleNodeWithHeading",
      "body": [
          "GetClosestVehicleNodeWithHeading(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Vector3* outPosition}, ${5:float* outHeading}, ${6:int* nodeType}, ${7:float* p6}, ${8:int* p7})${0}"
      ],
      "description": "```\np5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.  \np5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road.  \np6 is always 3.0  \np7 is always 0.  \nKnown node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.   \nThe node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.   \nStarting at 2, every fourth node is under the map, always same coords.  \nSame with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).  \ngtaforums.com/topic/843561-pathfind-node-types  \nExample of usage, moving vehicle to closest path/road:  \nVector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);  \nVector3 closestVehicleNodeCoords;   \nfloat roadHeading;   \nPATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);   \nENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);  \nENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);  \nVEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);  \n------------------------------------------------------------------  \nC# Example (ins1de) : pastebin.com/fxtMWAHD  \n```"
  },
  "3539": {
      "prefix": "GetClosestRoad",
      "body": [
          "GetClosestRoad(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:int* p4}, ${6:Vector3* p5}, ${7:Vector3* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:float* p9}, ${11:BOOL* p10})${0}"
      ],
      "description": "```\np1 seems to be always 1.0f in the scripts  \n```"
  },
  "3540": {
      "prefix": "GetGpsBlipRouteLength",
      "body": [
          "GetGpsBlipRouteLength()${0}"
      ],
      "description": ""
  },
  "3541": {
      "prefix": "GetGpsBlipRouteFound",
      "body": [
          "GetGpsBlipRouteFound()${0}"
      ],
      "description": ""
  },
  "3542": {
      "prefix": "GetHeightmapBottomZForPosition",
      "body": [
          "GetHeightmapBottomZForPosition(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": "```\nReturns CGameWorldHeightMap's minimum Z value at specified point (grid node).\n```"
  },
  "3543": {
      "prefix": "GetHeightmapBottomZForArea",
      "body": [
          "GetHeightmapBottomZForArea(${1:float* x1}, ${2:float* y1}, ${3:float* x2}, ${4:float* y2})${0}"
      ],
      "description": "```\nReturns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.\n```"
  },
  "3544": {
      "prefix": "GetHeightmapTopZForPosition",
      "body": [
          "GetHeightmapTopZForPosition(${1:float* x}, ${2:float* y})${0}"
      ],
      "description": "```\nReturns CGameWorldHeightMap's maximum Z value at specified point (grid node).\n```"
  },
  "3545": {
      "prefix": "GetHeightmapTopZForArea",
      "body": [
          "GetHeightmapTopZForArea(${1:float* x1}, ${2:float* y1}, ${3:float* x2}, ${4:float* y2})${0}"
      ],
      "description": "```\nReturns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.\n```"
  },
  "3546": {
      "prefix": "GetNextGpsDisabledZoneIndex",
      "body": [
          "GetNextGpsDisabledZoneIndex(${1:int* index})${0}"
      ],
      "description": "Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.\n\n```\nNativeDB Removed Parameter 1: int index\n```"
  },
  "3547": {
      "prefix": "GetNthClosestVehicleNode",
      "body": [
          "GetNthClosestVehicleNode(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* nthClosest}, ${5:Vector3* outPosition}, ${6:Any* unknown1}, ${7:Any* unknown2}, ${8:Any* unknown3})${0}"
      ],
      "description": ""
  },
  "3548": {
      "prefix": "GetNthClosestVehicleNodeId",
      "body": [
          "GetNthClosestVehicleNodeId(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* nth}, ${5:int* nodetype}, ${6:float* p5}, ${7:float* p6})${0}"
      ],
      "description": "```\nReturns the id.  \n```"
  },
  "3549": {
      "prefix": "GetNthClosestVehicleNodeFavourDirection",
      "body": [
          "GetNthClosestVehicleNodeFavourDirection(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* desiredX}, ${5:float* desiredY}, ${6:float* desiredZ}, ${7:int* nthClosest}, ${8:Vector3* outPosition}, ${9:float* outHeading}, ${10:int* nodetype}, ${11:float* p10}, ${12:Any* p11})${0}"
      ],
      "description": "```\nSee gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water  \np10 always equal 0x40400000  \np11 always equal 0  \n```"
  },
  "3550": {
      "prefix": "GetNthClosestVehicleNodeIdWithHeading",
      "body": [
          "GetNthClosestVehicleNodeIdWithHeading(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* nthClosest}, ${5:Vector3* outPosition}, ${6:float* outHeading}, ${7:Any* p6}, ${8:float* p7}, ${9:float* p8})${0}"
      ],
      "description": ""
  },
  "3551": {
      "prefix": "GetNthClosestVehicleNodeWithHeading",
      "body": [
          "GetNthClosestVehicleNodeWithHeading(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* nthClosest}, ${5:Vector3* outPosition}, ${6:float* heading}, ${7:Any* unknown1}, ${8:int* unknown2}, ${9:float* unknown3}, ${10:float* unknown4})${0}"
      ],
      "description": "```\nGet the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)  \n```"
  },
  "3552": {
      "prefix": "GetPointOnRoadSide",
      "body": [
          "GetPointOnRoadSide(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* p3}, ${5:Vector3* outPosition})${0}"
      ],
      "description": ""
  },
  "3553": {
      "prefix": "GetRandomVehicleNode",
      "body": [
          "GetRandomVehicleNode(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:BOOL* p6}, ${8:Vector3* outPosition}, ${9:int* nodeId})${0}"
      ],
      "description": ""
  },
  "3554": {
      "prefix": "GetRoadSidePointWithHeading",
      "body": [
          "GetRoadSidePointWithHeading(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* heading}, ${5:Vector3* outPosition})${0}"
      ],
      "description": ""
  },
  "3555": {
      "prefix": "GetStreetNameAtCoord",
      "body": [
          "GetStreetNameAtCoord(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Hash* streetName}, ${5:Hash* crossingRoad})${0}"
      ],
      "description": "```\nDetermines the name of the street which is the closest to the given coordinates.\nx,y,z - the coordinates of the street\nstreetName - returns a hash to the name of the street the coords are on\ncrossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road\nNote: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.\n```"
  },
  "3556": {
      "prefix": "GetSafeCoordForPed",
      "body": [
          "GetSafeCoordForPed(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:BOOL* onGround}, ${5:Vector3* outPosition}, ${6:int* flags})${0}"
      ],
      "description": "```\nFlags are:\n1 = 1 = B02_IsFootpath\n2 = 4 = !B15_InteractionUnk\n4 = 0x20 = !B14_IsInterior\n8 = 0x40 = !B07_IsWater\n16 = 0x200 = B17_IsFlatGround\nWhen onGround == true outPosition is a position located on the nearest pavement.\nWhen a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.\nIn the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.\n16 works for me, 0 crashed the script.\n```"
  },
  "3557": {
      "prefix": "GetVehicleNodeIsSwitchedOff",
      "body": [
          "GetVehicleNodeIsSwitchedOff(${1:int* nodeID})${0}"
      ],
      "description": "```\nReturns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.\nNormal roads where plenty of Peds spawn will return false\n```"
  },
  "3558": {
      "prefix": "GetVehicleNodeProperties",
      "body": [
          "GetVehicleNodeProperties(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:int* density}, ${5:int* flags})${0}"
      ],
      "description": "```\nGets the density and flags of the closest node to the specified position.  \nDensity is a value between 0 and 15, indicating how busy the road is.  \nFlags is a bit field.  \n```"
  },
  "3559": {
      "prefix": "GetVehicleNodeIsGpsAllowed",
      "body": [
          "GetVehicleNodeIsGpsAllowed(${1:int* nodeID})${0}"
      ],
      "description": "```\nReturns false for nodes that aren't used for GPS routes.\nExample:\nNodes in Fort Zancudo and LSIA are false\n```"
  },
  "3560": {
      "prefix": "IsNavmeshRequiredRegionOwnedByAnyThread",
      "body": [
          "IsNavmeshRequiredRegionOwnedByAnyThread()${0}"
      ],
      "description": "```\nIS_*\n```"
  },
  "3561": {
      "prefix": "GetVehicleNodePosition",
      "body": [
          "GetVehicleNodePosition(${1:int* nodeId}, ${2:Vector3* outPosition})${0}"
      ],
      "description": "```\nCalling this with an invalid node id, will crash the game.\nNote that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.\nEg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().\n```"
  },
  "3562": {
      "prefix": "LoadAllPathNodes",
      "body": [
          "LoadAllPathNodes(${1:BOOL* keepInMemory})${0}"
      ],
      "description": "```\nThis native has been removed in v1180.  \n```"
  },
  "3563": {
      "prefix": "IsNavmeshLoadedInArea",
      "body": [
          "IsNavmeshLoadedInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nReturns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.  \nIf you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...  \n```"
  },
  "3564": {
      "prefix": "IsPointOnRoad",
      "body": [
          "IsPointOnRoad(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Vehicle* vehicle})${0}"
      ],
      "description": "```\nGets a value indicating whether the specified position is on a road.  \nThe vehicle parameter is not implemented (ignored).  \n```"
  },
  "3565": {
      "prefix": "IsVehicleNodeIdValid",
      "body": [
          "IsVehicleNodeIdValid(${1:int* vehicleNodeId})${0}"
      ],
      "description": "```\nReturns true if the id is non zero.  \n```"
  },
  "3566": {
      "prefix": "SetAiGlobalPathNodesType",
      "body": [
          "SetAiGlobalPathNodesType(${1:int* type})${0}"
      ],
      "description": "Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.\n\n```\nNativeDB Introduced: v2189\n```"
  },
  "3567": {
      "prefix": "RemoveNavmeshBlockingObject",
      "body": [
          "RemoveNavmeshBlockingObject(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "3568": {
      "prefix": "SetAllPathsCacheBoundingstruct",
      "body": [
          "SetAllPathsCacheBoundingstruct(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles a global boolean, name is probably a hash collision but describes its functionality.\n```"
  },
  "3569": {
      "prefix": "RemoveNavmeshRequiredRegions",
      "body": [
          "RemoveNavmeshRequiredRegions()${0}"
      ],
      "description": ""
  },
  "3570": {
      "prefix": "SetGpsDisabledZone",
      "body": [
          "SetGpsDisabledZone(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": ""
  },
  "3571": {
      "prefix": "RequestPathsPreferAccurateBoundingstruct",
      "body": [
          "RequestPathsPreferAccurateBoundingstruct(${1:float* x1}, ${2:float* y1}, ${3:float* x2}, ${4:float* y2})${0}"
      ],
      "description": "```\nUsed internally for long range tasks\n```"
  },
  "3572": {
      "prefix": "SetIgnoreNoGpsFlag",
      "body": [
          "SetIgnoreNoGpsFlag(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3573": {
      "prefix": "SetAmbientPedRangeMultiplierThisFrame",
      "body": [
          "SetAmbientPedRangeMultiplierThisFrame(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "3574": {
      "prefix": "SetIgnoreSecondaryRouteNodes",
      "body": [
          "SetIgnoreSecondaryRouteNodes(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nSee: SET_BLIP_ROUTE\n```"
  },
  "3575": {
      "prefix": "SetGpsDisabledZoneAtIndex",
      "body": [
          "SetGpsDisabledZoneAtIndex(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* index})${0}"
      ],
      "description": "Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.\n\nYou can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.\n\n**Setting a waypoint at the same coordinate:**\n\nDisabled Zone: <https://i.imgur.com/P9VUuxM.png>\n\nEnabled Zone (normal): <https://i.imgur.com/BPi24aw.png>"
  },
  "3576": {
      "prefix": "SetPedPathsInArea",
      "body": [
          "SetPedPathsInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* unknown})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 8: Any p7\n```"
  },
  "3577": {
      "prefix": "SetRoadsBackToOriginalInAngledArea",
      "body": [
          "SetRoadsBackToOriginalInAngledArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width})${0}"
      ],
      "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.\n\n```\nNativeDB Added Parameter 8: Any p7\n\nbool p7 - always 1  \n```"
  },
  "3578": {
      "prefix": "SetPedPathsBackToOriginal",
      "body": [
          "SetPedPathsBackToOriginal(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 7: Any p6\n```"
  },
  "3579": {
      "prefix": "SetRoadsBackToOriginal",
      "body": [
          "SetRoadsBackToOriginal(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": "```\nmissing a last parameter int p6  \n```\n\n```\nNativeDB Added Parameter 7: Any p6\n```"
  },
  "3580": {
      "prefix": "SetRoadsInArea",
      "body": [
          "SetRoadsInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* nodeEnabled}, ${8:BOOL* unknown2})${0}"
      ],
      "description": "When this is set to false, all nodes in the area get disabled.\n\n`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.\n\nIf it's true,\n\n`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false."
  },
  "3581": {
      "prefix": "SetRoadsInAngledArea",
      "body": [
          "SetRoadsInAngledArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* width}, ${8:BOOL* unknown1}, ${9:BOOL* unknown2}, ${10:BOOL* unknown3})${0}"
      ],
      "description": "unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area."
  },
  "3582": {
      "prefix": "UpdateNavmeshBlockingObject",
      "body": [
          "UpdateNavmeshBlockingObject(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:Any* p8})${0}"
      ],
      "description": ""
  },
  "3583": {
      "prefix": "AddArmourToPed",
      "body": [
          "AddArmourToPed(${1:Ped* ped}, ${2:int* amount})${0}"
      ],
      "description": "```\nSame as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.  \n```"
  },
  "3584": {
      "prefix": "AddPedDecorationFromHashesInCorona",
      "body": [
          "AddPedDecorationFromHashesInCorona(${1:Ped* ped}, ${2:Hash* collection}, ${3:Hash* overlay})${0}"
      ],
      "description": ""
  },
  "3585": {
      "prefix": "AddPedDecorationFromHashes",
      "body": [
          "AddPedDecorationFromHashes(${1:Ped* ped}, ${2:Hash* collection}, ${3:Hash* overlay})${0}"
      ],
      "description": "```\nApplies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\ncollection - PedDecorationCollection filename hash\noverlay - Item name hash\nExample:\nEntry inside \"mpbeach_overlays.xml\" -\n<Item>\n  <uvPos x=\"0.500000\" y=\"0.500000\" />\n  <scale x=\"0.600000\" y=\"0.500000\" />\n  <rotation value=\"0.000000\" />\n  <nameHash>FM_Hair_Fuzz</nameHash>\n  <txdHash>mp_hair_fuzz</txdHash>\n  <txtHash>mp_hair_fuzz</txtHash>\n  <zone>ZONE_HEAD</zone>\n  <type>TYPE_TATTOO</type>\n  <faction>FM</faction>\n  <garment>All</garment>\n  <gender>GENDER_DONTCARE</gender>\n  <award />\n  <awardLevel />\n</Item>\nCode:\nPED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n```"
  },
  "3586": {
      "prefix": "AddRelationshipGroup",
      "body": [
          "AddRelationshipGroup(${1:char* name}, ${2:Hash* groupHash})${0}"
      ],
      "description": "```\nCan't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.  \n```"
  },
  "3587": {
      "prefix": "ApplyDamageToPed",
      "body": [
          "ApplyDamageToPed(${1:Ped* ped}, ${2:int* damageAmount}, ${3:BOOL* armorFirst})${0}"
      ],
      "description": "```\ndamages a ped with the given amount  \n----  \narmorFirst means it will damage/lower the armor first before damaging the player.  \nsetting damageAmount to a negative amount will cause the player or the armor (depending on armorFirst) to be healed by damageAmount instead.  \n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "3588": {
      "prefix": "AddScenarioBlockingArea",
      "body": [
          "AddScenarioBlockingArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* p6}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:BOOL* p9})${0}"
      ],
      "description": ""
  },
  "3589": {
      "prefix": "ApplyPedBloodByZone",
      "body": [
          "ApplyPedBloodByZone(${1:Ped* ped}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "3590": {
      "prefix": "ApplyPedBlood",
      "body": [
          "ApplyPedBlood(${1:Ped* ped}, ${2:int* boneIndex}, ${3:float* xRot}, ${4:float* yRot}, ${5:float* zRot}, ${6:char* woundType})${0}"
      ],
      "description": "```\nFound one occurence in re_crashrescue.c4  \nPED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, \"wound_sheet\");  \n```"
  },
  "3591": {
      "prefix": "ApplyPedBloodDamageByZone",
      "body": [
          "ApplyPedBloodDamageByZone(${1:Ped* ped}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "3592": {
      "prefix": "ApplyPedBloodSpecific",
      "body": [
          "ApplyPedBloodSpecific(${1:Ped* ped}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6}, ${8:float* p7}, ${9:Any* p8})${0}"
      ],
      "description": ""
  },
  "3593": {
      "prefix": "ApplyPedDamagePack",
      "body": [
          "ApplyPedDamagePack(${1:Ped* ped}, ${2:char* damagePack}, ${3:float* damage}, ${4:float* mult})${0}"
      ],
      "description": "```\nDamage Packs:  \n\"SCR_TrevorTreeBang\"  \n\"HOSPITAL_0\"  \n\"HOSPITAL_1\"  \n\"HOSPITAL_2\"  \n\"HOSPITAL_3\"  \n\"HOSPITAL_4\"  \n\"HOSPITAL_5\"  \n\"HOSPITAL_6\"  \n\"HOSPITAL_7\"  \n\"HOSPITAL_8\"  \n\"HOSPITAL_9\"  \n\"SCR_Dumpster\"  \n\"BigHitByVehicle\"  \n\"SCR_Finale_Michael_Face\"  \n\"SCR_Franklin_finb\"  \n\"SCR_Finale_Michael\"  \n\"SCR_Franklin_finb2\"  \n\"Explosion_Med\"  \n\"SCR_Torture\"  \n\"SCR_TracySplash\"  \n\"Skin_Melee_0\"  \nAdditional damage packs:  \ngist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227  \n```"
  },
  "3594": {
      "prefix": "BlockPedDeadBodyShockingEvents",
      "body": [
          "BlockPedDeadBodyShockingEvents(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3595": {
      "prefix": "ApplyPedDamageDecal",
      "body": [
          "ApplyPedDamageDecal(${1:Ped* ped}, ${2:int* damageZone}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* heading}, ${6:float* scale}, ${7:float* alpha}, ${8:int* variation}, ${9:BOOL* fadeIn}, ${10:char* decalName})${0}"
      ],
      "description": "```\nenum eDamageZone\n{\n\tDZ_Torso = 0,\n\tDZ_Head,\n\tDZ_LeftArm,\n\tDZ_RightArm,\n\tDZ_LeftLeg,\n\tDZ_RightLeg,\n};\nDecal Names:\nscar\nblushing\ncs_flush_anger\ncs_flush_anger_face\nbruise\nbruise_large\nherpes\nArmorBullet\nbasic_dirt_cloth\nbasic_dirt_skin\ncs_trev1_dirt\nAPPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, \"blushing\");\n```"
  },
  "3596": {
      "prefix": "AttachSynchronizedSceneToEntity",
      "body": [
          "AttachSynchronizedSceneToEntity(${1:int* sceneID}, ${2:Entity* entity}, ${3:int* boneIndex})${0}"
      ],
      "description": ""
  },
  "3597": {
      "prefix": "CanCreateRandomBikeRider",
      "body": [
          "CanCreateRandomBikeRider()${0}"
      ],
      "description": ""
  },
  "3598": {
      "prefix": "CanCreateRandomCops",
      "body": [
          "CanCreateRandomCops()${0}"
      ],
      "description": ""
  },
  "3599": {
      "prefix": "CanCreateRandomPed",
      "body": [
          "CanCreateRandomPed(${1:BOOL* unk})${0}"
      ],
      "description": ""
  },
  "3600": {
      "prefix": "CanPedInCombatSeeTarget",
      "body": [
          "CanPedInCombatSeeTarget(${1:Ped* ped}, ${2:Ped* target})${0}"
      ],
      "description": ""
  },
  "3601": {
      "prefix": "CanCreateRandomDriver",
      "body": [
          "CanCreateRandomDriver()${0}"
      ],
      "description": ""
  },
  "3602": {
      "prefix": "CanPedRagdoll",
      "body": [
          "CanPedRagdoll(${1:Ped* ped})${0}"
      ],
      "description": "```\nPrevents the ped from going limp.  \n[Example: Can prevent peds from falling when standing on moving vehicles.]  \n```"
  },
  "3603": {
      "prefix": "CanKnockPedOffVehicle",
      "body": [
          "CanKnockPedOffVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3604": {
      "prefix": "CanPedSeeHatedPed",
      "body": [
          "CanPedSeeHatedPed(${1:Ped* ped1}, ${2:Ped* ped2})${0}"
      ],
      "description": ""
  },
  "3605": {
      "prefix": "ClearAllPedProps",
      "body": [
          "ClearAllPedProps(${1:Ped* ped})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3606": {
      "prefix": "ClearAllPedVehicleForcedSeatUsage",
      "body": [
          "ClearAllPedVehicleForcedSeatUsage(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3607": {
      "prefix": "ClearFacialClipsetOverride",
      "body": [
          "ClearFacialClipsetOverride(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "3608": {
      "prefix": "ClearPedAlternateMovementAnim",
      "body": [
          "ClearPedAlternateMovementAnim(${1:Ped* ped}, ${2:int* stance}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "3609": {
      "prefix": "ClearFacialIdleAnimOverride",
      "body": [
          "ClearFacialIdleAnimOverride(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3610": {
      "prefix": "ClearPedBloodDamageByZone",
      "body": [
          "ClearPedBloodDamageByZone(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\nSomehow related to changing ped's clothes.  \n```"
  },
  "3611": {
      "prefix": "ClearPedAlternateWalkAnim",
      "body": [
          "ClearPedAlternateWalkAnim(${1:Ped* ped}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "3612": {
      "prefix": "ClearPedBloodDamage",
      "body": [
          "ClearPedBloodDamage(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3613": {
      "prefix": "ClearPedDecorations",
      "body": [
          "ClearPedDecorations(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3614": {
      "prefix": "ClearPedCoverClipsetOverride",
      "body": [
          "ClearPedCoverClipsetOverride(${1:Ped* ped})${0}"
      ],
      "description": "```\nCLEAR_PED_*\n```"
  },
  "3615": {
      "prefix": "ClearPedDamageDecalByZone",
      "body": [
          "ClearPedDamageDecalByZone(${1:Ped* ped}, ${2:int* p1}, ${3:char* p2})${0}"
      ],
      "description": "```\np1: from 0 to 5 in the b617d scripts.  \np2: \"blushing\" and \"ALL\" found in the b617d scripts.  \n```"
  },
  "3616": {
      "prefix": "ClearPedDriveByClipsetOverride",
      "body": [
          "ClearPedDriveByClipsetOverride(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3617": {
      "prefix": "ClearPedDecorationsLeaveScars",
      "body": [
          "ClearPedDecorationsLeaveScars(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3618": {
      "prefix": "ClearPedLastDamageBone",
      "body": [
          "ClearPedLastDamageBone(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3619": {
      "prefix": "ClearPedEnvDirt",
      "body": [
          "ClearPedEnvDirt(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3620": {
      "prefix": "ClearPedNonCreationArea",
      "body": [
          "ClearPedNonCreationArea()${0}"
      ],
      "description": ""
  },
  "3621": {
      "prefix": "ClearPedParachutePackVariation",
      "body": [
          "ClearPedParachutePackVariation(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3622": {
      "prefix": "ClearPedScubaGearVariation",
      "body": [
          "ClearPedScubaGearVariation(${1:Ped* ped})${0}"
      ],
      "description": "Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it."
  },
  "3623": {
      "prefix": "ClearPedProp",
      "body": [
          "ClearPedProp(${1:Ped* ped}, ${2:int* propId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3624": {
      "prefix": "ClearPedStoredHatProp",
      "body": [
          "ClearPedStoredHatProp(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3625": {
      "prefix": "ClearPedWetness",
      "body": [
          "ClearPedWetness(${1:Ped* ped})${0}"
      ],
      "description": "```\nIt clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.  \n```"
  },
  "3626": {
      "prefix": "ClearRagdollBlockingFlags",
      "body": [
          "ClearRagdollBlockingFlags(${1:Ped* ped}, ${2:int* flags})${0}"
      ],
      "description": "```\nThere seem to be 26 flags  \n```"
  },
  "3627": {
      "prefix": "ClearRelationshipBetweenGroups",
      "body": [
          "ClearRelationshipBetweenGroups(${1:int* relationship}, ${2:Hash* group1}, ${3:Hash* group2})${0}"
      ],
      "description": "```\nClears the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \n(Credits: Inco)  \nExample:  \nPED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);  \nPED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);  \n```"
  },
  "3628": {
      "prefix": "ClonePed",
      "body": [
          "ClonePed(${1:Ped* ped}, ${2:BOOL* isNetwork}, ${3:BOOL* bScriptHostPed}, ${4:BOOL* copyHeadBlendFlag})${0}"
      ],
      "description": "Creates a copy of the passed ped, optionally setting it as local and/or shallow-copying the head blend data."
  },
  "3629": {
      "prefix": "ClonePedEx",
      "body": [
          "ClonePedEx(${1:Ped* ped}, ${2:float* heading}, ${3:BOOL* isNetwork}, ${4:BOOL* bScriptHostPed}, ${5:Any* p4})${0}"
      ],
      "description": "Used one time in fmmc_launcher.c instead of CLONE_PED because ?"
  },
  "3630": {
      "prefix": "ClonePedToTarget",
      "body": [
          "ClonePedToTarget(${1:Ped* ped}, ${2:Ped* targetPed})${0}"
      ],
      "description": "```\nCopies ped's components and props to targetPed.\n```"
  },
  "3631": {
      "prefix": "ClonePedToTargetEx",
      "body": [
          "ClonePedToTargetEx(${1:Ped* ped}, ${2:Ped* targetPed}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "3632": {
      "prefix": "CreateParachuteBagObject",
      "body": [
          "CreateParachuteBagObject(${1:Ped* ped}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3633": {
      "prefix": "CreateGroup",
      "body": [
          "CreateGroup(${1:int* unused})${0}"
      ],
      "description": "```\nCreates a new ped group.  \nGroups can contain up to 8 peds.  \nThe parameter is unused.  \nReturns a handle to the created group, or 0 if a group couldn't be created.  \n```"
  },
  "3634": {
      "prefix": "CreatePed",
      "body": [
          "CreatePed(${1:int* pedType}, ${2:Hash* modelHash}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* heading}, ${7:BOOL* isNetwork}, ${8:BOOL* bScriptHostPed})${0}"
      ],
      "description": "Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\n(e.g. using REQUEST_MODEL)."
  },
  "3635": {
      "prefix": "CreateNmMessage",
      "body": [
          "CreateNmMessage(${1:BOOL* startImmediately}, ${2:int* messageId})${0}"
      ],
      "description": "```\nCreates a new NaturalMotion message.  \nstartImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.  \nmessageId: The ID of the NaturalMotion message.  \nIf a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.  \n```"
  },
  "3636": {
      "prefix": "CreateRandomPed",
      "body": [
          "CreateRandomPed(${1:float* posX}, ${2:float* posY}, ${3:float* posZ})${0}"
      ],
      "description": "```\nvb.net\nDim ped_handle As Integer\n                    With Game.Player.Character\n                        Dim pos As Vector3 = .Position + .ForwardVector * 3\n                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)\n                    End With\nCreates a Ped at the specified location, returns the Ped Handle.\nPed will not act until SET_PED_AS_NO_LONGER_NEEDED is called.\n```"
  },
  "3637": {
      "prefix": "CreatePedInsideVehicle",
      "body": [
          "CreatePedInsideVehicle(${1:Vehicle* vehicle}, ${2:int* pedType}, ${3:Hash* modelHash}, ${4:int* seat}, ${5:BOOL* isNetwork}, ${6:BOOL* bScriptHostPed})${0}"
      ],
      "description": ""
  },
  "3638": {
      "prefix": "CreateSynchronizedScene",
      "body": [
          "CreateSynchronizedScene(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* roll}, ${5:float* pitch}, ${6:float* yaw}, ${7:int* p6})${0}"
      ],
      "description": "```\np6 always 2 (but it doesnt seem to matter...)  \nroll and pitch 0  \nyaw to Ped.rotation  \n```"
  },
  "3639": {
      "prefix": "CreateRandomPedAsDriver",
      "body": [
          "CreateRandomPedAsDriver(${1:Vehicle* vehicle}, ${2:BOOL* returnHandle})${0}"
      ],
      "description": ""
  },
  "3640": {
      "prefix": "CreateSynchronizedScene2",
      "body": [
          "CreateSynchronizedScene2(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* object})${0}"
      ],
      "description": ""
  },
  "3641": {
      "prefix": "DeletePed",
      "body": [
          "DeletePed(${1:Ped* ped})${0}"
      ],
      "description": "```\nDeletes the specified ped, then sets the handle pointed to by the pointer to NULL.  \n```"
  },
  "3642": {
      "prefix": "DisableHeadBlendPaletteColor",
      "body": [
          "DisableHeadBlendPaletteColor(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3643": {
      "prefix": "DetachSynchronizedScene",
      "body": [
          "DetachSynchronizedScene(${1:int* sceneID})${0}"
      ],
      "description": ""
  },
  "3644": {
      "prefix": "DisablePedHeatscaleOverride",
      "body": [
          "DisablePedHeatscaleOverride(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3645": {
      "prefix": "DisposeSynchronizedScene",
      "body": [
          "DisposeSynchronizedScene(${1:int* scene})${0}"
      ],
      "description": ""
  },
  "3646": {
      "prefix": "DoesGroupExist",
      "body": [
          "DoesGroupExist(${1:int* groupId})${0}"
      ],
      "description": ""
  },
  "3647": {
      "prefix": "DoesRelationshipGroupExist",
      "body": [
          "DoesRelationshipGroupExist(${1:Hash* groupHash})${0}"
      ],
      "description": ""
  },
  "3648": {
      "prefix": "DoesScenarioBlockingAreaExist",
      "body": [
          "DoesScenarioBlockingAreaExist(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": ""
  },
  "3649": {
      "prefix": "ExplodePedHead",
      "body": [
          "ExplodePedHead(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": "```\nForces the ped to fall back and kills it.  \nIt doesn't really explode the ped's head but it kills the ped  \n```"
  },
  "3650": {
      "prefix": "DropAmbientProp",
      "body": [
          "DropAmbientProp(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3651": {
      "prefix": "FinalizeHeadBlend",
      "body": [
          "FinalizeHeadBlend(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3652": {
      "prefix": "ForcePedMotionState",
      "body": [
          "ForcePedMotionState(${1:Ped* ped}, ${2:Hash* motionStateHash}, ${3:BOOL* p2}, ${4:int* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nSome motionstate hashes are  \n0xec17e58 (standing idle), 0xbac0f10b (nothing?), 0x3f67c6af (aiming with pistol 2-h), 0x422d7a25 (stealth), 0xbd8817db, 0x916e828c  \nand those for the strings  \n\"motionstate_idle\", \"motionstate_walk\", \"motionstate_run\", \"motionstate_actionmode_idle\", and \"motionstate_actionmode_walk\".  \nRegarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.  \n [31/03/2017] ins1de :  \n        enum MotionState  \n        {  \n            StopRunning = -530524,  \n            StopWalking = -668482597,  \n            Idle = 247561816, // 1, 1, 0  \n            Idl2 = -1871534317,  \n            SkyDive =-1161760501, // 0, 1, 0  \n            Stealth = 1110276645,  \n            Sprint = -1115154469,  \n            Swim = -1855028596,  \n            Unknown1 = 1063765679,  \n            Unknown2 = -633298724,  \n        }  \n```"
  },
  "3653": {
      "prefix": "FreezePedCameraRotation",
      "body": [
          "FreezePedCameraRotation(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3654": {
      "prefix": "ForcePedAiAndAnimationUpdate",
      "body": [
          "ForcePedAiAndAnimationUpdate(${1:Ped* ped}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3655": {
      "prefix": "ForcePedToOpenParachute",
      "body": [
          "ForcePedToOpenParachute(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3656": {
      "prefix": "GetAnimInitialOffsetRotation",
      "body": [
          "GetAnimInitialOffsetRotation(${1:char* animDict}, ${2:char* animName}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:float* p8}, ${10:int* p9})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "3657": {
      "prefix": "GetAnimInitialOffsetPosition",
      "body": [
          "GetAnimInitialOffsetPosition(${1:char* animDict}, ${2:char* animName}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* xRot}, ${7:float* yRot}, ${8:float* zRot}, ${9:float* p8}, ${10:int* p9})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "3658": {
      "prefix": "GetCombatFloat",
      "body": [
          "GetCombatFloat(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\np0: Ped Handle  \np1: int i | 0 <= i <= 27  \np1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:  \n<BlindFireChance value=\"0.1\"/>  \n<WeaponShootRateModifier value=\"1.0\"/>  \n<TimeBetweenBurstsInCover value=\"1.25\"/>  \n<BurstDurationInCover value=\"2.0\"/>  \n<TimeBetweenPeeks value=\"10.0\"/>  \n<WeaponAccuracy value=\"0.18\"/>  \n<FightProficiency value=\"0.8\"/>  \n<StrafeWhenMovingChance value=\"1.0\"/>  \n<WalkWhenStrafingChance value=\"0.0\"/>  \n<AttackWindowDistanceForCover value=\"55.0\"/>  \n<TimeToInvalidateInjuredTarget value=\"9.0\"/>  \n<TriggerChargeTime_Near value=\"4.0\"/>  \n<TriggerChargeTime_Far value=\"10.0\"/>  \n-------------Confirmed by editing combatbehavior.meta:  \np1:  \n0=BlindFireChance  \n1=BurstDurationInCover  \n3=TimeBetweenBurstsInCover  \n4=TimeBetweenPeeks  \n5=StrafeWhenMovingChance  \n8=WalkWhenStrafingChance  \n11=AttackWindowDistanceForCover  \n12=TimeToInvalidateInjuredTarget  \n16=OptimalCoverDistance  \n```"
  },
  "3659": {
      "prefix": "GetClosestPed",
      "body": [
          "GetClosestPed(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:Ped* outPed}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:int* pedType})${0}"
      ],
      "description": "```\nGets the closest ped in a radius.  \nPed Types:  \nAny ped = -1  \nPlayer = 1  \nMale = 4   \nFemale = 5   \nCop = 6  \nHuman = 26  \nSWAT = 27   \nAnimal = 28  \nArmy = 29  \n------------------  \nP4 P5 P7 P8  \n1  0  x  x  = return nearest walking Ped  \n1  x  0  x  = return nearest walking Ped  \nx  1  1  x  = return Ped you are using  \n0  0  x  x  = no effect  \n0  x  0  x  = no effect  \nx = can be 1 or 0. Does not have any obvious changes.  \nThis function does not return ped who is:  \n1. Standing still  \n2. Driving  \n3. Fleeing  \n4. Attacking  \nThis function only work if the ped is:  \n1. walking normally.  \n2. waiting to cross a road.  \nNote: PED::GET_PED_NEARBY_PEDS works for more peds.  \n```"
  },
  "3660": {
      "prefix": "GetDeadPedPickupCoords",
      "body": [
          "GetDeadPedPickupCoords(${1:Ped* ped}, ${2:float* p1}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "3661": {
      "prefix": "GetGroupSize",
      "body": [
          "GetGroupSize(${1:int* groupID}, ${2:Any* unknown}, ${3:int* sizeInMembers})${0}"
      ],
      "description": "```\np1 may be a BOOL representing whether or not the group even exists  \n```"
  },
  "3662": {
      "prefix": "GetJackTarget",
      "body": [
          "GetJackTarget(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3663": {
      "prefix": "GetMeleeTargetForPed",
      "body": [
          "GetMeleeTargetForPed(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3664": {
      "prefix": "GetMount",
      "body": [
          "GetMount(${1:Ped* ped})${0}"
      ],
      "description": "```\nFunction just returns 0  \nvoid __fastcall ped__get_mount(NativeContext *a1)  \n{  \n  NativeContext *v1; // rbx@1  \n  v1 = a1;  \n  GetAddressOfPedFromScriptHandle(a1->Args->Arg1);  \n  v1->Returns->Item1= 0;  \n}  \n```"
  },
  "3665": {
      "prefix": "GetNumHairColors",
      "body": [
          "GetNumHairColors()${0}"
      ],
      "description": "```\nUsed for freemode (online) characters.  \n```"
  },
  "3666": {
      "prefix": "GetNumMakeupColors",
      "body": [
          "GetNumMakeupColors()${0}"
      ],
      "description": ""
  },
  "3667": {
      "prefix": "GetNumberOfPedDrawableVariations",
      "body": [
          "GetNumberOfPedDrawableVariations(${1:Ped* ped}, ${2:int* componentId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3668": {
      "prefix": "GetNumberOfPedTextureVariations",
      "body": [
          "GetNumberOfPedTextureVariations(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3669": {
      "prefix": "GetNumberOfPedPropDrawableVariations",
      "body": [
          "GetNumberOfPedPropDrawableVariations(${1:Ped* ped}, ${2:int* propId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3670": {
      "prefix": "GetNumberOfPedPropTextureVariations",
      "body": [
          "GetNumberOfPedPropTextureVariations(${1:Ped* ped}, ${2:int* propId}, ${3:int* drawableId})${0}"
      ],
      "description": "```\nNeed to check behavior when drawableId = -1  \n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3671": {
      "prefix": "GetPedAccuracy",
      "body": [
          "GetPedAccuracy(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3672": {
      "prefix": "GetPedAlertness",
      "body": [
          "GetPedAlertness(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns the ped's alertness (0-3).  \nValues :   \n0 : Neutral  \n1 : Heard something (gun shot, hit, etc)  \n2 : Knows (the origin of the event)  \n3 : Fully alerted (is facing the event?)  \nIf the Ped does not exist, returns -1.  \n```"
  },
  "3673": {
      "prefix": "GetPedAsGroupLeader",
      "body": [
          "GetPedAsGroupLeader(${1:int* groupID})${0}"
      ],
      "description": ""
  },
  "3674": {
      "prefix": "GetPedArmour",
      "body": [
          "GetPedArmour(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3675": {
      "prefix": "GetPedAsGroupMember",
      "body": [
          "GetPedAsGroupMember(${1:int* groupID}, ${2:int* memberNumber})${0}"
      ],
      "description": "```\nfrom fm_mission_controller.c4 (variable names changed for clarity):  \nint groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());  \nPED::GET_GROUP_SIZE(group, &unused, &groupSize);  \nif (groupSize >= 1) {  \n. . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {  \n. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);  \n. . . . . . . . //and so on  \n```"
  },
  "3676": {
      "prefix": "GetPedBoneIndex",
      "body": [
          "GetPedBoneIndex(${1:Ped* ped}, ${2:int* boneId})${0}"
      ],
      "description": "```\nBone ID enum: pastebin.com/3pz17QGd  \n```"
  },
  "3677": {
      "prefix": "GetPedBoneCoords",
      "body": [
          "GetPedBoneCoords(${1:Ped* ped}, ${2:int* boneId}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ})${0}"
      ],
      "description": "```\nGets the position of the specified bone of the specified ped.  \nped: The ped to get the position of a bone from.  \nboneId: The ID of the bone to get the position from. This is NOT the index.  \noffsetX: The X-component of the offset to add to the position relative to the bone's rotation.  \noffsetY: The Y-component of the offset to add to the position relative to the bone's rotation.  \noffsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.  \n```"
  },
  "3678": {
      "prefix": "GetPedCombatMovement",
      "body": [
          "GetPedCombatMovement(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3679": {
      "prefix": "GetPedCauseOfDeath",
      "body": [
          "GetPedCauseOfDeath(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns the hash of the weapon/model/object that killed the ped.  \n```"
  },
  "3680": {
      "prefix": "GetPedCombatRange",
      "body": [
          "GetPedCombatRange(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3681": {
      "prefix": "GetPedConfigFlag",
      "body": [
          "GetPedConfigFlag(${1:Ped* ped}, ${2:int* flagId}, ${3:BOOL* p2})${0}"
      ],
      "description": "See [`SET_PED_CONFIG_FLAG`](#\\_0x1913FE4CBF41C463)."
  },
  "3682": {
      "prefix": "GetPedDecorationZoneFromHashes",
      "body": [
          "GetPedDecorationZoneFromHashes(${1:Hash* collection}, ${2:Hash* overlay})${0}"
      ],
      "description": "```\nReturns the zoneID for the overlay if it is a member of collection.\nenum ePedDecorationZone\n{\n\tZONE_TORSO = 0,\n\tZONE_HEAD = 1,\n\tZONE_LEFT_ARM = 2,\n\tZONE_RIGHT_ARM = 3,\n\tZONE_LEFT_LEG = 4,\n\tZONE_RIGHT_LEG = 5,\n\tZONE_UNKNOWN = 6,\n\tZONE_NONE = 7\n};\n```"
  },
  "3683": {
      "prefix": "GetPedCurrentMovementSpeed",
      "body": [
          "GetPedCurrentMovementSpeed(${1:Ped* ped}, ${2:float* speedX}, ${3:float* speedY})${0}"
      ],
      "description": ""
  },
  "3684": {
      "prefix": "GetPedDecorationsState",
      "body": [
          "GetPedDecorationsState(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3685": {
      "prefix": "GetPedDefensiveAreaPosition",
      "body": [
          "GetPedDefensiveAreaPosition(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3686": {
      "prefix": "GetPedDrawableVariation",
      "body": [
          "GetPedDrawableVariation(${1:Ped* ped}, ${2:int* componentId})${0}"
      ],
      "description": "```\nIds\n0 - Head\n1 - Beard\n2 - Hair\n3 - Torso\n4 - Legs\n5 - Hands\n6 - Foot\n7 - ------\n8 - Accessories 1\n9 - Accessories 2\n10- Decals\n11 - Auxiliary parts for torso\n```"
  },
  "3687": {
      "prefix": "GetPedEmissiveIntensity",
      "body": [
          "GetPedEmissiveIntensity(${1:Ped* ped})${0}"
      ],
      "description": "Use [`SetPedIlluminatedClothingGlowIntensity`](#\\_0x4E90D746056E273D) to set the illuminated clothing glow intensity for a specific ped."
  },
  "3688": {
      "prefix": "GetPedEventData",
      "body": [
          "GetPedEventData(${1:Ped* ped}, ${2:int* eventType}, ${3:Any* outData})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "3689": {
      "prefix": "GetPedEnveffScale",
      "body": [
          "GetPedEnveffScale(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3690": {
      "prefix": "GetPedExtractedDisplacement",
      "body": [
          "GetPedExtractedDisplacement(${1:Ped* ped}, ${2:BOOL* worldSpace})${0}"
      ],
      "description": "```\nGets the offset the specified ped has moved since the previous tick.  \nIf worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.  \nIf worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.  \n```"
  },
  "3691": {
      "prefix": "GetPedEyeColor",
      "body": [
          "GetPedEyeColor(${1:Ped* ped})${0}"
      ],
      "description": "A getter for [`_SET_PED_EYE_COLOR`](#\\_0x50B56988B170AFDF)."
  },
  "3692": {
      "prefix": "GetPedGroupIndex",
      "body": [
          "GetPedGroupIndex(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns the group id of which the specified ped is a member of.  \n```"
  },
  "3693": {
      "prefix": "GetPedHairRgbColor",
      "body": [
          "GetPedHairRgbColor(${1:int* hairColorIndex}, ${2:int* outR}, ${3:int* outG}, ${4:int* outB})${0}"
      ],
      "description": "Input: Haircolor index, value between 0 and 63 (inclusive).\nOutput: RGB values for the haircolor specified in the input.\n\nThis is used with the hair color swatches scaleform.\n\nUse [`_0x013E5CFC38CD5387`](#\\_0x013E5CFC38CD5387) to get the makeup colors."
  },
  "3694": {
      "prefix": "GetPedHeadBlendData",
      "body": [
          "GetPedHeadBlendData(${1:Ped* ped}, ${2:Any* headBlendData})${0}"
      ],
      "description": "```\nThe pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.  \npass this struct in the second parameter   \ntypedef struct  \n{  \n        int shapeFirst, shapeSecond, shapeThird;   \n        int skinFirst, skinSecond, skinThird;   \n\tfloat shapeMix, skinMix, thirdMix;  \n} headBlendData;  \n```"
  },
  "3695": {
      "prefix": "GetPedHeadBlendFirstIndex",
      "body": [
          "GetPedHeadBlendFirstIndex(${1:int* type})${0}"
      ],
      "description": "```\nType equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.\nUsed when calling SET_PED_HEAD_BLEND_DATA.\n```"
  },
  "3696": {
      "prefix": "GetPedHeadOverlayNum",
      "body": [
          "GetPedHeadOverlayNum(${1:int* overlayID})${0}"
      ],
      "description": "```\nUsed with freemode (online) characters.\n```"
  },
  "3697": {
      "prefix": "GetPedHeadBlendNumHeads",
      "body": [
          "GetPedHeadBlendNumHeads(${1:int* type})${0}"
      ],
      "description": "```\nType equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.  \n```"
  },
  "3698": {
      "prefix": "GetPedHeadOverlayValue",
      "body": [
          "GetPedHeadOverlayValue(${1:Ped* ped}, ${2:int* overlayID})${0}"
      ],
      "description": "```\nLikely a char, if that overlay is not set, e.i. \"None\" option, returns 255;\nThis might be the once removed native GET_PED_HEAD_OVERLAY.\n```"
  },
  "3699": {
      "prefix": "GetPedHelmetStoredHatPropIndex",
      "body": [
          "GetPedHelmetStoredHatPropIndex(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3700": {
      "prefix": "GetPedHelmetStoredHatTexIndex",
      "body": [
          "GetPedHelmetStoredHatTexIndex(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3701": {
      "prefix": "GetPedLastDamageBone",
      "body": [
          "GetPedLastDamageBone(${1:Ped* ped}, ${2:int* outBone})${0}"
      ],
      "description": ""
  },
  "3702": {
      "prefix": "GetPedMaxHealth",
      "body": [
          "GetPedMaxHealth(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3703": {
      "prefix": "GetPedMakeupRgbColor",
      "body": [
          "GetPedMakeupRgbColor(${1:int* makeupColorIndex}, ${2:int* outR}, ${3:int* outG}, ${4:int* outB})${0}"
      ],
      "description": "Input: Makeup color index, value between 0 and 63 (inclusive).\nOutput: RGB values for the makeup color specified in the input.\n\nThis is used with the makeup color swatches scaleform.\n\nUse [`_0x4852FC386E2E1BB5`](#\\_0x4852FC386E2E1BB5) to get the hair colors."
  },
  "3704": {
      "prefix": "GetPedMoney",
      "body": [
          "GetPedMoney(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3705": {
      "prefix": "GetPedNearbyPeds",
      "body": [
          "GetPedNearbyPeds(${1:Ped* ped}, ${2:int* sizeAndPeds}, ${3:int* ignore})${0}"
      ],
      "description": "Console/PC structure definitions and example: pastebin.com/SsFej963\n\nFor FiveM/Cfx.Re use-cases refer to: [`GET_GAME_POOL`](#\\_0x2B9D4F50)."
  },
  "3706": {
      "prefix": "GetPedNearbyVehicles",
      "body": [
          "GetPedNearbyVehicles(${1:Ped* ped}, ${2:int* sizeAndVehs})${0}"
      ],
      "description": "```\nReturns size of array, passed into the second variable.  \nSee below for usage information.  \nThis function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.  \n//Setup the array  \n\tconst int numElements = 10;  \n\tconst int arrSize = numElements * 2 + 2;  \n\tAny veh[arrSize];  \n\t//0 index is the size of the array  \n\tveh[0] = numElements;  \n\tint count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);  \n\tif (veh != NULL)  \n\t{  \n//Simple loop to go through results  \nfor (int i = 0; i < count; i++)  \n{  \n\tint offsettedID = i * 2 + 2;  \n\t//Make sure it exists  \n\tif (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))  \n\t{  \n//Do something  \n\t}  \n}  \n\t}    \nHere's the right way to do it (console and pc):  \npastebin.com/SsFej963  \n```"
  },
  "3707": {
      "prefix": "GetPedPaletteVariation",
      "body": [
          "GetPedPaletteVariation(${1:Ped* ped}, ${2:int* componentId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3708": {
      "prefix": "GetPedParachuteState",
      "body": [
          "GetPedParachuteState(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns:  \n-1: Normal  \n0: Wearing parachute on back  \n1: Parachute opening  \n2: Parachute open  \n3: Falling to doom (e.g. after exiting parachute)  \nNormal means no parachute?  \n```"
  },
  "3709": {
      "prefix": "GetPedParachuteLandingType",
      "body": [
          "GetPedParachuteLandingType(${1:Ped* ped})${0}"
      ],
      "description": "```\n-1: no landing  \n0: landing on both feet  \n1: stumbling  \n2: rolling  \n3: ragdoll  \n```"
  },
  "3710": {
      "prefix": "GetPedParachuteTintIndex",
      "body": [
          "GetPedParachuteTintIndex(${1:Ped* ped}, ${2:int* outTintIndex})${0}"
      ],
      "description": ""
  },
  "3711": {
      "prefix": "GetPedPropIndex",
      "body": [
          "GetPedPropIndex(${1:Ped* ped}, ${2:int* componentId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3712": {
      "prefix": "GetPedRagdollBoneIndex",
      "body": [
          "GetPedRagdollBoneIndex(${1:Ped* ped}, ${2:int* bone})${0}"
      ],
      "description": ""
  },
  "3713": {
      "prefix": "GetPedPropTextureIndex",
      "body": [
          "GetPedPropTextureIndex(${1:Ped* ped}, ${2:int* componentId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3714": {
      "prefix": "GetPedRelationshipGroupHash",
      "body": [
          "GetPedRelationshipGroupHash(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3715": {
      "prefix": "GetPedRelationshipGroupDefaultHash",
      "body": [
          "GetPedRelationshipGroupDefaultHash(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3716": {
      "prefix": "GetPedResetFlag",
      "body": [
          "GetPedResetFlag(${1:Ped* ped}, ${2:int* flagId})${0}"
      ],
      "description": ""
  },
  "3717": {
      "prefix": "GetPedSourceOfDeath",
      "body": [
          "GetPedSourceOfDeath(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'  \nIs best to check if the Ped is dead before asking for its killer.  \n```"
  },
  "3718": {
      "prefix": "GetPedTaskCombatTarget",
      "body": [
          "GetPedTaskCombatTarget(${1:Ped* ped}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "3719": {
      "prefix": "GetPedStealthMovement",
      "body": [
          "GetPedStealthMovement(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns whether the entity is in stealth mode  \n```"
  },
  "3720": {
      "prefix": "GetPedTextureVariation",
      "body": [
          "GetPedTextureVariation(${1:Ped* ped}, ${2:int* componentId})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3721": {
      "prefix": "GetPedTimeOfDeath",
      "body": [
          "GetPedTimeOfDeath(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3722": {
      "prefix": "GetPedType",
      "body": [
          "GetPedType(${1:Ped* ped})${0}"
      ],
      "description": "```\nhttps://alloc8or.re/gta5/doc/enums/ePedType.txt\n```"
  },
  "3723": {
      "prefix": "GetPedVisualFieldCenterAngle",
      "body": [
          "GetPedVisualFieldCenterAngle(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "3724": {
      "prefix": "GetPedheadshotTxdString",
      "body": [
          "GetPedheadshotTxdString(${1:int* id})${0}"
      ],
      "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```"
  },
  "3725": {
      "prefix": "GetPedsJacker",
      "body": [
          "GetPedsJacker(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3726": {
      "prefix": "GetPlayerPedIsFollowing",
      "body": [
          "GetPlayerPedIsFollowing(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3727": {
      "prefix": "GetRandomPedAtCoord",
      "body": [
          "GetRandomPedAtCoord(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* xRadius}, ${5:float* yRadius}, ${6:float* zRadius}, ${7:int* pedType})${0}"
      ],
      "description": "```\nGets a random ped in the x/y/zRadius near the x/y/z coordinates passed.   \nPed Types:  \nAny = -1  \nPlayer = 1  \nMale = 4   \nFemale = 5   \nCop = 6  \nHuman = 26  \nSWAT = 27   \nAnimal = 28  \nArmy = 29  \n```"
  },
  "3728": {
      "prefix": "GetRelationshipBetweenPeds",
      "body": [
          "GetRelationshipBetweenPeds(${1:Ped* ped1}, ${2:Ped* ped2})${0}"
      ],
      "description": "```\nGets the relationship between two peds. This should be called twice (once for each ped).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \n(Credits: Inco)  \nExample:  \nPED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);  \nPED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);  \n```"
  },
  "3729": {
      "prefix": "GetRelationshipBetweenGroups",
      "body": [
          "GetRelationshipBetweenGroups(${1:Hash* group1}, ${2:Hash* group2})${0}"
      ],
      "description": "```\nGets the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \nExample:  \nPED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);  \nPED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);  \n```"
  },
  "3730": {
      "prefix": "GetSynchronizedScenePhase",
      "body": [
          "GetSynchronizedScenePhase(${1:int* sceneID})${0}"
      ],
      "description": ""
  },
  "3731": {
      "prefix": "GetSeatPedIsTryingToEnter",
      "body": [
          "GetSeatPedIsTryingToEnter(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3732": {
      "prefix": "GetTimeOfLastPedWeaponDamage",
      "body": [
          "GetTimeOfLastPedWeaponDamage(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": "```\nGET_TIME_*\n```"
  },
  "3733": {
      "prefix": "GetSynchronizedSceneRate",
      "body": [
          "GetSynchronizedSceneRate(${1:int* sceneID})${0}"
      ],
      "description": ""
  },
  "3734": {
      "prefix": "GetVehiclePedIsIn",
      "body": [
          "GetVehiclePedIsIn(${1:Ped* ped}, ${2:BOOL* lastVehicle})${0}"
      ],
      "description": "Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.\nIf the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned."
  },
  "3735": {
      "prefix": "GetVehiclePedIsEntering",
      "body": [
          "GetVehiclePedIsEntering(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3736": {
      "prefix": "GetVehiclePedIsUsing",
      "body": [
          "GetVehiclePedIsUsing(${1:Ped* ped})${0}"
      ],
      "description": "```\nGets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.  \n```"
  },
  "3737": {
      "prefix": "GetVehiclePedIsTryingToEnter",
      "body": [
          "GetVehiclePedIsTryingToEnter(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3738": {
      "prefix": "GivePedNmMessage",
      "body": [
          "GivePedNmMessage(${1:Ped* ped})${0}"
      ],
      "description": "```\nSends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.  \nIf a message hasn't been created already, this function does nothing.  \nIf the Ped is not ragdolled with Euphoria enabled, this function does nothing.  \nThe following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);  \nCall order:  \nSET_PED_TO_RAGDOLL  \nCREATE_NM_MESSAGE  \nGIVE_PED_NM_MESSAGE  \nMultiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:  \nSET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);  \nCREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \nCREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \nCREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \n```"
  },
  "3739": {
      "prefix": "GivePedHelmet",
      "body": [
          "GivePedHelmet(${1:Ped* ped}, ${2:BOOL* cannotRemove}, ${3:int* helmetFlag}, ${4:int* textureIndex})${0}"
      ],
      "description": "```\nPoliceMotorcycleHelmet   1024\nRegularMotorcycleHelmet   4096\nFiremanHelmet 16384\nPilotHeadset  32768\nPilotHelmet   65536\n--\np2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.\n```"
  },
  "3740": {
      "prefix": "HasActionModeAssetLoaded",
      "body": [
          "HasActionModeAssetLoaded(${1:char* asset})${0}"
      ],
      "description": ""
  },
  "3741": {
      "prefix": "HasPedHeadBlendFinished",
      "body": [
          "HasPedHeadBlendFinished(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3742": {
      "prefix": "HasPedPreloadVariationDataFinished",
      "body": [
          "HasPedPreloadVariationDataFinished(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3743": {
      "prefix": "HasPedPreloadPropDataFinished",
      "body": [
          "HasPedPreloadPropDataFinished(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3744": {
      "prefix": "HasPedReceivedEvent",
      "body": [
          "HasPedReceivedEvent(${1:Ped* ped}, ${2:int* eventId})${0}"
      ],
      "description": ""
  },
  "3745": {
      "prefix": "HasPedheadshotImgUploadFailed",
      "body": [
          "HasPedheadshotImgUploadFailed()${0}"
      ],
      "description": ""
  },
  "3746": {
      "prefix": "HasPedheadshotImgUploadSucceeded",
      "body": [
          "HasPedheadshotImgUploadSucceeded()${0}"
      ],
      "description": ""
  },
  "3747": {
      "prefix": "HidePedBloodDamageByZone",
      "body": [
          "HidePedBloodDamageByZone(${1:Ped* ped}, ${2:Any* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3748": {
      "prefix": "HasStealthModeAssetLoaded",
      "body": [
          "HasStealthModeAssetLoaded(${1:char* asset})${0}"
      ],
      "description": ""
  },
  "3749": {
      "prefix": "HaveAllStreamingRequestsCompleted",
      "body": [
          "HaveAllStreamingRequestsCompleted(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3750": {
      "prefix": "InstantlyFillPedPopulation",
      "body": [
          "InstantlyFillPedPopulation()${0}"
      ],
      "description": ""
  },
  "3751": {
      "prefix": "IsAnyHostilePedNearPoint",
      "body": [
          "IsAnyHostilePedNearPoint(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius})${0}"
      ],
      "description": ""
  },
  "3752": {
      "prefix": "IsAnyPedNearPoint",
      "body": [
          "IsAnyPedNearPoint(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "3753": {
      "prefix": "IsConversationPedDead",
      "body": [
          "IsConversationPedDead(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3754": {
      "prefix": "IsAnyPedShootingInArea",
      "body": [
          "IsAnyPedShootingInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": ""
  },
  "3755": {
      "prefix": "IsPedAPlayer",
      "body": [
          "IsPedAPlayer(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.\n```"
  },
  "3756": {
      "prefix": "IsCopPedInArea3d",
      "body": [
          "IsCopPedInArea3d(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nxyz - relative to the world origin.  \n```"
  },
  "3757": {
      "prefix": "IsPedBeingJacked",
      "body": [
          "IsPedBeingJacked(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3758": {
      "prefix": "IsPedBlushColorValid",
      "body": [
          "IsPedBlushColorValid(${1:int* colorID})${0}"
      ],
      "description": ""
  },
  "3759": {
      "prefix": "IsPedAimingFromCover",
      "body": [
          "IsPedAimingFromCover(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3760": {
      "prefix": "IsPedBeingStealthKilled",
      "body": [
          "IsPedBeingStealthKilled(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3761": {
      "prefix": "IsPedBlushColorValid2",
      "body": [
          "IsPedBlushColorValid2(${1:int* colorId})${0}"
      ],
      "description": ""
  },
  "3762": {
      "prefix": "IsPedBeingStunned",
      "body": [
          "IsPedBeingStunned(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\np1 is always 0  \n```"
  },
  "3763": {
      "prefix": "IsPedClimbing",
      "body": [
          "IsPedClimbing(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3764": {
      "prefix": "IsPedBodyBlemishValid",
      "body": [
          "IsPedBodyBlemishValid(${1:int* colorID})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "3765": {
      "prefix": "IsPedComponentVariationValid",
      "body": [
          "IsPedComponentVariationValid(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId}, ${4:int* textureId})${0}"
      ],
      "description": "```\nChecks if the component variation is valid, this works great for randomizing components using loops.  \nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3766": {
      "prefix": "IsPedDeadOrDying",
      "body": [
          "IsPedDeadOrDying(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": "Seems to consistently return true if the ped is dead, however, it does not detect the dying phase."
  },
  "3767": {
      "prefix": "IsPedDefensiveAreaActive",
      "body": [
          "IsPedDefensiveAreaActive(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3768": {
      "prefix": "IsPedDiving",
      "body": [
          "IsPedDiving(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3769": {
      "prefix": "IsPedDoingDriveby",
      "body": [
          "IsPedDoingDriveby(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3770": {
      "prefix": "IsPedDoingBeastJump",
      "body": [
          "IsPedDoingBeastJump(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3771": {
      "prefix": "IsPedEvasiveDiving",
      "body": [
          "IsPedEvasiveDiving(${1:Ped* ped}, ${2:Entity* evadingEntity})${0}"
      ],
      "description": "```\nPresumably returns the Entity that the Ped is currently diving out of the way of.\nvar num3;\n    if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)\n        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)\n```"
  },
  "3772": {
      "prefix": "IsPedDucking",
      "body": [
          "IsPedDucking(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3773": {
      "prefix": "IsPedFacingPed",
      "body": [
          "IsPedFacingPed(${1:Ped* ped}, ${2:Ped* otherPed}, ${3:float* angle})${0}"
      ],
      "description": "```\nangle is ped's view cone  \n```"
  },
  "3774": {
      "prefix": "IsPedFalling",
      "body": [
          "IsPedFalling(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3775": {
      "prefix": "IsPedFatallyInjured",
      "body": [
          "IsPedFatallyInjured(${1:Ped* ped})${0}"
      ],
      "description": "```\nGets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.  \nIf the handle is invalid, the function returns true.  \n```"
  },
  "3776": {
      "prefix": "IsPedFleeing",
      "body": [
          "IsPedFleeing(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3777": {
      "prefix": "IsPedGettingIntoAVehicle",
      "body": [
          "IsPedGettingIntoAVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3778": {
      "prefix": "IsPedGroupMember",
      "body": [
          "IsPedGroupMember(${1:Ped* ped}, ${2:int* groupId})${0}"
      ],
      "description": ""
  },
  "3779": {
      "prefix": "IsPedGoingIntoCover",
      "body": [
          "IsPedGoingIntoCover(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3780": {
      "prefix": "IsPedHairColorValid",
      "body": [
          "IsPedHairColorValid(${1:int* colorID})${0}"
      ],
      "description": ""
  },
  "3781": {
      "prefix": "IsPedHangingOnToVehicle",
      "body": [
          "IsPedHangingOnToVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3782": {
      "prefix": "IsPedHairColorValid2",
      "body": [
          "IsPedHairColorValid2(${1:int* colorId})${0}"
      ],
      "description": ""
  },
  "3783": {
      "prefix": "IsPedHeadingTowardsPosition",
      "body": [
          "IsPedHeadingTowardsPosition(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "3784": {
      "prefix": "IsPedHeadtrackingEntity",
      "body": [
          "IsPedHeadtrackingEntity(${1:Ped* ped}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "3785": {
      "prefix": "IsPedHeadtrackingPed",
      "body": [
          "IsPedHeadtrackingPed(${1:Ped* ped1}, ${2:Ped* ped2})${0}"
      ],
      "description": ""
  },
  "3786": {
      "prefix": "IsPedHelmetUnk",
      "body": [
          "IsPedHelmetUnk(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3787": {
      "prefix": "IsPedHuman",
      "body": [
          "IsPedHuman(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns true/false if the ped is/isn't humanoid.  \n```"
  },
  "3788": {
      "prefix": "IsPedHurt",
      "body": [
          "IsPedHurt(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns whether the specified ped is hurt.  \n```"
  },
  "3789": {
      "prefix": "IsPedInAnyBoat",
      "body": [
          "IsPedInAnyBoat(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3790": {
      "prefix": "IsPedInAnyHeli",
      "body": [
          "IsPedInAnyHeli(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3791": {
      "prefix": "IsPedInAnyPlane",
      "body": [
          "IsPedInAnyPlane(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3792": {
      "prefix": "IsPedInAnyPoliceVehicle",
      "body": [
          "IsPedInAnyPoliceVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3793": {
      "prefix": "IsPedInAnySub",
      "body": [
          "IsPedInAnySub(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3794": {
      "prefix": "IsPedInAnyTaxi",
      "body": [
          "IsPedInAnyTaxi(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3795": {
      "prefix": "IsPedInAnyTrain",
      "body": [
          "IsPedInAnyTrain(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3796": {
      "prefix": "IsPedInAnyVehicle",
      "body": [
          "IsPedInAnyVehicle(${1:Ped* ped}, ${2:BOOL* atGetIn})${0}"
      ],
      "description": "Returns whether the specified ped is in any vehicle. If `atGetIn` is set to true, also returns true if the ped is\ncurrently in the process of entering a vehicle (a specific stage check for `CTaskEnterVehicle`)."
  },
  "3797": {
      "prefix": "IsPedInCombat",
      "body": [
          "IsPedInCombat(${1:Ped* ped}, ${2:Ped* target})${0}"
      ],
      "description": "```\nChecks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.  \np1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794  \n```"
  },
  "3798": {
      "prefix": "IsPedInCover",
      "body": [
          "IsPedInCover(${1:Ped* ped}, ${2:BOOL* exceptUseWeapon})${0}"
      ],
      "description": "```\np1 is nearly always 0 in the scripts.  \n```"
  },
  "3799": {
      "prefix": "IsPedInCoverFacingLeft",
      "body": [
          "IsPedInCoverFacingLeft(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3800": {
      "prefix": "IsPedInFlyingVehicle",
      "body": [
          "IsPedInFlyingVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3801": {
      "prefix": "IsPedInHighCover",
      "body": [
          "IsPedInHighCover(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3802": {
      "prefix": "IsPedInGroup",
      "body": [
          "IsPedInGroup(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3803": {
      "prefix": "IsPedInMeleeCombat",
      "body": [
          "IsPedInMeleeCombat(${1:Ped* ped})${0}"
      ],
      "description": "```\nNotes: The function only returns true while the ped is:   \nA.) Swinging a random melee attack (including pistol-whipping)  \nB.) Reacting to being hit by a melee attack (including pistol-whipping)  \nC.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).   \nYou don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds  \n```"
  },
  "3804": {
      "prefix": "IsPedInModel",
      "body": [
          "IsPedInModel(${1:Ped* ped}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "3805": {
      "prefix": "IsPedInParachuteFreeFall",
      "body": [
          "IsPedInParachuteFreeFall(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3806": {
      "prefix": "IsPedInjured",
      "body": [
          "IsPedInjured(${1:Ped* ped})${0}"
      ],
      "description": "```\nGets a value indicating whether this ped's health is below its injured threshold.  \nThe default threshold is 100.  \n```"
  },
  "3807": {
      "prefix": "IsPedInVehicle",
      "body": [
          "IsPedInVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:BOOL* atGetIn})${0}"
      ],
      "description": "```\nGets a value indicating whether the specified ped is in the specified vehicle.  \nIf 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.  \n```"
  },
  "3808": {
      "prefix": "IsPedJumping",
      "body": [
          "IsPedJumping(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3809": {
      "prefix": "IsPedJacking",
      "body": [
          "IsPedJacking(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3810": {
      "prefix": "IsPedLipstickColorValid",
      "body": [
          "IsPedLipstickColorValid(${1:int* colorID})${0}"
      ],
      "description": ""
  },
  "3811": {
      "prefix": "IsPedJumpingOutOfVehicle",
      "body": [
          "IsPedJumpingOutOfVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3812": {
      "prefix": "IsPedMale",
      "body": [
          "IsPedMale(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns true/false if the ped is/isn't male.  \n```"
  },
  "3813": {
      "prefix": "IsPedLipstickColorValid2",
      "body": [
          "IsPedLipstickColorValid2(${1:int* colorId})${0}"
      ],
      "description": ""
  },
  "3814": {
      "prefix": "IsPedOnAnyBike",
      "body": [
          "IsPedOnAnyBike(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3815": {
      "prefix": "IsPedOnMount",
      "body": [
          "IsPedOnMount(${1:Ped* ped})${0}"
      ],
      "description": "```\nSame function call as PED::GET_MOUNT, aka just returns 0  \n```"
  },
  "3816": {
      "prefix": "IsPedModel",
      "body": [
          "IsPedModel(${1:Ped* ped}, ${2:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "3817": {
      "prefix": "IsPedOnFoot",
      "body": [
          "IsPedOnFoot(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3818": {
      "prefix": "IsPedOnVehicle",
      "body": [
          "IsPedOnVehicle(${1:Ped* ped})${0}"
      ],
      "description": "```\nGets a value indicating whether the specified ped is on top of any vehicle.  \nReturn 1 when ped is on vehicle.  \nReturn 0 when ped is not on a vehicle.  \n```"
  },
  "3819": {
      "prefix": "IsPedPerformingDependentComboLimit",
      "body": [
          "IsPedPerformingDependentComboLimit(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3820": {
      "prefix": "IsPedOnSpecificVehicle",
      "body": [
          "IsPedOnSpecificVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "3821": {
      "prefix": "IsPedPerformingStealthKill",
      "body": [
          "IsPedPerformingStealthKill(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3822": {
      "prefix": "IsPedOpeningADoor",
      "body": [
          "IsPedOpeningADoor(${1:Ped* ped})${0}"
      ],
      "description": "```\nIS_PED_*\n\nReturns true if the ped is currently opening a door (CTaskOpenDoor).\n```"
  },
  "3823": {
      "prefix": "IsPedPerformingMeleeAction",
      "body": [
          "IsPedPerformingMeleeAction(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3824": {
      "prefix": "IsPedProne",
      "body": [
          "IsPedProne(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3825": {
      "prefix": "IsPedPlantingBomb",
      "body": [
          "IsPedPlantingBomb(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3826": {
      "prefix": "IsPedRagdoll",
      "body": [
          "IsPedRagdoll(${1:Ped* ped})${0}"
      ],
      "description": "```\nIf the ped handle passed through the parenthesis is in a ragdoll state this will return true.  \n```"
  },
  "3827": {
      "prefix": "IsPedRespondingToEvent",
      "body": [
          "IsPedRespondingToEvent(${1:Ped* ped}, ${2:Any* event})${0}"
      ],
      "description": ""
  },
  "3828": {
      "prefix": "IsPedReloading",
      "body": [
          "IsPedReloading(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns whether the specified ped is reloading.  \n```"
  },
  "3829": {
      "prefix": "IsPedRunningMobilePhoneTask",
      "body": [
          "IsPedRunningMobilePhoneTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3830": {
      "prefix": "IsPedShaderEffectValid",
      "body": [
          "IsPedShaderEffectValid(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3831": {
      "prefix": "IsPedRunningMeleeTask",
      "body": [
          "IsPedRunningMeleeTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3832": {
      "prefix": "IsPedRunningRagdollTask",
      "body": [
          "IsPedRunningRagdollTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3833": {
      "prefix": "IsPedShootingInArea",
      "body": [
          "IsPedShootingInArea(${1:Ped* ped}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:BOOL* p7}, ${9:BOOL* p8})${0}"
      ],
      "description": ""
  },
  "3834": {
      "prefix": "IsPedShooting",
      "body": [
          "IsPedShooting(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns whether the specified ped is shooting.  \n```"
  },
  "3835": {
      "prefix": "IsPedSittingInAnyVehicle",
      "body": [
          "IsPedSittingInAnyVehicle(${1:Ped* ped})${0}"
      ],
      "description": "```\nDetect if ped is in any vehicle  \n[True/False]  \n```"
  },
  "3836": {
      "prefix": "IsPedSwappingWeapon",
      "body": [
          "IsPedSwappingWeapon(${1:Ped* Ped})${0}"
      ],
      "description": ""
  },
  "3837": {
      "prefix": "IsPedSittingInVehicle",
      "body": [
          "IsPedSittingInVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": "```\nDetect if ped is sitting in the specified vehicle  \n[True/False]  \n```"
  },
  "3838": {
      "prefix": "IsPedStopped",
      "body": [
          "IsPedStopped(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.  \n```"
  },
  "3839": {
      "prefix": "IsPedSwimming",
      "body": [
          "IsPedSwimming(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3840": {
      "prefix": "IsPedSwimmingUnderWater",
      "body": [
          "IsPedSwimmingUnderWater(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3841": {
      "prefix": "IsPedTakingOffHelmet",
      "body": [
          "IsPedTakingOffHelmet(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3842": {
      "prefix": "IsPedUsingActionMode",
      "body": [
          "IsPedUsingActionMode(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3843": {
      "prefix": "IsPedTracked",
      "body": [
          "IsPedTracked(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3844": {
      "prefix": "IsPedTryingToEnterALockedVehicle",
      "body": [
          "IsPedTryingToEnterALockedVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3845": {
      "prefix": "IsPedUsingAnyScenario",
      "body": [
          "IsPedUsingAnyScenario(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3846": {
      "prefix": "IsPedUsingScenario",
      "body": [
          "IsPedUsingScenario(${1:Ped* ped}, ${2:char* scenario})${0}"
      ],
      "description": ""
  },
  "3847": {
      "prefix": "IsPedVaulting",
      "body": [
          "IsPedVaulting(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3848": {
      "prefix": "IsPedheadshotImgUploadAvailable",
      "body": [
          "IsPedheadshotImgUploadAvailable()${0}"
      ],
      "description": ""
  },
  "3849": {
      "prefix": "IsPedheadshotReady",
      "body": [
          "IsPedheadshotReady(${1:int* id})${0}"
      ],
      "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```"
  },
  "3850": {
      "prefix": "IsPedWearingHelmet",
      "body": [
          "IsPedWearingHelmet(${1:Ped* ped})${0}"
      ],
      "description": "```\nReturns true if the ped passed through the parenthesis is wearing a helmet.  \n```"
  },
  "3851": {
      "prefix": "IsPedheadshotValid",
      "body": [
          "IsPedheadshotValid(${1:int* id})${0}"
      ],
      "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```"
  },
  "3852": {
      "prefix": "IsScriptedScenarioPedUsingConditionalAnim",
      "body": [
          "IsScriptedScenarioPedUsingConditionalAnim(${1:Ped* ped}, ${2:char* animDict}, ${3:char* anim})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "3853": {
      "prefix": "IsScubaGearLightEnabled",
      "body": [
          "IsScubaGearLightEnabled(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "3854": {
      "prefix": "IsSynchronizedSceneLooped",
      "body": [
          "IsSynchronizedSceneLooped(${1:int* sceneID})${0}"
      ],
      "description": ""
  },
  "3855": {
      "prefix": "IsSynchronizedSceneHoldLastFrame",
      "body": [
          "IsSynchronizedSceneHoldLastFrame(${1:int* sceneID})${0}"
      ],
      "description": ""
  },
  "3856": {
      "prefix": "IsSynchronizedSceneRunning",
      "body": [
          "IsSynchronizedSceneRunning(${1:int* sceneId})${0}"
      ],
      "description": "```\nReturns true if a synchronized scene is running  \n```"
  },
  "3857": {
      "prefix": "KnockPedOffVehicle",
      "body": [
          "KnockPedOffVehicle(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3858": {
      "prefix": "IsTrackedPedVisible",
      "body": [
          "IsTrackedPedVisible(${1:Ped* ped})${0}"
      ],
      "description": "```\nreturns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.  \nTarget needs to be tracked.. won't work otherwise.  \n```"
  },
  "3859": {
      "prefix": "KnockOffPedProp",
      "body": [
          "KnockOffPedProp(${1:Ped* ped}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "3860": {
      "prefix": "PlayFacialAnim",
      "body": [
          "PlayFacialAnim(${1:Ped* ped}, ${2:char* animName}, ${3:char* animDict})${0}"
      ],
      "description": ""
  },
  "3861": {
      "prefix": "RegisterHatedTargetsAroundPed",
      "body": [
          "RegisterHatedTargetsAroundPed(${1:Ped* ped}, ${2:float* radius})${0}"
      ],
      "description": "```\nBased on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).  \n```"
  },
  "3862": {
      "prefix": "RegisterPedheadshot",
      "body": [
          "RegisterPedheadshot(${1:Ped* ped})${0}"
      ],
      "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```"
  },
  "3863": {
      "prefix": "RegisterPedheadshot3",
      "body": [
          "RegisterPedheadshot3(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3864": {
      "prefix": "RegisterPedheadshotTransparent",
      "body": [
          "RegisterPedheadshotTransparent(${1:Ped* ped})${0}"
      ],
      "description": "Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black.\n\n**Result of the example code:**\n<https://i.imgur.com/iHz8ztn.png>"
  },
  "3865": {
      "prefix": "RegisterTarget",
      "body": [
          "RegisterTarget(${1:Ped* ped}, ${2:Ped* target})${0}"
      ],
      "description": "```\nPED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.  \nl_216 = RECSBRobber1  \n```"
  },
  "3866": {
      "prefix": "ReleasePedPreloadPropData",
      "body": [
          "ReleasePedPreloadPropData(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3867": {
      "prefix": "ReleasePedheadshotImgUpload",
      "body": [
          "ReleasePedheadshotImgUpload(${1:int* id})${0}"
      ],
      "description": ""
  },
  "3868": {
      "prefix": "ReleasePedPreloadVariationData",
      "body": [
          "ReleasePedPreloadVariationData(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3869": {
      "prefix": "RemoveActionModeAsset",
      "body": [
          "RemoveActionModeAsset(${1:char* asset})${0}"
      ],
      "description": ""
  },
  "3870": {
      "prefix": "RemoveGroup",
      "body": [
          "RemoveGroup(${1:int* groupId})${0}"
      ],
      "description": ""
  },
  "3871": {
      "prefix": "RemovePedDefensiveArea",
      "body": [
          "RemovePedDefensiveArea(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nPed will no longer get angry when you stay near him.  \n```"
  },
  "3872": {
      "prefix": "RemovePedElegantly",
      "body": [
          "RemovePedElegantly(${1:Ped* ped})${0}"
      ],
      "description": "```\nJudging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. \n```"
  },
  "3873": {
      "prefix": "RemovePedHelmet",
      "body": [
          "RemovePedHelmet(${1:Ped* ped}, ${2:BOOL* instantly})${0}"
      ],
      "description": ""
  },
  "3874": {
      "prefix": "RemovePedFromGroup",
      "body": [
          "RemovePedFromGroup(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3875": {
      "prefix": "RemovePedPreferredCoverSet",
      "body": [
          "RemovePedPreferredCoverSet(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3876": {
      "prefix": "RemoveRelationshipGroup",
      "body": [
          "RemoveRelationshipGroup(${1:Hash* groupHash})${0}"
      ],
      "description": ""
  },
  "3877": {
      "prefix": "RemoveScenarioBlockingAreas",
      "body": [
          "RemoveScenarioBlockingAreas()${0}"
      ],
      "description": ""
  },
  "3878": {
      "prefix": "RemoveScenarioBlockingArea",
      "body": [
          "RemoveScenarioBlockingArea(${1:Any* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3879": {
      "prefix": "RemoveStealthModeAsset",
      "body": [
          "RemoveStealthModeAsset(${1:char* asset})${0}"
      ],
      "description": ""
  },
  "3880": {
      "prefix": "RequestActionModeAsset",
      "body": [
          "RequestActionModeAsset(${1:char* asset})${0}"
      ],
      "description": ""
  },
  "3881": {
      "prefix": "RequestPedVehicleVisibilityTracking",
      "body": [
          "RequestPedVehicleVisibilityTracking(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3882": {
      "prefix": "RequestPedVisibilityTracking",
      "body": [
          "RequestPedVisibilityTracking(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3883": {
      "prefix": "RequestStealthModeAsset",
      "body": [
          "RequestStealthModeAsset(${1:char* asset})${0}"
      ],
      "description": ""
  },
  "3884": {
      "prefix": "RequestPedheadshotImgUpload",
      "body": [
          "RequestPedheadshotImgUpload(${1:int* id})${0}"
      ],
      "description": ""
  },
  "3885": {
      "prefix": "ResetAiMeleeWeaponDamageModifier",
      "body": [
          "ResetAiMeleeWeaponDamageModifier()${0}"
      ],
      "description": ""
  },
  "3886": {
      "prefix": "ResetAiWeaponDamageModifier",
      "body": [
          "ResetAiWeaponDamageModifier()${0}"
      ],
      "description": ""
  },
  "3887": {
      "prefix": "ResetPedInVehicleContext",
      "body": [
          "ResetPedInVehicleContext(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3888": {
      "prefix": "ResetGroupFormationDefaultSpacing",
      "body": [
          "ResetGroupFormationDefaultSpacing(${1:int* groupHandle})${0}"
      ],
      "description": ""
  },
  "3889": {
      "prefix": "ResetPedLastVehicle",
      "body": [
          "ResetPedLastVehicle(${1:Ped* ped})${0}"
      ],
      "description": "```\nResets the value for the last vehicle driven by the Ped.  \n```"
  },
  "3890": {
      "prefix": "ResetPedMovementClipset",
      "body": [
          "ResetPedMovementClipset(${1:Ped* ped}, ${2:float* p1})${0}"
      ],
      "description": "```\nIf p1 is 0.0, I believe you are back to normal.   \nIf p1 is 1.0, it looks like you can only rotate the ped, not walk.  \nUsing the following code to reset back to normal  \nPED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);  \n```"
  },
  "3891": {
      "prefix": "ResetPedRagdollTimer",
      "body": [
          "ResetPedRagdollTimer(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3892": {
      "prefix": "ResetPedStrafeClipset",
      "body": [
          "ResetPedStrafeClipset(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3893": {
      "prefix": "ResetPedWeaponMovementClipset",
      "body": [
          "ResetPedWeaponMovementClipset(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3894": {
      "prefix": "ResetPedVisibleDamage",
      "body": [
          "ResetPedVisibleDamage(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "3895": {
      "prefix": "ResurrectPed",
      "body": [
          "ResurrectPed(${1:Ped* ped})${0}"
      ],
      "description": "```\nThis function will simply bring the dead person back to life.\nTry not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).\nInstead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)\nAlso, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.\n```"
  },
  "3896": {
      "prefix": "ReviveInjuredPed",
      "body": [
          "ReviveInjuredPed(${1:Ped* ped})${0}"
      ],
      "description": "```\nIt will revive/cure the injured ped. The condition is ped must not be dead.  \nUpon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).  \nThis function is well suited there.  \n```"
  },
  "3897": {
      "prefix": "SetAiWeaponDamageModifier",
      "body": [
          "SetAiWeaponDamageModifier(${1:float* value})${0}"
      ],
      "description": ""
  },
  "3898": {
      "prefix": "SetAiMeleeWeaponDamageModifier",
      "body": [
          "SetAiMeleeWeaponDamageModifier(${1:float* modifier})${0}"
      ],
      "description": ""
  },
  "3899": {
      "prefix": "SetAmbientPedsDropMoney",
      "body": [
          "SetAmbientPedsDropMoney(${1:BOOL* p0})${0}"
      ],
      "description": ""
  },
  "3900": {
      "prefix": "SetBlockingOfNonTemporaryEvents",
      "body": [
          "SetBlockingOfNonTemporaryEvents(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nworks with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him\n```"
  },
  "3901": {
      "prefix": "SetCanAttackFriendly",
      "body": [
          "SetCanAttackFriendly(${1:Ped* ped}, ${2:BOOL* toggle}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nSetting ped to true allows the ped to shoot \"friendlies\".  \np2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.  \np1 = false & p2 = false for unable to aim at.  \np1 = true & p2 = false for able to aim at.  \n```"
  },
  "3902": {
      "prefix": "SetCombatFloat",
      "body": [
          "SetCombatFloat(${1:Ped* ped}, ${2:int* combatType}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "3903": {
      "prefix": "SetCreateRandomCops",
      "body": [
          "SetCreateRandomCops(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3904": {
      "prefix": "SetCreateRandomCopsNotOnScenarios",
      "body": [
          "SetCreateRandomCopsNotOnScenarios(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3905": {
      "prefix": "SetDriverAbility",
      "body": [
          "SetDriverAbility(${1:Ped* driver}, ${2:float* ability})${0}"
      ],
      "description": "```\nThe function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.  \n```"
  },
  "3906": {
      "prefix": "SetCreateRandomCopsOnScenarios",
      "body": [
          "SetCreateRandomCopsOnScenarios(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3907": {
      "prefix": "SetDriverRacingModifier",
      "body": [
          "SetDriverRacingModifier(${1:Ped* driver}, ${2:float* modifier})${0}"
      ],
      "description": "```\nScripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0\n```"
  },
  "3908": {
      "prefix": "SetEnableBoundAnkles",
      "body": [
          "SetEnableBoundAnkles(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Used with [SET_ENABLE_HANDCUFFS](#\\_0xDF1AF8B5D56542FA) in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend."
  },
  "3909": {
      "prefix": "SetDriverAggressiveness",
      "body": [
          "SetDriverAggressiveness(${1:Ped* driver}, ${2:float* aggressiveness})${0}"
      ],
      "description": "```\nrange 0.0f - 1.0f  \n```"
  },
  "3910": {
      "prefix": "SetEnableHandcuffs",
      "body": [
          "SetEnableHandcuffs(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nped can not pull out a weapon when true  \n```"
  },
  "3911": {
      "prefix": "SetEnablePedEnveffScale",
      "body": [
          "SetEnablePedEnveffScale(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3912": {
      "prefix": "SetEnableScuba",
      "body": [
          "SetEnableScuba(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nEnables diving motion when underwater.  \n```"
  },
  "3913": {
      "prefix": "SetFacialClipsetOverride",
      "body": [
          "SetFacialClipsetOverride(${1:Ped* ped}, ${2:char* animDict})${0}"
      ],
      "description": "Clipsets:\n\"facials@gen_female@base\"\n\"facials@gen_male@base\"\n\"facials@p_m_zero@base\"\n\nTypically followed with [SET_FACIAL_IDLE_ANIM_OVERRIDE](#\\_0xFFC24B988B938B38):\n\"mood_drunk\\_1\"\n\"mood_stressed\\_1\"\n\"mood_happy\\_1\"\n\"mood_talking\\_1\"\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "3914": {
      "prefix": "SetEnableScubaGearLight",
      "body": [
          "SetEnableScubaGearLight(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "3915": {
      "prefix": "SetFacialIdleAnimOverride",
      "body": [
          "SetFacialIdleAnimOverride(${1:Ped* ped}, ${2:char* animName}, ${3:char* animDict})${0}"
      ],
      "description": ""
  },
  "3916": {
      "prefix": "SetForceFootstepUpdate",
      "body": [
          "SetForceFootstepUpdate(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3917": {
      "prefix": "SetForceStepType",
      "body": [
          "SetForceStepType(${1:Ped* ped}, ${2:BOOL* p1}, ${3:int* type}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "3918": {
      "prefix": "SetGroupFormation",
      "body": [
          "SetGroupFormation(${1:int* groupId}, ${2:int* formationType})${0}"
      ],
      "description": "```\n0: Freedom to move\n1: Circle Around Leader\n2: Alternative Circle Around Leader  \n3: Line, with Leader at center  \n4: Arrow Formation\n5: \"V\" Formation\n6: Line Follow Formation\n7: Single Formation\n8: Pairwise\n```"
  },
  "3919": {
      "prefix": "SetGroupSeparationRange",
      "body": [
          "SetGroupSeparationRange(${1:int* groupHandle}, ${2:float* separationRange})${0}"
      ],
      "description": "```\nSets the range at which members will automatically leave the group.  \n```"
  },
  "3920": {
      "prefix": "SetGroupFormationSpacing",
      "body": [
          "SetGroupFormationSpacing(${1:int* groupId}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "3921": {
      "prefix": "SetHeadBlendPaletteColor",
      "body": [
          "SetHeadBlendPaletteColor(${1:Ped* ped}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* id})${0}"
      ],
      "description": "Preview: https://gfycat.com/MaleRareAmazonparrot"
  },
  "3922": {
      "prefix": "SetIkTarget",
      "body": [
          "SetIkTarget(${1:Ped* ped}, ${2:int* ikIndex}, ${3:Entity* entityLookAt}, ${4:int* boneLookAt}, ${5:float* offsetX}, ${6:float* offsetY}, ${7:float* offsetZ}, ${8:Any* p7}, ${9:int* blendInDuration}, ${10:int* blendOutDuration})${0}"
      ],
      "description": ""
  },
  "3923": {
      "prefix": "SetMovementModeOverride",
      "body": [
          "SetMovementModeOverride(${1:Ped* ped}, ${2:char* name})${0}"
      ],
      "description": "```\nname: \"MP_FEMALE_ACTION\" found multiple times in the b617d scripts.\n```"
  },
  "3924": {
      "prefix": "SetPedAccuracy",
      "body": [
          "SetPedAccuracy(${1:Ped* ped}, ${2:int* accuracy})${0}"
      ],
      "description": "```\naccuracy = 0-100, 100 being perfectly accurate\n```"
  },
  "3925": {
      "prefix": "SetPedAlertness",
      "body": [
          "SetPedAlertness(${1:Ped* ped}, ${2:int* value})${0}"
      ],
      "description": "```\nvalue ranges from 0 to 3.  \n```"
  },
  "3926": {
      "prefix": "SetPedAllowVehiclesOverride",
      "body": [
          "SetPedAllowVehiclesOverride(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3927": {
      "prefix": "SetPedAllowedToDuck",
      "body": [
          "SetPedAllowedToDuck(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3928": {
      "prefix": "SetPedAlternateMovementAnim",
      "body": [
          "SetPedAlternateMovementAnim(${1:Ped* ped}, ${2:int* stance}, ${3:char* animDictionary}, ${4:char* animationName}, ${5:float* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nstance:  \n0 = idle  \n1 = walk  \n2 = running  \np5 = usually set to true  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "3929": {
      "prefix": "SetPedAlternateWalkAnim",
      "body": [
          "SetPedAlternateWalkAnim(${1:Ped* ped}, ${2:char* animDict}, ${3:char* animName}, ${4:float* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "3930": {
      "prefix": "SetPedAngledDefensiveArea",
      "body": [
          "SetPedAngledDefensiveArea(${1:Ped* ped}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:BOOL* p8}, ${10:BOOL* p9})${0}"
      ],
      "description": ""
  },
  "3931": {
      "prefix": "SetPedArmour",
      "body": [
          "SetPedArmour(${1:Ped* ped}, ${2:int* amount})${0}"
      ],
      "description": "```\nSets the armor of the specified ped.  \nped: The Ped to set the armor of.  \namount: A value between 0 and 100 indicating the value to set the Ped's armor to.  \n```"
  },
  "3932": {
      "prefix": "SetPedAoBlobRendering",
      "body": [
          "SetPedAoBlobRendering(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nEnable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko\n```"
  },
  "3933": {
      "prefix": "SetPedAsCop",
      "body": [
          "SetPedAsCop(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nTurns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as \"false\" has no effect; you must change p0's ped model to disable the effect.  \n```"
  },
  "3934": {
      "prefix": "SetPedAsEnemy",
      "body": [
          "SetPedAsEnemy(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3935": {
      "prefix": "SetPedAsGroupLeader",
      "body": [
          "SetPedAsGroupLeader(${1:Ped* ped}, ${2:int* groupId})${0}"
      ],
      "description": ""
  },
  "3936": {
      "prefix": "SetPedAsGroupMember",
      "body": [
          "SetPedAsGroupMember(${1:Ped* ped}, ${2:int* groupId})${0}"
      ],
      "description": ""
  },
  "3937": {
      "prefix": "SetPedBlendFromParents",
      "body": [
          "SetPedBlendFromParents(${1:Ped* ped}, ${2:Ped* father}, ${3:Ped* mother}, ${4:float* fathersSide}, ${5:float* mothersSide})${0}"
      ],
      "description": ""
  },
  "3938": {
      "prefix": "SetPedBoundsOrientation",
      "body": [
          "SetPedBoundsOrientation(${1:Ped* ped}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": ""
  },
  "3939": {
      "prefix": "SetPedBlocksPathingWhenDead",
      "body": [
          "SetPedBlocksPathingWhenDead(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3940": {
      "prefix": "SetPedCanArmIk",
      "body": [
          "SetPedCanArmIk(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3941": {
      "prefix": "SetPedCanBeDraggedOut",
      "body": [
          "SetPedCanBeDraggedOut(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3942": {
      "prefix": "SetPedCanBeKnockedOffVehicle",
      "body": [
          "SetPedCanBeKnockedOffVehicle(${1:Ped* ped}, ${2:int* state})${0}"
      ],
      "description": "```\nstate: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt\n```"
  },
  "3943": {
      "prefix": "SetPedCanBeShotInVehicle",
      "body": [
          "SetPedCanBeShotInVehicle(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3944": {
      "prefix": "SetPedCanBeTargetedWithoutLos",
      "body": [
          "SetPedCanBeTargetedWithoutLos(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3945": {
      "prefix": "SetPedCanBeTargetedWhenInjured",
      "body": [
          "SetPedCanBeTargetedWhenInjured(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3946": {
      "prefix": "SetPedCanBeTargettedByPlayer",
      "body": [
          "SetPedCanBeTargettedByPlayer(${1:Ped* ped}, ${2:Player* player}, ${3:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3947": {
      "prefix": "SetPedCanBeTargetted",
      "body": [
          "SetPedCanBeTargetted(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3948": {
      "prefix": "SetPedCanBeTargettedByTeam",
      "body": [
          "SetPedCanBeTargettedByTeam(${1:Ped* ped}, ${2:int* team}, ${3:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3949": {
      "prefix": "SetPedCanCowerInCover",
      "body": [
          "SetPedCanCowerInCover(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nIt simply makes the said ped to cower behind cover object(wall, desk, car)  \nPeds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.  \n```"
  },
  "3950": {
      "prefix": "SetPedCanEvasiveDive",
      "body": [
          "SetPedCanEvasiveDive(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3951": {
      "prefix": "SetPedCanHeadIk",
      "body": [
          "SetPedCanHeadIk(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3952": {
      "prefix": "SetPedCanLegIk",
      "body": [
          "SetPedCanLegIk(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3953": {
      "prefix": "SetPedCanPeekInCover",
      "body": [
          "SetPedCanPeekInCover(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3954": {
      "prefix": "SetPedCanPlayAmbientAnims",
      "body": [
          "SetPedCanPlayAmbientAnims(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3955": {
      "prefix": "SetPedCanPlayAmbientBaseAnims",
      "body": [
          "SetPedCanPlayAmbientBaseAnims(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3956": {
      "prefix": "SetPedCanPlayGestureAnims",
      "body": [
          "SetPedCanPlayGestureAnims(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3957": {
      "prefix": "SetPedCanPlayInjuredAnims",
      "body": [
          "SetPedCanPlayInjuredAnims(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3958": {
      "prefix": "SetPedCanRagdoll",
      "body": [
          "SetPedCanRagdoll(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3959": {
      "prefix": "SetPedCanPlayVisemeAnims",
      "body": [
          "SetPedCanPlayVisemeAnims(${1:Ped* ped}, ${2:BOOL* toggle}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np2 usually 0  \n```"
  },
  "3960": {
      "prefix": "SetPedCanRagdollFromPlayerImpact",
      "body": [
          "SetPedCanRagdollFromPlayerImpact(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3961": {
      "prefix": "SetPedCanSmashGlass",
      "body": [
          "SetPedCanSmashGlass(${1:Ped* ped}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "3962": {
      "prefix": "SetPedCanSwitchWeapon",
      "body": [
          "SetPedCanSwitchWeapon(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3963": {
      "prefix": "SetPedCanTeleportToGroupLeader",
      "body": [
          "SetPedCanTeleportToGroupLeader(${1:Ped* pedHandle}, ${2:int* groupHandle}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```\nThis only will teleport the ped to the group leader if the group leader teleports (sets coords).  \nOnly works in singleplayer  \n```"
  },
  "3964": {
      "prefix": "SetPedCanTorsoReactIk",
      "body": [
          "SetPedCanTorsoReactIk(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3965": {
      "prefix": "SetPedCanUseAutoConversationLookat",
      "body": [
          "SetPedCanUseAutoConversationLookat(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3966": {
      "prefix": "SetPedClothPackageIndex",
      "body": [
          "SetPedClothPackageIndex(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "3967": {
      "prefix": "SetPedCanTorsoIk",
      "body": [
          "SetPedCanTorsoIk(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3968": {
      "prefix": "SetPedCanTorsoVehicleIk",
      "body": [
          "SetPedCanTorsoVehicleIk(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "3969": {
      "prefix": "SetPedClothProne",
      "body": [
          "SetPedClothProne(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "3970": {
      "prefix": "SetPedCapsule",
      "body": [
          "SetPedCapsule(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": "```\nOverrides the ped's collision capsule radius for the current tick.  \nMust be called every tick to be effective.  \nSetting this to 0.001 will allow warping through some objects.  \n```"
  },
  "3971": {
      "prefix": "SetPedCombatAttributes",
      "body": [
          "SetPedCombatAttributes(${1:Ped* ped}, ${2:int* attributeIndex}, ${3:BOOL* enabled})${0}"
      ],
      "description": "```\nThese combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.  \nSo far, these are the equivalents found:  \nenum CombatAttributes  \n{  \n\tBF_CanUseCover = 0,  \n\tBF_CanUseVehicles = 1,  \n\tBF_CanDoDrivebys = 2,  \n\tBF_CanLeaveVehicle = 3,  \n\tBF_CanFightArmedPedsWhenNotArmed = 5,  \n\tBF_CanTauntInVehicle = 20,  \n\tBF_AlwaysFight = 46,  \n\tBF_IgnoreTrafficWhenDriving = 52,  \n        BF_FreezeMovement = 292,  \n        BF_PlayerCanUseFiringWeapons = 1424  \n};  \n8 = ?  \n9 = ?  \n13 = ?  \n14 ?  \nResearch thread: gtaforums.com/topic/833391-researchguide-combat-behaviour-flags/  \n```"
  },
  "3972": {
      "prefix": "SetPedCombatAbility",
      "body": [
          "SetPedCombatAbility(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\n100 would equal attack  \nless then 50ish would mean run away  \nOnly the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:  \n0: CA_Poor  \n1: CA_Average  \n2: CA_Professional  \nTested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.  \n```"
  },
  "3973": {
      "prefix": "SetPedCombatRange",
      "body": [
          "SetPedCombatRange(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\nOnly the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described as AttackRange in combatbehaviour.meta:  \n0: CR_Near  \n1: CR_Medium  \n2: CR_Far  \n```"
  },
  "3974": {
      "prefix": "SetPedCombatMovement",
      "body": [
          "SetPedCombatMovement(${1:Ped* ped}, ${2:int* combatMovement})${0}"
      ],
      "description": "```\n0 - Stationary (Will just stand in place)  \n1 - Defensive (Will try to find cover and very likely to blind fire)  \n2 - Offensive (Will attempt to charge at enemy but take cover as well)  \n3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)  \n```"
  },
  "3975": {
      "prefix": "SetPedComponentVariation",
      "body": [
          "SetPedComponentVariation(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId}, ${4:int* textureId}, ${5:int* paletteId})${0}"
      ],
      "description": "This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\\\n**1**: Mask\\\n**2**: Hair\\\n**3**: Torso\\\n**4**: Leg\\\n**5**: Parachute / bag\\\n**6**: Shoes\\\n**7**: Accessory\\\n**8**: Undershirt\\\n**9**: Kevlar\\\n**10**: Badge\\\n**11**: Torso 2\n\n### Related and useful natives\n\n[GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842)\\\n[GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD)\n\n[List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples"
  },
  "3976": {
      "prefix": "SetPedCoordsNoGang",
      "body": [
          "SetPedCoordsNoGang(${1:Ped* ped}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})${0}"
      ],
      "description": ""
  },
  "3977": {
      "prefix": "SetPedCowerHash",
      "body": [
          "SetPedCowerHash(${1:Ped* ped}, ${2:char* p1})${0}"
      ],
      "description": "```\np1: Only \"CODE_HUMAN_STAND_COWER\" found in the b617d scripts.  \n```"
  },
  "3978": {
      "prefix": "SetPedConfigFlag",
      "body": [
          "SetPedConfigFlag(${1:Ped* ped}, ${2:int* flagId}, ${3:BOOL* value})${0}"
      ],
      "description": "```cpp\n// Potential names and hash collisions included as comments\nenum ePedConfigFlags {\n\t_0x67D1A445 = 0,\n\t_0xC63DE95E = 1,\n\tCPED_CONFIG_FLAG_NoCriticalHits = 2,\n\tCPED_CONFIG_FLAG_DrownsInWater = 3,\n\tCPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,\n\t_0x37D196F4 = 5,\n\t_0xE2462399 = 6,\n\tCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\n\t_0xEDDEB838 = 8,\n\t_0xB398B6FD = 9,\n\t_0xF6664E68 = 10,\n\t_0xA05E7CA3 = 11,\n\t_0xCE394045 = 12,\n\tCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\n\t_0xCD8D1411 = 14,\n\t_0xB031F1A9 = 15,\n\t_0xFE65BEE3 = 16,\n\tCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\n\t_0x380165BD = 18,\n\t_0x07C045C7 = 19,\n\t_0x583B5E2D = 20,\n\t_0x475EDA58 = 21,\n\t_0x8629D05B = 22,\n\t_0x1522968B = 23,\n\tCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\n\t_0x4CC09C4B = 25,\n\t_0x034F3053 = 26,\n\t_0xD91BA7CC = 27,\n\t_0x5C8DC66E = 28,\n\t_0x8902EAA0 = 29,\n\t_0x6580B9D2 = 30,\n\t_0x0EF7A297 = 31,\n\t_0x6BF86E5B = 32,\n\tCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\n\tCPED_CONFIG_FLAG_HasHelmet = 34,\n\tCPED_CONFIG_FLAG_UseHelmet = 35,\n\t_0xEEB3D630 = 36,\n\t_0xB130D17B = 37,\n\t_0x5F071200 = 38,\n\tCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\n\t_0xC287AAFF = 40,\n\t_0x203328CC = 41,\n\tCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\n\tCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\n\tCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\n\t_0xEC4A8ACF = 45,\n\t_0xDB115BFA = 46,\n\tCPED_CONFIG_FLAG_PedBeingDeleted = 47,\n\tCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\n\t_0xF8E99565 = 49,\n\t_0xDD17FEE6 = 50,\n\t_0x7ED9B2C9 = 51,\n\t_0x655E8618 = 52,\n\t_0x5A6C1F6E = 53,\n\t_0xD749FC41 = 54,\n\t_0x357F63F3 = 55,\n\t_0xC5E60961 = 56,\n\t_0x29275C3E = 57,\n\tCPED_CONFIG_FLAG_IsFiring = 58,\n\tCPED_CONFIG_FLAG_WasFiring = 59,\n\tCPED_CONFIG_FLAG_IsStanding = 60,\n\tCPED_CONFIG_FLAG_WasStanding = 61,\n\tCPED_CONFIG_FLAG_InVehicle = 62,\n\tCPED_CONFIG_FLAG_OnMount = 63,\n\tCPED_CONFIG_FLAG_AttachedToVehicle = 64,\n\tCPED_CONFIG_FLAG_IsSwimming = 65,\n\tCPED_CONFIG_FLAG_WasSwimming = 66,\n\tCPED_CONFIG_FLAG_IsSkiing = 67,\n\tCPED_CONFIG_FLAG_IsSitting = 68,\n\tCPED_CONFIG_FLAG_KilledByStealth = 69,\n\tCPED_CONFIG_FLAG_KilledByTakedown = 70,\n\tCPED_CONFIG_FLAG_Knockedout = 71,\n\t_0x3E3C4560 = 72,\n\t_0x2994C7B7 = 73,\n\t_0x6D59D275 = 74,\n\tCPED_CONFIG_FLAG_UsingCoverPoint = 75,\n\tCPED_CONFIG_FLAG_IsInTheAir = 76,\n\t_0x2D493FB7 = 77,\n\tCPED_CONFIG_FLAG_IsAimingGun = 78,\n\t_0x14D69875 = 79,\n\t_0x40B05311 = 80,\n\t_0x8B230BC5 = 81,\n\t_0xC74E5842 = 82,\n\t_0x9EA86147 = 83,\n\t_0x674C746C = 84,\n\t_0x3E56A8C2 = 85,\n\t_0xC144A1EF = 86,\n\t_0x0548512D = 87,\n\t_0x31C93909 = 88,\n\t_0xA0269315 = 89,\n\t_0xD4D59D4D = 90,\n\t_0x411D4420 = 91,\n\t_0xDF4AEF0D = 92,\n\tCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\n\t_0x300E4CD3 = 94,\n\t_0xF1C5BF04 = 95,\n\t_0x89C2EF13 = 96,\n\tCPED_CONFIG_FLAG_VaultFromCover = 97,\n\t_0x02A852C8 = 98,\n\t_0x3D9407F1 = 99,\n\t_0x319B4558 = 100,\n\tCPED_CONFIG_FLAG_ForcedAim = 101,\n\t_0xB942D71A = 102,\n\t_0xD26C55A8 = 103,\n\t_0xB89E703B = 104,\n\tCPED_CONFIG_FLAG_ForceReload = 105,\n\t_0xD9E73DA2 = 106,\n\t_0xFF71DC2C = 107,\n\t_0x1E27E8D8 = 108,\n\t_0xF2C53966 = 109,\n\t_0xC4DBE247 = 110,\n\t_0x83C0A4BF = 111,\n\t_0x0E0FAF8C = 112,\n\t_0x26616660 = 113,\n\t_0x43B80B79 = 114,\n\t_0x0D2A9309 = 115,\n\t_0x12C1C983 = 116,\n\tCPED_CONFIG_FLAG_BumpedByPlayer = 117,\n\t_0xE586D504 = 118,\n\t_0x52374204 = 119,\n\tCPED_CONFIG_FLAG_IsHandCuffed = 120,\n\tCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\n\tCPED_CONFIG_FLAG_DisableMelee = 122,\n\t_0xFE714397 = 123,\n\t_0xB3E660BD = 124,\n\t_0x5FED6BFD = 125,\n\t_0xC9D6F66F = 126,\n\t_0x519BC986 = 127,\n\tCPED_CONFIG_FLAG_CanBeAgitated = 128,\n\t_0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult\n\t_0xDAB70E9F = 130,\n\t_0xE569438A = 131,\n\t_0xBBC77D6D = 132,\n\t_0xCB59EF0F = 133,\n\t_0x8C5EA971 = 134,\n\tCPED_CONFIG_FLAG_IsScuba = 135,\n\tCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\n\t_0xDCE59B58 = 137,\n\tCPED_CONFIG_FLAG_RidingTrain = 138,\n\tCPED_CONFIG_FLAG_ArrestResult = 139,\n\tCPED_CONFIG_FLAG_CanAttackFriendly = 140,\n\t_0x98A4BE43 = 141,\n\t_0x6901E731 = 142,\n\t_0x9EC9BF6C = 143,\n\t_0x42841A8F = 144,\n\tCPED_CONFIG_FLAG_ShootingAnimFlag = 145,\n\tCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\n\tCPED_CONFIG_FLAG_StairsDetected = 147,\n\tCPED_CONFIG_FLAG_SlopeDetected = 148,\n\t_0x1A15670B = 149,\n\t_0x61786EE5 = 150,\n\t_0xCB9186BD = 151,\n\t_0xF0710152 = 152,\n\t_0x43DFE310 = 153,\n\t_0xC43C624E = 154,\n\tCPED_CONFIG_FLAG_CanPerformArrest = 155,\n\tCPED_CONFIG_FLAG_CanPerformUncuff = 156,\n\tCPED_CONFIG_FLAG_CanBeArrested = 157,\n\t_0xF7960FF5 = 158,\n\t_0x59564113 = 159,\n\t_0x0C6C3099 = 160,\n\t_0x645F927A = 161,\n\t_0xA86549B9 = 162,\n\t_0x8AAF337A = 163,\n\t_0x13BAA6E7 = 164,\n\t_0x5FB9D1F5 = 165,\n\tCPED_CONFIG_FLAG_IsInjured = 166,\n\t_0x6398A20B = 167,\n\t_0xD8072639 = 168,\n\t_0xA05B1845 = 169,\n\t_0x83F6D220 = 170,\n\t_0xD8430331 = 171,\n\t_0x4B547520 = 172,\n\t_0xE66E1406 = 173,\n\t_0x1C4BFE0C = 174,\n\t_0x90008BFA = 175,\n\t_0x07C7A910 = 176,\n\t_0xF15F8191 = 177,\n\t_0xCE4E8BE2 = 178,\n\t_0x1D46E4F2 = 179,\n\tCPED_CONFIG_FLAG_IsInCustody = 180,\n\t_0xE4FD9B3A = 181,\n\t_0x67AE0812 = 182,\n\tCPED_CONFIG_FLAG_IsAgitated = 183,\n\tCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\n\t_0x7B2D325E = 185,\n\tCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\n\tCPED_CONFIG_FLAG_HasHurtStarted = 187,\n\tCPED_CONFIG_FLAG_DisableHurt = 188,\n\tCPED_CONFIG_FLAG_PlayerIsWeird = 189,\n\t_0x32FC208B = 190,\n\t_0x0C296E5A = 191,\n\t_0xE63B73EC = 192,\n\t_0x04E9CC80 = 193,\n\tCPED_CONFIG_FLAG_UsingScenario = 194,\n\tCPED_CONFIG_FLAG_VisibleOnScreen = 195,\n\t_0xD88C58A1 = 196,\n\t_0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide\n\t_0xEA02B420 = 198,\n\t_0x3F559CFF = 199,\n\t_0x8C55D029 = 200,\n\t_0x5E6466F6 = 201,\n\t_0xEB5AD706 = 202,\n\t_0x0EDDDDE7 = 203,\n\t_0xA64F7B1D = 204,\n\t_0x48532CBA = 205,\n\t_0xAA25A9E7 = 206,\n\t_0x415B26B9 = 207,\n\tCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\n\tCPED_CONFIG_FLAG_DodgedPlayer = 209,\n\t_0x67405504 = 210,\n\t_0x75DDD68C = 211,\n\t_0x2AD879B4 = 212,\n\t_0x51486F91 = 213,\n\t_0x32F79E21 = 214,\n\t_0xBF099213 = 215,\n\t_0x054AC8E2 = 216,\n\t_0x14E495CC = 217,\n\t_0x3C7DF9DF = 218,\n\t_0x848FFEF2 = 219,\n\tCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\n\t_0x2618E1CF = 221,\n\t_0x84F722FA = 222,\n\t_0xD1B87B1F = 223,\n\t_0x728AA918 = 224,\n\tCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\n\tCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\n\t_0x59E91185 = 227,\n\t_0x1EA7225F = 228,\n\tCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\n\t_0x6DCA7D88 = 230,\n\t_0xFC3E572D = 231,\n\t_0x08E9F9CF = 232,\n\t_0x2D3BA52D = 233,\n\t_0xFD2F53EA = 234,\n\t_0x31A1B03B = 235,\n\tCPED_CONFIG_FLAG_IsHoldingProp = 236,\n\t_0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead\n\t_0xCE57C9A3 = 238,\n\t_0x26149198 = 239,\n\t_0x1B33B598 = 240,\n\t_0x719B6E87 = 241,\n\t_0x13E8E8E8 = 242,\n\t_0xF29739AE = 243,\n\t_0xABEA8A74 = 244,\n\t_0xB60EA2BA = 245,\n\t_0x536B0950 = 246,\n\t_0x0C754ACA = 247,\n\t_0x69D28F3E = 248,\n\t_0x12659168 = 249,\n\t_0x1BDF2F04 = 250,\n\t_0x7728FAA3 = 251,\n\t_0x6A807ED8 = 252,\n\tCPED_CONFIG_FLAG_OnStairs = 253,\n\t_0xE1A2F73F = 254,\n\t_0x5B3697C8 = 255,\n\t_0xF1EB20A9 = 256,\n\t_0x8B7DF407 = 257,\n\t_0x329DCF1A = 258,\n\t_0x8D90DD1B = 259,\n\t_0xB8A292B7 = 260,\n\t_0x8374B087 = 261,\n\t_0x2AF558F0 = 262,\n\t_0x82251455 = 263,\n\t_0x30CF498B = 264,\n\t_0xE1CD50AF = 265,\n\t_0x72E4AE48 = 266,\n\t_0xC2657EA1 = 267,\n\t_0x29FF6030 = 268,\n\t_0x8248A5EC = 269,\n\tCPED_CONFIG_FLAG_OnStairSlope = 270,\n\t_0xA0897933 = 271,\n\tCPED_CONFIG_FLAG_DontBlipCop = 272,\n\tCPED_CONFIG_FLAG_ClimbedShiftedFence = 273,\n\t_0xF7823618 = 274,\n\t_0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped\n\tCPED_CONFIG_FLAG_EdgeDetected = 276,\n\t_0x92B67896 = 277,\n\t_0xCAD677C9 = 278,\n\tCPED_CONFIG_FLAG_AvoidTearGas = 279,\n\t_0x5276AC7B = 280,\n\t_0x1032692A = 281,\n\t_0xDA23E7F1 = 282,\n\t_0x9139724D = 283,\n\t_0xA1457461 = 284,\n\t_0x4186E095 = 285,\n\t_0xAC68E2EB = 286,\n\tCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\n\tCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\n\t_0x1B9EE8A1 = 289,\n\t_0xF3F5758C = 290,\n\t_0x2A9307F1 = 291,\n\t_0x7403D216 = 292,\n\t_0xA06A3C6C = 293,\n\tCPED_CONFIG_FLAG_DisableShockingEvents = 294,\n\t_0xF8DA25A5 = 295,\n\t_0x7EF55802 = 296,\n\t_0xB31F1187 = 297,\n\t_0x84315402 = 298,\n\t_0x0FD69867 = 299,\n\t_0xC7829B67 = 300,\n\tCPED_CONFIG_FLAG_DisablePedConstraints = 301,\n\t_0x6D23CF25 = 302,\n\t_0x2ADA871B = 303,\n\t_0x47BC8A58 = 304,\n\t_0xEB692FA5 = 305,\n\t_0x4A133C50 = 306,\n\t_0xC58099C3 = 307,\n\t_0xF3D76D41 = 308,\n\t_0xB0EEE9F2 = 309,\n\tCPED_CONFIG_FLAG_IsInCluster = 310,\n\t_0x0FA153EF = 311,\n\t_0xD73F5CD3 = 312,\n\t_0xD4136C22 = 313,\n\t_0xE404CA6B = 314,\n\t_0xB9597446 = 315,\n\t_0xD5C98277 = 316,\n\t_0xD5060A9C = 317,\n\t_0x3E5F1CBB = 318,\n\t_0xD8BE1D54 = 319,\n\t_0x0B1F191F = 320,\n\t_0xC995167A = 321,\n\tCPED_CONFIG_FLAG_HasHighHeels = 322,\n\t_0x86B01E54 = 323,\n\t_0x3A56FE15 = 324,\n\t_0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario\n\t_0xBBF47729 = 326,\n\t_0x22B668A8 = 327,\n\t_0x2624D4D4 = 328,\n\tCPED_CONFIG_FLAG_DisableTalkTo = 329,\n\tCPED_CONFIG_FLAG_DontBlip = 330,\n\tCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\n\t_0x630F55F3 = 332,\n\t_0x150468FD = 333,\n\t_0x914EBD6B = 334,\n\t_0x79AF3B6D = 335,\n\t_0x75C7A632 = 336,\n\t_0x52D530E2 = 337,\n\t_0xDB2A90E0 = 338,\n\t_0x5922763D = 339,\n\t_0x12ADB567 = 340,\n\t_0x105C8518 = 341,\n\t_0x106F703D = 342,\n\t_0xED152C3E = 343,\n\t_0xA0EFE6A8 = 344,\n\t_0xBF348C82 = 345,\n\t_0xCDDFE830 = 346,\n\t_0x7B59BD9B = 347,\n\t_0x0124C788 = 348,\n\tCPED_CONFIG_FLAG_EquipJetpack = 349,\n\t_0x08D361A5 = 350,\n\t_0xE13D1F7C = 351,\n\t_0x40E25FB9 = 352,\n\t_0x930629D9 = 353,\n\t_0xECCF0C7F = 354,\n\t_0xB6E9613B = 355,\n\t_0x490C0478 = 356,\n\t_0xE8865BEA = 357,\n\t_0xF3C34A29 = 358,\n\tCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\n\t_0xF660E115 = 360,\n\t_0xAB0E6DED = 361,\n\tCPED_CONFIG_FLAG_HasReserveParachute = 362,\n\tCPED_CONFIG_FLAG_UseReserveParachute = 363,\n\t_0x5C5D9CD3 = 364,\n\t_0x8F7701F3 = 365,\n\t_0xBC4436AD = 366,\n\t_0xD7E07D37 = 367,\n\t_0x03C4FD24 = 368,\n\t_0x7675789A = 369,\n\t_0xB7288A88 = 370,\n\t_0xC06B6291 = 371,\n\t_0x95A4A805 = 372,\n\t_0xA8E9A042 = 373,\n\tCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\n\t_0xBAC674B3 = 375,\n\t_0x147F1FFB = 376,\n\t_0x4376DD79 = 377,\n\t_0xCD3DB518 = 378,\n\t_0xFE4BA4B6 = 379,\n\t_0x5DF03A55 = 380,\n\t_0xBCD816CD = 381,\n\t_0xCF02DD69 = 382,\n\t_0xF73AFA2E = 383,\n\t_0x80B9A9D0 = 384,\n\t_0xF601F7EE = 385,\n\t_0xA91350FC = 386,\n\t_0x3AB23B96 = 387,\n\tCPED_CONFIG_FLAG_IsClimbingLadder = 388,\n\tCPED_CONFIG_FLAG_HasBareFeet = 389,\n\t_0xB4B1CD4C = 390,\n\t_0x5459AFB8 = 391,\n\t_0x54F27667 = 392,\n\t_0xC11D3E8F = 393,\n\t_0x5419EB3E = 394,\n\t_0x82D8DBB4 = 395,\n\t_0x33B02D2F = 396,\n\t_0xAE66176D = 397,\n\t_0xA2692593 = 398,\n\t_0x714C7E31 = 399,\n\t_0xEC488AC7 = 400,\n\t_0xAE398504 = 401,\n\t_0xABC58D72 = 402,\n\t_0x5E5B9591 = 403,\n\t_0x6BA1091E = 404,\n\t_0x77840177 = 405,\n\t_0x1C7ACAC4 = 406,\n\t_0x124420E9 = 407,\n\t_0x75A65587 = 408,\n\t_0xDFD2D55B = 409,\n\t_0xBDD39919 = 410,\n\t_0x43DEC267 = 411,\n\t_0xE42B7797 = 412,\n\tCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\n\t_0x4F8149F5 = 414,\n\t_0xDD9ECA7A = 415,\n\t_0x9E7EF9D2 = 416,\n\t_0x2C6ED942 = 417,\n\tCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\n\t_0xA488727D = 419,\n\t_0xCFF5F6DE = 420,\n\t_0x6D614599 = 421,\n\tCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\n\t_0xFE401D26 = 423,\n\tCPED_CONFIG_FLAG_FallsLikeAircraft = 424,\n\t_0x2B42AE82 = 425,\n\t_0x7A95734F = 426,\n\t_0xDF4D8617 = 427,\n\t_0x578F1F14 = 428,\n\tCPED_CONFIG_FLAG_DisableStartEngine = 429,\n\tCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\n\t_0x153C9500 = 431,\n\t_0xCB7A632E = 432,\n\t_0xDE727981 = 433,\n\tCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\n\t_0x12BBB935 = 435,\n\t_0xAD0A1277 = 436,\n\t_0xEA6AA46A = 437,\n\tCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\n\t_0xCB7F3A1E = 439,\n\t_0x50178878 = 440,\n\t_0x051B4F0D = 441,\n\t_0x2FC3DECC = 442,\n\t_0xC0030B0B = 443,\n\t_0xBBDAF1E9 = 444,\n\t_0x944FE59C = 445,\n\t_0x506FBA39 = 446,\n\t_0xDD45FE84 = 447,\n\t_0xE698AE75 = 448,\n\t_0x199633F8 = 449,\n\tCPED_CONFIG_FLAG_PedIsArresting = 450,\n\tCPED_CONFIG_FLAG_IsDecoyPed = 451,\n\t_0x3A251D83 = 452,\n\t_0xA56F6986 = 453,\n\t_0x1D19C622 = 454,\n\t_0xB68D3EAB = 455,\n\tCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\n\t_0x4BD5EBAD = 457,\n}\n```"
  },
  "3979": {
      "prefix": "SetPedDefaultComponentVariation",
      "body": [
          "SetPedDefaultComponentVariation(${1:Ped* ped})${0}"
      ],
      "description": "```\nSets Ped Default Clothes  \n```"
  },
  "3980": {
      "prefix": "SetPedCoordsKeepVehicle",
      "body": [
          "SetPedCoordsKeepVehicle(${1:Ped* ped}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})${0}"
      ],
      "description": "```\nteleports ped to coords along with the vehicle ped is in  \n```"
  },
  "3981": {
      "prefix": "SetPedCoverClipsetOverride",
      "body": [
          "SetPedCoverClipsetOverride(${1:Ped* ped}, ${2:char* p1})${0}"
      ],
      "description": "```\nFound in the b617d scripts:\nPED::_9DBA107B4937F809(v_7, \"trevor_heist_cover_2h\");\nSET_PED_MO*\n```"
  },
  "3982": {
      "prefix": "SetPedDefensiveAreaAttachedToPed",
      "body": [
          "SetPedDefensiveAreaAttachedToPed(${1:Ped* ped}, ${2:Ped* attachPed}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:float* p8}, ${10:BOOL* p9}, ${11:BOOL* p10})${0}"
      ],
      "description": ""
  },
  "3983": {
      "prefix": "SetPedDefensiveSphereAttachedToPed",
      "body": [
          "SetPedDefensiveSphereAttachedToPed(${1:Ped* ped}, ${2:Ped* target}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* radius}, ${7:BOOL* p6})${0}"
      ],
      "description": ""
  },
  "3984": {
      "prefix": "SetPedDefensiveSphereAttachedToVehicle",
      "body": [
          "SetPedDefensiveSphereAttachedToVehicle(${1:Ped* ped}, ${2:Vehicle* target}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:float* radius}, ${7:BOOL* p6})${0}"
      ],
      "description": ""
  },
  "3985": {
      "prefix": "SetPedDefensiveAreaDirection",
      "body": [
          "SetPedDefensiveAreaDirection(${1:Ped* ped}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "3986": {
      "prefix": "SetPedDensityMultiplierThisFrame",
      "body": [
          "SetPedDensityMultiplierThisFrame(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "3987": {
      "prefix": "SetPedDesiredHeading",
      "body": [
          "SetPedDesiredHeading(${1:Ped* ped}, ${2:float* heading})${0}"
      ],
      "description": ""
  },
  "3988": {
      "prefix": "SetPedDiesInVehicle",
      "body": [
          "SetPedDiesInVehicle(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3989": {
      "prefix": "SetPedDiesInSinkingVehicle",
      "body": [
          "SetPedDiesInSinkingVehicle(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3990": {
      "prefix": "SetPedDiesInstantlyInWater",
      "body": [
          "SetPedDiesInstantlyInWater(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3991": {
      "prefix": "SetPedDriveByClipsetOverride",
      "body": [
          "SetPedDriveByClipsetOverride(${1:Ped* ped}, ${2:char* clipset})${0}"
      ],
      "description": ""
  },
  "3992": {
      "prefix": "SetPedDiesInWater",
      "body": [
          "SetPedDiesInWater(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3993": {
      "prefix": "SetPedDiesWhenInjured",
      "body": [
          "SetPedDiesWhenInjured(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3994": {
      "prefix": "SetPedEnableWeaponBlocking",
      "body": [
          "SetPedEnableWeaponBlocking(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "3995": {
      "prefix": "SetPedDucking",
      "body": [
          "SetPedDucking(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nThis is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.  \n```"
  },
  "3996": {
      "prefix": "SetPedEnveffColorModulator",
      "body": [
          "SetPedEnveffColorModulator(${1:Ped* ped}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "```\nSomething related to the environmental effects natives.\nIn the \"agency_heist3b\" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}\n```"
  },
  "3997": {
      "prefix": "SetPedEmissiveIntensity",
      "body": [
          "SetPedEmissiveIntensity(${1:Ped* ped}, ${2:float* intensity})${0}"
      ],
      "description": "This native sets the glow intensity of illuminated clothing items.\n\nThis native does **NOT** need to be executed every tick.\nThis native is **NOT** synced with other connected players, you will have to set the opacity on the ped on all clients individually.\n\nGlow intensity is a value between `0.0` and `1.0`.\n\nIn some older decompiled scripts this is known as `_SET_PED_REFLECTION_INTENSITY`.\nSince there's no joaat hash for this, I find `_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY` more descriptive than `_SET_PED_REFLECTION_INTENSITY`.\n\nUse [`GetPedIlluminatedClothingGlowIntensity`](#\\_0x1461B28A06717D68) to get the illuminated clothing glow intensity of a specific ped.\n\nIntensity: `1.0`:\n![](https://www.vespura.com/hi/i/2018-11-13\\_17-03\\_c2e23\\_229.png)\n\nIntensity: `0.0`:\n![](https://www.vespura.com/hi/i/2018-11-13\\_17-03\\_35c33\\_230.png)\n\n**Examples code result**:\n![](https://www.vespura.com/hi/i/2018-11-13\\_17-11\\_10199\\_232.gif)\n\n(Direct link if embed doesn't work: [here](https://www.vespura.com/hi/i/2018-11-13\\_17-11\\_10199\\_232.gif))"
  },
  "3998": {
      "prefix": "SetPedEyeColor",
      "body": [
          "SetPedEyeColor(${1:Ped* ped}, ${2:int* index})${0}"
      ],
      "description": "Used for freemode (online) characters.\n\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over"
  },
  "3999": {
      "prefix": "SetPedEnveffScale",
      "body": [
          "SetPedEnveffScale(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": "```\nValues look to be between 0.0 and 1.0  \nFrom decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0  \nYou are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.  \n```"
  },
  "4000": {
      "prefix": "SetPedFleeAttributes",
      "body": [
          "SetPedFleeAttributes(${1:Ped* ped}, ${2:int* attributeFlags}, ${3:BOOL* enable})${0}"
      ],
      "description": "```\nbit 15 (0x8000) = force cower\n```"
  },
  "4001": {
      "prefix": "SetPedFaceFeature",
      "body": [
          "SetPedFaceFeature(${1:Ped* ped}, ${2:int* index}, ${3:float* scale})${0}"
      ],
      "description": "```\nSets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.\nIndex can be 0 - 19\nSET_PED_M*\nHere is the list of names. It starts at 0 and runs in sequence\nFace_Feature\nNose_Width\nNose_Peak_Hight\nNose_Peak_Lenght\nNose_Bone_High\nNose_Peak_Lowering\nNose_Bone_Twist\nEyeBrown_High\nEyeBrown_Forward\nCheeks_Bone_High\nCheeks_Bone_Width\nCheeks_Width\nEyes_Openning\nLips_Thickness\nJaw_Bone_Width: Bone size to sides\nJaw_Bone_Back_Lenght: Bone size to back\nChimp_Bone_Lowering: Go Down\nChimp_Bone_Lenght: Go forward\nChimp_Bone_Width\nChimp_Hole\nNeck_Thikness\n```"
  },
  "4002": {
      "prefix": "SetPedGeneratesDeadBodyEvents",
      "body": [
          "SetPedGeneratesDeadBodyEvents(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4003": {
      "prefix": "SetPedFiringPattern",
      "body": [
          "SetPedFiringPattern(${1:Ped* ped}, ${2:Hash* patternHash})${0}"
      ],
      "description": "```\nFIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )  \nFIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )  \nFIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )  \nFIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )  \nFIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )  \nFIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )  \nFIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )  \nFIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )  \nFIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )  \nFIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )  \nFIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )  \nFIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )  \nFIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )  \nFIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )  \nFIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )  \nFIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )  \nif anyone is interested firing pattern info: pastebin.com/Px036isB  \n```"
  },
  "4004": {
      "prefix": "SetPedGestureGroup",
      "body": [
          "SetPedGestureGroup(${1:Ped* ped}, ${2:char* animGroupGesture})${0}"
      ],
      "description": "```\nFrom the scripts:  \nPED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),  \n\"ANIM_GROUP_GESTURE_MISS_FRA0\");  \nPED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),  \n\"ANIM_GROUP_GESTURE_MISS_DocksSetup1\");  \n```"
  },
  "4005": {
      "prefix": "SetPedGravity",
      "body": [
          "SetPedGravity(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nenable or disable the gravity of a ped  \nExamples:  \nPED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);  \nPED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);  \n```"
  },
  "4006": {
      "prefix": "SetPedHairColor",
      "body": [
          "SetPedHairColor(${1:Ped* ped}, ${2:int* colorID}, ${3:int* highlightColorID})${0}"
      ],
      "description": "```\nUsed for freemode (online) characters.  \n```"
  },
  "4007": {
      "prefix": "SetPedGetOutUpsideDownVehicle",
      "body": [
          "SetPedGetOutUpsideDownVehicle(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4008": {
      "prefix": "SetPedHeadOverlay",
      "body": [
          "SetPedHeadOverlay(${1:Ped* ped}, ${2:int* overlayID}, ${3:int* index}, ${4:float* opacity})${0}"
      ],
      "description": "```\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.   \noverlayID       Part                  Index, to disable  \n0               Blemishes             0 - 23, 255  \n1               Facial Hair           0 - 28, 255  \n2               Eyebrows              0 - 33, 255  \n3               Ageing                0 - 14, 255  \n4               Makeup                0 - 74, 255  \n5               Blush                 0 - 6, 255  \n6               Complexion            0 - 11, 255  \n7               Sun Damage            0 - 10, 255  \n8               Lipstick              0 - 9, 255  \n9               Moles/Freckles        0 - 17, 255  \n10              Chest Hair            0 - 16, 255  \n11              Body Blemishes        0 - 11, 255  \n12              Add Body Blemishes    0 - 1, 255  \n```"
  },
  "4009": {
      "prefix": "SetPedGroupMemberPassengerIndex",
      "body": [
          "SetPedGroupMemberPassengerIndex(${1:Ped* ped}, ${2:int* index})${0}"
      ],
      "description": ""
  },
  "4010": {
      "prefix": "SetPedHeadOverlayColor",
      "body": [
          "SetPedHeadOverlayColor(${1:Ped* ped}, ${2:int* overlayID}, ${3:int* colorType}, ${4:int* colorID}, ${5:int* secondColorID})${0}"
      ],
      "description": "```\nUsed for freemode (online) characters.  \nColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.  \nCalled after SET_PED_HEAD_OVERLAY().  \n```"
  },
  "4011": {
      "prefix": "SetPedHeadBlendData",
      "body": [
          "SetPedHeadBlendData(${1:Ped* ped}, ${2:int* shapeFirstID}, ${3:int* shapeSecondID}, ${4:int* shapeThirdID}, ${5:int* skinFirstID}, ${6:int* skinSecondID}, ${7:int* skinThirdID}, ${8:float* shapeMix}, ${9:float* skinMix}, ${10:float* thirdMix}, ${11:BOOL* isParent})${0}"
      ],
      "description": "```\nThe \"shape\" parameters control the shape of the ped's face. The \"skin\" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.  \nThe IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.  \n!!!Can someone add working example for this???  \ntry this:  \nheadBlendData headData;  \n_GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);  \nSET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond  \n\t, headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);  \nFor more info please refer to this topic.   \ngtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained  \n```"
  },
  "4012": {
      "prefix": "SetPedHearingRange",
      "body": [
          "SetPedHearingRange(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4013": {
      "prefix": "SetPedHelmet",
      "body": [
          "SetPedHelmet(${1:Ped* ped}, ${2:BOOL* canWearHelmet})${0}"
      ],
      "description": ""
  },
  "4014": {
      "prefix": "SetPedHeatscaleOverride",
      "body": [
          "SetPedHeatscaleOverride(${1:Ped* ped}, ${2:float* heatScale})${0}"
      ],
      "description": ""
  },
  "4015": {
      "prefix": "SetPedHelmetPropIndex",
      "body": [
          "SetPedHelmetPropIndex(${1:Ped* ped}, ${2:int* propIndex})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```\n\n```\nNativeDB Added Parameter 3: BOOL p2\n```"
  },
  "4016": {
      "prefix": "SetPedHelmetFlag",
      "body": [
          "SetPedHelmetFlag(${1:Ped* ped}, ${2:int* helmetFlag})${0}"
      ],
      "description": ""
  },
  "4017": {
      "prefix": "SetPedHelmetUnk",
      "body": [
          "SetPedHelmetUnk(${1:Ped* ped}, ${2:BOOL* p1}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": ""
  },
  "4018": {
      "prefix": "SetPedIdRange",
      "body": [
          "SetPedIdRange(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4019": {
      "prefix": "SetPedHelmetTextureIndex",
      "body": [
          "SetPedHelmetTextureIndex(${1:Ped* ped}, ${2:int* textureIndex})${0}"
      ],
      "description": ""
  },
  "4020": {
      "prefix": "SetPedHighlyPerceptive",
      "body": [
          "SetPedHighlyPerceptive(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4021": {
      "prefix": "SetPedInVehicleContext",
      "body": [
          "SetPedInVehicleContext(${1:Ped* ped}, ${2:Hash* context})${0}"
      ],
      "description": "```\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY(\"MINI_PROSTITUTE_LOW_PASSENGER\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY(\"MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY(\"MISS_FAMILY1_JIMMY_SIT\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY(\"MISS_FAMILY1_JIMMY_SIT_REAR\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY(\"MISS_FAMILY2_JIMMY_BICYCLE\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY(\"MISSFBI2_MICHAEL_DRIVEBY\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"MISS_ARMENIAN3_FRANKLIN_TENSE\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"MISSFBI5_TREVOR_DRIVING\"));\n```"
  },
  "4022": {
      "prefix": "SetPedIncreasedAvoidanceRadius",
      "body": [
          "SetPedIncreasedAvoidanceRadius(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4023": {
      "prefix": "SetPedKeepTask",
      "body": [
          "SetPedKeepTask(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4024": {
      "prefix": "SetPedIntoVehicle",
      "body": [
          "SetPedIntoVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* seatIndex})${0}"
      ],
      "description": "```\nPed: The ped to warp.  \nvehicle: The vehicle to warp the ped into.  \nSeat_Index: [-1 is driver seat, -2 first free passenger seat]  \nMoreinfo of Seat Index  \nDriverSeat = -1  \nPassenger = 0  \nLeft Rear = 1  \nRightRear = 2  \n```"
  },
  "4025": {
      "prefix": "SetPedLegIkMode",
      "body": [
          "SetPedLegIkMode(${1:Ped* ped}, ${2:int* mode})${0}"
      ],
      "description": "```\n\"IK\" stands for \"Inverse kinematics.\" I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1  \n```"
  },
  "4026": {
      "prefix": "SetPedLodMultiplier",
      "body": [
          "SetPedLodMultiplier(${1:Ped* ped}, ${2:float* multiplier})${0}"
      ],
      "description": ""
  },
  "4027": {
      "prefix": "SetPedMaxMoveBlendRatio",
      "body": [
          "SetPedMaxMoveBlendRatio(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4028": {
      "prefix": "SetPedMaxHealth",
      "body": [
          "SetPedMaxHealth(${1:Ped* ped}, ${2:int* value})${0}"
      ],
      "description": "```\nsets the maximum health of a ped  \nI think it's never been used in any script  \n```"
  },
  "4029": {
      "prefix": "SetPedMaxTimeUnderwater",
      "body": [
          "SetPedMaxTimeUnderwater(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4030": {
      "prefix": "SetPedMaxTimeInWater",
      "body": [
          "SetPedMaxTimeInWater(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4031": {
      "prefix": "SetPedMinGroundTimeForStungun",
      "body": [
          "SetPedMinGroundTimeForStungun(${1:Ped* ped}, ${2:int* ms})${0}"
      ],
      "description": "```\nPed will stay on the ground after being stunned for at lest ms time. (in milliseconds)  \n```"
  },
  "4032": {
      "prefix": "SetPedMinMoveBlendRatio",
      "body": [
          "SetPedMinMoveBlendRatio(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4033": {
      "prefix": "SetPedModelIsSuppressed",
      "body": [
          "SetPedModelIsSuppressed(${1:Hash* model}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4034": {
      "prefix": "SetPedMotionBlur",
      "body": [
          "SetPedMotionBlur(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4035": {
      "prefix": "SetPedMoney",
      "body": [
          "SetPedMoney(${1:Ped* ped}, ${2:int* amount})${0}"
      ],
      "description": "```\nMaximum possible amount of money on MP is 2000. ~JX  \n-----------------------------------------------------------------------------  \nMaximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.  \n```"
  },
  "4036": {
      "prefix": "SetPedMoveRateOverride",
      "body": [
          "SetPedMoveRateOverride(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": "```\nMin: 0.00  \nMax: 10.00  \nCan be used in combo with fast run cheat.  \nWhen value is set to 10.00:  \nSprinting without fast run cheat: 66 m/s  \nSprinting with fast run cheat: 77 m/s  \nNeeds to be looped!  \nNote: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.  \n```"
  },
  "4037": {
      "prefix": "SetPedMoveAnimsBlendOut",
      "body": [
          "SetPedMoveAnimsBlendOut(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4038": {
      "prefix": "SetPedMovementClipset",
      "body": [
          "SetPedMovementClipset(${1:Ped* ped}, ${2:char* clipSet}, ${3:float* transitionSpeed})${0}"
      ],
      "description": "```\nList of movement clipsets:\nThanks to elsewhat for list.\n \"ANIM_GROUP_MOVE_BALLISTIC\"\n \"ANIM_GROUP_MOVE_LEMAR_ALLEY\"\n \"clipset@move@trash_fast_turn\"\n \"FEMALE_FAST_RUNNER\"\n \"missfbi4prepp1_garbageman\"\n \"move_characters@franklin@fire\"\n \"move_characters@Jimmy@slow@\"\n \"move_characters@michael@fire\"\n \"move_f@flee@a\"\n \"move_f@scared\"\n \"move_f@sexy@a\"\n \"move_heist_lester\"\n \"move_injured_generic\"\n \"move_lester_CaneUp\"\n \"move_m@bag\"\n \"MOVE_M@BAIL_BOND_NOT_TAZERED\"\n \"MOVE_M@BAIL_BOND_TAZERED\"\n \"move_m@brave\"\n \"move_m@casual@d\"\n \"move_m@drunk@moderatedrunk\"\n \"MOVE_M@DRUNK@MODERATEDRUNK\"\n \"MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP\"\n \"MOVE_M@DRUNK@SLIGHTLYDRUNK\"\n \"MOVE_M@DRUNK@VERYDRUNK\"\n \"move_m@fire\"\n \"move_m@gangster@var_e\"\n \"move_m@gangster@var_f\"\n \"move_m@gangster@var_i\"\n \"move_m@JOG@\"\n \"MOVE_M@PRISON_GAURD\"\n \"MOVE_P_M_ONE\"\n \"MOVE_P_M_ONE_BRIEFCASE\"\n \"move_p_m_zero_janitor\"\n \"move_p_m_zero_slow\"\n \"move_ped_bucket\"\n \"move_ped_crouched\"\n \"move_ped_mop\"\n \"MOVE_M@FEMME@\"\n \"MOVE_F@FEMME@\"\n \"MOVE_M@GANGSTER@NG\"\n \"MOVE_F@GANGSTER@NG\"\n \"MOVE_M@POSH@\"\n \"MOVE_F@POSH@\"\n \"MOVE_M@TOUGH_GUY@\"\n \"MOVE_F@TOUGH_GUY@\"\n~ NotCrunchyTaco\n```"
  },
  "4039": {
      "prefix": "SetPedNameDebug",
      "body": [
          "SetPedNameDebug(${1:Ped* ped}, ${2:char* name})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n*untested but char *name could also be a hash for a localized string  \n```"
  },
  "4040": {
      "prefix": "SetPedPanicExitScenario",
      "body": [
          "SetPedPanicExitScenario(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "4041": {
      "prefix": "SetPedParachuteTintIndex",
      "body": [
          "SetPedParachuteTintIndex(${1:Ped* ped}, ${2:int* tintIndex})${0}"
      ],
      "description": ""
  },
  "4042": {
      "prefix": "SetPedNeverLeavesGroup",
      "body": [
          "SetPedNeverLeavesGroup(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4043": {
      "prefix": "SetPedNonCreationArea",
      "body": [
          "SetPedNonCreationArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nThe distance between these points, is the diagonal of a box (remember it's 3D).  \n```"
  },
  "4044": {
      "prefix": "SetPedPlaysHeadOnHornAnimWhenDiesInVehicle",
      "body": [
          "SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**\n\n```\nPoints to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.  \n```"
  },
  "4045": {
      "prefix": "SetPedPreferredCoverSet",
      "body": [
          "SetPedPreferredCoverSet(${1:Ped* ped}, ${2:Any* itemSet})${0}"
      ],
      "description": ""
  },
  "4046": {
      "prefix": "SetPedPinnedDown",
      "body": [
          "SetPedPinnedDown(${1:Ped* ped}, ${2:BOOL* pinned}, ${3:int* i})${0}"
      ],
      "description": "```\ni could be time. Only example in the decompiled scripts uses it as -1.\n```"
  },
  "4047": {
      "prefix": "SetPedPreloadPropData",
      "body": [
          "SetPedPreloadPropData(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId}, ${4:int* TextureId})${0}"
      ],
      "description": "```\nList of component/props ID\ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html\n```"
  },
  "4048": {
      "prefix": "SetPedPrimaryLookat",
      "body": [
          "SetPedPrimaryLookat(${1:Ped* ped}, ${2:Ped* lookAt})${0}"
      ],
      "description": "```\nThis is only called once in the scripts.\nsub_1CD9(&l_49, 0, getElem(3, &l_34, 4), \"MICHAEL\", 0, 1);\n                    sub_1CA8(\"WORLD_HUMAN_SMOKING\", 2);\n                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());\n```"
  },
  "4049": {
      "prefix": "SetPedPreloadVariationData",
      "body": [
          "SetPedPreloadVariationData(${1:Ped* ped}, ${2:int* slot}, ${3:int* drawableId}, ${4:int* textureId})${0}"
      ],
      "description": "```\nfrom extreme3.c4\nPED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));\np1 is probably componentId\n```"
  },
  "4050": {
      "prefix": "SetPedPropIndex",
      "body": [
          "SetPedPropIndex(${1:Ped* ped}, ${2:int* componentId}, ${3:int* drawableId}, ${4:int* textureId}, ${5:BOOL* attach})${0}"
      ],
      "description": "This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hat\\\n**1**: Glass\\\n**2**: Ear\\\n**6**: Watch\\\n**7**: Bracelet\n\n### Related and useful natives\n\n[GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)\\\n[GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)\n\n[List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples"
  },
  "4051": {
      "prefix": "SetPedRagdollForceFall",
      "body": [
          "SetPedRagdollForceFall(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4052": {
      "prefix": "SetPedRandomComponentVariation",
      "body": [
          "SetPedRandomComponentVariation(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\np1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.  \n\nList of component/props ID:\ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "4053": {
      "prefix": "SetPedRagdollOnCollision",
      "body": [
          "SetPedRagdollOnCollision(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nCauses Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.  \n```"
  },
  "4054": {
      "prefix": "SetPedRandomProps",
      "body": [
          "SetPedRandomProps(${1:Ped* ped})${0}"
      ],
      "description": "```\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n```"
  },
  "4055": {
      "prefix": "SetPedRelationshipGroupHash",
      "body": [
          "SetPedRelationshipGroupHash(${1:Ped* ped}, ${2:Hash* hash})${0}"
      ],
      "description": ""
  },
  "4056": {
      "prefix": "SetPedRelationshipGroupDefaultHash",
      "body": [
          "SetPedRelationshipGroupDefaultHash(${1:Ped* ped}, ${2:Hash* hash})${0}"
      ],
      "description": ""
  },
  "4057": {
      "prefix": "SetPedResetFlag",
      "body": [
          "SetPedResetFlag(${1:Ped* ped}, ${2:int* flagId}, ${3:BOOL* doReset})${0}"
      ],
      "description": "PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\nKnown values:"
  },
  "4058": {
      "prefix": "SetPedReserveParachuteTintIndex",
      "body": [
          "SetPedReserveParachuteTintIndex(${1:Ped* ped}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4059": {
      "prefix": "SetPedScubaGearVariation",
      "body": [
          "SetPedScubaGearVariation(${1:Ped* ped})${0}"
      ],
      "description": "This native sets a scuba mask for freemode models and an oxygen bottle for player_\\* models. It works on freemode and player_\\* models."
  },
  "4060": {
      "prefix": "SetPedSeeingRange",
      "body": [
          "SetPedSeeingRange(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4061": {
      "prefix": "SetPedShootsAtCoord",
      "body": [
          "SetPedShootsAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4062": {
      "prefix": "SetPedShootRate",
      "body": [
          "SetPedShootRate(${1:Ped* ped}, ${2:int* shootRate})${0}"
      ],
      "description": "```\nshootRate 0-1000  \n```"
  },
  "4063": {
      "prefix": "SetPedShouldPlayDirectedScenarioExit",
      "body": [
          "SetPedShouldPlayDirectedScenarioExit(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4064": {
      "prefix": "SetPedShouldPlayNormalScenarioExit",
      "body": [
          "SetPedShouldPlayNormalScenarioExit(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4065": {
      "prefix": "SetPedShouldPlayFleeScenarioExit",
      "body": [
          "SetPedShouldPlayFleeScenarioExit(${1:Ped* ped}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4066": {
      "prefix": "SetPedShouldPlayImmediateScenarioExit",
      "body": [
          "SetPedShouldPlayImmediateScenarioExit(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4067": {
      "prefix": "SetPedSphereDefensiveArea",
      "body": [
          "SetPedSphereDefensiveArea(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius}, ${6:BOOL* p5}, ${7:BOOL* p6})${0}"
      ],
      "description": ""
  },
  "4068": {
      "prefix": "SetPedStealthMovement",
      "body": [
          "SetPedStealthMovement(${1:Ped* ped}, ${2:BOOL* p1}, ${3:char* action})${0}"
      ],
      "description": "```\np1 is usually 0 in the scripts. action is either 0 or a pointer to \"DEFAULT_ACTION\".  \n```"
  },
  "4069": {
      "prefix": "SetPedStayInVehicleWhenJacked",
      "body": [
          "SetPedStayInVehicleWhenJacked(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4070": {
      "prefix": "SetPedSteersAroundObjects",
      "body": [
          "SetPedSteersAroundObjects(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4071": {
      "prefix": "SetPedSteersAroundPeds",
      "body": [
          "SetPedSteersAroundPeds(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4072": {
      "prefix": "SetPedStrafeClipset",
      "body": [
          "SetPedStrafeClipset(${1:Ped* ped}, ${2:char* clipSet})${0}"
      ],
      "description": ""
  },
  "4073": {
      "prefix": "SetPedSteersAroundVehicles",
      "body": [
          "SetPedSteersAroundVehicles(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4074": {
      "prefix": "SetPedTargetLossResponse",
      "body": [
          "SetPedTargetLossResponse(${1:Ped* ped}, ${2:int* responseType})${0}"
      ],
      "description": "```\nOnly 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.  \n```"
  },
  "4075": {
      "prefix": "SetPedSuffersCriticalHits",
      "body": [
          "SetPedSuffersCriticalHits(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Ped no longer takes critical damage modifiers if set to FALSE.\n\nExample: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot."
  },
  "4076": {
      "prefix": "SetPedToLoadCover",
      "body": [
          "SetPedToLoadCover(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4077": {
      "prefix": "SetPedSweat",
      "body": [
          "SetPedSweat(${1:Ped* ped}, ${2:float* sweat})${0}"
      ],
      "description": "```\nSweat is set to 100.0 or 0.0 in the decompiled scripts.  \n```"
  },
  "4078": {
      "prefix": "SetPedToInformRespectedFriends",
      "body": [
          "SetPedToInformRespectedFriends(${1:Ped* ped}, ${2:float* radius}, ${3:int* maxFriends})${0}"
      ],
      "description": ""
  },
  "4079": {
      "prefix": "SetPedToRagdoll",
      "body": [
          "SetPedToRagdoll(${1:Ped* ped}, ${2:int* time1}, ${3:int* time2}, ${4:int* ragdollType}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:BOOL* p6})${0}"
      ],
      "description": "p4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\n**Else**: CTaskNMBalance"
  },
  "4080": {
      "prefix": "SetPedUsingActionMode",
      "body": [
          "SetPedUsingActionMode(${1:Ped* ped}, ${2:BOOL* p1}, ${3:int* p2}, ${4:char* action})${0}"
      ],
      "description": "```\np2 is usually -1 in the scripts. action is either 0 or \"DEFAULT_ACTION\".  \n```"
  },
  "4081": {
      "prefix": "SetPedToRagdollWithFall",
      "body": [
          "SetPedToRagdollWithFall(${1:Ped* ped}, ${2:int* time}, ${3:int* p2}, ${4:int* ragdollType}, ${5:float* x}, ${6:float* y}, ${7:float* z}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:float* p10}, ${12:float* p11}, ${13:float* p12}, ${14:float* p13})${0}"
      ],
      "description": "```\nReturn variable is never used in R*'s scripts.  \nNot sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.  \nx, y, and z are coordinates, most likely to where the ped will fall.  \np7 is probably the force of the fall, but untested, so I left the variable name the same.  \np8 to p13 are always 0f in R*'s scripts.  \n(Simplified) Example of the usage of the function from R*'s scripts:  \nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);  \n```"
  },
  "4082": {
      "prefix": "SetPedVisualFieldCenterAngle",
      "body": [
          "SetPedVisualFieldCenterAngle(${1:Ped* ped}, ${2:float* angle})${0}"
      ],
      "description": ""
  },
  "4083": {
      "prefix": "SetPedVehicleForcedSeatUsage",
      "body": [
          "SetPedVehicleForcedSeatUsage(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* seatIndex}, ${4:int* flags})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 5: Any p4\n```"
  },
  "4084": {
      "prefix": "SetPedVisualFieldMaxAngle",
      "body": [
          "SetPedVisualFieldMaxAngle(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4085": {
      "prefix": "SetPedVisualFieldMaxElevationAngle",
      "body": [
          "SetPedVisualFieldMaxElevationAngle(${1:Ped* ped}, ${2:float* angle})${0}"
      ],
      "description": "```\nThis native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.  \n```"
  },
  "4086": {
      "prefix": "SetPedVisualFieldMinAngle",
      "body": [
          "SetPedVisualFieldMinAngle(${1:Ped* ped}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4087": {
      "prefix": "SetPedVisualFieldMinElevationAngle",
      "body": [
          "SetPedVisualFieldMinElevationAngle(${1:Ped* ped}, ${2:float* angle})${0}"
      ],
      "description": "```\nThis native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.  \n```"
  },
  "4088": {
      "prefix": "SetPedWeaponMovementClipset",
      "body": [
          "SetPedWeaponMovementClipset(${1:Ped* ped}, ${2:char* clipSet})${0}"
      ],
      "description": ""
  },
  "4089": {
      "prefix": "SetPedVisualFieldPeripheralRange",
      "body": [
          "SetPedVisualFieldPeripheralRange(${1:Ped* ped}, ${2:float* range})${0}"
      ],
      "description": ""
  },
  "4090": {
      "prefix": "SetPedWetnessEnabledThisFrame",
      "body": [
          "SetPedWetnessEnabledThisFrame(${1:Ped* ped})${0}"
      ],
      "description": "```\ncombined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function  \n```"
  },
  "4091": {
      "prefix": "SetPedWetnessHeight",
      "body": [
          "SetPedWetnessHeight(${1:Ped* ped}, ${2:float* height})${0}"
      ],
      "description": "```\nIt adds the wetness level to the player clothing/outfit. As if player just got out from water surface.  \n```"
  },
  "4092": {
      "prefix": "SetPopControlSphereThisFrame",
      "body": [
          "SetPopControlSphereThisFrame(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* min}, ${5:float* max})${0}"
      ],
      "description": "```\nMin and max are usually 100.0 and 200.0\n```"
  },
  "4093": {
      "prefix": "SetRagdollBlockingFlags",
      "body": [
          "SetRagdollBlockingFlags(${1:Ped* ped}, ${2:int* flags})${0}"
      ],
      "description": "```\nWorks for both player and peds, but some flags don't seem to work for the player (1, for example)  \n1 - Blocks ragdolling when shot.  \n2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.  \n4 - Blocks ragdolling when set on fire.  \n-----------------------------------------------------------------------  \nThere seem to be 26 flags  \n```"
  },
  "4094": {
      "prefix": "SetRelationshipGroupDontAffectWantedLevel",
      "body": [
          "SetRelationshipGroupDontAffectWantedLevel(${1:Hash* group}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "4095": {
      "prefix": "SetRelationshipBetweenGroups",
      "body": [
          "SetRelationshipBetweenGroups(${1:int* relationship}, ${2:Hash* group1}, ${3:Hash* group2})${0}"
      ],
      "description": "```\nSets the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \nExample:  \nPED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);  \nPED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);  \n```"
  },
  "4096": {
      "prefix": "SetScenarioPedsSpawnInSphereArea",
      "body": [
          "SetScenarioPedsSpawnInSphereArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* range}, ${5:int* p4})${0}"
      ],
      "description": ""
  },
  "4097": {
      "prefix": "SetScenarioPedDensityMultiplierThisFrame",
      "body": [
          "SetScenarioPedDensityMultiplierThisFrame(${1:float* p0}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "4098": {
      "prefix": "SetScriptedAnimSeatOffset",
      "body": [
          "SetScriptedAnimSeatOffset(${1:Ped* ped}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "4099": {
      "prefix": "SetScenarioPedsToBeReturnedByNextCommand",
      "body": [
          "SetScenarioPedsToBeReturnedByNextCommand(${1:BOOL* value})${0}"
      ],
      "description": "```\nSets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.  \n```"
  },
  "4100": {
      "prefix": "SetScriptedConversionCoordThisFrame",
      "body": [
          "SetScriptedConversionCoordThisFrame(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "4101": {
      "prefix": "SetSynchronizedSceneHoldLastFrame",
      "body": [
          "SetSynchronizedSceneHoldLastFrame(${1:int* sceneID}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4102": {
      "prefix": "SetSynchronizedSceneLooped",
      "body": [
          "SetSynchronizedSceneLooped(${1:int* sceneID}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4103": {
      "prefix": "SetSynchronizedSceneOrigin",
      "body": [
          "SetSynchronizedSceneOrigin(${1:int* sceneID}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* roll}, ${6:float* pitch}, ${7:float* yaw}, ${8:BOOL* p7})${0}"
      ],
      "description": ""
  },
  "4104": {
      "prefix": "SetSynchronizedScenePhase",
      "body": [
          "SetSynchronizedScenePhase(${1:int* sceneID}, ${2:float* phase})${0}"
      ],
      "description": ""
  },
  "4105": {
      "prefix": "SetSynchronizedSceneRate",
      "body": [
          "SetSynchronizedSceneRate(${1:int* sceneID}, ${2:float* rate})${0}"
      ],
      "description": ""
  },
  "4106": {
      "prefix": "SpawnpointsCancelSearch",
      "body": [
          "SpawnpointsCancelSearch()${0}"
      ],
      "description": ""
  },
  "4107": {
      "prefix": "SpawnpointsGetNumSearchResults",
      "body": [
          "SpawnpointsGetNumSearchResults()${0}"
      ],
      "description": ""
  },
  "4108": {
      "prefix": "SpawnpointsGetSearchResultFlags",
      "body": [
          "SpawnpointsGetSearchResultFlags(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4109": {
      "prefix": "SpawnpointsGetSearchResult",
      "body": [
          "SpawnpointsGetSearchResult(${1:int* randomInt}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "4110": {
      "prefix": "SpawnpointsIsSearchActive",
      "body": [
          "SpawnpointsIsSearchActive()${0}"
      ],
      "description": ""
  },
  "4111": {
      "prefix": "SpawnpointsIsSearchComplete",
      "body": [
          "SpawnpointsIsSearchComplete()${0}"
      ],
      "description": ""
  },
  "4112": {
      "prefix": "SpawnpointsIsSearchFailed",
      "body": [
          "SpawnpointsIsSearchFailed()${0}"
      ],
      "description": ""
  },
  "4113": {
      "prefix": "SpawnpointsStartSearch",
      "body": [
          "SpawnpointsStartSearch(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:int* interiorFlags}, ${7:float* scale}, ${8:int* duration})${0}"
      ],
      "description": ""
  },
  "4114": {
      "prefix": "StopAnyPedModelBeingSuppressed",
      "body": [
          "StopAnyPedModelBeingSuppressed()${0}"
      ],
      "description": ""
  },
  "4115": {
      "prefix": "UnregisterPedheadshot",
      "body": [
          "UnregisterPedheadshot(${1:int* id})${0}"
      ],
      "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```"
  },
  "4116": {
      "prefix": "SpawnpointsStartSearchInAngledArea",
      "body": [
          "SpawnpointsStartSearchInAngledArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:int* interiorFlags}, ${9:float* scale}, ${10:int* duration})${0}"
      ],
      "description": ""
  },
  "4117": {
      "prefix": "StopPedWeaponFiringWhenDropped",
      "body": [
          "StopPedWeaponFiringWhenDropped(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4118": {
      "prefix": "UpdatePedHeadBlendData",
      "body": [
          "UpdatePedHeadBlendData(${1:Ped* ped}, ${2:float* shapeMix}, ${3:float* skinMix}, ${4:float* thirdMix})${0}"
      ],
      "description": "See [`SET_PED_HEAD_BLEND_DATA`](#\\_0x9414E18B9434C2FE)"
  },
  "4119": {
      "prefix": "WasPedKilledByStealth",
      "body": [
          "WasPedKilledByStealth(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4120": {
      "prefix": "WasPedKilledByTakedown",
      "body": [
          "WasPedKilledByTakedown(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4121": {
      "prefix": "WasPedSkeletonUpdated",
      "body": [
          "WasPedSkeletonUpdated(${1:Ped* ped})${0}"
      ],
      "description": "```\nDespite this function's name, it simply returns whether the specified handle is a Ped.  \n```"
  },
  "4122": {
      "prefix": "WasPedKnockedOut",
      "body": [
          "WasPedKnockedOut(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4123": {
      "prefix": "ActivatePhysics",
      "body": [
          "ActivatePhysics(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4124": {
      "prefix": "AddRope",
      "body": [
          "AddRope(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* rotX}, ${5:float* rotY}, ${6:float* rotZ}, ${7:float* maxLength}, ${8:int* ropeType}, ${9:float* initLength}, ${10:float* minLength}, ${11:float* lengthChangeRate}, ${12:BOOL* onlyPPU}, ${13:BOOL* collisionOn}, ${14:BOOL* lockFromFront}, ${15:float* timeMultiplier}, ${16:BOOL* breakable}, ${17:Any* unkPtr})${0}"
      ],
      "description": "```\nCreates a rope at the specific position, that extends in the specified direction when not attached to any entities.  \r\n__  \r\nRope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).  \r\nRope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.  \n```"
  },
  "4125": {
      "prefix": "ApplyImpulseToCloth",
      "body": [
          "ApplyImpulseToCloth(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* vecX}, ${5:float* vecY}, ${6:float* vecZ}, ${7:float* impulse})${0}"
      ],
      "description": ""
  },
  "4126": {
      "prefix": "AttachEntitiesToRope",
      "body": [
          "AttachEntitiesToRope(${1:int* ropeId}, ${2:Entity* ent1}, ${3:Entity* ent2}, ${4:float* ent1_x}, ${5:float* ent1_y}, ${6:float* ent1_z}, ${7:float* ent2_x}, ${8:float* ent2_y}, ${9:float* ent2_z}, ${10:float* length}, ${11:BOOL* p10}, ${12:BOOL* p11}, ${13:char* boneName1}, ${14:char* boneName2})${0}"
      ],
      "description": "```\nAttaches entity 1 to entity 2.  \n```"
  },
  "4127": {
      "prefix": "BreakEntityGlass",
      "body": [
          "BreakEntityGlass(${1:Entity* entity}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:float* p8}, ${10:Any* p9}, ${11:BOOL* p10})${0}"
      ],
      "description": ""
  },
  "4128": {
      "prefix": "AttachRopeToEntity",
      "body": [
          "AttachRopeToEntity(${1:int* ropeId}, ${2:Entity* entity}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nThe position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.  \n```"
  },
  "4129": {
      "prefix": "DeleteChildRope",
      "body": [
          "DeleteChildRope(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4130": {
      "prefix": "DeleteRope",
      "body": [
          "DeleteRope(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4131": {
      "prefix": "DetachRopeFromEntity",
      "body": [
          "DetachRopeFromEntity(${1:int* ropeId}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4132": {
      "prefix": "DoesRopeBelongToThisScript",
      "body": [
          "DoesRopeBelongToThisScript(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4133": {
      "prefix": "GetCgoffset",
      "body": [
          "GetCgoffset(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4134": {
      "prefix": "DoesRopeExist",
      "body": [
          "DoesRopeExist(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4135": {
      "prefix": "GetHasObjectFragInst",
      "body": [
          "GetHasObjectFragInst(${1:Object* object})${0}"
      ],
      "description": "```\nGET_*\n```"
  },
  "4136": {
      "prefix": "GetRopeLastVertexCoord",
      "body": [
          "GetRopeLastVertexCoord(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4137": {
      "prefix": "GetRopeVertexCoord",
      "body": [
          "GetRopeVertexCoord(${1:int* ropeId}, ${2:int* vertex})${0}"
      ],
      "description": ""
  },
  "4138": {
      "prefix": "GetRopeVertexCount",
      "body": [
          "GetRopeVertexCount(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4139": {
      "prefix": "LoadRopeData",
      "body": [
          "LoadRopeData(${1:int* ropeId}, ${2:char* rope_preset})${0}"
      ],
      "description": "```\nRope presets can be found in the gamefiles. One example is \"ropeFamily3\", it is NOT a hash but rather a string.\n```"
  },
  "4140": {
      "prefix": "RopeConvertToSimple",
      "body": [
          "RopeConvertToSimple(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4141": {
      "prefix": "PinRopeVertex",
      "body": [
          "PinRopeVertex(${1:int* ropeId}, ${2:int* vertex}, ${3:float* x}, ${4:float* y}, ${5:float* z})${0}"
      ],
      "description": ""
  },
  "4142": {
      "prefix": "RopeDrawShadowEnabled",
      "body": [
          "RopeDrawShadowEnabled(${1:int* ropeId}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4143": {
      "prefix": "RopeAreTexturesLoaded",
      "body": [
          "RopeAreTexturesLoaded()${0}"
      ],
      "description": ""
  },
  "4144": {
      "prefix": "RopeForceLength",
      "body": [
          "RopeForceLength(${1:int* ropeId}, ${2:float* length})${0}"
      ],
      "description": "```\nForces a rope to a certain length.\n```"
  },
  "4145": {
      "prefix": "RopeLoadTextures",
      "body": [
          "RopeLoadTextures()${0}"
      ],
      "description": "```\nLoads rope textures for all ropes in the current scene.\n```"
  },
  "4146": {
      "prefix": "RopeGetDistanceBetweenEnds",
      "body": [
          "RopeGetDistanceBetweenEnds(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4147": {
      "prefix": "RopeSetUpdateOrder",
      "body": [
          "RopeSetUpdateOrder(${1:int* ropeId}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4148": {
      "prefix": "RopeResetLength",
      "body": [
          "RopeResetLength(${1:int* ropeId}, ${2:float* length})${0}"
      ],
      "description": "```\nReset a rope to a certain length.  \n```"
  },
  "4149": {
      "prefix": "RopeSetUpdatePinverts",
      "body": [
          "RopeSetUpdatePinverts(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4150": {
      "prefix": "SetCgAtBoundcenter",
      "body": [
          "SetCgAtBoundcenter(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4151": {
      "prefix": "RopeUnloadTextures",
      "body": [
          "RopeUnloadTextures()${0}"
      ],
      "description": "```\nUnloads rope textures for all ropes in the current scene.\n```"
  },
  "4152": {
      "prefix": "SetCgoffset",
      "body": [
          "SetCgoffset(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "4153": {
      "prefix": "SetDisableBreaking",
      "body": [
          "SetDisableBreaking(${1:Object* object}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4154": {
      "prefix": "SetDamping",
      "body": [
          "SetDamping(${1:Entity* entity}, ${2:int* vertex}, ${3:float* value})${0}"
      ],
      "description": ""
  },
  "4155": {
      "prefix": "SetDisableFragDamage",
      "body": [
          "SetDisableFragDamage(${1:Object* object}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4156": {
      "prefix": "SetEntityProofUnk",
      "body": [
          "SetEntityProofUnk(${1:Entity* entity}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4157": {
      "prefix": "SetLaunchControlEnabled",
      "body": [
          "SetLaunchControlEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": "Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.\n\n```\nNativeDB Introduced: v1604\n```"
  },
  "4158": {
      "prefix": "StartRopeUnwindingFront",
      "body": [
          "StartRopeUnwindingFront(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4159": {
      "prefix": "StopRopeWinding",
      "body": [
          "StopRopeWinding(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4160": {
      "prefix": "StartRopeWinding",
      "body": [
          "StartRopeWinding(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4161": {
      "prefix": "StopRopeUnwindingFront",
      "body": [
          "StopRopeUnwindingFront(${1:int* ropeId})${0}"
      ],
      "description": ""
  },
  "4162": {
      "prefix": "UnpinRopeVertex",
      "body": [
          "UnpinRopeVertex(${1:int* ropeId}, ${2:int* vertex})${0}"
      ],
      "description": ""
  },
  "4163": {
      "prefix": "DisableRockstarEditorCameraChanges",
      "body": [
          "DisableRockstarEditorCameraChanges()${0}"
      ],
      "description": "```\nThis will disable the ability to make camera changes in R* Editor.\n\nRE*\n```"
  },
  "4164": {
      "prefix": "IsRecording",
      "body": [
          "IsRecording()${0}"
      ],
      "description": "```\nChecks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)  \nmov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944  \nretn  \n```"
  },
  "4165": {
      "prefix": "StartRecording",
      "body": [
          "StartRecording(${1:int* mode})${0}"
      ],
      "description": "```\nStarts recording a replay.  \nIf mode is 0, turns on action replay.  \nIf mode is 1, starts recording.  \nIf already recording a replay, does nothing.  \n```"
  },
  "4166": {
      "prefix": "SaveRecordingClip",
      "body": [
          "SaveRecordingClip()${0}"
      ],
      "description": ""
  },
  "4167": {
      "prefix": "StopRecordingAndDiscardClip",
      "body": [
          "StopRecordingAndDiscardClip()${0}"
      ],
      "description": "```\nStops recording and discards the recorded clip.  \n```"
  },
  "4168": {
      "prefix": "StopRecordingAndSaveClip",
      "body": [
          "StopRecordingAndSaveClip()${0}"
      ],
      "description": "```\nStops recording and saves the recorded clip.  \n```"
  },
  "4169": {
      "prefix": "StopRecordingThisFrame",
      "body": [
          "StopRecordingThisFrame()${0}"
      ],
      "description": "This disable the recording feature and has to be called every frame."
  },
  "4170": {
      "prefix": "ActivateRockstarEditor",
      "body": [
          "ActivateRockstarEditor()${0}"
      ],
      "description": "Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.\n\n```\nNativeDB Added Parameter 1: int p0\n```"
  },
  "4171": {
      "prefix": "IsInteriorRenderingDisabled",
      "body": [
          "IsInteriorRenderingDisabled()${0}"
      ],
      "description": "```\nReturns a bool if interior rendering is disabled, if yes, all \"normal\" rendered interiors are invisible  \n```"
  },
  "4172": {
      "prefix": "ResetEditorValues",
      "body": [
          "ResetEditorValues()${0}"
      ],
      "description": "```\nSets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.  \n```"
  },
  "4173": {
      "prefix": "BgEndContext",
      "body": [
          "BgEndContext(${1:char* contextName})${0}"
      ],
      "description": "```\nDeletes the given context from the background scripts context map.\n\nNativeDB Introduced: v323\n```"
  },
  "4174": {
      "prefix": "BgStartContextHash",
      "body": [
          "BgStartContextHash(${1:Hash* contextHash})${0}"
      ],
      "description": "```\nHashed version of 0x9D5A25BADB742ACD.\n\nNativeDB Introduced: v323\n```"
  },
  "4175": {
      "prefix": "BgEndContextHash",
      "body": [
          "BgEndContextHash(${1:Hash* contextHash})${0}"
      ],
      "description": "```\nHashed version of 0xDC2BACD920D0A0DD.\n\nNativeDB Introduced: v323\n```"
  },
  "4176": {
      "prefix": "DoesScriptExist",
      "body": [
          "DoesScriptExist(${1:char* scriptName})${0}"
      ],
      "description": ""
  },
  "4177": {
      "prefix": "BgStartContext",
      "body": [
          "BgStartContext(${1:char* contextName})${0}"
      ],
      "description": "```\nInserts the given context into the background scripts context map.\n\nNativeDB Introduced: v323\n```"
  },
  "4178": {
      "prefix": "GetEventAtIndex",
      "body": [
          "GetEventAtIndex(${1:int* eventGroup}, ${2:int* eventIndex})${0}"
      ],
      "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\n```"
  },
  "4179": {
      "prefix": "DoesScriptWithNameHashExist",
      "body": [
          "DoesScriptWithNameHashExist(${1:Hash* scriptHash})${0}"
      ],
      "description": ""
  },
  "4180": {
      "prefix": "GetEventData",
      "body": [
          "GetEventData(${1:int* eventGroup}, ${2:int* eventIndex}, ${3:int* eventData}, ${4:int* eventDataSize})${0}"
      ],
      "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\nNote: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).\n```"
  },
  "4181": {
      "prefix": "GetEventExists",
      "body": [
          "GetEventExists(${1:int* eventGroup}, ${2:int* eventIndex})${0}"
      ],
      "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\n```"
  },
  "4182": {
      "prefix": "GetHashOfThisScriptName",
      "body": [
          "GetHashOfThisScriptName()${0}"
      ],
      "description": ""
  },
  "4183": {
      "prefix": "GetIdOfThisThread",
      "body": [
          "GetIdOfThisThread()${0}"
      ],
      "description": ""
  },
  "4184": {
      "prefix": "GetNoLoadingScreen",
      "body": [
          "GetNoLoadingScreen()${0}"
      ],
      "description": ""
  },
  "4185": {
      "prefix": "GetNameOfThread",
      "body": [
          "GetNameOfThread(${1:int* threadId})${0}"
      ],
      "description": ""
  },
  "4186": {
      "prefix": "GetThisScriptName",
      "body": [
          "GetThisScriptName()${0}"
      ],
      "description": ""
  },
  "4187": {
      "prefix": "GetNumberOfEvents",
      "body": [
          "GetNumberOfEvents(${1:int* eventGroup})${0}"
      ],
      "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\n```"
  },
  "4188": {
      "prefix": "GetNumberOfReferencesOfScriptWithNameHash",
      "body": [
          "GetNumberOfReferencesOfScriptWithNameHash(${1:Hash* scriptHash})${0}"
      ],
      "description": "```\nGets the number of instances of the specified script is currently running.\nActually returns numRefs - 1.\nif (program)\n\tv3 = rage::scrProgram::GetNumRefs(program) - 1;\nreturn v3;\n```"
  },
  "4189": {
      "prefix": "HasScriptLoaded",
      "body": [
          "HasScriptLoaded(${1:char* scriptName})${0}"
      ],
      "description": "Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting."
  },
  "4190": {
      "prefix": "HasScriptWithNameHashLoaded",
      "body": [
          "HasScriptWithNameHashLoaded(${1:Hash* scriptHash})${0}"
      ],
      "description": ""
  },
  "4191": {
      "prefix": "IsThreadActive",
      "body": [
          "IsThreadActive(${1:int* threadId})${0}"
      ],
      "description": ""
  },
  "4192": {
      "prefix": "RequestScriptWithNameHash",
      "body": [
          "RequestScriptWithNameHash(${1:Hash* scriptHash})${0}"
      ],
      "description": "```\nformerly _REQUEST_STREAMED_SCRIPT  \n```"
  },
  "4193": {
      "prefix": "RequestScript",
      "body": [
          "RequestScript(${1:char* scriptName})${0}"
      ],
      "description": ""
  },
  "4194": {
      "prefix": "ScriptThreadIteratorGetNextThreadId",
      "body": [
          "ScriptThreadIteratorGetNextThreadId()${0}"
      ],
      "description": "```\nIf the function returns 0, the end of the iteration has been reached.\n```"
  },
  "4195": {
      "prefix": "SetNoLoadingScreen",
      "body": [
          "SetNoLoadingScreen(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4196": {
      "prefix": "ScriptThreadIteratorReset",
      "body": [
          "ScriptThreadIteratorReset()${0}"
      ],
      "description": "Starts a new iteration of the current threads.\nCall this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)"
  },
  "4197": {
      "prefix": "ShutdownLoadingScreen",
      "body": [
          "ShutdownLoadingScreen()${0}"
      ],
      "description": ""
  },
  "4198": {
      "prefix": "SetScriptAsNoLongerNeeded",
      "body": [
          "SetScriptAsNoLongerNeeded(${1:char* scriptName})${0}"
      ],
      "description": ""
  },
  "4199": {
      "prefix": "TerminateThread",
      "body": [
          "TerminateThread(${1:int* threadId})${0}"
      ],
      "description": ""
  },
  "4200": {
      "prefix": "SetScriptWithNameHashAsNoLongerNeeded",
      "body": [
          "SetScriptWithNameHashAsNoLongerNeeded(${1:Hash* scriptHash})${0}"
      ],
      "description": ""
  },
  "4201": {
      "prefix": "TriggerScriptEvent",
      "body": [
          "TriggerScriptEvent(${1:int* eventGroup}, ${2:int* eventData}, ${3:int* eventDataSize}, ${4:int* playerBits})${0}"
      ],
      "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\nNote: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).\nplayerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.\n```"
  },
  "4202": {
      "prefix": "TerminateThisThread",
      "body": [
          "TerminateThisThread()${0}"
      ],
      "description": ""
  },
  "4203": {
      "prefix": "TriggerScriptEvent2",
      "body": [
          "TriggerScriptEvent2(${1:int* eventGroup}, ${2:int* eventData}, ${3:int* eventDataSize}, ${4:int* playerBits})${0}"
      ],
      "description": "```\nSee TRIGGER_SCRIPT_EVENT\n```"
  },
  "4204": {
      "prefix": "GetShapeTestResult",
      "body": [
          "GetShapeTestResult(${1:int* shapeTestHandle}, ${2:BOOL* hit}, ${3:Vector3* endCoords}, ${4:Vector3* surfaceNormal}, ${5:Entity* entityHit})${0}"
      ],
      "description": "Returns the result of a shape test.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined."
  },
  "4205": {
      "prefix": "GetShapeTestResultIncludingMaterial",
      "body": [
          "GetShapeTestResultIncludingMaterial(${1:int* shapeTestHandle}, ${2:BOOL* hit}, ${3:Vector3* endCoords}, ${4:Vector3* surfaceNormal}, ${5:Hash* materialHash}, ${6:Entity* entityHit})${0}"
      ],
      "description": "Returns the result of a shape test, also returning the material of any touched surface.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined."
  },
  "4206": {
      "prefix": "ReleaseScriptGuidFromEntity",
      "body": [
          "ReleaseScriptGuidFromEntity(${1:Entity* entity})${0}"
      ],
      "description": "Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an\nambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle."
  },
  "4207": {
      "prefix": "StartShapeTestBoundingBox",
      "body": [
          "StartShapeTestBoundingBox(${1:Entity* entity}, ${2:int* flags1}, ${3:int* flags2})${0}"
      ],
      "description": ""
  },
  "4208": {
      "prefix": "StartExpensiveSynchronousShapeTestLosProbe",
      "body": [
          "StartExpensiveSynchronousShapeTestLosProbe(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* flags}, ${8:Entity* entity}, ${9:int* p8})${0}"
      ],
      "description": "Does the same as [START_SHAPE_TEST_LOS_PROBE](#\\_0x7EE9F5D83DD4F90E), except blocking until the shape test completes.\n\nUse [START_SHAPE_TEST_LOS_PROBE](#\\_0x7EE9F5D83DD4F90E) instead. Literally. Rockstar named this correctly: it's expensive, and it's synchronous.\n\n```\nThis function casts a ray from Point1 to Point2 and returns it's ray handle.  A simple ray cast will 'shoot' a line from point A to point B, and return whether or not the ray reached it's destination or if it hit anything and if it did hit anything, will return the handle of what it hit (entity handle) and coordinates of where the ray reached.  \nYou can use _GET_RAYCAST_RESULT to get the result of the raycast  \nEntity is an entity to ignore, such as the player.  \nFlags are intersection bit flags.  They tell the ray what to care about and what not to care about when casting. Passing -1 will intersect with everything, presumably.  \nFlags:  \n1: Intersect with map  \n2: Intersect with vehicles (used to be mission entities?) (includes train)  \n4: Intersect with peds? (same as 8)  \n8: Intersect with peds? (same as 4)  \n16: Intersect with objects  \n32: Water?  \n64: Unknown  \n128: Unknown  \n256: Intersect with vegetation (plants, coral. trees not included)  \nNOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.  \n```"
  },
  "4209": {
      "prefix": "StartShapeTestCapsule",
      "body": [
          "StartShapeTestCapsule(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* radius}, ${8:int* flags}, ${9:Entity* entity}, ${10:int* p9})${0}"
      ],
      "description": "```\nRaycast from point to point, where the ray has a radius.   \nflags:  \nvehicles=10  \npeds =12  \nIterating through flags yields many ped / vehicle/ object combinations  \np9 = 7, but no idea what it does  \nEntity is an entity to ignore  \n```"
  },
  "4210": {
      "prefix": "StartShapeTestBound",
      "body": [
          "StartShapeTestBound(${1:Entity* entity}, ${2:int* flags1}, ${3:int* flags2})${0}"
      ],
      "description": ""
  },
  "4211": {
      "prefix": "StartShapeTestLosProbe",
      "body": [
          "StartShapeTestLosProbe(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:int* flags}, ${8:Entity* entity}, ${9:int* p8})${0}"
      ],
      "description": "Asynchronously starts a line-of-sight (raycast) world probe shape test.\n\nUse the handle with [GET_SHAPE_TEST_RESULT](#\\_0x3D87450E15D98694) or [GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL](#\\_0x65287525D951F6BE) until it returns 0 or 2."
  },
  "4212": {
      "prefix": "StartShapeTestBox",
      "body": [
          "StartShapeTestBox(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* x1}, ${5:float* y2}, ${6:float* z2}, ${7:float* rotX}, ${8:float* rotY}, ${9:float* rotZ}, ${10:Any* p9}, ${11:int* flags}, ${12:Entity* entity}, ${13:Any* p12})${0}"
      ],
      "description": "For more information, see [`START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE`](#\\_0x377906D8A31E5586) and [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E)."
  },
  "4213": {
      "prefix": "StartShapeTestSurroundingCoords",
      "body": [
          "StartShapeTestSurroundingCoords(${1:Vector3* pVec1}, ${2:Vector3* pVec2}, ${3:int* flag}, ${4:Entity* entity}, ${5:int* flag2})${0}"
      ],
      "description": "Since it is only used in the PC version, likely some mouse-friendly shape test. Uses **in** vector arguments.\n\nAsynchronous.\n\n```\nit returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.  \nIn its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7  \n```"
  },
  "4214": {
      "prefix": "StartShapeTestSweptSphere",
      "body": [
          "StartShapeTestSweptSphere(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:float* radius}, ${8:int* flags}, ${9:Entity* entity}, ${10:Any* p9})${0}"
      ],
      "description": "```\nPerforms the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.  \n```"
  },
  "4215": {
      "prefix": "IsRockstarMessageReadyForScript",
      "body": [
          "IsRockstarMessageReadyForScript()${0}"
      ],
      "description": ""
  },
  "4216": {
      "prefix": "RockstarMessageGetString",
      "body": [
          "RockstarMessageGetString()${0}"
      ],
      "description": ""
  },
  "4217": {
      "prefix": "ScEmailMessagePushGamerToRecipList",
      "body": [
          "ScEmailMessagePushGamerToRecipList(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "4218": {
      "prefix": "ScEmailMessageClearRecipList",
      "body": [
          "ScEmailMessageClearRecipList()${0}"
      ],
      "description": ""
  },
  "4219": {
      "prefix": "ScGetHasAchievementBeenPassed",
      "body": [
          "ScGetHasAchievementBeenPassed(${1:int* achievement})${0}"
      ],
      "description": "```\nSame as HAS_ACHIEVEMENT_BEEN_PASSED\n```"
  },
  "4220": {
      "prefix": "ScGetNickname",
      "body": [
          "ScGetNickname()${0}"
      ],
      "description": "```\nReturns the nickname of the logged-in Rockstar Social Club account.\n```"
  },
  "4221": {
      "prefix": "ScGetIsProfileAttributeSet",
      "body": [
          "ScGetIsProfileAttributeSet(${1:char* name})${0}"
      ],
      "description": "```\nsfink: from scripts:\nfunc_720(socialclub::_0x8416FE4E4629D7D7(\"bIgnoreCheaterOverride\"));\nfunc_719(socialclub::_0x8416FE4E4629D7D7(\"bIgnoreBadSportOverride\"));\n```"
  },
  "4222": {
      "prefix": "ScInboxGetEmails",
      "body": [
          "ScInboxGetEmails(${1:int* offset}, ${2:int* limit})${0}"
      ],
      "description": ""
  },
  "4223": {
      "prefix": "ScInboxGetMessageIsReadAtIndex",
      "body": [
          "ScInboxGetMessageIsReadAtIndex(${1:int* msgIndex})${0}"
      ],
      "description": ""
  },
  "4224": {
      "prefix": "ScInboxGetMessageTypeAtIndex",
      "body": [
          "ScInboxGetMessageTypeAtIndex(${1:int* msgIndex})${0}"
      ],
      "description": ""
  },
  "4225": {
      "prefix": "ScInboxMessageDoApply",
      "body": [
          "ScInboxMessageDoApply(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4226": {
      "prefix": "ScInboxGetTotalNumMessages",
      "body": [
          "ScInboxGetTotalNumMessages()${0}"
      ],
      "description": ""
  },
  "4227": {
      "prefix": "ScInboxMessageGetBountyData",
      "body": [
          "ScInboxMessageGetBountyData(${1:int* index}, ${2:int* outData})${0}"
      ],
      "description": ""
  },
  "4228": {
      "prefix": "ScInboxMessageGetDataBool",
      "body": [
          "ScInboxMessageGetDataBool(${1:int* p0}, ${2:char* p1})${0}"
      ],
      "description": ""
  },
  "4229": {
      "prefix": "ScInboxMessageGetDataString",
      "body": [
          "ScInboxMessageGetDataString(${1:int* p0}, ${2:char* context}, ${3:char* out})${0}"
      ],
      "description": ""
  },
  "4230": {
      "prefix": "ScInboxMessageGetDataInt",
      "body": [
          "ScInboxMessageGetDataInt(${1:int* p0}, ${2:char* context}, ${3:int* out})${0}"
      ],
      "description": ""
  },
  "4231": {
      "prefix": "ScInboxMessageGetString",
      "body": [
          "ScInboxMessageGetString(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4232": {
      "prefix": "ScInboxMessageGetUgcdata",
      "body": [
          "ScInboxMessageGetUgcdata(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4233": {
      "prefix": "ScInboxMessagePushGamerToEventRecipList",
      "body": [
          "ScInboxMessagePushGamerToEventRecipList(${1:int* networkHandle})${0}"
      ],
      "description": ""
  },
  "4234": {
      "prefix": "ScInboxMessagePop",
      "body": [
          "ScInboxMessagePop(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4235": {
      "prefix": "ScInboxMessageSendUgcStatUpdateEvent",
      "body": [
          "ScInboxMessageSendUgcStatUpdateEvent(${1:char* data})${0}"
      ],
      "description": ""
  },
  "4236": {
      "prefix": "ScInboxMessageSendBountyPresenceEvent",
      "body": [
          "ScInboxMessageSendBountyPresenceEvent(${1:char* data})${0}"
      ],
      "description": ""
  },
  "4237": {
      "prefix": "ScPresenceAttrSetInt",
      "body": [
          "ScPresenceAttrSetInt(${1:Hash* attrHash}, ${2:int* value})${0}"
      ],
      "description": ""
  },
  "4238": {
      "prefix": "ScPresenceAttrSetFloat",
      "body": [
          "ScPresenceAttrSetFloat()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\nNativeDB Added Parameter 1: Hash attrHash\nNativeDB Added Parameter 2: float value\n```"
  },
  "4239": {
      "prefix": "ScProfanityCheckString",
      "body": [
          "ScProfanityCheckString(${1:char* string}, ${2:int* token})${0}"
      ],
      "description": "Starts a task to check an entered string for profanity on the ROS/Social Club services.\n\nSee also: [`SC_PROFANITY_GET_CHECK_IS_VALID`](#\\_0x1753344C770358AE) and [`SC_PROFANITY_GET_CHECK_IS_PENDING`](#\\_0x82E4A58BABC15AE7)."
  },
  "4240": {
      "prefix": "ScPresenceAttrSetString",
      "body": [
          "ScPresenceAttrSetString(${1:Hash* attrHash}, ${2:char* value})${0}"
      ],
      "description": ""
  },
  "4241": {
      "prefix": "ScProfanityGetCheckIsPending",
      "body": [
          "ScProfanityGetCheckIsPending(${1:int* token})${0}"
      ],
      "description": ""
  },
  "4242": {
      "prefix": "ScProfanityGetStringPassed",
      "body": [
          "ScProfanityGetStringPassed(${1:int* token})${0}"
      ],
      "description": ""
  },
  "4243": {
      "prefix": "ScProfanityCheckUgcString",
      "body": [
          "ScProfanityCheckUgcString(${1:char* string}, ${2:int* token})${0}"
      ],
      "description": ""
  },
  "4244": {
      "prefix": "ScProfanityGetStringStatus",
      "body": [
          "ScProfanityGetStringStatus(${1:int* token})${0}"
      ],
      "description": ""
  },
  "4245": {
      "prefix": "ScProfanityGetCheckIsValid",
      "body": [
          "ScProfanityGetCheckIsValid(${1:int* token})${0}"
      ],
      "description": ""
  },
  "4246": {
      "prefix": "SetHandleRockstarMessageViaScript",
      "body": [
          "SetHandleRockstarMessageViaScript(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4247": {
      "prefix": "GetNgstatIntHash",
      "body": [
          "GetNgstatIntHash(${1:int* index}, ${2:BOOL* spStat}, ${3:BOOL* charStat}, ${4:int* character}, ${5:char* section})${0}"
      ],
      "description": "```\nNeeds more research. Gets the stat name of a masked int?\nsection - values used in the decompiled scripts:\n\"_NGPSTAT_INT\"\n\"_MP_NGPSTAT_INT\"\n\"_MP_LRPSTAT_INT\"\n\"_MP_APAPSTAT_INT\"\n\"_MP_LR2PSTAT_INT\"\n\"_MP_BIKEPSTAT_INT\"\n\"_MP_IMPEXPPSTAT_INT\"\n\"_MP_GUNRPSTAT_INT\"\n\"_NGDLCPSTAT_INT\"\n\"_MP_NGDLCPSTAT_INT\"\n\"_DLCSMUGCHARPSTAT_INT\"\n\"_GANGOPSPSTAT_INT\"\n\"_BUSINESSBATPSTAT_INT\"\n\"_ARENAWARSPSTAT_INT\"\n\"_CASINOPSTAT_INT\"\n\"_CASINOHSTPSTAT_INT\"\n```"
  },
  "4248": {
      "prefix": "GetNgstatBoolHash",
      "body": [
          "GetNgstatBoolHash(${1:int* index}, ${2:BOOL* spStat}, ${3:BOOL* charStat}, ${4:int* character}, ${5:char* section})${0}"
      ],
      "description": "```\nNeeds more research. Gets the stat name of a masked bool?\nsection - values used in the decompiled scripts:\n\"_NGPSTAT_BOOL\"\n\"_NGTATPSTAT_BOOL\"\n\"_NGDLCPSTAT_BOOL\"\n\"_DLCBIKEPSTAT_BOOL\"\n\"_DLCGUNPSTAT_BOOL\"\n\"_GUNTATPSTAT_BOOL\"\n\"_DLCSMUGCHARPSTAT_BOOL\"\n\"_GANGOPSPSTAT_BOOL\"\n\"_BUSINESSBATPSTAT_BOOL\"\n\"_ARENAWARSPSTAT_BOOL\"\n\"_CASINOPSTAT_BOOL\"\n\"_CASINOHSTPSTAT_BOOL\"\n\"_HEIST3TATTOOSTAT_BOOL\"\n```"
  },
  "4249": {
      "prefix": "GetPackedBoolStatKey",
      "body": [
          "GetPackedBoolStatKey(${1:int* index}, ${2:BOOL* spStat}, ${3:BOOL* charStat}, ${4:int* character})${0}"
      ],
      "description": ""
  },
  "4250": {
      "prefix": "GetPackedIntStatKey",
      "body": [
          "GetPackedIntStatKey(${1:int* index}, ${2:BOOL* spStat}, ${3:BOOL* charStat}, ${4:int* character})${0}"
      ],
      "description": ""
  },
  "4251": {
      "prefix": "GetPackedTuBoolStatKey",
      "body": [
          "GetPackedTuBoolStatKey(${1:int* index}, ${2:BOOL* spStat}, ${3:BOOL* charStat}, ${4:int* character})${0}"
      ],
      "description": ""
  },
  "4252": {
      "prefix": "GetPackedTuIntStatKey",
      "body": [
          "GetPackedTuIntStatKey(${1:int* index}, ${2:BOOL* spStat}, ${3:BOOL* charStat}, ${4:int* character})${0}"
      ],
      "description": ""
  },
  "4253": {
      "prefix": "HiredLimo",
      "body": [
          "HiredLimo(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4254": {
      "prefix": "Leaderboards2ReadByHandle",
      "body": [
          "Leaderboards2ReadByHandle(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4255": {
      "prefix": "Leaderboards2ReadByPlatform",
      "body": [
          "Leaderboards2ReadByPlatform(${1:Any* p0}, ${2:char* gamerHandleCsv}, ${3:char* platformName})${0}"
      ],
      "description": ""
  },
  "4256": {
      "prefix": "Leaderboards2ReadByRadius",
      "body": [
          "Leaderboards2ReadByRadius(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4257": {
      "prefix": "Leaderboards2ReadByRank",
      "body": [
          "Leaderboards2ReadByRank(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4258": {
      "prefix": "Leaderboards2ReadByRow",
      "body": [
          "Leaderboards2ReadByRow(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4259": {
      "prefix": "Leaderboards2ReadByScoreFloat",
      "body": [
          "Leaderboards2ReadByScoreFloat(${1:Any* p0}, ${2:float* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4260": {
      "prefix": "Leaderboards2ReadFriendsByRow",
      "body": [
          "Leaderboards2ReadFriendsByRow(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "4261": {
      "prefix": "Leaderboards2ReadByScoreInt",
      "body": [
          "Leaderboards2ReadByScoreInt(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4262": {
      "prefix": "Leaderboards2ReadRankPrediction",
      "body": [
          "Leaderboards2ReadRankPrediction(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4263": {
      "prefix": "Leaderboards2WriteData",
      "body": [
          "Leaderboards2WriteData(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4264": {
      "prefix": "Leaderboards2WriteDataForEventType",
      "body": [
          "Leaderboards2WriteDataForEventType(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4265": {
      "prefix": "LeaderboardsCacheDataRow",
      "body": [
          "LeaderboardsCacheDataRow(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4266": {
      "prefix": "LeaderboardsDeaths",
      "body": [
          "LeaderboardsDeaths(${1:Hash* statName}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4267": {
      "prefix": "LeaderboardsClearCacheData",
      "body": [
          "LeaderboardsClearCacheData()${0}"
      ],
      "description": ""
  },
  "4268": {
      "prefix": "LeaderboardsGetCacheExists",
      "body": [
          "LeaderboardsGetCacheExists(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4269": {
      "prefix": "LeaderboardsGetCacheTime",
      "body": [
          "LeaderboardsGetCacheTime(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4270": {
      "prefix": "LeaderboardsGetCacheDataRow",
      "body": [
          "LeaderboardsGetCacheDataRow(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4271": {
      "prefix": "LeaderboardsGetColumnType",
      "body": [
          "LeaderboardsGetColumnType(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4272": {
      "prefix": "LeaderboardsGetCacheNumberOfRows",
      "body": [
          "LeaderboardsGetCacheNumberOfRows(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4273": {
      "prefix": "LeaderboardsReadAnyPending",
      "body": [
          "LeaderboardsReadAnyPending()${0}"
      ],
      "description": ""
  },
  "4274": {
      "prefix": "LeaderboardsGetColumnId",
      "body": [
          "LeaderboardsGetColumnId(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4275": {
      "prefix": "LeaderboardsReadClearAll",
      "body": [
          "LeaderboardsReadClearAll()${0}"
      ],
      "description": ""
  },
  "4276": {
      "prefix": "LeaderboardsGetNumberOfColumns",
      "body": [
          "LeaderboardsGetNumberOfColumns(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4277": {
      "prefix": "LeaderboardsReadClear",
      "body": [
          "LeaderboardsReadClear(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4278": {
      "prefix": "LeaderboardsReadSuccessful",
      "body": [
          "LeaderboardsReadSuccessful(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4279": {
      "prefix": "LeaderboardsWriteAddColumn",
      "body": [
          "LeaderboardsWriteAddColumn(${1:Any* p0}, ${2:Any* p1}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "4280": {
      "prefix": "LeaderboardsReadPending",
      "body": [
          "LeaderboardsReadPending(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4281": {
      "prefix": "LeaderboardsWriteAddColumnLong",
      "body": [
          "LeaderboardsWriteAddColumnLong(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4282": {
      "prefix": "OrderedBossVehicle",
      "body": [
          "OrderedBossVehicle(${1:Any* p0}, ${2:Any* p1}, ${3:Hash* vehicleHash})${0}"
      ],
      "description": ""
  },
  "4283": {
      "prefix": "PlaystatsAcquiredHiddenPackage",
      "body": [
          "PlaystatsAcquiredHiddenPackage(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4284": {
      "prefix": "PlaystatsActivityDone",
      "body": [
          "PlaystatsActivityDone(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4285": {
      "prefix": "PlaystatsArenaWarSpectator",
      "body": [
          "PlaystatsArenaWarSpectator(${1:int* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3}, ${5:int* p4})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "4286": {
      "prefix": "PlaystatsArenaWarsEnded",
      "body": [
          "PlaystatsArenaWarsEnded(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "4287": {
      "prefix": "PlaystatsArcadegame",
      "body": [
          "PlaystatsArcadegame(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4288": {
      "prefix": "PlaystatsAwardBadsport",
      "body": [
          "PlaystatsAwardBadsport(${1:int* id})${0}"
      ],
      "description": ""
  },
  "4289": {
      "prefix": "PlaystatsBackgroundScriptAction",
      "body": [
          "PlaystatsBackgroundScriptAction(${1:char* action}, ${2:int* value})${0}"
      ],
      "description": ""
  },
  "4290": {
      "prefix": "PlaystatsAwardXp",
      "body": [
          "PlaystatsAwardXp(${1:int* amount}, ${2:Hash* type}, ${3:Hash* category})${0}"
      ],
      "description": ""
  },
  "4291": {
      "prefix": "PlaystatsBuyContraband",
      "body": [
          "PlaystatsBuyContraband(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4292": {
      "prefix": "PlaystatsBanAlert",
      "body": [
          "PlaystatsBanAlert(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4293": {
      "prefix": "PlaystatsCarclubChallenge",
      "body": [
          "PlaystatsCarclubChallenge(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4294": {
      "prefix": "PlaystatsCarclubPoints",
      "body": [
          "PlaystatsCarclubPoints(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4295": {
      "prefix": "PlaystatsCarclubPrize",
      "body": [
          "PlaystatsCarclubPrize(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4296": {
      "prefix": "PlaystatsCasinoBlackjack",
      "body": [
          "PlaystatsCasinoBlackjack(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4297": {
      "prefix": "PlaystatsCasinoChip",
      "body": [
          "PlaystatsCasinoChip(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4298": {
      "prefix": "PlaystatsCasinoBlackjackLight",
      "body": [
          "PlaystatsCasinoBlackjackLight(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4299": {
      "prefix": "PlaystatsCasinoInsidetrackLight",
      "body": [
          "PlaystatsCasinoInsidetrackLight(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4300": {
      "prefix": "PlaystatsCasinoInsidetrack",
      "body": [
          "PlaystatsCasinoInsidetrack(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4301": {
      "prefix": "PlaystatsCasinoLuckyseven",
      "body": [
          "PlaystatsCasinoLuckyseven(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4302": {
      "prefix": "PlaystatsCasinoRoulette",
      "body": [
          "PlaystatsCasinoRoulette(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4303": {
      "prefix": "PlaystatsCasinoMissionEnded",
      "body": [
          "PlaystatsCasinoMissionEnded(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4304": {
      "prefix": "PlaystatsCasinoRouletteLight",
      "body": [
          "PlaystatsCasinoRouletteLight(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4305": {
      "prefix": "PlaystatsCasinoStoryMissionEnded",
      "body": [
          "PlaystatsCasinoStoryMissionEnded(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4306": {
      "prefix": "PlaystatsCasinoSlotmachine",
      "body": [
          "PlaystatsCasinoSlotmachine(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4307": {
      "prefix": "PlaystatsCasinoThreecardpoker",
      "body": [
          "PlaystatsCasinoThreecardpoker(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4308": {
      "prefix": "PlaystatsCasinoSlotmachineLight",
      "body": [
          "PlaystatsCasinoSlotmachineLight(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4309": {
      "prefix": "PlaystatsCasinoThreecardpokerLight",
      "body": [
          "PlaystatsCasinoThreecardpokerLight(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4310": {
      "prefix": "PlaystatsChangeMcEmblem",
      "body": [
          "PlaystatsChangeMcEmblem(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4311": {
      "prefix": "PlaystatsClothChange",
      "body": [
          "PlaystatsClothChange(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4312": {
      "prefix": "PlaystatsCheatApplied",
      "body": [
          "PlaystatsCheatApplied(${1:char* cheat})${0}"
      ],
      "description": ""
  },
  "4313": {
      "prefix": "PlaystatsCollectible",
      "body": [
          "PlaystatsCollectible(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:Any* p9})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4314": {
      "prefix": "PlaystatsCopyRankIntoNewSlot",
      "body": [
          "PlaystatsCopyRankIntoNewSlot(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4315": {
      "prefix": "PlaystatsCrateCreatedMissionDone",
      "body": [
          "PlaystatsCrateCreatedMissionDone(${1:float* p0}, ${2:float* p1}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "4316": {
      "prefix": "PlaystatsCrateDropMissionDone",
      "body": [
          "PlaystatsCrateDropMissionDone(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 7: Any p6\nNativeDB Added Parameter 8: Any p7\n```"
  },
  "4317": {
      "prefix": "PlaystatsDefendContraband",
      "body": [
          "PlaystatsDefendContraband(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4318": {
      "prefix": "PlaystatsDarMissionEnd",
      "body": [
          "PlaystatsDarMissionEnd(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "4319": {
      "prefix": "PlaystatsDirectorMode",
      "body": [
          "PlaystatsDirectorMode(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4320": {
      "prefix": "PlaystatsDupeDetection",
      "body": [
          "PlaystatsDupeDetection(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4321": {
      "prefix": "PlaystatsDroneUsage",
      "body": [
          "PlaystatsDroneUsage(${1:int* p0}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "4322": {
      "prefix": "PlaystatsEarnedMcPoints",
      "body": [
          "PlaystatsEarnedMcPoints(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "4323": {
      "prefix": "PlaystatsExtraEvent",
      "body": [
          "PlaystatsExtraEvent(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4324": {
      "prefix": "PlaystatsEnterSessionPack",
      "body": [
          "PlaystatsEnterSessionPack(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "4325": {
      "prefix": "PlaystatsGunrunMissionEnded",
      "body": [
          "PlaystatsGunrunMissionEnded(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4326": {
      "prefix": "PlaystatsFriendActivity",
      "body": [
          "PlaystatsFriendActivity(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4327": {
      "prefix": "PlaystatsH2InstanceEnd",
      "body": [
          "PlaystatsH2InstanceEnd(${1:Any* data}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "4328": {
      "prefix": "PlaystatsH2FmprepEnd",
      "body": [
          "PlaystatsH2FmprepEnd(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "4329": {
      "prefix": "PlaystatsHoldUpMissionDone",
      "body": [
          "PlaystatsHoldUpMissionDone(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4330": {
      "prefix": "PlaystatsHeistSaveCheat",
      "body": [
          "PlaystatsHeistSaveCheat(${1:Hash* hash}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "4331": {
      "prefix": "PlaystatsIdleKick",
      "body": [
          "PlaystatsIdleKick(${1:int* time})${0}"
      ],
      "description": "```\nlongest time being ilde?  \n```"
  },
  "4332": {
      "prefix": "PlaystatsImportExportMissionDone",
      "body": [
          "PlaystatsImportExportMissionDone(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4333": {
      "prefix": "PlaystatsLeaveJobChain",
      "body": [
          "PlaystatsLeaveJobChain(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4334": {
      "prefix": "PlaystatsMissionCheckpoint",
      "body": [
          "PlaystatsMissionCheckpoint(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4335": {
      "prefix": "PlaystatsMatchStarted",
      "body": [
          "PlaystatsMatchStarted(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": "```\nNativeDB Removed Parameter 4: Any p3\nNativeDB Removed Parameter 5: Any p4\nNativeDB Removed Parameter 6: Any p5\nNativeDB Removed Parameter 7: Any p6\n```"
  },
  "4336": {
      "prefix": "PlaystatsMissionOver",
      "body": [
          "PlaystatsMissionOver(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL* p3}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "4337": {
      "prefix": "PlaystatsMissionStarted",
      "body": [
          "PlaystatsMissionStarted(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "4338": {
      "prefix": "PlaystatsNpcInvite",
      "body": [
          "PlaystatsNpcInvite(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4339": {
      "prefix": "PlaystatsOddjobDone",
      "body": [
          "PlaystatsOddjobDone(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "4340": {
      "prefix": "PlaystatsPegasaircraft",
      "body": [
          "PlaystatsPegasaircraft(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "4341": {
      "prefix": "PlaystatsPassiveMode",
      "body": [
          "PlaystatsPassiveMode(${1:BOOL* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1734\n```"
  },
  "4342": {
      "prefix": "PlaystatsPiMenuHideSettings",
      "body": [
          "PlaystatsPiMenuHideSettings(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4343": {
      "prefix": "PlaystatsQuickfixTool",
      "body": [
          "PlaystatsQuickfixTool(${1:int* element}, ${2:char* item})${0}"
      ],
      "description": ""
  },
  "4344": {
      "prefix": "PlaystatsPropChange",
      "body": [
          "PlaystatsPropChange(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4345": {
      "prefix": "PlaystatsRaceCheckpoint",
      "body": [
          "PlaystatsRaceCheckpoint(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4346": {
      "prefix": "PlaystatsRaceToPointMissionDone",
      "body": [
          "PlaystatsRaceToPointMissionDone(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:Any* p9})${0}"
      ],
      "description": "```\nNativeDB Removed Parameter 5: Any p4\nNativeDB Removed Parameter 6: Any p5\nNativeDB Removed Parameter 7: Any p6\nNativeDB Removed Parameter 8: Any p7\nNativeDB Removed Parameter 9: Any p8\nNativeDB Removed Parameter 10: Any p9\n```"
  },
  "4347": {
      "prefix": "PlaystatsRandomMissionDone",
      "body": [
          "PlaystatsRandomMissionDone(${1:char* name}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4348": {
      "prefix": "PlaystatsRankUp",
      "body": [
          "PlaystatsRankUp(${1:int* rank})${0}"
      ],
      "description": ""
  },
  "4349": {
      "prefix": "PlaystatsRecoverContraband",
      "body": [
          "PlaystatsRecoverContraband(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4350": {
      "prefix": "PlaystatsRobberyFinale",
      "body": [
          "PlaystatsRobberyFinale(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4351": {
      "prefix": "PlaystatsRosBet",
      "body": [
          "PlaystatsRosBet(${1:int* amount}, ${2:int* act}, ${3:Player* player}, ${4:float* cm})${0}"
      ],
      "description": ""
  },
  "4352": {
      "prefix": "PlaystatsRobberyPrep",
      "body": [
          "PlaystatsRobberyPrep(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4353": {
      "prefix": "PlaystatsSellContraband",
      "body": [
          "PlaystatsSellContraband(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4354": {
      "prefix": "PlaystatsSmugMissionEnded",
      "body": [
          "PlaystatsSmugMissionEnded(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "4355": {
      "prefix": "PlaystatsSpectatorWheelSpin",
      "body": [
          "PlaystatsSpectatorWheelSpin(${1:int* p0}, ${2:int* p1}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "4356": {
      "prefix": "PlaystatsShopItem",
      "body": [
          "PlaystatsShopItem(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4357": {
      "prefix": "PlaystatsStartOfflineMode",
      "body": [
          "PlaystatsStartOfflineMode()${0}"
      ],
      "description": "```\nPLAYSTATS_START_INVITE_DESPAWNING?\n```"
  },
  "4358": {
      "prefix": "PlaystatsSpentPiCustomLoadout",
      "body": [
          "PlaystatsSpentPiCustomLoadout(${1:int* amount})${0}"
      ],
      "description": ""
  },
  "4359": {
      "prefix": "PlaystatsStoneHatchetEnd",
      "body": [
          "PlaystatsStoneHatchetEnd(${1:Any* data})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "4360": {
      "prefix": "PlaystatsStuntPerformedEventAllowTrigger",
      "body": [
          "PlaystatsStuntPerformedEventAllowTrigger()${0}"
      ],
      "description": "```\nAllows CEventNetworkStuntPerformed to be triggered.\n```"
  },
  "4361": {
      "prefix": "PlaystatsStuntPerformedEventDisallowTrigger",
      "body": [
          "PlaystatsStuntPerformedEventDisallowTrigger()${0}"
      ],
      "description": "```\nDisallows CEventNetworkStuntPerformed to be triggered.\n```"
  },
  "4362": {
      "prefix": "PlaystatsWeaponModeChange",
      "body": [
          "PlaystatsWeaponModeChange(${1:Hash* weaponHash}, ${2:Hash* componentHashTo}, ${3:Hash* componentHashFrom})${0}"
      ],
      "description": ""
  },
  "4363": {
      "prefix": "PlaystatsWebsiteVisited",
      "body": [
          "PlaystatsWebsiteVisited(${1:Hash* scaleformHash}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "4364": {
      "prefix": "SetHasContentUnlocksFlags",
      "body": [
          "SetHasContentUnlocksFlags(${1:int* value})${0}"
      ],
      "description": "```\nSets profile setting 866\nSET_*\n```"
  },
  "4365": {
      "prefix": "SetProfileSettingPrologueComplete",
      "body": [
          "SetProfileSettingPrologueComplete()${0}"
      ],
      "description": ""
  },
  "4366": {
      "prefix": "StatClearSlotForReload",
      "body": [
          "StatClearSlotForReload(${1:int* statSlot})${0}"
      ],
      "description": "```\nExample:\nfor (v_2 = 0; v_2 <= 4; v_2 += 1) {\n    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);\n}\n```"
  },
  "4367": {
      "prefix": "SetSaveMigrationTransactionId",
      "body": [
          "SetSaveMigrationTransactionId(${1:int* transactionId})${0}"
      ],
      "description": "```\nSets profile setting 501\n```"
  },
  "4368": {
      "prefix": "StatGetBool",
      "body": [
          "StatGetBool(${1:Hash* statHash}, ${2:BOOL* outValue}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4369": {
      "prefix": "StatDeleteSlot",
      "body": [
          "StatDeleteSlot(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4370": {
      "prefix": "StatGetBoolMasked",
      "body": [
          "StatGetBoolMasked(${1:Hash* statName}, ${2:int* mask}, ${3:int* p2})${0}"
      ],
      "description": "```\np2 - Default value? Seems to be -1 most of the time.  \n```"
  },
  "4371": {
      "prefix": "StatGetCancelSaveMigrationStatus",
      "body": [
          "StatGetCancelSaveMigrationStatus()${0}"
      ],
      "description": ""
  },
  "4372": {
      "prefix": "StatGetDate",
      "body": [
          "StatGetDate(${1:Hash* statHash}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4373": {
      "prefix": "StatGetFloat",
      "body": [
          "StatGetFloat(${1:Hash* statHash}, ${2:float* outValue}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "4374": {
      "prefix": "StatGetInt",
      "body": [
          "StatGetInt(${1:Hash* statHash}, ${2:int* outValue}, ${3:int* p2})${0}"
      ],
      "description": "```\np2 appears to always be -1  \n```"
  },
  "4375": {
      "prefix": "StatGetMaskedInt",
      "body": [
          "StatGetMaskedInt(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4376": {
      "prefix": "StatGetLicensePlate",
      "body": [
          "StatGetLicensePlate(${1:Hash* statName})${0}"
      ],
      "description": ""
  },
  "4377": {
      "prefix": "StatGetNumberOfDays",
      "body": [
          "StatGetNumberOfDays(${1:Hash* statName})${0}"
      ],
      "description": ""
  },
  "4378": {
      "prefix": "StatGetNumberOfHours",
      "body": [
          "StatGetNumberOfHours(${1:Hash* statName})${0}"
      ],
      "description": ""
  },
  "4379": {
      "prefix": "StatGetNumberOfSeconds",
      "body": [
          "StatGetNumberOfSeconds(${1:Hash* statName})${0}"
      ],
      "description": ""
  },
  "4380": {
      "prefix": "StatGetNumberOfMinutes",
      "body": [
          "StatGetNumberOfMinutes(${1:Hash* statName})${0}"
      ],
      "description": ""
  },
  "4381": {
      "prefix": "StatGetPackedBoolMask",
      "body": [
          "StatGetPackedBoolMask(${1:int* p0})${0}"
      ],
      "description": "```\nNeeds more research. Possibly used to calculate the \"mask\" when calling \"STAT_SET_BOOL_MASKED\"?  \n```"
  },
  "4382": {
      "prefix": "StatGetPackedIntMask",
      "body": [
          "StatGetPackedIntMask(${1:int* p0})${0}"
      ],
      "description": "```\nNeeds more research. Possibly used to calculate the \"mask\" when calling \"STAT_SET_MASKED_INT\"?  \n```"
  },
  "4383": {
      "prefix": "StatGetPos",
      "body": [
          "StatGetPos(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4384": {
      "prefix": "StatGetSaveMigrationConsumeContentUnlockStatus",
      "body": [
          "StatGetSaveMigrationConsumeContentUnlockStatus(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4385": {
      "prefix": "StatGetUserId",
      "body": [
          "StatGetUserId(${1:Any* p0})${0}"
      ],
      "description": "```\nNeeds more research. Seems to return \"STAT_UNKNOWN\" if no such user id exists.  \n```"
  },
  "4386": {
      "prefix": "StatLoad",
      "body": [
          "StatLoad(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4387": {
      "prefix": "StatGetSaveMigrationStatus",
      "body": [
          "StatGetSaveMigrationStatus(${1:Any* data})${0}"
      ],
      "description": ""
  },
  "4388": {
      "prefix": "StatLoadPending",
      "body": [
          "StatLoadPending(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4389": {
      "prefix": "StatGetString",
      "body": [
          "StatGetString(${1:Hash* statHash}, ${2:int* p1})${0}"
      ],
      "description": "```\np1 is always -1 in the script files  \n```"
  },
  "4390": {
      "prefix": "StatIncrement",
      "body": [
          "StatIncrement(${1:Hash* statName}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "4391": {
      "prefix": "StatSave",
      "body": [
          "StatSave(${1:int* p0}, ${2:BOOL* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "4392": {
      "prefix": "StatMigrateSave",
      "body": [
          "StatMigrateSave(${1:char* platformName})${0}"
      ],
      "description": "```\nplatformName must be one of the following: ps3, xbox360, ps4, xboxone\n```"
  },
  "4393": {
      "prefix": "StatSaveMigrationCancel",
      "body": [
          "StatSaveMigrationCancel()${0}"
      ],
      "description": ""
  },
  "4394": {
      "prefix": "StatSaveMigrationConsumeContentUnlock",
      "body": [
          "StatSaveMigrationConsumeContentUnlock(${1:Hash* contentId}, ${2:char* srcPlatform}, ${3:char* srcGamerHandle})${0}"
      ],
      "description": ""
  },
  "4395": {
      "prefix": "StatSaveMigrationStatusStart",
      "body": [
          "StatSaveMigrationStatusStart()${0}"
      ],
      "description": ""
  },
  "4396": {
      "prefix": "StatSetBlockSaves",
      "body": [
          "StatSetBlockSaves(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4397": {
      "prefix": "StatSavePending",
      "body": [
          "StatSavePending()${0}"
      ],
      "description": ""
  },
  "4398": {
      "prefix": "StatSetBoolMasked",
      "body": [
          "StatSetBoolMasked(${1:Hash* statName}, ${2:BOOL* value}, ${3:int* mask}, ${4:BOOL* save})${0}"
      ],
      "description": ""
  },
  "4399": {
      "prefix": "StatSavePendingOrRequested",
      "body": [
          "StatSavePendingOrRequested()${0}"
      ],
      "description": ""
  },
  "4400": {
      "prefix": "StatSetCheatIsActive",
      "body": [
          "StatSetCheatIsActive()${0}"
      ],
      "description": ""
  },
  "4401": {
      "prefix": "StatSetBool",
      "body": [
          "StatSetBool(${1:Hash* statName}, ${2:BOOL* value}, ${3:BOOL* save})${0}"
      ],
      "description": "```\nExample:\n STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY(\"MPPLY_MELEECHLENGECOMPLETED\"), trur, true);\n```"
  },
  "4402": {
      "prefix": "StatSetCurrentPosixTime",
      "body": [
          "StatSetCurrentPosixTime(${1:Hash* statName}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np1 always true.  \n```"
  },
  "4403": {
      "prefix": "StatSetFloat",
      "body": [
          "StatSetFloat(${1:Hash* statName}, ${2:float* value}, ${3:BOOL* save})${0}"
      ],
      "description": "```\nExample:\n STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY(\"MP0_WEAPON_ACCURACY\"), 66.6f, true);\n```"
  },
  "4404": {
      "prefix": "StatSetDate",
      "body": [
          "StatSetDate(${1:Hash* statName}, ${2:Any* value}, ${3:int* numFields}, ${4:BOOL* save})${0}"
      ],
      "description": "```\n'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).  \nThe structure looks like this:  \nint year  \nint month  \nint day  \nint hour  \nint minute  \nint second  \nint millisecond  \nThe decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.  \n```"
  },
  "4405": {
      "prefix": "StatSetGxtLabel",
      "body": [
          "StatSetGxtLabel(${1:Hash* statName}, ${2:char* value}, ${3:BOOL* save})${0}"
      ],
      "description": "```\nThe following values have been found in the decompiled scripts:  \n\"RC_ABI1\"  \n\"RC_ABI2\"  \n\"RC_BA1\"  \n\"RC_BA2\"  \n\"RC_BA3\"  \n\"RC_BA3A\"  \n\"RC_BA3C\"  \n\"RC_BA4\"  \n\"RC_DRE1\"  \n\"RC_EPS1\"  \n\"RC_EPS2\"  \n\"RC_EPS3\"  \n\"RC_EPS4\"  \n\"RC_EPS5\"  \n\"RC_EPS6\"  \n\"RC_EPS7\"  \n\"RC_EPS8\"  \n\"RC_EXT1\"  \n\"RC_EXT2\"  \n\"RC_EXT3\"  \n\"RC_EXT4\"  \n\"RC_FAN1\"  \n\"RC_FAN2\"  \n\"RC_FAN3\"  \n\"RC_HAO1\"  \n\"RC_HUN1\"  \n\"RC_HUN2\"  \n\"RC_JOS1\"  \n\"RC_JOS2\"  \n\"RC_JOS3\"  \n\"RC_JOS4\"  \n\"RC_MAU1\"  \n\"RC_MIN1\"  \n\"RC_MIN2\"  \n\"RC_MIN3\"  \n\"RC_MRS1\"  \n\"RC_MRS2\"  \n\"RC_NI1\"  \n\"RC_NI1A\"  \n\"RC_NI1B\"  \n\"RC_NI1C\"  \n\"RC_NI1D\"  \n\"RC_NI2\"  \n\"RC_NI3\"  \n\"RC_OME1\"  \n\"RC_OME2\"  \n\"RC_PA1\"  \n\"RC_PA2\"  \n\"RC_PA3\"  \n\"RC_PA3A\"  \n\"RC_PA3B\"  \n\"RC_PA4\"  \n\"RC_RAM1\"  \n\"RC_RAM2\"  \n\"RC_RAM3\"  \n\"RC_RAM4\"  \n\"RC_RAM5\"  \n\"RC_SAS1\"  \n\"RC_TON1\"  \n\"RC_TON2\"  \n\"RC_TON3\"  \n\"RC_TON4\"  \n\"RC_TON5\"  \n```"
  },
  "4406": {
      "prefix": "StatSetLicensePlate",
      "body": [
          "StatSetLicensePlate(${1:Hash* statName}, ${2:char* str})${0}"
      ],
      "description": ""
  },
  "4407": {
      "prefix": "StatSetInt",
      "body": [
          "StatSetInt(${1:Hash* statName}, ${2:int* value}, ${3:BOOL* save})${0}"
      ],
      "description": "```\nExample:\n STATS::STAT_SET_INT(MISC::GET_HASH_KEY(\"MPPLY_KILLS_PLAYERS\"), 1337, true);\n```"
  },
  "4408": {
      "prefix": "StatSetPos",
      "body": [
          "StatSetPos(${1:Hash* statName}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* save})${0}"
      ],
      "description": ""
  },
  "4409": {
      "prefix": "StatSetMaskedInt",
      "body": [
          "StatSetMaskedInt(${1:Hash* statName}, ${2:Any* p1}, ${3:Any* p2}, ${4:int* p3}, ${5:BOOL* save})${0}"
      ],
      "description": ""
  },
  "4410": {
      "prefix": "StatSetString",
      "body": [
          "StatSetString(${1:Hash* statName}, ${2:char* value}, ${3:BOOL* save})${0}"
      ],
      "description": ""
  },
  "4411": {
      "prefix": "StatSetProfileSettingValue",
      "body": [
          "StatSetProfileSettingValue(${1:int* profileSetting}, ${2:int* value})${0}"
      ],
      "description": "```\nDoes not take effect immediately, unfortunately.\nprofileSetting seems to only be 936, 937 and 938 in scripts\n```"
  },
  "4412": {
      "prefix": "StatSetUserId",
      "body": [
          "StatSetUserId(${1:Hash* statName}, ${2:char* value}, ${3:BOOL* save})${0}"
      ],
      "description": ""
  },
  "4413": {
      "prefix": "StatSlotIsLoaded",
      "body": [
          "StatSlotIsLoaded(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4414": {
      "prefix": "UpdateStatInt",
      "body": [
          "UpdateStatInt(${1:Hash* statHash}, ${2:int* value}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "4415": {
      "prefix": "UpdateStatFloat",
      "body": [
          "UpdateStatFloat(${1:Hash* statHash}, ${2:float* value}, ${3:int* p2})${0}"
      ],
      "description": ""
  },
  "4416": {
      "prefix": "AddModelToCreatorBudget",
      "body": [
          "AddModelToCreatorBudget(${1:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "4417": {
      "prefix": "AllowPlayerSwitchAscent",
      "body": [
          "AllowPlayerSwitchAscent()${0}"
      ],
      "description": ""
  },
  "4418": {
      "prefix": "AllowPlayerSwitchDescent",
      "body": [
          "AllowPlayerSwitchDescent()${0}"
      ],
      "description": ""
  },
  "4419": {
      "prefix": "AllowPlayerSwitchOutro",
      "body": [
          "AllowPlayerSwitchOutro()${0}"
      ],
      "description": ""
  },
  "4420": {
      "prefix": "AllowPlayerSwitchPan",
      "body": [
          "AllowPlayerSwitchPan()${0}"
      ],
      "description": ""
  },
  "4421": {
      "prefix": "BeginSrl",
      "body": [
          "BeginSrl()${0}"
      ],
      "description": ""
  },
  "4422": {
      "prefix": "ClearFocus",
      "body": [
          "ClearFocus()${0}"
      ],
      "description": ""
  },
  "4423": {
      "prefix": "ClearHdArea",
      "body": [
          "ClearHdArea()${0}"
      ],
      "description": ""
  },
  "4424": {
      "prefix": "DoesAnimDictExist",
      "body": [
          "DoesAnimDictExist(${1:char* animDict})${0}"
      ],
      "description": ""
  },
  "4425": {
      "prefix": "DisableSwitchOutroFx",
      "body": [
          "DisableSwitchOutroFx()${0}"
      ],
      "description": ""
  },
  "4426": {
      "prefix": "EndSrl",
      "body": [
          "EndSrl()${0}"
      ],
      "description": "Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL."
  },
  "4427": {
      "prefix": "EnableSwitchPauseBeforeDescent",
      "body": [
          "EnableSwitchPauseBeforeDescent()${0}"
      ],
      "description": ""
  },
  "4428": {
      "prefix": "GetGlobalWaterType",
      "body": [
          "GetGlobalWaterType()${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "4429": {
      "prefix": "GetIdealPlayerSwitchType",
      "body": [
          "GetIdealPlayerSwitchType(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nx1, y1, z1 -- Coords of your ped model  \nx2, y2, z2 -- Coords of the ped you want to switch to  \n```"
  },
  "4430": {
      "prefix": "GetNumberOfStreamingRequests",
      "body": [
          "GetNumberOfStreamingRequests()${0}"
      ],
      "description": ""
  },
  "4431": {
      "prefix": "GetLodscale",
      "body": [
          "GetLodscale()${0}"
      ],
      "description": ""
  },
  "4432": {
      "prefix": "GetPlayerShortSwitchState",
      "body": [
          "GetPlayerShortSwitchState()${0}"
      ],
      "description": ""
  },
  "4433": {
      "prefix": "GetPlayerSwitchInterpOutCurrentTime",
      "body": [
          "GetPlayerSwitchInterpOutCurrentTime()${0}"
      ],
      "description": ""
  },
  "4434": {
      "prefix": "GetPlayerSwitchJumpCutIndex",
      "body": [
          "GetPlayerSwitchJumpCutIndex()${0}"
      ],
      "description": ""
  },
  "4435": {
      "prefix": "GetPlayerSwitchInterpOutDuration",
      "body": [
          "GetPlayerSwitchInterpOutDuration()${0}"
      ],
      "description": ""
  },
  "4436": {
      "prefix": "GetPlayerSwitchType",
      "body": [
          "GetPlayerSwitchType()${0}"
      ],
      "description": ""
  },
  "4437": {
      "prefix": "GetPlayerSwitchState",
      "body": [
          "GetPlayerSwitchState()${0}"
      ],
      "description": ""
  },
  "4438": {
      "prefix": "HasAnimDictLoaded",
      "body": [
          "HasAnimDictLoaded(${1:char* animDict})${0}"
      ],
      "description": ""
  },
  "4439": {
      "prefix": "GetUsedCreatorModelMemoryPercentage",
      "body": [
          "GetUsedCreatorModelMemoryPercentage()${0}"
      ],
      "description": "```\n0.0 = no memory used\n1.0 = all memory used\n\nMaximum model memory (as defined in common\\data\\missioncreatordata.meta) is 100 MiB\n\nGET_*\n```"
  },
  "4440": {
      "prefix": "HasClipSetLoaded",
      "body": [
          "HasClipSetLoaded(${1:char* clipSet})${0}"
      ],
      "description": "```\nAlias for HAS_ANIM_SET_LOADED.  \n```"
  },
  "4441": {
      "prefix": "HasAnimSetLoaded",
      "body": [
          "HasAnimSetLoaded(${1:char* animSet})${0}"
      ],
      "description": "Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped.\n\nAnimation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\\_0xAF8A94EDE7712BEF)."
  },
  "4442": {
      "prefix": "HasCollisionForModelLoaded",
      "body": [
          "HasCollisionForModelLoaded(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "4443": {
      "prefix": "HasPtfxAssetLoaded",
      "body": [
          "HasPtfxAssetLoaded()${0}"
      ],
      "description": ""
  },
  "4444": {
      "prefix": "HasModelLoaded",
      "body": [
          "HasModelLoaded(${1:Hash* model})${0}"
      ],
      "description": "```\nChecks if the specified model has loaded into memory.  \n```"
  },
  "4445": {
      "prefix": "IsEntityFocus",
      "body": [
          "IsEntityFocus(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4446": {
      "prefix": "IsIplActive",
      "body": [
          "IsIplActive(${1:char* iplName})${0}"
      ],
      "description": ""
  },
  "4447": {
      "prefix": "HasNamedPtfxAssetLoaded",
      "body": [
          "HasNamedPtfxAssetLoaded(${1:char* fxName})${0}"
      ],
      "description": ""
  },
  "4448": {
      "prefix": "IsModelAVehicle",
      "body": [
          "IsModelAVehicle(${1:Hash* model})${0}"
      ],
      "description": "```\nReturns whether the specified model represents a vehicle.  \n```"
  },
  "4449": {
      "prefix": "InitCreatorBudget",
      "body": [
          "InitCreatorBudget()${0}"
      ],
      "description": ""
  },
  "4450": {
      "prefix": "IsModelAPed",
      "body": [
          "IsModelAPed(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "4451": {
      "prefix": "IsModelValid",
      "body": [
          "IsModelValid(${1:Hash* model})${0}"
      ],
      "description": "```\nReturns whether the specified model exists in the game.  \n```"
  },
  "4452": {
      "prefix": "IsModelInCdimage",
      "body": [
          "IsModelInCdimage(${1:Hash* model})${0}"
      ],
      "description": "```\nCheck if model is in cdimage(rpf)  \n```"
  },
  "4453": {
      "prefix": "IsNetworkLoadingScene",
      "body": [
          "IsNetworkLoadingScene()${0}"
      ],
      "description": ""
  },
  "4454": {
      "prefix": "IsNewLoadSceneActive",
      "body": [
          "IsNewLoadSceneActive()${0}"
      ],
      "description": ""
  },
  "4455": {
      "prefix": "IsNewLoadSceneLoaded",
      "body": [
          "IsNewLoadSceneLoaded()${0}"
      ],
      "description": ""
  },
  "4456": {
      "prefix": "IsPlayerSwitchInProgress",
      "body": [
          "IsPlayerSwitchInProgress()${0}"
      ],
      "description": "```\nReturns true if the player is currently switching, false otherwise.  \n(When the camera is in the sky moving from Trevor to Franklin for example)  \n```"
  },
  "4457": {
      "prefix": "IsSrlLoaded",
      "body": [
          "IsSrlLoaded()${0}"
      ],
      "description": "Returns true when the srl from BEGIN_SRL is loaded."
  },
  "4458": {
      "prefix": "IsStreamvolActive",
      "body": [
          "IsStreamvolActive()${0}"
      ],
      "description": ""
  },
  "4459": {
      "prefix": "IsSwitchReadyForDescent",
      "body": [
          "IsSwitchReadyForDescent()${0}"
      ],
      "description": ""
  },
  "4460": {
      "prefix": "IsSwitchSkippingDescent",
      "body": [
          "IsSwitchSkippingDescent()${0}"
      ],
      "description": ""
  },
  "4461": {
      "prefix": "LoadAllObjectsNow",
      "body": [
          "LoadAllObjectsNow()${0}"
      ],
      "description": ""
  },
  "4462": {
      "prefix": "LoadGlobalWaterType",
      "body": [
          "LoadGlobalWaterType(${1:int* waterType})${0}"
      ],
      "description": "0 - default\n1 - HeistIsland\n\n```\nNativeDB Introduced: v2189\n```"
  },
  "4463": {
      "prefix": "LoadScene",
      "body": [
          "LoadScene(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "4464": {
      "prefix": "NetworkStopLoadScene",
      "body": [
          "NetworkStopLoadScene()${0}"
      ],
      "description": ""
  },
  "4465": {
      "prefix": "NetworkUpdateLoadScene",
      "body": [
          "NetworkUpdateLoadScene()${0}"
      ],
      "description": ""
  },
  "4466": {
      "prefix": "NewLoadSceneStop",
      "body": [
          "NewLoadSceneStop()${0}"
      ],
      "description": ""
  },
  "4467": {
      "prefix": "NewLoadSceneStart",
      "body": [
          "NewLoadSceneStart(${1:float* posX}, ${2:float* posY}, ${3:float* posZ}, ${4:float* offsetX}, ${5:float* offsetY}, ${6:float* offsetZ}, ${7:float* radius}, ${8:int* p7})${0}"
      ],
      "description": "```\n`radius` value is usually between `3f` and `7000f` in original 1868 scripts.\n`p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.\nReturns True if success, used only 7 times in decompiled scripts of 1868\n```"
  },
  "4468": {
      "prefix": "OverrideLodscaleThisFrame",
      "body": [
          "OverrideLodscaleThisFrame(${1:float* scaling})${0}"
      ],
      "description": "```\nThis allows you to override \"extended distance scaling\" setting. Needs to be called each frame.\nMax scaling seems to be 200.0, normal is 1.0\nSee https://gfycat.com/DetailedHauntingIncatern\n```"
  },
  "4469": {
      "prefix": "NewLoadSceneStartSphere",
      "body": [
          "NewLoadSceneStartSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Any* p4})${0}"
      ],
      "description": "```\nif (!sub_8f12(\"START LOAD SCENE SAFE\")) {\n    if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {\n        STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);\n        sub_8e9e(\"START LOAD SCENE SAFE\", 1);\n    }\n}\n(Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)\n```"
  },
  "4470": {
      "prefix": "RemoveAnimDict",
      "body": [
          "RemoveAnimDict(${1:char* animDict})${0}"
      ],
      "description": ""
  },
  "4471": {
      "prefix": "PrefetchSrl",
      "body": [
          "PrefetchSrl(${1:char* srl})${0}"
      ],
      "description": "This native is used to attribute the SRL that BeginSrl is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SetFocusArea because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.\nFor instance, GTA:O opening cutscene.\n\nhttps://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta\nhttps://pastebin.com/zd9XYUWY : here is the content of a SRL file opened with codewalker."
  },
  "4472": {
      "prefix": "RemoveAnimSet",
      "body": [
          "RemoveAnimSet(${1:char* animSet})${0}"
      ],
      "description": "Unloads the specified animation set. An animation set provides movement animations for a ped.\n\nAnimation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\\_0xAF8A94EDE7712BEF)."
  },
  "4473": {
      "prefix": "RemoveIpl",
      "body": [
          "RemoveIpl(${1:char* iplName})${0}"
      ],
      "description": "```\nIPL list: pastebin.com/iNGLY32D  \n```"
  },
  "4474": {
      "prefix": "RemoveClipSet",
      "body": [
          "RemoveClipSet(${1:char* clipSet})${0}"
      ],
      "description": "```\nAlias for REMOVE_ANIM_SET.  \n```"
  },
  "4475": {
      "prefix": "RemoveModelFromCreatorBudget",
      "body": [
          "RemoveModelFromCreatorBudget(${1:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "4476": {
      "prefix": "RemoveNamedPtfxAsset",
      "body": [
          "RemoveNamedPtfxAsset(${1:char* fxName})${0}"
      ],
      "description": ""
  },
  "4477": {
      "prefix": "RemovePtfxAsset",
      "body": [
          "RemovePtfxAsset()${0}"
      ],
      "description": ""
  },
  "4478": {
      "prefix": "RequestAdditionalCollisionAtCoord",
      "body": [
          "RequestAdditionalCollisionAtCoord(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "4479": {
      "prefix": "RequestAnimSet",
      "body": [
          "RequestAnimSet(${1:char* animSet})${0}"
      ],
      "description": "Starts loading the specified animation set. An animation set provides movement animations for a ped. See [`SET_PED_MOVEMENT_CLIPSET`](#\\_0xAF8A94EDE7712BEF)."
  },
  "4480": {
      "prefix": "RequestAnimDict",
      "body": [
          "RequestAnimDict(${1:char* animDict})${0}"
      ],
      "description": ""
  },
  "4481": {
      "prefix": "RequestClipSet",
      "body": [
          "RequestClipSet(${1:char* clipSet})${0}"
      ],
      "description": ""
  },
  "4482": {
      "prefix": "RequestCollisionAtCoord",
      "body": [
          "RequestCollisionAtCoord(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "4483": {
      "prefix": "RequestCollisionForModel",
      "body": [
          "RequestCollisionForModel(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "4484": {
      "prefix": "RequestIpl",
      "body": [
          "RequestIpl(${1:char* iplName})${0}"
      ],
      "description": "```\nExemple: REQUEST_IPL(\"TrevorsTrailerTrash\");\n```"
  },
  "4485": {
      "prefix": "RequestMenuPedModel",
      "body": [
          "RequestMenuPedModel(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "4486": {
      "prefix": "RequestModelsInRoom",
      "body": [
          "RequestModelsInRoom(${1:int* interior}, ${2:char* roomName})${0}"
      ],
      "description": "```\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"V_FIB01_cur_elev\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"limbo\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, \"V_Office_gnd_lifts\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, \"limbo\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"v_fib01_jan_elev\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"limbo\");\n```"
  },
  "4487": {
      "prefix": "RequestPtfxAsset",
      "body": [
          "RequestPtfxAsset()${0}"
      ],
      "description": "```\nmaps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty\n```"
  },
  "4488": {
      "prefix": "RequestModel",
      "body": [
          "RequestModel(${1:Hash* model})${0}"
      ],
      "description": "```\nRequest a model to be loaded into memory.\n```"
  },
  "4489": {
      "prefix": "RequestNamedPtfxAsset",
      "body": [
          "RequestNamedPtfxAsset(${1:char* fxName})${0}"
      ],
      "description": "```\n From the b678d decompiled scripts:\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"core_snow\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"fm_mission_controler\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"proj_xmas_firework\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_apartment_mp\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_biolab_heist\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_fireworks\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_parachute\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_wheelsmoke\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_cig_plane\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_creator\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_tankbattle\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_ornate_heist\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_prison_break_heist_station\");\n```"
  },
  "4490": {
      "prefix": "SetFocusEntity",
      "body": [
          "SetFocusEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nIt seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.  \n```"
  },
  "4491": {
      "prefix": "SetDitchPoliceModels",
      "body": [
          "SetDitchPoliceModels(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nThis is a NOP function. It does nothing at all.  \n```"
  },
  "4492": {
      "prefix": "SetFocusPosAndVel",
      "body": [
          "SetFocusPosAndVel(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* offsetX}, ${5:float* offsetY}, ${6:float* offsetZ})${0}"
      ],
      "description": "```\nOverride the area where the camera will render the terrain.\np3, p4 and p5 are usually set to 0.0\n```"
  },
  "4493": {
      "prefix": "SetGamePausesForStreaming",
      "body": [
          "SetGamePausesForStreaming(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4494": {
      "prefix": "SetInteriorActive",
      "body": [
          "SetInteriorActive(${1:int* interiorID}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4495": {
      "prefix": "SetHdArea",
      "body": [
          "SetHdArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "4496": {
      "prefix": "SetIslandHopperEnabled",
      "body": [
          "SetIslandHopperEnabled(${1:char* name}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Enables the specified island. For more information, see islandhopper.meta\n\n```\nNativeDB Introduced: v2189\n```"
  },
  "4497": {
      "prefix": "SetModelAsNoLongerNeeded",
      "body": [
          "SetModelAsNoLongerNeeded(${1:Hash* model})${0}"
      ],
      "description": "```\nUnloads model from memory  \n```"
  },
  "4498": {
      "prefix": "SetPedPopulationBudget",
      "body": [
          "SetPedPopulationBudget(${1:int* p0})${0}"
      ],
      "description": "Control how many new (ambient?) peds will spawn in the game world.\nRange for p0 seems to be 0-3, where 0 is none and 3 is the normal level."
  },
  "4499": {
      "prefix": "SetMapdatacullboxEnabled",
      "body": [
          "SetMapdatacullboxEnabled(${1:char* name}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nPossible p0 values:  \n\"prologue\"  \n\"Prologue_Main\"  \n```"
  },
  "4500": {
      "prefix": "SetReducePedModelBudget",
      "body": [
          "SetReducePedModelBudget(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4501": {
      "prefix": "SetPlayerSwitchEstablishingShot",
      "body": [
          "SetPlayerSwitchEstablishingShot(${1:char* name})${0}"
      ],
      "description": "```\nAll names can be found in playerswitchestablishingshots.meta\n```"
  },
  "4502": {
      "prefix": "SetPlayerSwitchOutro",
      "body": [
          "SetPlayerSwitchOutro(${1:float* cameraCoordX}, ${2:float* cameraCoordY}, ${3:float* cameraCoordZ}, ${4:float* camRotationX}, ${5:float* camRotationY}, ${6:float* camRotationZ}, ${7:float* camFov}, ${8:float* camFarClip}, ${9:int* rotationOrder})${0}"
      ],
      "description": ""
  },
  "4503": {
      "prefix": "SetSrlTime",
      "body": [
          "SetSrlTime(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "4504": {
      "prefix": "SetReduceVehicleModelBudget",
      "body": [
          "SetReduceVehicleModelBudget(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4505": {
      "prefix": "ShutdownCreatorBudget",
      "body": [
          "ShutdownCreatorBudget()${0}"
      ],
      "description": ""
  },
  "4506": {
      "prefix": "SetRenderHdOnly",
      "body": [
          "SetRenderHdOnly(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4507": {
      "prefix": "StartPlayerSwitch",
      "body": [
          "StartPlayerSwitch(${1:Ped* from}, ${2:Ped* to}, ${3:int* flags}, ${4:int* switchType})${0}"
      ],
      "description": "```\n// this enum comes directly from R* so don't edit this  \nenum ePlayerSwitchType  \n{  \n\tSWITCH_TYPE_AUTO,  \n\tSWITCH_TYPE_LONG,  \n\tSWITCH_TYPE_MEDIUM,  \n\tSWITCH_TYPE_SHORT  \n};  \nUse GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type. Or just auto, because it calls the same function in executable.  \n----------------------------------------------------  \nExamples from the decompiled scripts:  \nSTREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);  \nSTREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);  \nSTREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);  \nSTREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);  \nNote: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.  \nFlag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.  \nFlag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.  \n```"
  },
  "4508": {
      "prefix": "SetStreaming",
      "body": [
          "SetStreaming(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4509": {
      "prefix": "SetVehiclePopulationBudget",
      "body": [
          "SetVehiclePopulationBudget(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4510": {
      "prefix": "StreamvolCreateFrustum",
      "body": [
          "StreamvolCreateFrustum(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:Any* p7}, ${9:Any* p8})${0}"
      ],
      "description": "```\nAlways returns zero.\n```"
  },
  "4511": {
      "prefix": "StopPlayerSwitch",
      "body": [
          "StopPlayerSwitch()${0}"
      ],
      "description": ""
  },
  "4512": {
      "prefix": "StreamvolCreateLine",
      "body": [
          "StreamvolCreateLine(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6})${0}"
      ],
      "description": "```\nAlways returns zero.\n```"
  },
  "4513": {
      "prefix": "StreamvolCreateSphere",
      "body": [
          "StreamvolCreateSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* rad}, ${5:Any* p4}, ${6:Any* p5})${0}"
      ],
      "description": "```\nAlways returns zero.\n```"
  },
  "4514": {
      "prefix": "StreamvolHasLoaded",
      "body": [
          "StreamvolHasLoaded(${1:Any* unused})${0}"
      ],
      "description": ""
  },
  "4515": {
      "prefix": "StreamvolDelete",
      "body": [
          "StreamvolDelete(${1:Any* unused})${0}"
      ],
      "description": ""
  },
  "4516": {
      "prefix": "StreamvolIsValid",
      "body": [
          "StreamvolIsValid(${1:Any* unused})${0}"
      ],
      "description": ""
  },
  "4517": {
      "prefix": "SwitchInPlayer",
      "body": [
          "SwitchInPlayer(${1:Ped* ped})${0}"
      ],
      "description": "Use after using \\_SWITCH_OUT_PLAYER to swoop the camera back down to the player's ped."
  },
  "4518": {
      "prefix": "SwitchOutPlayer",
      "body": [
          "SwitchOutPlayer(${1:Ped* ped}, ${2:int* flags}, ${3:int* switchType})${0}"
      ],
      "description": "```\ndoesn't act normally when used on mount chilliad\n\nflags:\n\n0: normal\n1: no transition\n255: switch IN\n\nswitchType: 0 - 3\n\n0: 1 step towards ped\n1: 3 steps out from ped\n2: 1 step out from ped\n3: 1 step towards ped\n```"
  },
  "4519": {
      "prefix": "Ceil",
      "body": [
          "Ceil(${1:float* value})${0}"
      ],
      "description": "```\nI'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down  \n```"
  },
  "4520": {
      "prefix": "Cos",
      "body": [
          "Cos(${1:float* value})${0}"
      ],
      "description": "Returns the cosine of the given number."
  },
  "4521": {
      "prefix": "Floor",
      "body": [
          "Floor(${1:float* value})${0}"
      ],
      "description": ""
  },
  "4522": {
      "prefix": "Log10",
      "body": [
          "Log10(${1:float* value})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "4523": {
      "prefix": "Round",
      "body": [
          "Round(${1:float* value})${0}"
      ],
      "description": ""
  },
  "4524": {
      "prefix": "Pow",
      "body": [
          "Pow(${1:float* base}, ${2:float* exponent})${0}"
      ],
      "description": ""
  },
  "4525": {
      "prefix": "Settimera",
      "body": [
          "Settimera(${1:int* value})${0}"
      ],
      "description": ""
  },
  "4526": {
      "prefix": "ShiftLeft",
      "body": [
          "ShiftLeft(${1:int* value}, ${2:int* bitShift})${0}"
      ],
      "description": ""
  },
  "4527": {
      "prefix": "SetThreadPriority",
      "body": [
          "SetThreadPriority(${1:int* priority})${0}"
      ],
      "description": "```\n0 = high\n1 = normal\n2 = low\n```"
  },
  "4528": {
      "prefix": "ShiftRight",
      "body": [
          "ShiftRight(${1:int* value}, ${2:int* bitShift})${0}"
      ],
      "description": ""
  },
  "4529": {
      "prefix": "Settimerb",
      "body": [
          "Settimerb(${1:int* value})${0}"
      ],
      "description": ""
  },
  "4530": {
      "prefix": "Sin",
      "body": [
          "Sin(${1:float* value})${0}"
      ],
      "description": "Returns the sine of the given number."
  },
  "4531": {
      "prefix": "Sqrt",
      "body": [
          "Sqrt(${1:float* value})${0}"
      ],
      "description": ""
  },
  "4532": {
      "prefix": "StartNewScriptWithArgs",
      "body": [
          "StartNewScriptWithArgs(${1:char* scriptName}, ${2:Any* args}, ${3:int* argCount}, ${4:int* stackSize})${0}"
      ],
      "description": "```\nreturn : script thread id, 0 if failed  \nPass pointer to struct of args in p1, size of struct goes into p2  \n```"
  },
  "4533": {
      "prefix": "StartNewScript",
      "body": [
          "StartNewScript(${1:char* scriptName}, ${2:int* stackSize})${0}"
      ],
      "description": "```\nExamples:\n g_384A = SYSTEM::START_NEW_SCRIPT(\"cellphone_flashhand\", 1424);\n l_10D = SYSTEM::START_NEW_SCRIPT(\"taxiService\", 1828);\n SYSTEM::START_NEW_SCRIPT(\"AM_MP_YACHT\", 5000);\n SYSTEM::START_NEW_SCRIPT(\"emergencycall\", 512);\n SYSTEM::START_NEW_SCRIPT(\"emergencycall\", 512);\n SYSTEM::START_NEW_SCRIPT(\"FM_maintain_cloud_header_data\", 1424);\n SYSTEM::START_NEW_SCRIPT(\"FM_Mission_Controller\", 31000);\n SYSTEM::START_NEW_SCRIPT(\"tennis_family\", 3650);\n SYSTEM::START_NEW_SCRIPT(\"Celebrations\", 3650);\nDecompiled examples of usage when starting a script:\n\n    SCRIPT::REQUEST_SCRIPT(a_0);\n    if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {\n        SYSTEM::START_NEW_SCRIPT(a_0, v_3);\n        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);\n        return 1;\n    }\n\nor:\n    v_2 = \"MrsPhilips2\";\n    SCRIPT::REQUEST_SCRIPT(v_2);\n    while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {\n    SCRIPT::REQUEST_SCRIPT(v_2);\n    SYSTEM::WAIT(0);\n    }\n    sub_8792(36);\n    SYSTEM::START_NEW_SCRIPT(v_2, 17000);\n    SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);\nAll native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi\n```"
  },
  "4534": {
      "prefix": "StartNewScriptWithNameHashAndArgs",
      "body": [
          "StartNewScriptWithNameHashAndArgs(${1:Hash* scriptHash}, ${2:Any* args}, ${3:int* argCount}, ${4:int* stackSize})${0}"
      ],
      "description": ""
  },
  "4535": {
      "prefix": "StartNewScriptWithNameHash",
      "body": [
          "StartNewScriptWithNameHash(${1:Hash* scriptHash}, ${2:int* stackSize})${0}"
      ],
      "description": ""
  },
  "4536": {
      "prefix": "Timera",
      "body": [
          "Timera()${0}"
      ],
      "description": "```\nCounts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).  \n```"
  },
  "4537": {
      "prefix": "Timerb",
      "body": [
          "Timerb()${0}"
      ],
      "description": ""
  },
  "4538": {
      "prefix": "ToFloat",
      "body": [
          "ToFloat(${1:int* value})${0}"
      ],
      "description": ""
  },
  "4539": {
      "prefix": "Timestep",
      "body": [
          "Timestep()${0}"
      ],
      "description": "```\nGets the current frame time.  \n```"
  },
  "4540": {
      "prefix": "Vdist",
      "body": [
          "Vdist(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nCalculates distance between vectors.  \n```"
  },
  "4541": {
      "prefix": "Vdist2",
      "body": [
          "Vdist2(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2})${0}"
      ],
      "description": "```\nCalculates distance between vectors but does not perform Sqrt operations. (Its way faster)  \n```"
  },
  "4542": {
      "prefix": "Vmag",
      "body": [
          "Vmag(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nCalculates the magnitude of a vector.  \n```"
  },
  "4543": {
      "prefix": "Wait",
      "body": [
          "Wait(${1:int* ms})${0}"
      ],
      "description": "```\nPauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use \"static void WAIT(DWORD time);\" found in main.h\n```"
  },
  "4544": {
      "prefix": "Vmag2",
      "body": [
          "Vmag2(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nCalculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)  \n```"
  },
  "4545": {
      "prefix": "AddPatrolRouteLink",
      "body": [
          "AddPatrolRouteLink(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4546": {
      "prefix": "AddCoverBlockingArea",
      "body": [
          "AddCoverBlockingArea(${1:float* playerX}, ${2:float* playerY}, ${3:float* playerZ}, ${4:float* radiusX}, ${5:float* radiusY}, ${6:float* radiusZ}, ${7:BOOL* p6}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:BOOL* p9})${0}"
      ],
      "description": ""
  },
  "4547": {
      "prefix": "AddVehicleSubtaskAttackCoord",
      "body": [
          "AddVehicleSubtaskAttackCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "```\nx, y, z: offset in world coords from some entity.  \n```"
  },
  "4548": {
      "prefix": "AddVehicleSubtaskAttackPed",
      "body": [
          "AddVehicleSubtaskAttackPed(${1:Ped* ped}, ${2:Ped* ped2})${0}"
      ],
      "description": ""
  },
  "4549": {
      "prefix": "AddCoverPoint",
      "body": [
          "AddCoverPoint(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": ""
  },
  "4550": {
      "prefix": "AddPatrolRouteNode",
      "body": [
          "AddPatrolRouteNode(${1:int* p0}, ${2:char* p1}, ${3:float* x1}, ${4:float* y1}, ${5:float* z1}, ${6:float* x2}, ${7:float* y2}, ${8:float* z2}, ${9:int* p8})${0}"
      ],
      "description": "```\nExample:\nTASK::ADD_PATROL_ROUTE_NODE(2, \"WORLD_HUMAN_GUARD_STAND\", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);\np0 is between 0 and 4 in the scripts.\np1 is \"WORLD_HUMAN_GUARD_STAND\" or \"StandGuard\".\np2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.\nExamples:\nTASK::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_739[7/*3*/], 0.0, 0.0, 0.0, 0);\nTASK::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_B0[17/*44*/]._f3, l_B0[17/*44*/]._f3, 2000);\np5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.\np8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).\n```"
  },
  "4551": {
      "prefix": "AssistedMovementIsRouteLoaded",
      "body": [
          "AssistedMovementIsRouteLoaded(${1:char* route})${0}"
      ],
      "description": ""
  },
  "4552": {
      "prefix": "AssistedMovementOverrideLoadDistanceThisFrame",
      "body": [
          "AssistedMovementOverrideLoadDistanceThisFrame(${1:float* dist})${0}"
      ],
      "description": ""
  },
  "4553": {
      "prefix": "AssistedMovementRequestRoute",
      "body": [
          "AssistedMovementRequestRoute(${1:char* route})${0}"
      ],
      "description": "```\nRoutes: \"1_FIBStairs\", \"2_FIBStairs\", \"3_FIBStairs\", \"4_FIBStairs\", \"5_FIBStairs\", \"5_TowardsFire\", \"6a_FIBStairs\", \"7_FIBStairs\", \"8_FIBStairs\", \"Aprtmnt_1\", \"AssAfterLift\", \"ATM_1\", \"coroner2\", \"coroner_stairs\", \"f5_jimmy1\", \"fame1\", \"family5b\", \"family5c\", \"Family5d\", \"family5d\", \"FIB_Glass1\", \"FIB_Glass2\", \"FIB_Glass3\", \"finaBroute1A\", \"finalb1st\", \"finalB1sta\", \"finalbround\", \"finalbroute2\", \"Hairdresser1\", \"jan_foyet_ft_door\", \"Jo_3\", \"Lemar1\", \"Lemar2\", \"mansion_1\", \"Mansion_1\", \"pols_1\", \"pols_2\", \"pols_3\", \"pols_4\", \"pols_5\", \"pols_6\", \"pols_7\", \"pols_8\", \"Pro_S1\", \"Pro_S1a\", \"Pro_S2\", \"Towards_case\", \"trev_steps\", \"tunrs1\", \"tunrs2\", \"tunrs3\", \"Wave01457s\"  \n```"
  },
  "4554": {
      "prefix": "AssistedMovementRemoveRoute",
      "body": [
          "AssistedMovementRemoveRoute(${1:char* route})${0}"
      ],
      "description": ""
  },
  "4555": {
      "prefix": "AssistedMovementSetRouteProperties",
      "body": [
          "AssistedMovementSetRouteProperties(${1:char* route}, ${2:int* props})${0}"
      ],
      "description": ""
  },
  "4556": {
      "prefix": "ClearDrivebyTaskUnderneathDrivingTask",
      "body": [
          "ClearDrivebyTaskUnderneathDrivingTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4557": {
      "prefix": "ClearPedSecondaryTask",
      "body": [
          "ClearPedSecondaryTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4558": {
      "prefix": "ClearPedTasks",
      "body": [
          "ClearPedTasks(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4559": {
      "prefix": "ClearPedTasksImmediately",
      "body": [
          "ClearPedTasksImmediately(${1:Ped* ped})${0}"
      ],
      "description": "```\nImmediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.  \n```"
  },
  "4560": {
      "prefix": "ClearSequenceTask",
      "body": [
          "ClearSequenceTask(${1:int* taskSequenceId})${0}"
      ],
      "description": ""
  },
  "4561": {
      "prefix": "ClearVehicleTasks",
      "body": [
          "ClearVehicleTasks(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nCLEAR_*\n\nNativeDB Introduced: v1290\n```"
  },
  "4562": {
      "prefix": "ClosePatrolRoute",
      "body": [
          "ClosePatrolRoute()${0}"
      ],
      "description": ""
  },
  "4563": {
      "prefix": "CloseSequenceTask",
      "body": [
          "CloseSequenceTask(${1:int* taskSequenceId})${0}"
      ],
      "description": ""
  },
  "4564": {
      "prefix": "ControlMountedWeapon",
      "body": [
          "ControlMountedWeapon(${1:Ped* ped})${0}"
      ],
      "description": "```\nForces the ped to use the mounted weapon.  \nReturns false if task is not possible.  \n```"
  },
  "4565": {
      "prefix": "CreatePatrolRoute",
      "body": [
          "CreatePatrolRoute()${0}"
      ],
      "description": ""
  },
  "4566": {
      "prefix": "DeletePatrolRoute",
      "body": [
          "DeletePatrolRoute(${1:char* patrolRoute})${0}"
      ],
      "description": "```\nFrom the b617d scripts:\nTASK::DELETE_PATROL_ROUTE(\"miss_merc0\");\nTASK::DELETE_PATROL_ROUTE(\"miss_merc1\");\nTASK::DELETE_PATROL_ROUTE(\"miss_merc2\");\nTASK::DELETE_PATROL_ROUTE(\"miss_dock\");\n```"
  },
  "4567": {
      "prefix": "DoesScenarioOfTypeExistInArea",
      "body": [
          "DoesScenarioOfTypeExistInArea(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:Any* p3}, ${5:float* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "4568": {
      "prefix": "DoesScenarioExistInArea",
      "body": [
          "DoesScenarioExistInArea(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:BOOL* b})${0}"
      ],
      "description": ""
  },
  "4569": {
      "prefix": "DoesScenarioGroupExist",
      "body": [
          "DoesScenarioGroupExist(${1:char* scenarioGroup})${0}"
      ],
      "description": "```\nOccurrences in the b617d scripts:\n\"ARMY_GUARD\",\n\"ARMY_HELI\",\n\"Cinema_Downtown\",\n\"Cinema_Morningwood\",\n\"Cinema_Textile\",\n\"City_Banks\",\n\"Countryside_Banks\",\n\"DEALERSHIP\",\n\"GRAPESEED_PLANES\",\n\"KORTZ_SECURITY\",\n\"LOST_BIKERS\",\n\"LSA_Planes\",\n\"LSA_Planes\",\n\"MP_POLICE\",\n\"Observatory_Bikers\",\n\"POLICE_POUND1\",\n\"POLICE_POUND2\",\n\"POLICE_POUND3\",\n\"POLICE_POUND4\",\n\"POLICE_POUND5\"\n\"QUARRY\",\n\"SANDY_PLANES\",\n\"SCRAP_SECURITY\",\n\"SEW_MACHINE\",\n\"SOLOMON_GATE\",\n\"Triathlon_1_Start\",\n\"Triathlon_2_Start\",\n\"Triathlon_3_Start\"\nSometimes used with IS_SCENARIO_GROUP_ENABLED:\nif (TASK::DOES_SCENARIO_GROUP_EXIST(\"Observatory_Bikers\") && (!TASK::IS_SCENARIO_GROUP_ENABLED(\"Observatory_Bikers\"))) {\nelse if (TASK::IS_SCENARIO_GROUP_ENABLED(\"BLIMP\")) {\n```"
  },
  "4570": {
      "prefix": "DoesScriptedCoverPointExistAtCoords",
      "body": [
          "DoesScriptedCoverPointExistAtCoords(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nChecks if there is a cover point at position  \n```"
  },
  "4571": {
      "prefix": "GetActiveVehicleMissionType",
      "body": [
          "GetActiveVehicleMissionType(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nhttps://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt\n```"
  },
  "4572": {
      "prefix": "GetClipSetForScriptedGunTask",
      "body": [
          "GetClipSetForScriptedGunTask(${1:int* p0})${0}"
      ],
      "description": ""
  },
  "4573": {
      "prefix": "GetIsWaypointRecordingLoaded",
      "body": [
          "GetIsWaypointRecordingLoaded(${1:char* name})${0}"
      ],
      "description": ""
  },
  "4574": {
      "prefix": "GetIsTaskActive",
      "body": [
          "GetIsTaskActive(${1:Ped* ped}, ${2:int* taskIndex})${0}"
      ],
      "description": "```\nTask index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt\n```"
  },
  "4575": {
      "prefix": "GetNavmeshRouteResult",
      "body": [
          "GetNavmeshRouteResult(${1:Ped* ped})${0}"
      ],
      "description": "See [`GET_NAVMESH_ROUTE_DISTANCE_REMAINING`](#\\_0xC6F5C0BCDC74D62D) for more details."
  },
  "4576": {
      "prefix": "GetNavmeshRouteDistanceRemaining",
      "body": [
          "GetNavmeshRouteDistanceRemaining(${1:Ped* ped}, ${2:float* distanceRemaining}, ${3:BOOL* isPathReady})${0}"
      ],
      "description": "```\nLooks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.\nReturn value of native is the same as GET_NAVMESH_ROUTE_RESULT\nLooks like the native returns an int for the path's state:\n1 - ???\n2 - ???\n3 - Finished Generating\n```"
  },
  "4577": {
      "prefix": "GetPedDesiredMoveBlendRatio",
      "body": [
          "GetPedDesiredMoveBlendRatio(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4578": {
      "prefix": "GetPedWaypointDistance",
      "body": [
          "GetPedWaypointDistance(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4579": {
      "prefix": "GetPhoneGestureAnimCurrentTime",
      "body": [
          "GetPhoneGestureAnimCurrentTime(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4580": {
      "prefix": "GetPedWaypointProgress",
      "body": [
          "GetPedWaypointProgress(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4581": {
      "prefix": "GetPhoneGestureAnimTotalTime",
      "body": [
          "GetPhoneGestureAnimTotalTime(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4582": {
      "prefix": "GetScriptTaskStatus",
      "body": [
          "GetScriptTaskStatus(${1:Ped* ped}, ${2:Hash* taskHash})${0}"
      ],
      "description": "```\nGets the status of a script-assigned task.\ntaskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt\n```"
  },
  "4583": {
      "prefix": "GetSequenceProgress",
      "body": [
          "GetSequenceProgress(${1:Ped* ped})${0}"
      ],
      "description": "```\nreturned values:\n0 to 7 = task that's currently in progress, 0 meaning the first one.\n-1 no task sequence in progress.\n```"
  },
  "4584": {
      "prefix": "GetScriptedCoverPointCoords",
      "body": [
          "GetScriptedCoverPointCoords(${1:ScrHandle* coverpoint})${0}"
      ],
      "description": ""
  },
  "4585": {
      "prefix": "GetTaskMoveNetworkEvent",
      "body": [
          "GetTaskMoveNetworkEvent(${1:Ped* ped}, ${2:char* eventName})${0}"
      ],
      "description": ""
  },
  "4586": {
      "prefix": "GetTaskMoveNetworkSignalBool",
      "body": [
          "GetTaskMoveNetworkSignalBool(${1:Ped* ped}, ${2:char* signalName})${0}"
      ],
      "description": ""
  },
  "4587": {
      "prefix": "GetTaskMoveNetworkState",
      "body": [
          "GetTaskMoveNetworkState(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4588": {
      "prefix": "GetTaskMoveNetworkSignalFloat",
      "body": [
          "GetTaskMoveNetworkSignalFloat(${1:Ped* ped}, ${2:char* signalName})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "4589": {
      "prefix": "GetVehicleWaypointProgress",
      "body": [
          "GetVehicleWaypointProgress(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4590": {
      "prefix": "GetVehicleWaypointTargetPoint",
      "body": [
          "GetVehicleWaypointTargetPoint(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4591": {
      "prefix": "IsDrivebyTaskUnderneathDrivingTask",
      "body": [
          "IsDrivebyTaskUnderneathDrivingTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4592": {
      "prefix": "GetWaypointDistanceAlongRoute",
      "body": [
          "GetWaypointDistanceAlongRoute(${1:char* p0}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "4593": {
      "prefix": "IsMoveBlendRatioRunning",
      "body": [
          "IsMoveBlendRatioRunning(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4594": {
      "prefix": "IsMountedWeaponTaskUnderneathDrivingTask",
      "body": [
          "IsMountedWeaponTaskUnderneathDrivingTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4595": {
      "prefix": "IsMoveBlendRatioSprinting",
      "body": [
          "IsMoveBlendRatioSprinting(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4596": {
      "prefix": "IsMoveBlendRatioStill",
      "body": [
          "IsMoveBlendRatioStill(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4597": {
      "prefix": "IsMoveBlendRatioWalking",
      "body": [
          "IsMoveBlendRatioWalking(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4598": {
      "prefix": "IsPedActiveInScenario",
      "body": [
          "IsPedActiveInScenario(${1:Ped* ped})${0}"
      ],
      "description": "When passing a ped parameter, the function returns true if the ped is currently in any scenario."
  },
  "4599": {
      "prefix": "IsPedCuffed",
      "body": [
          "IsPedCuffed(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4600": {
      "prefix": "IsPedBeingArrested",
      "body": [
          "IsPedBeingArrested(${1:Ped* ped})${0}"
      ],
      "description": "```\nThis function is hard-coded to always return 0.  \n```"
  },
  "4601": {
      "prefix": "IsPedGettingUp",
      "body": [
          "IsPedGettingUp(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4602": {
      "prefix": "IsPedInWrithe",
      "body": [
          "IsPedInWrithe(${1:Ped* ped})${0}"
      ],
      "description": "This native checks if a ped is on the ground, in pain from a (gunshot) wound."
  },
  "4603": {
      "prefix": "IsPedRunning",
      "body": [
          "IsPedRunning(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4604": {
      "prefix": "IsPedPlayingBaseClipInScenario",
      "body": [
          "IsPedPlayingBaseClipInScenario(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4605": {
      "prefix": "IsPedRunningArrestTask",
      "body": [
          "IsPedRunningArrestTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4606": {
      "prefix": "IsPedSprinting",
      "body": [
          "IsPedSprinting(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4607": {
      "prefix": "IsPedStill",
      "body": [
          "IsPedStill(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4608": {
      "prefix": "IsPedStrafing",
      "body": [
          "IsPedStrafing(${1:Ped* ped})${0}"
      ],
      "description": "```\nWhat's strafing?  \n```"
  },
  "4609": {
      "prefix": "IsPedWalking",
      "body": [
          "IsPedWalking(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4610": {
      "prefix": "IsPlayingPhoneGestureAnim",
      "body": [
          "IsPlayingPhoneGestureAnim(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4611": {
      "prefix": "IsScenarioGroupEnabled",
      "body": [
          "IsScenarioGroupEnabled(${1:char* scenarioGroup})${0}"
      ],
      "description": "```\n Occurrences in the b617d scripts:\n \"ARMY_GUARD\",\n \"ARMY_HELI\",\n \"BLIMP\",\n \"Cinema_Downtown\",\n \"Cinema_Morningwood\",\n \"Cinema_Textile\",\n \"City_Banks\",\n \"Countryside_Banks\",\n \"DEALERSHIP\",\n \"KORTZ_SECURITY\",\n \"LSA_Planes\",\n \"MP_POLICE\",\n \"Observatory_Bikers\",\n \"POLICE_POUND1\",\n \"POLICE_POUND2\",\n \"POLICE_POUND3\",\n \"POLICE_POUND4\",\n \"POLICE_POUND5\",\n \"Rampage1\",\n \"SANDY_PLANES\",\n \"SCRAP_SECURITY\",\n \"SEW_MACHINE\",\n \"SOLOMON_GATE\"\nSometimes used with DOES_SCENARIO_GROUP_EXIST:\nif (TASK::DOES_SCENARIO_GROUP_EXIST(\"Observatory_Bikers\") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED(\"Observatory_Bikers\"))) {\nelse if (TASK::IS_SCENARIO_GROUP_ENABLED(\"BLIMP\")) {\n```"
  },
  "4612": {
      "prefix": "IsScenarioOccupied",
      "body": [
          "IsScenarioOccupied(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "4613": {
      "prefix": "IsScenarioTypeEnabled",
      "body": [
          "IsScenarioTypeEnabled(${1:char* scenarioType})${0}"
      ],
      "description": "```\nOccurrences in the b617d scripts:\n\"PROP_HUMAN_SEAT_CHAIR\",\n\"WORLD_HUMAN_DRINKING\",\n\"WORLD_HUMAN_HANG_OUT_STREET\",\n\"WORLD_HUMAN_SMOKING\",\n\"WORLD_MOUNTAIN_LION_WANDER\",\n\"WORLD_HUMAN_DRINKING\"\nSometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.\nscenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.\n```"
  },
  "4614": {
      "prefix": "IsTaskMoveNetworkActive",
      "body": [
          "IsTaskMoveNetworkActive(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4615": {
      "prefix": "IsTaskMoveNetworkReadyForTransition",
      "body": [
          "IsTaskMoveNetworkReadyForTransition(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4616": {
      "prefix": "IsWaypointPlaybackGoingOnForPed",
      "body": [
          "IsWaypointPlaybackGoingOnForPed(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4617": {
      "prefix": "IsWaypointPlaybackGoingOnForVehicle",
      "body": [
          "IsWaypointPlaybackGoingOnForVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4618": {
      "prefix": "OpenPatrolRoute",
      "body": [
          "OpenPatrolRoute(${1:char* patrolRoute})${0}"
      ],
      "description": "```\n patrolRoutes found in the b617d scripts:\n \"miss_Ass0\",\n \"miss_Ass1\",\n \"miss_Ass2\",\n \"miss_Ass3\",\n \"miss_Ass4\",\n \"miss_Ass5\",\n \"miss_Ass6\",\n \"MISS_PATROL_6\",\n \"MISS_PATROL_7\",\n \"MISS_PATROL_8\",\n \"MISS_PATROL_9\",\n \"miss_Tower_01\",\n \"miss_Tower_02\",\n \"miss_Tower_03\",\n \"miss_Tower_04\",\n \"miss_Tower_05\",\n \"miss_Tower_06\",\n \"miss_Tower_07\",\n \"miss_Tower_08\",\n \"miss_Tower_10\"\n```"
  },
  "4619": {
      "prefix": "PedHasUseScenarioTask",
      "body": [
          "PedHasUseScenarioTask(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4620": {
      "prefix": "OpenSequenceTask",
      "body": [
          "OpenSequenceTask(${1:int* taskSequenceId})${0}"
      ],
      "description": ""
  },
  "4621": {
      "prefix": "PlayEntityScriptedAnim",
      "body": [
          "PlayEntityScriptedAnim(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": ""
  },
  "4622": {
      "prefix": "RemoveCoverPoint",
      "body": [
          "RemoveCoverPoint(${1:ScrHandle* coverpoint})${0}"
      ],
      "description": ""
  },
  "4623": {
      "prefix": "PlayAnimOnRunningScenario",
      "body": [
          "PlayAnimOnRunningScenario(${1:Ped* ped}, ${2:char* animDict}, ${3:char* animName})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "4624": {
      "prefix": "RequestTaskMoveNetworkStateTransition",
      "body": [
          "RequestTaskMoveNetworkStateTransition(${1:Ped* ped}, ${2:char* name})${0}"
      ],
      "description": ""
  },
  "4625": {
      "prefix": "RequestWaypointRecording",
      "body": [
          "RequestWaypointRecording(${1:char* name})${0}"
      ],
      "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\nMax number of loaded recordings is 32.\n```"
  },
  "4626": {
      "prefix": "RemoveAllCoverBlockingAreas",
      "body": [
          "RemoveAllCoverBlockingAreas()${0}"
      ],
      "description": ""
  },
  "4627": {
      "prefix": "RemoveWaypointRecording",
      "body": [
          "RemoveWaypointRecording(${1:char* name})${0}"
      ],
      "description": ""
  },
  "4628": {
      "prefix": "ResetExclusiveScenarioGroup",
      "body": [
          "ResetExclusiveScenarioGroup()${0}"
      ],
      "description": ""
  },
  "4629": {
      "prefix": "ResetScenarioGroupsEnabled",
      "body": [
          "ResetScenarioGroupsEnabled()${0}"
      ],
      "description": ""
  },
  "4630": {
      "prefix": "SetAnimPlaybackTime",
      "body": [
          "SetAnimPlaybackTime(${1:Entity* entity}, ${2:float* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4631": {
      "prefix": "ResetScenarioTypesEnabled",
      "body": [
          "ResetScenarioTypesEnabled()${0}"
      ],
      "description": ""
  },
  "4632": {
      "prefix": "SetAnimRate",
      "body": [
          "SetAnimRate(${1:Any* p0}, ${2:float* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "4633": {
      "prefix": "SetAnimLooped",
      "body": [
          "SetAnimLooped(${1:Any* p0}, ${2:BOOL* p1}, ${3:Any* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "4634": {
      "prefix": "SetAnimWeight",
      "body": [
          "SetAnimWeight(${1:Any* p0}, ${2:float* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "4635": {
      "prefix": "SetDriveTaskCruiseSpeed",
      "body": [
          "SetDriveTaskCruiseSpeed(${1:Ped* driver}, ${2:float* cruiseSpeed})${0}"
      ],
      "description": ""
  },
  "4636": {
      "prefix": "SetDriveTaskDrivingStyle",
      "body": [
          "SetDriveTaskDrivingStyle(${1:Ped* ped}, ${2:int* drivingStyle})${0}"
      ],
      "description": "```\nThis native is used to set the driving style for specific ped.  \nDriving styles id seems to be:  \n786468  \n262144  \n786469  \nhttp://gtaforums.com/topic/822314-guide-driving-styles/  \n```"
  },
  "4637": {
      "prefix": "SetDriveTaskMaxCruiseSpeed",
      "body": [
          "SetDriveTaskMaxCruiseSpeed(${1:Any* p0}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "4638": {
      "prefix": "SetExclusiveScenarioGroup",
      "body": [
          "SetExclusiveScenarioGroup(${1:char* scenarioGroup})${0}"
      ],
      "description": "```\nGroups found in the scripts used with this native:  \n\"AMMUNATION\",  \n\"QUARRY\",  \n\"Triathlon_1\",  \n\"Triathlon_2\",  \n\"Triathlon_3\"  \n```"
  },
  "4639": {
      "prefix": "SetDrivebyTaskTarget",
      "body": [
          "SetDrivebyTaskTarget(${1:Ped* shootingPed}, ${2:Ped* targetPed}, ${3:Vehicle* targetVehicle}, ${4:float* x}, ${5:float* y}, ${6:float* z})${0}"
      ],
      "description": "```\nFor p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.  \n```"
  },
  "4640": {
      "prefix": "SetGlobalMinBirdFlightHeight",
      "body": [
          "SetGlobalMinBirdFlightHeight(${1:float* height})${0}"
      ],
      "description": "```\nBirds will try to reach the given height.  \n```"
  },
  "4641": {
      "prefix": "SetHighFallTask",
      "body": [
          "SetHighFallTask(${1:Ped* ped}, ${2:Any* duration}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4642": {
      "prefix": "SetNextDesiredMoveState",
      "body": [
          "SetNextDesiredMoveState(${1:float* p0})${0}"
      ],
      "description": "**This native does absolutely nothing, just a nullsub**"
  },
  "4643": {
      "prefix": "SetPedCanPlayAmbientIdles",
      "body": [
          "SetPedCanPlayAmbientIdles(${1:Ped* ped}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nAppears only in fm_mission_controller and used only 3 times.  \nped was always PLAYER_PED_ID()  \np1 was always true  \np2 was always true  \n```"
  },
  "4644": {
      "prefix": "SetMountedWeaponTarget",
      "body": [
          "SetMountedWeaponTarget(${1:Ped* shootingPed}, ${2:Ped* targetPed}, ${3:Vehicle* targetVehicle}, ${4:float* x}, ${5:float* y}, ${6:float* z})${0}"
      ],
      "description": "```\nNote: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.  \n```\n\n```\nNativeDB Added Parameter 7: Any p6\nNativeDB Added Parameter 8: Any p7\n```"
  },
  "4645": {
      "prefix": "SetParachuteTaskTarget",
      "body": [
          "SetParachuteTaskTarget(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "4646": {
      "prefix": "SetPedDesiredMoveBlendRatio",
      "body": [
          "SetPedDesiredMoveBlendRatio(${1:Ped* ped}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "4647": {
      "prefix": "SetParachuteTaskThrust",
      "body": [
          "SetParachuteTaskThrust(${1:Ped* ped}, ${2:float* thrust})${0}"
      ],
      "description": ""
  },
  "4648": {
      "prefix": "SetPedPathAvoidFire",
      "body": [
          "SetPedPathAvoidFire(${1:Ped* ped}, ${2:BOOL* avoidFire})${0}"
      ],
      "description": ""
  },
  "4649": {
      "prefix": "SetPedPathCanDropFromHeight",
      "body": [
          "SetPedPathCanDropFromHeight(${1:Ped* ped}, ${2:BOOL* Toggle})${0}"
      ],
      "description": ""
  },
  "4650": {
      "prefix": "SetPedPathCanUseLadders",
      "body": [
          "SetPedPathCanUseLadders(${1:Ped* ped}, ${2:BOOL* Toggle})${0}"
      ],
      "description": ""
  },
  "4651": {
      "prefix": "SetPedPathMayEnterWater",
      "body": [
          "SetPedPathMayEnterWater(${1:Ped* ped}, ${2:BOOL* mayEnterWater})${0}"
      ],
      "description": ""
  },
  "4652": {
      "prefix": "SetPedPathCanUseClimbovers",
      "body": [
          "SetPedPathCanUseClimbovers(${1:Ped* ped}, ${2:BOOL* Toggle})${0}"
      ],
      "description": ""
  },
  "4653": {
      "prefix": "SetPedPathClimbCostModifier",
      "body": [
          "SetPedPathClimbCostModifier(${1:Ped* ped}, ${2:float* modifier})${0}"
      ],
      "description": "```\nDefault modifier is 1.0, minimum is 0.0 and maximum is 10.0.\n```"
  },
  "4654": {
      "prefix": "SetPedPathPreferToAvoidWater",
      "body": [
          "SetPedPathPreferToAvoidWater(${1:Ped* ped}, ${2:BOOL* avoidWater})${0}"
      ],
      "description": ""
  },
  "4655": {
      "prefix": "SetPedWaypointRouteOffset",
      "body": [
          "SetPedWaypointRouteOffset(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4656": {
      "prefix": "SetScenarioGroupEnabled",
      "body": [
          "SetScenarioGroupEnabled(${1:char* scenarioGroup}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nOccurrences in the b617d scripts: pastebin.com/Tvg2PRHU  \n```"
  },
  "4657": {
      "prefix": "SetScenarioTypeEnabled",
      "body": [
          "SetScenarioTypeEnabled(${1:char* scenarioType}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nseems to enable/disable specific scenario-types from happening in the game world.\nHere are some scenario types from the scripts:\n\"WORLD_MOUNTAIN_LION_REST\"\n\"WORLD_MOUNTAIN_LION_WANDER\"\n\"DRIVE\"\n\"WORLD_VEHICLE_POLICE_BIKE\"\n\"WORLD_VEHICLE_POLICE_CAR\"\n\"WORLD_VEHICLE_POLICE_NEXT_TO_CAR\"\n\"WORLD_VEHICLE_DRIVE_SOLO\"\n\"WORLD_VEHICLE_BIKER\"\n\"WORLD_VEHICLE_DRIVE_PASSENGERS\"\n\"WORLD_VEHICLE_SALTON_DIRT_BIKE\"\n\"WORLD_VEHICLE_BICYCLE_MOUNTAIN\"\n\"PROP_HUMAN_SEAT_CHAIR\"\n\"WORLD_VEHICLE_ATTRACTOR\"\n\"WORLD_HUMAN_LEANING\"\n\"WORLD_HUMAN_HANG_OUT_STREET\"\n\"WORLD_HUMAN_DRINKING\"\n\"WORLD_HUMAN_SMOKING\"\n\"WORLD_HUMAN_GUARD_STAND\"\n\"WORLD_HUMAN_CLIPBOARD\"\n\"WORLD_HUMAN_HIKER\"\n\"WORLD_VEHICLE_EMPTY\"\n\"WORLD_VEHICLE_BIKE_OFF_ROAD_RACE\"\n\"WORLD_HUMAN_PAPARAZZI\"\n\"WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN\"\n\"WORLD_VEHICLE_PARK_PARALLEL\"\n\"WORLD_VEHICLE_CONSTRUCTION_SOLO\"\n\"WORLD_VEHICLE_CONSTRUCTION_PASSENGERS\"\n\"WORLD_VEHICLE_TRUCK_LOGS\"\nscenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.\n```"
  },
  "4658": {
      "prefix": "SetSequenceToRepeat",
      "body": [
          "SetSequenceToRepeat(${1:int* taskSequenceId}, ${2:BOOL* repeat})${0}"
      ],
      "description": ""
  },
  "4659": {
      "prefix": "SetTaskMoveNetworkSignalBool",
      "body": [
          "SetTaskMoveNetworkSignalBool(${1:Ped* ped}, ${2:char* signalName}, ${3:BOOL* value})${0}"
      ],
      "description": ""
  },
  "4660": {
      "prefix": "SetTaskMoveNetworkSignalFloat2",
      "body": [
          "SetTaskMoveNetworkSignalFloat2(${1:Ped* ped}, ${2:char* signalName}, ${3:float* value})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "4661": {
      "prefix": "SetTaskMoveNetworkSignalFloat",
      "body": [
          "SetTaskMoveNetworkSignalFloat(${1:Ped* ped}, ${2:char* signalName}, ${3:float* value})${0}"
      ],
      "description": "```\np0 - PLAYER::PLAYER_PED_ID();\np1 - \"Phase\", \"Wobble\", \"x_axis\",\"y_axis\",\"introphase\",\"speed\".\np2 - From what i can see it goes up to 1f (maybe).\n-LcGamingHD\nExample: TASK::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), \"Phase\", 0.5);\n```"
  },
  "4662": {
      "prefix": "SetTaskVehicleChaseBehaviorFlag",
      "body": [
          "SetTaskVehicleChaseBehaviorFlag(${1:Ped* ped}, ${2:int* flag}, ${3:BOOL* set})${0}"
      ],
      "description": "```\n* Flag 1: Aggressive ramming of suspect\n* Flag 2: Ram attempts\n* Flag 8: Medium-aggressive boxing tactic with a bit of PIT\n* Flag 16: Ramming, seems to be slightly less aggressive than 1-2.\n* Flag 32: Stay back from suspect, no tactical contact. Convoy-like.\n```"
  },
  "4663": {
      "prefix": "StopAnimPlayback",
      "body": [
          "StopAnimPlayback(${1:Ped* ped}, ${2:int* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nLooks like p1 may be a flag, still need to do some research, though.\n```"
  },
  "4664": {
      "prefix": "StopAnimTask",
      "body": [
          "StopAnimTask(${1:Ped* ped}, ${2:char* animDictionary}, ${3:char* animationName}, ${4:float* p3})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "4665": {
      "prefix": "SetTaskVehicleChaseIdealPursuitDistance",
      "body": [
          "SetTaskVehicleChaseIdealPursuitDistance(${1:Ped* ped}, ${2:float* distance})${0}"
      ],
      "description": ""
  },
  "4666": {
      "prefix": "TaskAgitatedAction",
      "body": [
          "TaskAgitatedAction(${1:Ped* ped}, ${2:Ped* ped2})${0}"
      ],
      "description": ""
  },
  "4667": {
      "prefix": "TaskAchieveHeading",
      "body": [
          "TaskAchieveHeading(${1:Ped* ped}, ${2:float* heading}, ${3:int* timeout})${0}"
      ],
      "description": "```\nMakes the specified ped achieve the specified heading.  \npedHandle: The handle of the ped to assign the task to.  \nheading: The desired heading.  \ntimeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.  \n```"
  },
  "4668": {
      "prefix": "TaskAimGunAtCoord",
      "body": [
          "TaskAimGunAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* time}, ${6:BOOL* p5}, ${7:BOOL* p6})${0}"
      ],
      "description": ""
  },
  "4669": {
      "prefix": "TaskAimGunAtEntity",
      "body": [
          "TaskAimGunAtEntity(${1:Ped* ped}, ${2:Entity* entity}, ${3:int* duration}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nduration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped  \n```"
  },
  "4670": {
      "prefix": "TaskArrestPed",
      "body": [
          "TaskArrestPed(${1:Ped* ped}, ${2:Ped* target})${0}"
      ],
      "description": "```\nExample from \"me_amanda1.ysc.c4\":\nTASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());\nExample from \"armenian1.ysc.c4\":\nif (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {\n    TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());\n}\nI would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.\nLooks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.\n```"
  },
  "4671": {
      "prefix": "TaskAimGunScripted",
      "body": [
          "TaskAimGunScripted(${1:Ped* ped}, ${2:Hash* scriptTask}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "4672": {
      "prefix": "TaskBoatMission",
      "body": [
          "TaskBoatMission(${1:Ped* pedDriver}, ${2:Vehicle* boat}, ${3:Any* p2}, ${4:Any* p3}, ${5:float* x}, ${6:float* y}, ${7:float* z}, ${8:Any* p7}, ${9:float* maxSpeed}, ${10:int* drivingStyle}, ${11:float* p10}, ${12:Any* p11})${0}"
      ],
      "description": "```\nYou need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.\nWorking example\nfloat vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));\nTASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);\nPED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);\nP8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation\n```"
  },
  "4673": {
      "prefix": "TaskAimGunScriptedWithTarget",
      "body": [
          "TaskAimGunScriptedWithTarget(${1:Any* p0}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:Any* p5}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": ""
  },
  "4674": {
      "prefix": "TaskClearDefensiveArea",
      "body": [
          "TaskClearDefensiveArea(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4675": {
      "prefix": "TaskChatToPed",
      "body": [
          "TaskChatToPed(${1:Ped* ped}, ${2:Ped* target}, ${3:Any* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7})${0}"
      ],
      "description": "```\np2 tend to be 16, 17 or 1  \np3 to p7 tend to be 0.0  \n```"
  },
  "4676": {
      "prefix": "TaskClearLookAt",
      "body": [
          "TaskClearLookAt(${1:Ped* ped})${0}"
      ],
      "description": "```\nNot clear what it actually does, but here's how script uses it -\nif (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)\n{\n if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))\n    {\n     TASK::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());\n  }\n ...\n}\nAnother one where it doesn't \"look\" at current player -\nTASK::TASK_PLAY_ANIM(l_3ED, \"missheist_agency2aig_2\", \"look_at_phone_a\", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);\nPED::_2208438012482A1A(l_3ED, 0, 0);\nTASK::TASK_CLEAR_LOOK_AT(l_3ED);\n```"
  },
  "4677": {
      "prefix": "TaskCombatHatedTargetsAroundPed",
      "body": [
          "TaskCombatHatedTargetsAroundPed(${1:Ped* ped}, ${2:float* radius}, ${3:int* p2})${0}"
      ],
      "description": "```\nDespite its name, it only attacks ONE hated target. The one closest hated target.  \np2 seems to be always 0  \n```"
  },
  "4678": {
      "prefix": "TaskClimb",
      "body": [
          "TaskClimb(${1:Ped* ped}, ${2:BOOL* unused})${0}"
      ],
      "description": "```\nClimbs or vaults the nearest thing.  \n```"
  },
  "4679": {
      "prefix": "TaskCombatHatedTargetsAroundPedTimed",
      "body": [
          "TaskCombatHatedTargetsAroundPedTimed(${1:Any* p0}, ${2:float* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4680": {
      "prefix": "TaskClimbLadder",
      "body": [
          "TaskClimbLadder(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "4681": {
      "prefix": "TaskCombatPedTimed",
      "body": [
          "TaskCombatPedTimed(${1:Any* p0}, ${2:Ped* ped}, ${3:int* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4682": {
      "prefix": "TaskCombatHatedTargetsInArea",
      "body": [
          "TaskCombatHatedTargetsInArea(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius}, ${6:Any* p5})${0}"
      ],
      "description": "```\nDespite its name, it only attacks ONE hated target. The one closest to the specified position.  \n```"
  },
  "4683": {
      "prefix": "TaskCower",
      "body": [
          "TaskCower(${1:Ped* ped}, ${2:int* duration})${0}"
      ],
      "description": ""
  },
  "4684": {
      "prefix": "TaskCombatPed",
      "body": [
          "TaskCombatPed(${1:Ped* ped}, ${2:Ped* targetPed}, ${3:int* p2}, ${4:int* p3})${0}"
      ],
      "description": "```\nMakes the specified ped attack the target ped.  \np2 should be 0  \np3 should be 16  \n```"
  },
  "4685": {
      "prefix": "TaskDriveBy",
      "body": [
          "TaskDriveBy(${1:Ped* driverPed}, ${2:Ped* targetPed}, ${3:Vehicle* targetVehicle}, ${4:float* targetX}, ${5:float* targetY}, ${6:float* targetZ}, ${7:float* distanceToShoot}, ${8:int* pedAccuracy}, ${9:BOOL* p8}, ${10:Hash* firingPattern})${0}"
      ],
      "description": "```\nExample:\nTASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\nNeeds working example. Doesn't seem to do anything.\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n```"
  },
  "4686": {
      "prefix": "TaskEnterVehicle",
      "body": [
          "TaskEnterVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* timeout}, ${4:int* seat}, ${5:float* speed}, ${6:int* flag}, ${7:Any* p6})${0}"
      ],
      "description": "```\nspeed 1.0 = walk, 2.0 = run  \np5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle  \np6 is always 0  \nUsage of seat   \n-1 = driver  \n0 = passenger  \n1 = left back seat  \n2 = right back seat  \n3 = outside left  \n4 = outside right  \n```"
  },
  "4687": {
      "prefix": "TaskExitCover",
      "body": [
          "TaskExitCover(${1:Any* p0}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "4688": {
      "prefix": "TaskEveryoneLeaveVehicle",
      "body": [
          "TaskEveryoneLeaveVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4689": {
      "prefix": "TaskFlushRoute",
      "body": [
          "TaskFlushRoute()${0}"
      ],
      "description": "Clears the current point route. Call this before [TASK_EXTEND_ROUTE](#\\_0x1E7889778264843A) and [TASK_FOLLOW_POINT_ROUTE](#\\_0x595583281858626E)."
  },
  "4690": {
      "prefix": "TaskFollowNavMeshToCoordAdvanced",
      "body": [
          "TaskFollowNavMeshToCoordAdvanced(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:int* timeout}, ${7:float* unkFloat}, ${8:int* unkInt}, ${9:float* unkX}, ${10:float* unkY}, ${11:float* unkZ}, ${12:float* unk_40000f})${0}"
      ],
      "description": ""
  },
  "4691": {
      "prefix": "TaskExtendRoute",
      "body": [
          "TaskExtendRoute(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "Adds a new point to the current point route; a maximum of 8 points can be added.\n\nCall [TASK_FLUSH_ROUTE](#\\_0x841142A1376E9006) before the first call to this. Call [TASK_FOLLOW_POINT_ROUTE](#\\_0x595583281858626E) to make the Ped go the route."
  },
  "4692": {
      "prefix": "TaskFollowWaypointRecording",
      "body": [
          "TaskFollowWaypointRecording(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})${0}"
      ],
      "description": ""
  },
  "4693": {
      "prefix": "TaskFollowNavMeshToCoord",
      "body": [
          "TaskFollowNavMeshToCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:int* timeout}, ${7:float* stoppingRange}, ${8:BOOL* persistFollowing}, ${9:float* unk})${0}"
      ],
      "description": "```\nIf no timeout, set timeout to -1.  \n```"
  },
  "4694": {
      "prefix": "TaskFollowPointRoute",
      "body": [
          "TaskFollowPointRoute(${1:Ped* ped}, ${2:float* speed}, ${3:int* unknown})${0}"
      ],
      "description": "```\nMulleKD19: Makes the ped go on the created point route.\nped: The ped to give the task to.\nspeed: The speed to move at in m/s.\nint: Unknown. Can be 0, 1, 2 or 3.\nExample:\nTASK_FLUSH_ROUTE();\nTASK_EXTEND_ROUTE(0f, 0f, 70f);\nTASK_EXTEND_ROUTE(10f, 0f, 70f);\nTASK_EXTEND_ROUTE(10f, 10f, 70f);\nTASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);\n```"
  },
  "4695": {
      "prefix": "TaskForceMotionState",
      "body": [
          "TaskForceMotionState(${1:Ped* ped}, ${2:Hash* state}, ${3:BOOL* p2})${0}"
      ],
      "description": "See [`FORCE_PED_MOTION_STATE`](#\\_0xF28965D04F570DCA)"
  },
  "4696": {
      "prefix": "TaskGetOffBoat",
      "body": [
          "TaskGetOffBoat(${1:Ped* ped}, ${2:Vehicle* boat})${0}"
      ],
      "description": ""
  },
  "4697": {
      "prefix": "TaskFollowToOffsetOfEntity",
      "body": [
          "TaskFollowToOffsetOfEntity(${1:Ped* ped}, ${2:Entity* entity}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* movementSpeed}, ${7:int* timeout}, ${8:float* stoppingRange}, ${9:BOOL* persistFollowing})${0}"
      ],
      "description": "```\np6 always -1  \np7 always 10.0  \np8 always 1  \n```"
  },
  "4698": {
      "prefix": "TaskGoStraightToCoordRelativeToEntity",
      "body": [
          "TaskGoStraightToCoordRelativeToEntity(${1:Entity* entity1}, ${2:Entity* entity2}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4699": {
      "prefix": "TaskGoStraightToCoord",
      "body": [
          "TaskGoStraightToCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:int* timeout}, ${7:float* targetHeading}, ${8:float* distanceToSlide})${0}"
      ],
      "description": ""
  },
  "4700": {
      "prefix": "TaskGoToCoordAnyMeans",
      "body": [
          "TaskGoToCoordAnyMeans(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:Any* p5}, ${7:BOOL* p6}, ${8:int* walkingStyle}, ${9:float* p8})${0}"
      ],
      "description": "```\nexample from fm_mission_controller\nTASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);\n```"
  },
  "4701": {
      "prefix": "TaskGoToCoordAndAimAtHatedEntitiesNearCoord",
      "body": [
          "TaskGoToCoordAndAimAtHatedEntitiesNearCoord(${1:Ped* pedHandle}, ${2:float* goToLocationX}, ${3:float* goToLocationY}, ${4:float* goToLocationZ}, ${5:float* focusLocationX}, ${6:float* focusLocationY}, ${7:float* focusLocationZ}, ${8:float* speed}, ${9:BOOL* shootAtEnemies}, ${10:float* distanceToStopAt}, ${11:float* noRoadsDistance}, ${12:BOOL* unkTrue}, ${13:int* unkFlag}, ${14:int* aimingFlag}, ${15:Hash* firingPattern})${0}"
      ],
      "description": "```\nThe ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.\nIf the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.\nIf the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.\nThe ped will stop aiming when he is closer than distanceToStopAt to goToLocation.\nI still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.\nI think that unkFlag, like the driving styles, could be a flag that \"work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function\". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.\nNote: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.\nThe aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).\nExample:\nenum AimFlag\n{\n   AimAtFocusLocation,\n   AimAtGoToLocation\n};\nVector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.\nVector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.\nVector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground\n// 1st example\nTASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);\n// 2nd example\nTASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);\n1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using \"FullAuto\" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.\n2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.\n```"
  },
  "4702": {
      "prefix": "TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed",
      "body": [
          "TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:Any* p5}, ${7:BOOL* p6}, ${8:int* walkingStyle}, ${9:float* p8}, ${10:Any* p9}, ${11:Any* p10}, ${12:Any* p11}, ${13:Any* p12})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 14: Any p13\n```"
  },
  "4703": {
      "prefix": "TaskGoToCoordAnyMeansExtraParams",
      "body": [
          "TaskGoToCoordAnyMeansExtraParams(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* speed}, ${6:Any* p5}, ${7:BOOL* p6}, ${8:int* walkingStyle}, ${9:float* p8}, ${10:Any* p9}, ${11:Any* p10}, ${12:Any* p11})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 13: Any p12\n```"
  },
  "4704": {
      "prefix": "TaskGoToEntity",
      "body": [
          "TaskGoToEntity(${1:Entity* entity}, ${2:Entity* target}, ${3:int* duration}, ${4:float* distance}, ${5:float* speed}, ${6:float* p5}, ${7:int* p6})${0}"
      ],
      "description": "```\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n```"
  },
  "4705": {
      "prefix": "TaskGoToEntityWhileAimingAtCoord",
      "body": [
          "TaskGoToEntityWhileAimingAtCoord(${1:Any* p0}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:BOOL* p6}, ${8:float* p7}, ${9:float* p8}, ${10:BOOL* p9}, ${11:BOOL* p10}, ${12:Any* p11})${0}"
      ],
      "description": ""
  },
  "4706": {
      "prefix": "TaskGoToCoordWhileAimingAtCoord",
      "body": [
          "TaskGoToCoordWhileAimingAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* aimAtX}, ${6:float* aimAtY}, ${7:float* aimAtZ}, ${8:float* moveSpeed}, ${9:BOOL* shoot}, ${10:float* p9}, ${11:float* p10}, ${12:BOOL* p11}, ${13:Any* flags}, ${14:BOOL* p13}, ${15:Hash* firingPattern})${0}"
      ],
      "description": "Will make the ped move to a coordinate while aiming (and optionally shooting) at given coordinates."
  },
  "4707": {
      "prefix": "TaskGoToCoordWhileAimingAtEntity",
      "body": [
          "TaskGoToCoordWhileAimingAtEntity(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:Any* p4}, ${6:float* p5}, ${7:BOOL* p6}, ${8:float* p7}, ${9:float* p8}, ${10:BOOL* p9}, ${11:Any* p10}, ${12:BOOL* p11}, ${13:Any* p12}, ${14:Any* p13})${0}"
      ],
      "description": ""
  },
  "4708": {
      "prefix": "TaskGoToEntityWhileAimingAtEntity",
      "body": [
          "TaskGoToEntityWhileAimingAtEntity(${1:Ped* ped}, ${2:Entity* entityToWalkTo}, ${3:Entity* entityToAimAt}, ${4:float* speed}, ${5:BOOL* shootatEntity}, ${6:float* p5}, ${7:float* p6}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:Hash* firingPattern})${0}"
      ],
      "description": "```\nshootatEntity:  \nIf true, peds will shoot at Entity till it is dead.  \nIf false, peds will just walk till they reach the entity and will cease shooting.  \n```"
  },
  "4709": {
      "prefix": "TaskGotoEntityAiming",
      "body": [
          "TaskGotoEntityAiming(${1:Ped* ped}, ${2:Entity* target}, ${3:float* distanceToStopAt}, ${4:float* StartAimingDist})${0}"
      ],
      "description": "```\neg\n TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);\nped = Ped you want to perform this task.\ntarget = the Entity they should aim at.\ndistanceToStopAt = distance from the target, where the ped should stop to aim.\nStartAimingDist = distance where the ped should start to aim.\n```"
  },
  "4710": {
      "prefix": "TaskGotoEntityOffset",
      "body": [
          "TaskGotoEntityOffset(${1:Ped* ped}, ${2:Any* p1}, ${3:Any* p2}, ${4:float* x}, ${5:float* y}, ${6:float* z}, ${7:int* duration})${0}"
      ],
      "description": ""
  },
  "4711": {
      "prefix": "TaskGuardAssignedDefensiveArea",
      "body": [
          "TaskGuardAssignedDefensiveArea(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4712": {
      "prefix": "TaskGotoEntityOffsetXy",
      "body": [
          "TaskGotoEntityOffsetXy(${1:Ped* ped}, ${2:Entity* entity}, ${3:int* duration}, ${4:float* xOffset}, ${5:float* yOffset}, ${6:float* zOffset}, ${7:float* moveBlendRatio}, ${8:BOOL* useNavmesh})${0}"
      ],
      "description": ""
  },
  "4713": {
      "prefix": "TaskGuardCurrentPosition",
      "body": [
          "TaskGuardCurrentPosition(${1:Ped* p0}, ${2:float* p1}, ${3:float* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nFrom re_prisonvanbreak:\nTASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);\n```"
  },
  "4714": {
      "prefix": "TaskHandsUp",
      "body": [
          "TaskHandsUp(${1:Ped* ped}, ${2:int* duration}, ${3:Ped* facingPed}, ${4:int* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nIn the scripts, p3 was always -1.  \np3 seems to be duration or timeout of turn animation.  \nAlso facingPed can be 0 or -1 so ped will just raise hands up.  \n```"
  },
  "4715": {
      "prefix": "TaskHeliChase",
      "body": [
          "TaskHeliChase(${1:Ped* pilot}, ${2:Entity* entityToFollow}, ${3:float* x}, ${4:float* y}, ${5:float* z})${0}"
      ],
      "description": "```\nPed pilot should be in a heli.  \nEntityToFollow can be a vehicle or Ped.  \nx,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)  \nNOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.  \n```"
  },
  "4716": {
      "prefix": "TaskGuardSphereDefensiveArea",
      "body": [
          "TaskGuardSphereDefensiveArea(${1:Ped* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:Any* p6}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:float* p10})${0}"
      ],
      "description": "```\np0 - Guessing PedID  \np1, p2, p3 - XYZ?  \np4 - ???  \np5 - Maybe the size of sphere from XYZ?  \np6 - ???  \np7, p8, p9 - XYZ again?  \np10 - Maybe the size of sphere from second XYZ?  \n```"
  },
  "4717": {
      "prefix": "TaskHeliEscortHeli",
      "body": [
          "TaskHeliEscortHeli(${1:Ped* pilot}, ${2:Vehicle* heli1}, ${3:Vehicle* heli2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "4718": {
      "prefix": "TaskHeliMission",
      "body": [
          "TaskHeliMission(${1:Ped* pilot}, ${2:Vehicle* aircraft}, ${3:Vehicle* targetVehicle}, ${4:Ped* targetPed}, ${5:float* destinationX}, ${6:float* destinationY}, ${7:float* destinationZ}, ${8:int* missionFlag}, ${9:float* maxSpeed}, ${10:float* landingRadius}, ${11:float* targetHeading}, ${12:int* unk1}, ${13:int* unk2}, ${14:float* unk3}, ${15:int* landingFlags})${0}"
      ],
      "description": "```\nNeeds more research.\nDefault value of p13 is -1.0 or 0xBF800000.\nDefault value of p14 is 0.\nModified examples from \"fm_mission_controller.ysc\", line ~203551:\nTASK::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 10, 10, 5.0, 0);\nTASK::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 0, ?, 5.0, 4096);\nint mode seams to set mission type 4 = coords target, 23 = ped target.\nint 14 set to 32 = ped will land at destination.\nMy findings:\nmode 4 or 7 forces heli to snap to the heading set\n8 makes the heli flee from the ped.\n9 circles around ped with angle set\n10, 11 normal + imitate ped heading\n20 makes the heli land when he's near the ped. It won't resume chasing.\n21 emulates an helicopter crash\n23 makes the heli circle erratically around ped\nI change p2 to 'vehicleToFollow' as it seems to work like the task natives to set targets. In the heli_taxi script where as the merryweather heli takes you to your waypoint it has no need to follow a vehicle or a ped, so of course both have 0 set.\n```"
  },
  "4719": {
      "prefix": "TaskLeaveAnyVehicle",
      "body": [
          "TaskLeaveAnyVehicle(${1:Ped* ped}, ${2:int* p1}, ${3:int* flags})${0}"
      ],
      "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)"
  },
  "4720": {
      "prefix": "TaskJump",
      "body": [
          "TaskJump(${1:Ped* ped}, ${2:BOOL* unused})${0}"
      ],
      "description": "```\nDefinition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).  \nv350: Ped ped, bool unused  \nv678: Ped ped, bool unused, bool flag1, bool flag2  \nflag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "4721": {
      "prefix": "TaskLeaveVehicle",
      "body": [
          "TaskLeaveVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* flags})${0}"
      ],
      "description": "```\nFlags from decompiled scripts:  \n0 = normal exit and closes door.  \n1 = normal exit and closes door.  \n16 = teleports outside, door kept closed.  \n64 = normal exit and closes door, maybe a bit slower animation than 0.  \n256 = normal exit but does not close the door.  \n4160 = ped is throwing himself out, even when the vehicle is still.  \n262144 = ped moves to passenger seat first, then exits normally  \nOthers to be tried out: 320, 512, 131072.  \n```"
  },
  "4722": {
      "prefix": "TaskLookAtCoord",
      "body": [
          "TaskLookAtCoord(${1:Entity* entity}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* duration}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4723": {
      "prefix": "TaskLookAtEntity",
      "body": [
          "TaskLookAtEntity(${1:Ped* ped}, ${2:Entity* lookAt}, ${3:int* duration}, ${4:int* unknown1}, ${5:int* unknown2})${0}"
      ],
      "description": "```\nparam3: duration in ms, use -1 to look forever  \nparam4: using 2048 is fine  \nparam5: using 3 is fine  \n```"
  },
  "4724": {
      "prefix": "TaskMoveNetworkAdvancedByName",
      "body": [
          "TaskMoveNetworkAdvancedByName(${1:Ped* ped}, ${2:char* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:Any* p8}, ${10:float* p9}, ${11:BOOL* p10}, ${12:char* animDict}, ${13:int* flags})${0}"
      ],
      "description": "```\nExample:\nTASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), \"minigame_tattoo_michael_parts\", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);\n```"
  },
  "4725": {
      "prefix": "TaskMoveNetworkByName",
      "body": [
          "TaskMoveNetworkByName(${1:Ped* ped}, ${2:char* task}, ${3:float* multiplier}, ${4:BOOL* p3}, ${5:char* animDict}, ${6:int* flags})${0}"
      ],
      "description": "```\nExample:\nTASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), \"arm_wrestling_sweep_paired_a_rev3\", 0.0f, true, \"mini@arm_wrestling\", 0);\n```"
  },
  "4726": {
      "prefix": "TaskMoveNetworkByNameWithInitParams",
      "body": [
          "TaskMoveNetworkByNameWithInitParams(${1:Ped* ped}, ${2:char* p1}, ${3:Any* data}, ${4:float* p3}, ${5:BOOL* p4}, ${6:char* animDict}, ${7:int* flags})${0}"
      ],
      "description": "```\nUsed only once in the scripts (am_mp_nightclub)\n```\n\n```\nUsed only once in the scripts (am_mp_nightclub)\n\nNativeDB Introduced: v1493\n```"
  },
  "4727": {
      "prefix": "TaskOpenVehicleDoor",
      "body": [
          "TaskOpenVehicleDoor(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* timeOut}, ${4:int* seat}, ${5:float* speed})${0}"
      ],
      "description": "The given ped will try to open the nearest door to 'seat'.\n\nExample: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer."
  },
  "4728": {
      "prefix": "TaskParachute",
      "body": [
          "TaskParachute(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nThis function has a third parameter as well (bool).  \nSecond parameter is unused.  \nseconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed  \n```\n\n```\nNativeDB Added Parameter 3: BOOL p2\n```"
  },
  "4729": {
      "prefix": "TaskParachuteToTarget",
      "body": [
          "TaskParachuteToTarget(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "```\nmakes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED  \n```"
  },
  "4730": {
      "prefix": "TaskPatrol",
      "body": [
          "TaskPatrol(${1:Ped* ped}, ${2:char* p1}, ${3:Any* p2}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nAfter looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:\n\"miss_Tower_01\" (this went from 01 - 10)\n\"miss_Ass0\" (0, 4, 6, 3)\n\"MISS_PATROL_8\"\nI think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.\nAs far as I can see the patrol routes names such as \"miss_Ass0\" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.\nFrom the scripts\n    TASK::OPEN_PATROL_ROUTE(\"miss_Ass0\");\n    TASK::ADD_PATROL_ROUTE_NODE(0, \"WORLD_HUMAN_GUARD_STAND\", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));\n    TASK::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));\n    TASK::ADD_PATROL_ROUTE_NODE(2, \"WORLD_HUMAN_GUARD_STAND\", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));\n    TASK::ADD_PATROL_ROUTE_LINK(0, 1);\n    TASK::ADD_PATROL_ROUTE_LINK(1, 2);\n    TASK::ADD_PATROL_ROUTE_LINK(2, 0);\n    TASK::CLOSE_PATROL_ROUTE();\n    TASK::CREATE_PATROL_ROUTE();\n```"
  },
  "4731": {
      "prefix": "TaskPause",
      "body": [
          "TaskPause(${1:Ped* ped}, ${2:int* ms})${0}"
      ],
      "description": "This tasks the ped to do nothing for the specified amount of miliseconds.\nThis is useful if you want to add a delay between tasks when using a sequence task."
  },
  "4732": {
      "prefix": "TaskPedSlideToCoord",
      "body": [
          "TaskPedSlideToCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading}, ${6:float* duration})${0}"
      ],
      "description": ""
  },
  "4733": {
      "prefix": "TaskPedSlideToCoordHdgRate",
      "body": [
          "TaskPedSlideToCoordHdgRate(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading}, ${6:float* p5}, ${7:float* p6})${0}"
      ],
      "description": ""
  },
  "4734": {
      "prefix": "TaskPerformSequence",
      "body": [
          "TaskPerformSequence(${1:Ped* ped}, ${2:int* taskSequenceId})${0}"
      ],
      "description": ""
  },
  "4735": {
      "prefix": "TaskPerformSequenceLocally",
      "body": [
          "TaskPerformSequenceLocally(${1:Ped* ped}, ${2:int* taskSequenceId})${0}"
      ],
      "description": ""
  },
  "4736": {
      "prefix": "TaskPerformSequenceFromProgress",
      "body": [
          "TaskPerformSequenceFromProgress(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4737": {
      "prefix": "TaskPlaneGotoPreciseVtol",
      "body": [
          "TaskPlaneGotoPreciseVtol(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:Any* p9})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "4738": {
      "prefix": "TaskPlaneChase",
      "body": [
          "TaskPlaneChase(${1:Ped* pilot}, ${2:Entity* entityToFollow}, ${3:float* x}, ${4:float* y}, ${5:float* z})${0}"
      ],
      "description": ""
  },
  "4739": {
      "prefix": "TaskPlaneLand",
      "body": [
          "TaskPlaneLand(${1:Ped* pilot}, ${2:Vehicle* plane}, ${3:float* runwayStartX}, ${4:float* runwayStartY}, ${5:float* runwayStartZ}, ${6:float* runwayEndX}, ${7:float* runwayEndY}, ${8:float* runwayEndZ})${0}"
      ],
      "description": ""
  },
  "4740": {
      "prefix": "TaskPlaneMission",
      "body": [
          "TaskPlaneMission(${1:Ped* pilot}, ${2:Vehicle* aircraft}, ${3:Vehicle* targetVehicle}, ${4:Ped* targetPed}, ${5:float* destinationX}, ${6:float* destinationY}, ${7:float* destinationZ}, ${8:int* missionFlag}, ${9:float* angularDrag}, ${10:float* unk}, ${11:float* targetHeading}, ${12:float* maxZ}, ${13:float* minZ})${0}"
      ],
      "description": "```\nEDITED (7/13/2017)  \nNOTE: If you want air combat, AI::TASK_COMBAT_PED (while your pilot is in an aircraft) also does the same thing as this native.  \nDESCRIPTION:  \nEver wish your buddy could shoot down one of your enemies for you? Ever wanted an auto-pilot? Well look no further! This is the native for you! (Ped intelligence may vary)  \nUSAGE:  \n-- REQUIRED --  \n• pilot = The ped flying the aircraft.  \n• aircraft = The aircraft the pilot is flying  \n-- OPTIONAL -- [atleast 1 must be assigned]  \n• targetVehicle = The vehicle the pilot will target.  \n• targetPed = The ped the pilot will target.  \n• destinationX, destinationY, destinationZ = The location the pilot will target.  \n-- LOGIC --  \n• missionFlag = The type of mission. pastebin.com/R8x73dbv  \n• angularDrag = The higher the value, the slower the plane will rotate. Value ranges from 0 - Infinity.  \n• unk = Set to 0, and you'll be fine.  \n• targetHeading = The target angle (from world space north) that the pilot will try to acheive before executing an attack/landing.  \n• maxZ = Maximum Z coordinate height for flying.  \n• minZ = Minimum Z coordinate height for flying.  \nZ: 2,700 is the default max height a pilot will be able to fly. Anything greater and he will fly downward until reaching 2,700 again.  \nMission Types (incase you don't like links..):  \n0 = None  \n1 = Unk  \n2 = CTaskVehicleRam  \n3 = CTaskVehicleBlock  \n4 = CTaskVehicleGoToPlane  \n5 = CTaskVehicleStop  \n6 = CTaskVehicleAttack  \n7 = CTaskVehicleFollow  \n8 = CTaskVehicleFleeAirborne  \n9 = CTaskVehicleCircle  \n10 = CTaskVehicleEscort  \n15 = CTaskVehicleFollowRecording  \n16 = CTaskVehiclePoliceBehaviour  \n17 = CTaskVehicleCrash  \nExample C#:  \nFunction.Call(Hash.TASK_PLANE_MISSION, pilot, vehicle, 0, Game.Player.Character, 0, 0, 0, 6, 0f, 0f, 0f, 2500.0f, -1500f);  \nExample C++  \nAI::TASK_PLANE_MISSION(pilot, vehicle, 0, PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_INDEX()), 0, 0, 0, 6, 0.0, 0.0, 0.0, 2500.0, -1500.0);  \n[DEPRECATED] EXAMPLE USAGE:  \npastebin.com/gx7Finsk  \n```\n\n```\nNativeDB Added Parameter 14: Any p13\n```"
  },
  "4741": {
      "prefix": "TaskPlantBomb",
      "body": [
          "TaskPlantBomb(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading})${0}"
      ],
      "description": ""
  },
  "4742": {
      "prefix": "TaskPlayAnimAdvanced",
      "body": [
          "TaskPlayAnimAdvanced(${1:Ped* ped}, ${2:char* animDict}, ${3:char* animName}, ${4:float* posX}, ${5:float* posY}, ${6:float* posZ}, ${7:float* rotX}, ${8:float* rotY}, ${9:float* rotZ}, ${10:float* animEnterSpeed}, ${11:float* animExitSpeed}, ${12:int* duration}, ${13:Any* flag}, ${14:float* animTime}, ${15:Any* p14}, ${16:Any* p15})${0}"
      ],
      "description": "It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).\n\n[Animations list](https://alexguirre.github.io/animations-list/)"
  },
  "4743": {
      "prefix": "TaskPlaneTaxi",
      "body": [
          "TaskPlaneTaxi(${1:Ped* pilot}, ${2:Vehicle* aircraft}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4744": {
      "prefix": "TaskPlayPhoneGestureAnimation",
      "body": [
          "TaskPlayPhoneGestureAnimation(${1:Ped* ped}, ${2:char* animDict}, ${3:char* animation}, ${4:char* boneMaskType}, ${5:float* p4}, ${6:float* p5}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\nExample from the scripts:\nTASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);\n=========================================================\n^^ No offense, but Idk how that would really help anyone.\nAs for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.\nKnown boneMaskTypes'\n\"BONEMASK_HEADONLY\"\n\"BONEMASK_HEAD_NECK_AND_ARMS\"\n\"BONEMASK_HEAD_NECK_AND_L_ARM\"\n\"BONEMASK_HEAD_NECK_AND_R_ARM\"\np4 known args - 0.0f, 0.5f, 0.25f\np5 known args - 0.0f, 0.25f\np6 known args - 1 if a global if check is passed.\np7 known args - 1 if a global if check is passed.\nThe values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).\n=========================================================\n```"
  },
  "4745": {
      "prefix": "TaskPlayAnim",
      "body": [
          "TaskPlayAnim(${1:Ped* ped}, ${2:char* animDictionary}, ${3:char* animationName}, ${4:float* blendInSpeed}, ${5:float* blendOutSpeed}, ${6:int* duration}, ${7:int* flag}, ${8:float* playbackRate}, ${9:BOOL* lockX}, ${10:BOOL* lockY}, ${11:BOOL* lockZ})${0}"
      ],
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```\nfloat blendInSpeed > normal speed is 8.0f\n----------------------  \nfloat blendOutSpeed > normal speed is 8.0f\n----------------------  \nint duration: time in millisecond  \n----------------------  \n-1 _ _ _ _ _ _ _> Default (see flag)  \n0 _ _ _ _ _ _ _ > Not play at all  \nSmall value _ _ > Slow down animation speed  \nOther _ _ _ _ _ > freeze player control until specific time (ms) has   \n_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be   \n_ _ _ _ _ _ _ _ _ controllable.)  \nint flag:  \n----------------------  \nenum eAnimationFlags  \n{  \n ANIM_FLAG_NORMAL = 0,  \n   ANIM_FLAG_REPEAT = 1,  \n   ANIM_FLAG_STOP_LAST_FRAME = 2,  \n   ANIM_FLAG_UPPERBODY = 16,  \n   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,  \n   ANIM_FLAG_CANCELABLE = 120,  \n};  \nOdd number : loop infinitely  \nEven number : Freeze at last frame  \nMultiple of 4: Freeze at last frame but controllable  \n01 to 15 > Full body  \n10 to 31 > Upper body  \n32 to 47 > Full body > Controllable  \n48 to 63 > Upper body > Controllable  \n...  \n001 to 255 > Normal  \n256 to 511 > Garbled  \n...  \nplaybackRate:  \nvalues are between 0.0 and 1.0  \nlockX:    \n0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3  \n> 1 for mini@sprunk  \nlockY:  \n0 in most cases   \n1 for missfam5_yoga, missfra1mcs_2_crew_react  \nlockZ:   \n    0 for single player   \n    Can be 1 but only for MP  \n```"
  },
  "4746": {
      "prefix": "TaskPutPedDirectlyIntoCover",
      "body": [
          "TaskPutPedDirectlyIntoCover(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:Any* timeout}, ${6:BOOL* p5}, ${7:float* p6}, ${8:BOOL* p7}, ${9:BOOL* p8}, ${10:Any* p9}, ${11:BOOL* p10})${0}"
      ],
      "description": ""
  },
  "4747": {
      "prefix": "TaskPutPedDirectlyIntoMelee",
      "body": [
          "TaskPutPedDirectlyIntoMelee(${1:Ped* ped}, ${2:Ped* meleeTarget}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nfrom armenian3.c4\nTASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);\n```"
  },
  "4748": {
      "prefix": "TaskRappelFromHeli",
      "body": [
          "TaskRappelFromHeli(${1:Ped* ped}, ${2:float* unused})${0}"
      ],
      "description": "```\nOnly appears twice in the scripts.\nTASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);\nTASK::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);\n```"
  },
  "4749": {
      "prefix": "TaskRappelDownWall",
      "body": [
          "TaskRappelDownWall(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:Any* p9}, ${11:Any* p10})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "4750": {
      "prefix": "TaskReactAndFleePed",
      "body": [
          "TaskReactAndFleePed(${1:Ped* ped}, ${2:Ped* fleeTarget})${0}"
      ],
      "description": ""
  },
  "4751": {
      "prefix": "TaskReloadWeapon",
      "body": [
          "TaskReloadWeapon(${1:Ped* ped}, ${2:BOOL* unused})${0}"
      ],
      "description": "```\nThe 2nd param (unused) is not implemented.\n-----------------------------------------------------------------------\nThe only occurrence I found in a R* script (\"assassin_construction.ysc.c4\"):\n            if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {\n                TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);\n            }\n```"
  },
  "4752": {
      "prefix": "TaskSeekCoverFromPos",
      "body": [
          "TaskSeekCoverFromPos(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* duration}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "4753": {
      "prefix": "TaskSeekCoverToCoverPoint",
      "body": [
          "TaskSeekCoverToCoverPoint(${1:Any* p0}, ${2:Any* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:Any* p5}, ${7:BOOL* p6})${0}"
      ],
      "description": ""
  },
  "4754": {
      "prefix": "TaskScriptedAnimation",
      "body": [
          "TaskScriptedAnimation(${1:Ped* ped}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:float* p4}, ${6:float* p5})${0}"
      ],
      "description": "```\nFrom fm_mission_controller.c:  \nreserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);  \n\tvVar28 = {0.094f, 0.02f, -0.005f};  \n\tvVar29 = {-92.24f, 63.64f, 150.24f};  \n\tfunc_253(&uVar30, joaat(\"prop_ld_case_01\"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);  \n\tset_entity_lod_dist(net_to_ent(uVar30), 500);  \n\tattach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);  \n\tVar31.imm_4 = 1065353216;  \n\tVar31.imm_5 = 1065353216;  \n\tVar31.imm_9 = 1065353216;  \n\tVar31.imm_10 = 1065353216;  \n\tVar31.imm_14 = 1065353216;  \n\tVar31.imm_15 = 1065353216;  \n\tVar31.imm_17 = 1040187392;  \n\tVar31.imm_18 = 1040187392;  \n\tVar31.imm_19 = -1;  \n\tVar32.imm_4 = 1065353216;  \n\tVar32.imm_5 = 1065353216;  \n\tVar32.imm_9 = 1065353216;  \n\tVar32.imm_10 = 1065353216;  \n\tVar32.imm_14 = 1065353216;  \n\tVar32.imm_15 = 1065353216;  \n\tVar32.imm_17 = 1040187392;  \n\tVar32.imm_18 = 1040187392;  \n\tVar32.imm_19 = -1;  \n\tVar31 = 1;  \n\tVar31.imm_1 = \"weapons@misc@jerrycan@mp_male\";  \n\tVar31.imm_2 = \"idle\";  \n\tVar31.imm_20 = 1048633;  \n\tVar31.imm_4 = 0.5f;  \n\tVar31.imm_16 = get_hash_key(\"BONEMASK_ARMONLY_R\");  \n\ttask_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);  \n\tset_model_as_no_longer_needed(joaat(\"prop_ld_case_01\"));  \n\tremove_anim_dict(\"anim@heists@biolab@\");  \n```"
  },
  "4755": {
      "prefix": "TaskSeekCoverFromPed",
      "body": [
          "TaskSeekCoverFromPed(${1:Ped* ped}, ${2:Ped* target}, ${3:int* duration}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "4756": {
      "prefix": "TaskSetBlockingOfNonTemporaryEvents",
      "body": [
          "TaskSetBlockingOfNonTemporaryEvents(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nI cant believe I have to define this, this is one of the best natives.  \nIt makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.  \nSince it is a task, every time the native is called the ped will stop for a moment.  \n```"
  },
  "4757": {
      "prefix": "TaskSetSphereDefensiveArea",
      "body": [
          "TaskSetSphereDefensiveArea(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "4758": {
      "prefix": "TaskSeekCoverToCoords",
      "body": [
          "TaskSeekCoverToCoords(${1:Ped* ped}, ${2:float* x1}, ${3:float* y1}, ${4:float* z1}, ${5:float* x2}, ${6:float* y2}, ${7:float* z2}, ${8:Any* p7}, ${9:BOOL* p8})${0}"
      ],
      "description": "```\nfrom michael2:\nTASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);\nappears to be shorter variation\nfrom michael3:\nTASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);\n```"
  },
  "4759": {
      "prefix": "TaskShootAtCoord",
      "body": [
          "TaskShootAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* duration}, ${6:Hash* firingPattern})${0}"
      ],
      "description": "```\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```"
  },
  "4760": {
      "prefix": "TaskSetDecisionMaker",
      "body": [
          "TaskSetDecisionMaker(${1:Ped* ped}, ${2:Hash* p1})${0}"
      ],
      "description": "```\np1 is always GET_HASH_KEY(\"empty\") in scripts, for the rare times this is used  \n```"
  },
  "4761": {
      "prefix": "TaskShockingEventReact",
      "body": [
          "TaskShockingEventReact(${1:Ped* ped}, ${2:int* eventHandle})${0}"
      ],
      "description": ""
  },
  "4762": {
      "prefix": "TaskShootAtEntity",
      "body": [
          "TaskShootAtEntity(${1:Entity* entity}, ${2:Entity* target}, ${3:int* duration}, ${4:Hash* firingPattern})${0}"
      ],
      "description": "```\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\nEntity aimedentity;\nPlayer player = PLAYER::PLAYER_ID();\nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);\n//bg is an array of peds\nTASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```"
  },
  "4763": {
      "prefix": "TaskSkyDive",
      "body": [
          "TaskSkyDive(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: BOOL p1\n```"
  },
  "4764": {
      "prefix": "TaskShuffleToNextVehicleSeat",
      "body": [
          "TaskShuffleToNextVehicleSeat(${1:Ped* ped}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": "```\nMakes the specified ped shuffle to the next vehicle seat.  \nThe ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "4765": {
      "prefix": "TaskSmartFleeCoord",
      "body": [
          "TaskSmartFleeCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* distance}, ${6:int* time}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\nMakes the specified ped flee the specified distance from the specified position.  \n```"
  },
  "4766": {
      "prefix": "TaskSmartFleePed",
      "body": [
          "TaskSmartFleePed(${1:Ped* ped}, ${2:Ped* fleeTarget}, ${3:float* distance}, ${4:Any* fleeTime}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nMakes a ped run away from another ped (fleeTarget).  \ndistance = ped will flee this distance.  \nfleeTime = ped will flee for this amount of time, set to \"-1\" to flee forever  \n```"
  },
  "4767": {
      "prefix": "TaskStandStill",
      "body": [
          "TaskStandStill(${1:Ped* ped}, ${2:int* time})${0}"
      ],
      "description": "```\nMakes the specified ped stand still for (time) milliseconds.  \n```"
  },
  "4768": {
      "prefix": "TaskStandGuard",
      "body": [
          "TaskStandGuard(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading}, ${6:char* scenarioName})${0}"
      ],
      "description": "```\nscenarioName example: \"WORLD_HUMAN_GUARD_STAND\"  \n```"
  },
  "4769": {
      "prefix": "TaskStartScenarioInPlace",
      "body": [
          "TaskStartScenarioInPlace(${1:Ped* ped}, ${2:char* scenarioName}, ${3:int* unkDelay}, ${4:BOOL* playEnterAnim})${0}"
      ],
      "description": "```\nPlays a scenario on a Ped at their current location.  \nunkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.  \nplayEnterAnim - Plays the \"Enter\" anim if true, otherwise plays the \"Exit\" anim. Scenarios that don't have any \"Enter\" anims won't play if this is set to true.  \n\nList of scenarioNames: pastebin.com/6mrYTdQv  \n\nAlso these:  \nWORLD_FISH_FLEE  \nDRIVE  \nWORLD_HUMAN_HIKER  \nWORLD_VEHICLE_ATTRACTOR  \nWORLD_VEHICLE_BICYCLE_MOUNTAIN  \nWORLD_VEHICLE_BIKE_OFF_ROAD_RACE  \nWORLD_VEHICLE_BIKER  \nWORLD_VEHICLE_CONSTRUCTION_PASSENGERS  \nWORLD_VEHICLE_CONSTRUCTION_SOLO  \nWORLD_VEHICLE_DRIVE_PASSENGERS  \nWORLD_VEHICLE_DRIVE_SOLO  \nWORLD_VEHICLE_EMPTY  \nWORLD_VEHICLE_PARK_PARALLEL  \nWORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN  \nWORLD_VEHICLE_POLICE_BIKE  \nWORLD_VEHICLE_POLICE_CAR  \nWORLD_VEHICLE_POLICE_NEXT_TO_CAR  \nWORLD_VEHICLE_SALTON_DIRT_BIKE  \nWORLD_VEHICLE_TRUCK_LOGS  \n```"
  },
  "4770": {
      "prefix": "TaskStartScenarioAtPosition",
      "body": [
          "TaskStartScenarioAtPosition(${1:Ped* ped}, ${2:char* scenarioName}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* heading}, ${7:int* duration}, ${8:BOOL* sittingScenario}, ${9:BOOL* teleport})${0}"
      ],
      "description": "```\nAlso a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.\n---------------\nThe first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.\nThe next 4 parameters were harder to decipher. After viewing \"hairdo_shop_mp.ysc.c4\", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.\nI haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.\nI have no idea what the last 3 parameters are, but I'll try to find out.\n-going on the last 3 parameters, they appear to always be \"0, 0, 1\"\np6 -1 also used in scrips\np7 used for sitting scenarios\np8 teleports ped to position\n```"
  },
  "4771": {
      "prefix": "TaskStayInCover",
      "body": [
          "TaskStayInCover(${1:Ped* ped})${0}"
      ],
      "description": "```\nMakes the ped run to take cover  \n```"
  },
  "4772": {
      "prefix": "TaskStealthKill",
      "body": [
          "TaskStealthKill(${1:Ped* killer}, ${2:Ped* target}, ${3:Hash* actionType}, ${4:float* p3}, ${5:Any* p4})${0}"
      ],
      "description": "```\nStealth kill action name hashes:  \nstealth kills can be found here: Grand Theft Auto V\\common.rpf\\data\\action\\stealth_kills.meta  \n...  \n{  \n    \"ACT_stealth_kill_a\",  \n    \"ACT_stealth_kill_weapon\",  \n    \"ACT_stealth_kill_b\",  \n    \"ACT_stealth_kill_c\",  \n    \"ACT_stealth_kill_d\",  \n    \"ACT_stealth_kill_a_gardener\"  \n}  \nOnly known script using this native: fbi4_prep2  \nEXAMPLE:  \nai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key(\"AR_stealth_kill_a\"), 1f, 0);ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key(\"AR_stealth_kill_knife\"), 1f, 0);  \nAlso it may be important to note, that each time this task is called, it's followed by AI::CLEAR_PED_TASKS on the target  \n```"
  },
  "4773": {
      "prefix": "TaskStopPhoneGestureAnimation",
      "body": [
          "TaskStopPhoneGestureAnimation(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "4774": {
      "prefix": "TaskSubmarineGotoAndStop",
      "body": [
          "TaskSubmarineGotoAndStop(${1:Any* p0}, ${2:Vehicle* submarine}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:Any* p5})${0}"
      ],
      "description": "Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.\np0 is always 0, p5 is always 1\np1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.\nSpeed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after\n\n```\nNativeDB Introduced: v2189\n```"
  },
  "4775": {
      "prefix": "TaskSweepAimEntity",
      "body": [
          "TaskSweepAimEntity(${1:Ped* ped}, ${2:char* anim}, ${3:char* p2}, ${4:char* p3}, ${5:char* p4}, ${6:int* p5}, ${7:Vehicle* vehicle}, ${8:float* p7}, ${9:float* p8})${0}"
      ],
      "description": "```\nThis function is called on peds in vehicles.  \nanim: animation name  \np2, p3, p4: \"sweep_low\", \"sweep_med\" or \"sweep_high\"  \np5: no idea what it does but is usually -1  \n```"
  },
  "4776": {
      "prefix": "TaskSwapWeapon",
      "body": [
          "TaskSwapWeapon(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "4777": {
      "prefix": "TaskSweepAimPosition",
      "body": [
          "TaskSweepAimPosition(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:float* p6}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:float* p10})${0}"
      ],
      "description": ""
  },
  "4778": {
      "prefix": "TaskSynchronizedScene",
      "body": [
          "TaskSynchronizedScene(${1:Ped* ped}, ${2:int* scene}, ${3:char* animDictionary}, ${4:char* animationName}, ${5:float* speed}, ${6:float* speedMultiplier}, ${7:int* duration}, ${8:int* flag}, ${9:float* playbackRate}, ${10:Any* p9})${0}"
      ],
      "description": "```\n TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, \"creatures@rottweiler@in_vehicle@std_car\", \"get_in\", 1000.0, -8.0, 4, 0, 0x447a0000, 0);\n```"
  },
  "4779": {
      "prefix": "TaskThrowProjectile",
      "body": [
          "TaskThrowProjectile(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": "```\nIn every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.  \nThe last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.  \n---  \nIt seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).  \nIt is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.  \n----------------------------------------------------  \nThe first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.  \n```\n\n```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "4780": {
      "prefix": "TaskTurnPedToFaceEntity",
      "body": [
          "TaskTurnPedToFaceEntity(${1:Ped* ped}, ${2:Entity* entity}, ${3:int* duration})${0}"
      ],
      "description": "```\nduration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped  \n```"
  },
  "4781": {
      "prefix": "TaskUseMobilePhone",
      "body": [
          "TaskUseMobilePhone(${1:Ped* ped}, ${2:int* p1})${0}"
      ],
      "description": "```\nActually has 3 params, not 2.  \np0: Ped  \np1: int (or bool?)  \np2: int  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "4782": {
      "prefix": "TaskToggleDuck",
      "body": [
          "TaskToggleDuck(${1:BOOL* p0}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nused in sequence task  \nboth parameters seems to be always 0  \n```"
  },
  "4783": {
      "prefix": "TaskTurnPedToFaceCoord",
      "body": [
          "TaskTurnPedToFaceCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* duration})${0}"
      ],
      "description": "```\nduration in milliseconds  \n```"
  },
  "4784": {
      "prefix": "TaskUseMobilePhoneTimed",
      "body": [
          "TaskUseMobilePhoneTimed(${1:Ped* ped}, ${2:int* duration})${0}"
      ],
      "description": ""
  },
  "4785": {
      "prefix": "TaskUseNearestScenarioChainToCoord",
      "body": [
          "TaskUseNearestScenarioChainToCoord(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "4786": {
      "prefix": "TaskUseNearestScenarioChainToCoordWarp",
      "body": [
          "TaskUseNearestScenarioChainToCoordWarp(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "4787": {
      "prefix": "TaskUseNearestScenarioToCoord",
      "body": [
          "TaskUseNearestScenarioToCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* distance}, ${6:int* duration})${0}"
      ],
      "description": "```\nUpdated variables\nAn alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.\n```"
  },
  "4788": {
      "prefix": "TaskVehicleAimAtCoord",
      "body": [
          "TaskVehicleAimAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "4789": {
      "prefix": "TaskVehicleChase",
      "body": [
          "TaskVehicleChase(${1:Ped* driver}, ${2:Entity* targetEnt})${0}"
      ],
      "description": "```\nchases targetEnt fast and aggressively  \n--  \nMakes ped (needs to be in vehicle) chase targetEnt.  \n```"
  },
  "4790": {
      "prefix": "TaskUseNearestScenarioToCoordWarp",
      "body": [
          "TaskUseNearestScenarioToCoordWarp(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "4791": {
      "prefix": "TaskVehicleAimAtPed",
      "body": [
          "TaskVehicleAimAtPed(${1:Ped* ped}, ${2:Ped* target})${0}"
      ],
      "description": ""
  },
  "4792": {
      "prefix": "TaskVehicleDriveToCoord",
      "body": [
          "TaskVehicleDriveToCoord(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* speed}, ${7:Any* p6}, ${8:Hash* vehicleModel}, ${9:int* drivingMode}, ${10:float* stopRange}, ${11:float* p10})${0}"
      ],
      "description": "```\ninfo about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/  \n---------------------------------------------------------------  \nPassing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.  \nP10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.  \nHere the e.g. code I used  \nFunction.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);  \n```"
  },
  "4793": {
      "prefix": "TaskVehicleDriveToCoordLongrange",
      "body": [
          "TaskVehicleDriveToCoordLongrange(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* speed}, ${7:int* driveMode}, ${8:float* stopRange})${0}"
      ],
      "description": ""
  },
  "4794": {
      "prefix": "TaskVehicleEscort",
      "body": [
          "TaskVehicleEscort(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:Vehicle* targetVehicle}, ${4:int* mode}, ${5:float* speed}, ${6:int* drivingStyle}, ${7:float* minDistance}, ${8:int* p7}, ${9:float* noRoadsDistance})${0}"
      ],
      "description": "```\nMakes a ped follow the targetVehicle with <minDistance> in between.  \nnote: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.  \nMode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.  \n-1 = behind  \n0 = ahead  \n1 = left  \n2 = right  \n3 = back left  \n4 = back right  \nif the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.  \nDriving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/  \n```"
  },
  "4795": {
      "prefix": "TaskVehicleDriveWander",
      "body": [
          "TaskVehicleDriveWander(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:float* speed}, ${4:int* drivingStyle})${0}"
      ],
      "description": ""
  },
  "4796": {
      "prefix": "TaskVehicleFollowWaypointRecording",
      "body": [
          "TaskVehicleFollowWaypointRecording(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:char* WPRecording}, ${4:int* p3}, ${5:int* p4}, ${6:int* p5}, ${7:int* p6}, ${8:float* p7}, ${9:BOOL* p8}, ${10:float* p9})${0}"
      ],
      "description": "```\ntask_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)\np2 = Waypoint recording string (found in update\\update.rpf\\x64\\levels\\gta5\\waypointrec.rpf\np3 = 786468\np4 = 0\np5 = 16\np6 = -1 (angle?)\np7/8/9 = usually v3.zero\np10 = bool (repeat?)\np11 = 1073741824\n-khorio\n```"
  },
  "4797": {
      "prefix": "TaskVehicleHeliProtect",
      "body": [
          "TaskVehicleHeliProtect(${1:Ped* pilot}, ${2:Vehicle* vehicle}, ${3:Entity* entityToFollow}, ${4:float* targetSpeed}, ${5:int* p4}, ${6:float* radius}, ${7:int* altitude}, ${8:int* p7})${0}"
      ],
      "description": "```\npilot, vehicle and altitude are rather self-explanatory.  \np4: is unused variable in the function.  \nentityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.  \n'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.  \n'radius' isn't just \"stop within radius of X of target\" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.  \nNOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.  \nNOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.  \n```"
  },
  "4798": {
      "prefix": "TaskVehicleFollow",
      "body": [
          "TaskVehicleFollow(${1:Ped* driver}, ${2:Vehicle* vehicle}, ${3:Entity* targetEntity}, ${4:float* speed}, ${5:int* drivingStyle}, ${6:int* minDistance})${0}"
      ],
      "description": "```\nMakes a ped in a vehicle follow an entity (ped, vehicle, etc.)\ndrivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/\n```"
  },
  "4799": {
      "prefix": "TaskVehicleGotoNavmesh",
      "body": [
          "TaskVehicleGotoNavmesh(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* speed}, ${7:int* behaviorFlag}, ${8:float* stoppingRange})${0}"
      ],
      "description": "```\nDiffers from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other \"road laws\" into consideration.  \nWARNING:  \nA behaviorFlag value of 0 will result in a clunky, stupid driver!  \nRecommended settings:  \nspeed = 30.0f,  \nbehaviorFlag = 156,   \nstoppingRange = 5.0f;  \nIf you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.   \nIf using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an \"anti-stuck\" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.  \nEDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  \n```"
  },
  "4800": {
      "prefix": "TaskVehicleMission",
      "body": [
          "TaskVehicleMission(${1:Ped* driver}, ${2:Vehicle* vehicle}, ${3:Vehicle* vehicleTarget}, ${4:int* missionType}, ${5:float* p4}, ${6:Any* p5}, ${7:float* p6}, ${8:float* p7}, ${9:BOOL* DriveAgainstTraffic})${0}"
      ],
      "description": "```\nmissionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt\n```"
  },
  "4801": {
      "prefix": "TaskVehicleMissionCoorsTarget",
      "body": [
          "TaskVehicleMissionCoorsTarget(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:int* p5}, ${7:int* p6}, ${8:int* p7}, ${9:float* p8}, ${10:float* p9}, ${11:BOOL* DriveAgainstTraffic})${0}"
      ],
      "description": "See [`TASK_VEHICLE_MISSION`](#\\_0x659427E0EF36BCDE)."
  },
  "4802": {
      "prefix": "TaskVehicleMissionPedTarget",
      "body": [
          "TaskVehicleMissionPedTarget(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:Ped* pedTarget}, ${4:int* missionType}, ${5:float* maxSpeed}, ${6:int* drivingStyle}, ${7:float* minDistance}, ${8:float* p7}, ${9:BOOL* DriveAgainstTraffic})${0}"
      ],
      "description": "See [`TASK_VEHICLE_MISSION`](#\\_0x659427E0EF36BCDE)."
  },
  "4803": {
      "prefix": "TaskVehiclePark",
      "body": [
          "TaskVehiclePark(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:float* heading}, ${7:int* mode}, ${8:float* radius}, ${9:BOOL* keepEngineOn})${0}"
      ],
      "description": "```\nModes:  \n0 - ignore heading  \n1 - park forward  \n2 - park backwards  \nDepending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.  \nRadius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.  \n```"
  },
  "4804": {
      "prefix": "TaskVehiclePlayAnim",
      "body": [
          "TaskVehiclePlayAnim(${1:Vehicle* vehicle}, ${2:char* animationSet}, ${3:char* animationName})${0}"
      ],
      "description": "```\nMost probably plays a specific animation on vehicle. For example getting chop out of van etc...\nHere's how its used -\nTASK::TASK_VEHICLE_PLAY_ANIM(l_325, \"rcmnigel1b\", \"idle_speedo\");\nTASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], \"missfra0_chop_drhome\", \"InCar_GetOutofBack_Speedo\");\nFYI : Speedo is the name of van in which chop was put in the mission.\n```"
  },
  "4805": {
      "prefix": "TaskVehicleTempAction",
      "body": [
          "TaskVehicleTempAction(${1:Ped* driver}, ${2:Vehicle* vehicle}, ${3:int* action}, ${4:int* time})${0}"
      ],
      "description": "```\n'1 - brake\n'3 - brake + reverse\n'4 - turn left 90 + braking\n'5 - turn right 90 + braking\n'6 - brake strong (handbrake?) until time ends\n'7 - turn left + accelerate\n'7 - turn right + accelerate\n'9 - weak acceleration\n'10 - turn left + restore wheel pos to center in the end\n'11 - turn right + restore wheel pos to center in the end\n'13 - turn left + go reverse\n'14 - turn left + go reverse\n'16 - crash the game after like 2 seconds :)\n'17 - keep actual state, game crashed after few tries\n'18 - game crash\n'19 - strong brake + turn left/right\n'20 - weak brake + turn left then turn right\n'21 - weak brake + turn right then turn left\n'22 - brake + reverse\n'23 - accelerate fast\n'24 - brake\n'25 - brake turning left then when almost stopping it turns left more\n'26 - brake turning right then when almost stopping it turns right more\n'27 - brake until car stop or until time ends\n'28 - brake + strong reverse acceleration\n'30 - performs a burnout (brake until stop + brake and accelerate)\n'31 - accelerate + handbrake\n'32 - accelerate very strong\nSeems to be this:\nWorks on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), \"time\" will work, otherwise the task will be performed forever until tasked with something else\n```"
  },
  "4806": {
      "prefix": "TaskVehicleShootAtCoord",
      "body": [
          "TaskVehicleShootAtCoord(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* p4})${0}"
      ],
      "description": ""
  },
  "4807": {
      "prefix": "TaskWanderInArea",
      "body": [
          "TaskWanderInArea(${1:Ped* ped}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* radius}, ${6:float* minimalLength}, ${7:float* timeBetweenWalks})${0}"
      ],
      "description": ""
  },
  "4808": {
      "prefix": "TaskVehicleShootAtPed",
      "body": [
          "TaskVehicleShootAtPed(${1:Ped* ped}, ${2:Ped* target}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "4809": {
      "prefix": "TaskWanderSpecific",
      "body": [
          "TaskWanderSpecific(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "4810": {
      "prefix": "TaskWanderStandard",
      "body": [
          "TaskWanderStandard(${1:Ped* ped}, ${2:float* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nMakes ped walk around the area.  \nset p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.  \n```"
  },
  "4811": {
      "prefix": "TaskWarpPedIntoVehicle",
      "body": [
          "TaskWarpPedIntoVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* seat})${0}"
      ],
      "description": "```\nSeat Numbers  \n-------------------------------  \nDriver = -1  \nAny = -2  \nLeft-Rear = 1  \nRight-Front = 0  \nRight-Rear = 2  \nExtra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)  \n```"
  },
  "4812": {
      "prefix": "TaskWrithe",
      "body": [
          "TaskWrithe(${1:Ped* ped}, ${2:Ped* target}, ${3:int* time}, ${4:int* p3})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```"
  },
  "4813": {
      "prefix": "UncuffPed",
      "body": [
          "UncuffPed(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4814": {
      "prefix": "UpdateTaskAimGunScriptedTarget",
      "body": [
          "UpdateTaskAimGunScriptedTarget(${1:Ped* p0}, ${2:Ped* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "4815": {
      "prefix": "UpdateTaskHandsUpDuration",
      "body": [
          "UpdateTaskHandsUpDuration(${1:Ped* ped}, ${2:int* duration})${0}"
      ],
      "description": ""
  },
  "4816": {
      "prefix": "UpdateTaskSweepAimEntity",
      "body": [
          "UpdateTaskSweepAimEntity(${1:Ped* ped}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4817": {
      "prefix": "UpdateTaskSweepAimPosition",
      "body": [
          "UpdateTaskSweepAimPosition(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "4818": {
      "prefix": "UseWaypointRecordingAsAssistedMovementRoute",
      "body": [
          "UseWaypointRecordingAsAssistedMovementRoute(${1:char* name}, ${2:BOOL* p1}, ${3:float* p2}, ${4:float* p3})${0}"
      ],
      "description": ""
  },
  "4819": {
      "prefix": "VehicleWaypointPlaybackOverrideSpeed",
      "body": [
          "VehicleWaypointPlaybackOverrideSpeed(${1:Vehicle* vehicle}, ${2:float* speed})${0}"
      ],
      "description": ""
  },
  "4820": {
      "prefix": "VehicleWaypointPlaybackPause",
      "body": [
          "VehicleWaypointPlaybackPause(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4821": {
      "prefix": "VehicleWaypointPlaybackUseDefaultSpeed",
      "body": [
          "VehicleWaypointPlaybackUseDefaultSpeed(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4822": {
      "prefix": "VehicleWaypointPlaybackResume",
      "body": [
          "VehicleWaypointPlaybackResume(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4823": {
      "prefix": "WaypointPlaybackGetIsPaused",
      "body": [
          "WaypointPlaybackGetIsPaused(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4824": {
      "prefix": "WaypointPlaybackOverrideSpeed",
      "body": [
          "WaypointPlaybackOverrideSpeed(${1:Any* p0}, ${2:float* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "4825": {
      "prefix": "WaypointPlaybackPause",
      "body": [
          "WaypointPlaybackPause(${1:Any* p0}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "4826": {
      "prefix": "WaypointPlaybackResume",
      "body": [
          "WaypointPlaybackResume(${1:Any* p0}, ${2:BOOL* p1}, ${3:Any* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4827": {
      "prefix": "WaypointPlaybackStartAimingAtPed",
      "body": [
          "WaypointPlaybackStartAimingAtPed(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "4828": {
      "prefix": "WaypointPlaybackStartAimingAtCoord",
      "body": [
          "WaypointPlaybackStartAimingAtCoord(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": ""
  },
  "4829": {
      "prefix": "WaypointPlaybackStartShootingAtCoord",
      "body": [
          "WaypointPlaybackStartShootingAtCoord(${1:Any* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:BOOL* p4}, ${6:Any* p5})${0}"
      ],
      "description": ""
  },
  "4830": {
      "prefix": "WaypointPlaybackStartShootingAtPed",
      "body": [
          "WaypointPlaybackStartShootingAtPed(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL* p2}, ${4:Any* p3})${0}"
      ],
      "description": ""
  },
  "4831": {
      "prefix": "WaypointPlaybackStopAimingOrShooting",
      "body": [
          "WaypointPlaybackStopAimingOrShooting(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4832": {
      "prefix": "WaypointPlaybackUseDefaultSpeed",
      "body": [
          "WaypointPlaybackUseDefaultSpeed(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "4833": {
      "prefix": "WaypointRecordingGetClosestWaypoint",
      "body": [
          "WaypointRecordingGetClosestWaypoint(${1:char* name}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:int* point})${0}"
      ],
      "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\n```"
  },
  "4834": {
      "prefix": "WaypointRecordingGetCoord",
      "body": [
          "WaypointRecordingGetCoord(${1:char* name}, ${2:int* point}, ${3:Vector3* coord})${0}"
      ],
      "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\n```"
  },
  "4835": {
      "prefix": "WaypointRecordingGetNumPoints",
      "body": [
          "WaypointRecordingGetNumPoints(${1:char* name}, ${2:int* points})${0}"
      ],
      "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\n```"
  },
  "4836": {
      "prefix": "WaypointRecordingGetSpeedAtPoint",
      "body": [
          "WaypointRecordingGetSpeedAtPoint(${1:char* name}, ${2:int* point})${0}"
      ],
      "description": ""
  },
  "4837": {
      "prefix": "GetDeepOceanScaler",
      "body": [
          "GetDeepOceanScaler()${0}"
      ],
      "description": "```\nGets the aggressiveness factor of the ocean waves.  \n```"
  },
  "4838": {
      "prefix": "AddCurrentRise",
      "body": [
          "AddCurrentRise(${1:float* xLow}, ${2:float* yLow}, ${3:float* xHigh}, ${4:float* yHigh}, ${5:float* height})${0}"
      ],
      "description": "```\nMost likely ADD_CURRENT_*\n```"
  },
  "4839": {
      "prefix": "GetWaterHeight",
      "body": [
          "GetWaterHeight(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* height})${0}"
      ],
      "description": "```\nThis function set height to the value of z-axis of the water surface.  \nThis function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)  \nnote: seems to return true when you are in water  \n```"
  },
  "4840": {
      "prefix": "GetWaterHeightNoWaves",
      "body": [
          "GetWaterHeightNoWaves(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* height})${0}"
      ],
      "description": ""
  },
  "4841": {
      "prefix": "ModifyWater",
      "body": [
          "ModifyWater(${1:float* x}, ${2:float* y}, ${3:float* radius}, ${4:float* height})${0}"
      ],
      "description": "```\nSets the water height for a given position and radius.  \n```"
  },
  "4842": {
      "prefix": "RemoveCurrentRise",
      "body": [
          "RemoveCurrentRise(${1:int* p0})${0}"
      ],
      "description": "```\np0 is the handle returned from _0xFDBF4CDBC07E1706  \n```"
  },
  "4843": {
      "prefix": "ResetDeepOceanScaler",
      "body": [
          "ResetDeepOceanScaler()${0}"
      ],
      "description": "```\nSets the waves intensity back to original (1.0 in most cases). \n```"
  },
  "4844": {
      "prefix": "TestProbeAgainstAllWater",
      "body": [
          "TestProbeAgainstAllWater(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7})${0}"
      ],
      "description": ""
  },
  "4845": {
      "prefix": "TestProbeAgainstWater",
      "body": [
          "TestProbeAgainstWater(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:Vector3* result})${0}"
      ],
      "description": ""
  },
  "4846": {
      "prefix": "SetDeepOceanScaler",
      "body": [
          "SetDeepOceanScaler(${1:float* intensity})${0}"
      ],
      "description": "```\nSets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.  \nWorks only ~200 meters around the player.  \n```"
  },
  "4847": {
      "prefix": "TestVerticalProbeAgainstAllWater",
      "body": [
          "TestVerticalProbeAgainstAllWater(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:Any* p3}, ${5:float* height})${0}"
      ],
      "description": ""
  },
  "4848": {
      "prefix": "AddAmmoToPedByType",
      "body": [
          "AddAmmoToPedByType(${1:Ped* ped}, ${2:Hash* ammoType}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4849": {
      "prefix": "AddAmmoToPed",
      "body": [
          "AddAmmoToPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4850": {
      "prefix": "CanUseWeaponOnParachute",
      "body": [
          "CanUseWeaponOnParachute(${1:Hash* weaponHash})${0}"
      ],
      "description": "```\nthis returns if you can use the weapon while using a parachute  \n```"
  },
  "4851": {
      "prefix": "ClearEntityLastWeaponDamage",
      "body": [
          "ClearEntityLastWeaponDamage(${1:Entity* entity})${0}"
      ],
      "description": ""
  },
  "4852": {
      "prefix": "ClearPedLastWeaponDamage",
      "body": [
          "ClearPedLastWeaponDamage(${1:Ped* ped})${0}"
      ],
      "description": "Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead."
  },
  "4853": {
      "prefix": "CreateAirDefenseSphere",
      "body": [
          "CreateAirDefenseSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:Hash* weaponHash})${0}"
      ],
      "description": "Both coordinates are from objects in the decompiled scripts.\n\nNative related to [\\_0xECDC202B25E5CF48](#\\_0xECDC202B25E5CF48) p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts."
  },
  "4854": {
      "prefix": "CreateAirDefenseArea",
      "body": [
          "CreateAirDefenseArea(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7}, ${9:float* p8}, ${10:float* p9}, ${11:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4855": {
      "prefix": "DoesAirDefenseZoneExist",
      "body": [
          "DoesAirDefenseZoneExist(${1:int* zoneId})${0}"
      ],
      "description": ""
  },
  "4856": {
      "prefix": "CreateWeaponObject",
      "body": [
          "CreateWeaponObject(${1:Hash* weaponHash}, ${2:int* ammoCount}, ${3:float* x}, ${4:float* y}, ${5:float* z}, ${6:BOOL* showWorldModel}, ${7:float* scale}, ${8:Any* p7})${0}"
      ],
      "description": "```\nNow has 8 params.  \n```\n\n```\nNativeDB Added Parameter 9: Any p8\nNativeDB Added Parameter 10: Any p9\n```"
  },
  "4857": {
      "prefix": "EnableLaserSightRendering",
      "body": [
          "EnableLaserSightRendering(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nEnables laser sight on any weapon.  \nIt doesn't work. Neither on tick nor OnKeyDown  \n```"
  },
  "4858": {
      "prefix": "DoesWeaponTakeWeaponComponent",
      "body": [
          "DoesWeaponTakeWeaponComponent(${1:Hash* weaponHash}, ${2:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4859": {
      "prefix": "ExplodeProjectiles",
      "body": [
          "ExplodeProjectiles(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nWEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);  \n```"
  },
  "4860": {
      "prefix": "FireAirDefenseWeapon",
      "body": [
          "FireAirDefenseWeapon(${1:int* zoneId}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "4861": {
      "prefix": "GetAmmoInClip",
      "body": [
          "GetAmmoInClip(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4862": {
      "prefix": "GetAmmoInPedWeapon",
      "body": [
          "GetAmmoInPedWeapon(${1:Ped* ped}, ${2:Hash* weaponhash})${0}"
      ],
      "description": "```\nWEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)  \nFrom decompiled scripts  \nReturns total ammo in weapon  \nGTALua Example :  \nnatives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)  \n```"
  },
  "4863": {
      "prefix": "GetBestPedWeapon",
      "body": [
          "GetBestPedWeapon(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np1 is always 0 in the scripts.  \n```"
  },
  "4864": {
      "prefix": "GetCurrentPedVehicleWeapon",
      "body": [
          "GetCurrentPedVehicleWeapon(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4865": {
      "prefix": "GetCurrentPedWeaponEntityIndex",
      "body": [
          "GetCurrentPedWeaponEntityIndex(${1:Ped* ped})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "4866": {
      "prefix": "GetCurrentPedWeapon",
      "body": [
          "GetCurrentPedWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nThe return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.  \np2 seems to be 1 most of the time; and is not implemented.\n```"
  },
  "4867": {
      "prefix": "GetLockonDistanceOfCurrentPedWeapon",
      "body": [
          "GetLockonDistanceOfCurrentPedWeapon(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4868": {
      "prefix": "GetIsPedGadgetEquipped",
      "body": [
          "GetIsPedGadgetEquipped(${1:Ped* ped}, ${2:Hash* gadgetHash})${0}"
      ],
      "description": "```\ngadgetHash - was always 0xFBAB5776 (\"GADGET_PARACHUTE\").  \n```"
  },
  "4869": {
      "prefix": "GetMaxAmmo",
      "body": [
          "GetMaxAmmo(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4870": {
      "prefix": "GetMaxAmmoByType",
      "body": [
          "GetMaxAmmoByType(${1:Ped* ped}, ${2:Hash* ammoType}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4871": {
      "prefix": "GetMaxAmmoInClip",
      "body": [
          "GetMaxAmmoInClip(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np2 is mostly 1 in the scripts.  \n```"
  },
  "4872": {
      "prefix": "GetMaxRangeOfCurrentPedWeapon",
      "body": [
          "GetMaxRangeOfCurrentPedWeapon(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4873": {
      "prefix": "GetPedAmmoTypeFromWeapon",
      "body": [
          "GetPedAmmoTypeFromWeapon(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": "```\nReturns the current ammo type of the specified ped's specified weapon.\n\nMkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.\n\nUse 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.\n```"
  },
  "4874": {
      "prefix": "GetPedAmmoByType",
      "body": [
          "GetPedAmmoByType(${1:Ped* ped}, ${2:Hash* ammoType})${0}"
      ],
      "description": ""
  },
  "4875": {
      "prefix": "GetPedLastWeaponImpactCoord",
      "body": [
          "GetPedLastWeaponImpactCoord(${1:Ped* ped}, ${2:Vector3* coords})${0}"
      ],
      "description": "```\nPass ped. Pass address of Vector3.  \nThe coord will be put into the Vector3.  \nThe return will determine whether there was a coord found or not.  \n```"
  },
  "4876": {
      "prefix": "GetPedWeaponTintIndex",
      "body": [
          "GetPedWeaponTintIndex(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4877": {
      "prefix": "GetPedAmmoTypeFromWeapon2",
      "body": [
          "GetPedAmmoTypeFromWeapon2(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": "```\nReturns the base/default ammo type of the specified ped's specified weapon.\n\nUse GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)\n```"
  },
  "4878": {
      "prefix": "GetPedWeapontypeInSlot",
      "body": [
          "GetPedWeapontypeInSlot(${1:Ped* ped}, ${2:Hash* weaponSlot})${0}"
      ],
      "description": ""
  },
  "4879": {
      "prefix": "GetPedWeaponLiveryColor",
      "body": [
          "GetPedWeaponLiveryColor(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* camoComponentHash})${0}"
      ],
      "description": ""
  },
  "4880": {
      "prefix": "GetWeaponClipSize",
      "body": [
          "GetWeaponClipSize(${1:Hash* weaponHash})${0}"
      ],
      "description": "```\n// Returns the size of the default weapon component clip.  \nUse it like this:  \nchar cClipSize[32];  \nHash cur;  \nif (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))  \n{  \n    if (WEAPON::IS_WEAPON_VALID(cur))  \n    {  \n        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);  \n        sprintf_s(cClipSize, \"ClipSize: %.d\", iClipSize);  \n        vDrawString(cClipSize, 0.5f, 0.5f);  \n    }  \n}  \n```"
  },
  "4881": {
      "prefix": "GetSelectedPedWeapon",
      "body": [
          "GetSelectedPedWeapon(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4882": {
      "prefix": "GetWeaponComponentHudStats",
      "body": [
          "GetWeaponComponentHudStats(${1:Hash* componentHash}, ${2:int* outData})${0}"
      ],
      "description": ""
  },
  "4883": {
      "prefix": "GetWeaponComponentTypeModel",
      "body": [
          "GetWeaponComponentTypeModel(${1:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4884": {
      "prefix": "GetWeaponComponentVariantExtraComponentModel",
      "body": [
          "GetWeaponComponentVariantExtraComponentModel(${1:Hash* componentHash}, ${2:int* extraComponentIndex})${0}"
      ],
      "description": ""
  },
  "4885": {
      "prefix": "GetWeaponComponentVariantExtraComponentCount",
      "body": [
          "GetWeaponComponentVariantExtraComponentCount(${1:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4886": {
      "prefix": "GetWeaponDamageType",
      "body": [
          "GetWeaponDamageType(${1:Hash* weaponHash})${0}"
      ],
      "description": "```\n0=unknown (or incorrect weaponHash)  \n1= no damage (flare,snowball, petrolcan)  \n2=melee  \n3=bullet  \n4=force ragdoll fall  \n5=explosive (RPG, Railgun, grenade)  \n6=fire(molotov)  \n8=fall(WEAPON_HELI_CRASH)  \n10=electric  \n11=barbed wire  \n12=extinguisher  \n13=gas  \n14=water cannon(WEAPON_HIT_BY_WATER_CANNON)  \n```"
  },
  "4887": {
      "prefix": "GetWeaponDamage",
      "body": [
          "GetWeaponDamage(${1:Hash* weaponHash}, ${2:Hash* componentHash})${0}"
      ],
      "description": "This native does not return damages of weapons from the melee and explosive group."
  },
  "4888": {
      "prefix": "GetWeaponHudStats",
      "body": [
          "GetWeaponHudStats(${1:Hash* weaponHash}, ${2:Any* outData})${0}"
      ],
      "description": "```\n// members should be aligned to 8 bytes by default but it's best to use alignas here, just to be sure  \nstruct WeaponHudStatsData  \n{  \n\talignas(8) uint8_t hudDamage; // 0x0000  \n\talignas(8) uint8_t hudSpeed; // 0x0008  \n\talignas(8) uint8_t hudCapacity; // 0x0010  \n\talignas(8) uint8_t hudAccuracy; // 0x0018  \n\talignas(8) uint8_t hudRange; // 0x0020  \n};  \nUsage:  \nWeaponHudStatsData data;  \nif (GET_WEAPON_HUD_STATS(weaponHash, (Any*)&data))  \n{  \n    // uint8_t damagePercentage = data.hudDamage etc...  \n}  \n```"
  },
  "4889": {
      "prefix": "GetWeaponObjectFromPed",
      "body": [
          "GetWeaponObjectFromPed(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nDrops the current weapon and returns the object  \nUnknown behavior when unarmed.  \n```"
  },
  "4890": {
      "prefix": "GetWeaponObjectTintIndex",
      "body": [
          "GetWeaponObjectTintIndex(${1:Object* weapon})${0}"
      ],
      "description": ""
  },
  "4891": {
      "prefix": "GetWeaponObjectLiveryColor",
      "body": [
          "GetWeaponObjectLiveryColor(${1:Object* weaponObject}, ${2:Hash* camoComponentHash})${0}"
      ],
      "description": ""
  },
  "4892": {
      "prefix": "GetWeaponTimeBetweenShots",
      "body": [
          "GetWeaponTimeBetweenShots(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4893": {
      "prefix": "GetWeaponTintCount",
      "body": [
          "GetWeaponTintCount(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4894": {
      "prefix": "GetWeapontypeGroup",
      "body": [
          "GetWeapontypeGroup(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4895": {
      "prefix": "GetWeapontypeModel",
      "body": [
          "GetWeapontypeModel(${1:Hash* weaponHash})${0}"
      ],
      "description": "```\nReturns the model of any weapon.  \nCan also take an ammo hash?  \nsub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));  \n```"
  },
  "4896": {
      "prefix": "GiveDelayedWeaponToPed",
      "body": [
          "GiveDelayedWeaponToPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammoCount}, ${4:BOOL* bForceInHand})${0}"
      ],
      "description": "```\nGives a weapon to PED with a delay, example:\nWEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"WEAPON_PISTOL\"), 1000, false)\n```"
  },
  "4897": {
      "prefix": "GetWeapontypeSlot",
      "body": [
          "GetWeapontypeSlot(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4898": {
      "prefix": "GiveWeaponComponentToPed",
      "body": [
          "GiveWeaponComponentToPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4899": {
      "prefix": "GiveLoadoutToPed",
      "body": [
          "GiveLoadoutToPed(${1:Ped* ped}, ${2:Hash* loadoutHash})${0}"
      ],
      "description": ""
  },
  "4900": {
      "prefix": "GiveWeaponObjectToPed",
      "body": [
          "GiveWeaponObjectToPed(${1:Object* weaponObject}, ${2:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4901": {
      "prefix": "GiveWeaponComponentToWeaponObject",
      "body": [
          "GiveWeaponComponentToWeaponObject(${1:Object* weaponObject}, ${2:Hash* addonHash})${0}"
      ],
      "description": "```\naddonHash:\n(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)\n${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}\n```"
  },
  "4902": {
      "prefix": "GiveWeaponToPed",
      "body": [
          "GiveWeaponToPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammoCount}, ${4:BOOL* isHidden}, ${5:BOOL* bForceInHand})${0}"
      ],
      "description": ""
  },
  "4903": {
      "prefix": "HasEntityBeenDamagedByWeapon",
      "body": [
          "HasEntityBeenDamagedByWeapon(${1:Entity* entity}, ${2:Hash* weaponHash}, ${3:int* weaponType})${0}"
      ],
      "description": "```\nIt determines what weapons caused damage:\nIf you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0\nIf you want to define any melee weapon, second parameter=0, third parameter=1.\nIf you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.\n```"
  },
  "4904": {
      "prefix": "HasPedBeenDamagedByWeapon",
      "body": [
          "HasPedBeenDamagedByWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* weaponType})${0}"
      ],
      "description": "```\nIt determines what weapons caused damage:  \nIf you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0  \nIf you want to define any melee weapon, second parameter=0, third parameter=1.  \nIf you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.  \n```"
  },
  "4905": {
      "prefix": "HasPedGotWeapon",
      "body": [
          "HasPedGotWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np2 should be FALSE, otherwise it seems to always return FALSE  \nBool does not check if the weapon is current equipped, unfortunately.  \n```"
  },
  "4906": {
      "prefix": "HasPedGotWeaponComponent",
      "body": [
          "HasPedGotWeaponComponent(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4907": {
      "prefix": "HasVehicleGotProjectileAttached",
      "body": [
          "HasVehicleGotProjectileAttached(${1:Ped* driver}, ${2:Vehicle* vehicle}, ${3:Hash* weaponHash}, ${4:Any* p3})${0}"
      ],
      "description": "```\nThird Parameter = unsure, but pretty sure it is weapon hash  \n--> get_hash_key(\"weapon_stickybomb\")  \nFourth Parameter = unsure, almost always -1  \n```"
  },
  "4908": {
      "prefix": "HasWeaponGotWeaponComponent",
      "body": [
          "HasWeaponGotWeaponComponent(${1:Object* weapon}, ${2:Hash* addonHash})${0}"
      ],
      "description": ""
  },
  "4909": {
      "prefix": "HidePedWeaponForScriptedCutscene",
      "body": [
          "HidePedWeaponForScriptedCutscene(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nHides the players weapon during a cutscene.  \n```"
  },
  "4910": {
      "prefix": "HasWeaponAssetLoaded",
      "body": [
          "HasWeaponAssetLoaded(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4911": {
      "prefix": "IsFlashLightOn",
      "body": [
          "IsFlashLightOn(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4912": {
      "prefix": "IsAnyAirDefenseZoneInsideSphere",
      "body": [
          "IsAnyAirDefenseZoneInsideSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:int* outZoneId})${0}"
      ],
      "description": ""
  },
  "4913": {
      "prefix": "IsPedArmed",
      "body": [
          "IsPedArmed(${1:Ped* ped}, ${2:int* typeFlags})${0}"
      ],
      "description": "Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.\n\n| Bit value | Effect            |\n|-----------|-------------------|\n| 1         | Melee weapons     |\n| 2         | Explosive weapons |\n| 4         | Any other weapons |\n\nNot specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons."
  },
  "4914": {
      "prefix": "IsPedWeaponComponentActive",
      "body": [
          "IsPedWeaponComponentActive(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4915": {
      "prefix": "IsPedCurrentWeaponSilenced",
      "body": [
          "IsPedCurrentWeaponSilenced(${1:Ped* ped})${0}"
      ],
      "description": "```\nThis native returns a true or false value.  \nPed ped = The ped whose weapon you want to check.  \n```"
  },
  "4916": {
      "prefix": "IsWeaponValid",
      "body": [
          "IsWeaponValid(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4917": {
      "prefix": "IsPedWeaponReadyToShoot",
      "body": [
          "IsPedWeaponReadyToShoot(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4918": {
      "prefix": "MakePedReload",
      "body": [
          "MakePedReload(${1:Ped* ped})${0}"
      ],
      "description": "Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload."
  },
  "4919": {
      "prefix": "RemoveAirDefenseZone",
      "body": [
          "RemoveAirDefenseZone(${1:int* zoneId})${0}"
      ],
      "description": ""
  },
  "4920": {
      "prefix": "RemoveAllPedWeapons",
      "body": [
          "RemoveAllPedWeapons(${1:Ped* ped}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nsetting the last params to false it does that same so I would suggest its not a toggle  \n```"
  },
  "4921": {
      "prefix": "RefillAmmoInstantly",
      "body": [
          "RefillAmmoInstantly(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4922": {
      "prefix": "RemoveAllProjectilesOfType",
      "body": [
          "RemoveAllProjectilesOfType(${1:Hash* weaponHash}, ${2:BOOL* explode})${0}"
      ],
      "description": "If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped."
  },
  "4923": {
      "prefix": "RemoveAllAirDefenseZones",
      "body": [
          "RemoveAllAirDefenseZones()${0}"
      ],
      "description": ""
  },
  "4924": {
      "prefix": "RemoveWeaponAsset",
      "body": [
          "RemoveWeaponAsset(${1:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4925": {
      "prefix": "RemoveWeaponComponentFromPed",
      "body": [
          "RemoveWeaponComponentFromPed(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* componentHash})${0}"
      ],
      "description": ""
  },
  "4926": {
      "prefix": "RemoveWeaponComponentFromWeaponObject",
      "body": [
          "RemoveWeaponComponentFromWeaponObject(${1:Any* p0}, ${2:Any* p1})${0}"
      ],
      "description": ""
  },
  "4927": {
      "prefix": "RemoveWeaponFromPed",
      "body": [
          "RemoveWeaponFromPed(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": "```\nThis native removes a specified weapon from your selected ped.  \nWeapon Hashes: pastebin.com/0wwDZgkF  \nExample:  \nC#:  \nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);  \nC++:  \nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);  \nThe code above removes the knife from the player.  \n```"
  },
  "4928": {
      "prefix": "RequestWeaponAsset",
      "body": [
          "RequestWeaponAsset(${1:Hash* weaponHash}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nNearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.  \nREQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);  \n```"
  },
  "4929": {
      "prefix": "SetAmmoInClip",
      "body": [
          "SetAmmoInClip(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4930": {
      "prefix": "RequestWeaponHighDetailModel",
      "body": [
          "RequestWeaponHighDetailModel(${1:Entity* weaponObject})${0}"
      ],
      "description": ""
  },
  "4931": {
      "prefix": "SetCanPedEquipWeapon",
      "body": [
          "SetCanPedEquipWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* toggle})${0}"
      ],
      "description": "Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel."
  },
  "4932": {
      "prefix": "SetCanPedEquipAllWeapons",
      "body": [
          "SetCanPedEquipAllWeapons(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Does the same as [`_SET_CAN_PED_SELECT_WEAPON`](https://runtime.fivem.net/doc/natives/#\\_0xB4771B9AAF4E68E4) except for all weapons."
  },
  "4933": {
      "prefix": "SetCurrentPedWeapon",
      "body": [
          "SetCurrentPedWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:BOOL* bForceInHand})${0}"
      ],
      "description": ""
  },
  "4934": {
      "prefix": "SetCurrentPedVehicleWeapon",
      "body": [
          "SetCurrentPedVehicleWeapon(${1:Ped* ped}, ${2:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4935": {
      "prefix": "SetFlashLightEnabled",
      "body": [
          "SetFlashLightEnabled(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Enables/disables flashlight on ped's weapon.\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "4936": {
      "prefix": "SetPedAmmo",
      "body": [
          "SetPedAmmo(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* ammo})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 4: BOOL p3\n```"
  },
  "4937": {
      "prefix": "SetFlashLightFadeDistance",
      "body": [
          "SetFlashLightFadeDistance(${1:float* distance})${0}"
      ],
      "description": ""
  },
  "4938": {
      "prefix": "SetPedAmmoByType",
      "body": [
          "SetPedAmmoByType(${1:Ped* ped}, ${2:Hash* ammoType}, ${3:int* ammo})${0}"
      ],
      "description": ""
  },
  "4939": {
      "prefix": "SetPedAmmoToDrop",
      "body": [
          "SetPedAmmoToDrop(${1:Ped* ped}, ${2:int* ammo})${0}"
      ],
      "description": ""
  },
  "4940": {
      "prefix": "SetPedChanceOfFiringBlanks",
      "body": [
          "SetPedChanceOfFiringBlanks(${1:Ped* ped}, ${2:float* xBias}, ${3:float* yBias})${0}"
      ],
      "description": ""
  },
  "4941": {
      "prefix": "SetPedCurrentWeaponVisible",
      "body": [
          "SetPedCurrentWeaponVisible(${1:Ped* ped}, ${2:BOOL* visible}, ${3:BOOL* deselectWeapon}, ${4:BOOL* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\nHas 5 parameters since latest patches.  \n```"
  },
  "4942": {
      "prefix": "SetPedDropsInventoryWeapon",
      "body": [
          "SetPedDropsInventoryWeapon(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:float* xOffset}, ${4:float* yOffset}, ${5:float* zOffset}, ${6:int* ammoCount})${0}"
      ],
      "description": ""
  },
  "4943": {
      "prefix": "SetPedDropsWeapon",
      "body": [
          "SetPedDropsWeapon(${1:Ped* ped})${0}"
      ],
      "description": ""
  },
  "4944": {
      "prefix": "SetPedDropsWeaponsWhenDead",
      "body": [
          "SetPedDropsWeaponsWhenDead(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4945": {
      "prefix": "SetPedGadget",
      "body": [
          "SetPedGadget(${1:Ped* ped}, ${2:Hash* gadgetHash}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np1/gadgetHash was always 0xFBAB5776 (\"GADGET_PARACHUTE\").  \np2 is always true.  \n```"
  },
  "4946": {
      "prefix": "SetPedInfiniteAmmoClip",
      "body": [
          "SetPedInfiniteAmmoClip(${1:Ped* ped}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4947": {
      "prefix": "SetPedInfiniteAmmo",
      "body": [
          "SetPedInfiniteAmmo(${1:Ped* ped}, ${2:BOOL* toggle}, ${3:Hash* weaponHash})${0}"
      ],
      "description": ""
  },
  "4948": {
      "prefix": "SetPedShootOrdnanceWeapon",
      "body": [
          "SetPedShootOrdnanceWeapon(${1:Ped* ped}, ${2:float* p1})${0}"
      ],
      "description": "```\nReturns handle of the projectile.\n```"
  },
  "4949": {
      "prefix": "SetPedWeaponLiveryColor",
      "body": [
          "SetPedWeaponLiveryColor(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:Hash* camoComponentHash}, ${4:int* colorIndex})${0}"
      ],
      "description": ""
  },
  "4950": {
      "prefix": "SetPedWeaponTintIndex",
      "body": [
          "SetPedWeaponTintIndex(${1:Ped* ped}, ${2:Hash* weaponHash}, ${3:int* tintIndex})${0}"
      ],
      "description": "```\ntintIndex can be the following:\n0 - Normal\n1 - Green\n2 - Gold\n3 - Pink\n4 - Army\n5 - LSPD\n6 - Orange\n7 - Platinum\n```"
  },
  "4951": {
      "prefix": "SetPlayerAirDefenseZoneFlag",
      "body": [
          "SetPlayerAirDefenseZoneFlag(${1:Player* player}, ${2:int* zoneId}, ${3:BOOL* enable})${0}"
      ],
      "description": ""
  },
  "4952": {
      "prefix": "SetPickupAmmoAmountScaler",
      "body": [
          "SetPickupAmmoAmountScaler(${1:float* p0})${0}"
      ],
      "description": ""
  },
  "4953": {
      "prefix": "SetWeaponDamageModifierThisFrame",
      "body": [
          "SetWeaponDamageModifierThisFrame(${1:Hash* weaponHash}, ${2:float* damageMultiplier})${0}"
      ],
      "description": "Changes the weapon damage output by the given multiplier value. Must be run every frame."
  },
  "4954": {
      "prefix": "SetWeaponAnimationOverride",
      "body": [
          "SetWeaponAnimationOverride(${1:Ped* ped}, ${2:Hash* animStyle})${0}"
      ],
      "description": "```\nChanges the selected ped aiming animation style.   \nNote : You must use GET_HASH_KEY!  \nStrings to use with GET_HASH_KEY :  \n\t\"Ballistic\",  \n\t\"Default\",  \n\t\"Fat\",  \n\t\"Female\",  \n\t\"FirstPerson\",  \n\t\"FirstPersonAiming\",  \n\t\"FirstPersonFranklin\",  \n\t\"FirstPersonFranklinAiming\",  \n\t\"FirstPersonFranklinRNG\",  \n\t\"FirstPersonFranklinScope\",  \n\t\"FirstPersonMPFemale\",  \n\t\"FirstPersonMichael\",  \n\t\"FirstPersonMichaelAiming\",  \n\t\"FirstPersonMichaelRNG\",  \n\t\"FirstPersonMichaelScope\",  \n\t\"FirstPersonRNG\",  \n\t\"FirstPersonScope\",  \n\t\"FirstPersonTrevor\",  \n\t\"FirstPersonTrevorAiming\",  \n\t\"FirstPersonTrevorRNG\",  \n\t\"FirstPersonTrevorScope\",  \n\t\"Franklin\",  \n\t\"Gang\",  \n\t\"Gang1H\",  \n\t\"GangFemale\",  \n\t\"Hillbilly\",  \n\t\"MP_F_Freemode\",  \n\t\"Michael\",  \n\t\"SuperFat\",  \n\t\"Trevor\"  \n```"
  },
  "4955": {
      "prefix": "SetWeaponExplosionRadiusMultiplier",
      "body": [
          "SetWeaponExplosionRadiusMultiplier(${1:Hash* weaponHash}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "4956": {
      "prefix": "SetWeaponObjectTintIndex",
      "body": [
          "SetWeaponObjectTintIndex(${1:Object* weapon}, ${2:int* tintIndex})${0}"
      ],
      "description": ""
  },
  "4957": {
      "prefix": "SetWeaponObjectLiveryColor",
      "body": [
          "SetWeaponObjectLiveryColor(${1:Object* weaponObject}, ${2:Hash* camoComponentHash}, ${3:int* colorIndex})${0}"
      ],
      "description": ""
  },
  "4958": {
      "prefix": "ClearPopscheduleOverrideVehicleModel",
      "body": [
          "ClearPopscheduleOverrideVehicleModel(${1:int* scheduleId})${0}"
      ],
      "description": "```\nOnly used once in the decompiled scripts. Seems to be related to scripted vehicle generators.  \nModified example from \"am_imp_exp.c4\", line 6418:  \n/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));  \netc.  \n*/  \nSTREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);  \nZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);  \n```"
  },
  "4959": {
      "prefix": "GetHashOfMapAreaAtCoords",
      "body": [
          "GetHashOfMapAreaAtCoords(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nReturns a hash representing which part of the map the given coords are located.  \nPossible return values:  \n(Hash of) city -> -289320599  \n(Hash of) countryside -> 2072609373  \nC# Example :  \nPed player = Game.Player.Character;  \nHash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);  \n```"
  },
  "4960": {
      "prefix": "GetZoneAtCoords",
      "body": [
          "GetZoneAtCoords(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": ""
  },
  "4961": {
      "prefix": "GetNameOfZone",
      "body": [
          "GetNameOfZone(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nAIRP = Los Santos International Airport  \nALAMO = Alamo Sea  \nALTA = Alta  \nARMYB = Fort Zancudo  \nBANHAMC = Banham Canyon Dr  \nBANNING = Banning  \nBEACH = Vespucci Beach  \nBHAMCA = Banham Canyon  \nBRADP = Braddock Pass  \nBRADT = Braddock Tunnel  \nBURTON = Burton  \nCALAFB = Calafia Bridge  \nCANNY = Raton Canyon  \nCCREAK = Cassidy Creek  \nCHAMH = Chamberlain Hills  \nCHIL = Vinewood Hills  \nCHU = Chumash  \nCMSW = Chiliad Mountain State Wilderness  \nCYPRE = Cypress Flats  \nDAVIS = Davis  \nDELBE = Del Perro Beach  \nDELPE = Del Perro  \nDELSOL = La Puerta  \nDESRT = Grand Senora Desert  \nDOWNT = Downtown  \nDTVINE = Downtown Vinewood  \nEAST_V = East Vinewood  \nEBURO = El Burro Heights  \nELGORL = El Gordo Lighthouse  \nELYSIAN = Elysian Island  \nGALFISH = Galilee  \nGOLF = GWC and Golfing Society  \nGRAPES = Grapeseed  \nGREATC = Great Chaparral  \nHARMO = Harmony  \nHAWICK = Hawick  \nHORS = Vinewood Racetrack  \nHUMLAB = Humane Labs and Research  \nJAIL = Bolingbroke Penitentiary  \nKOREAT = Little Seoul  \nLACT = Land Act Reservoir  \nLAGO = Lago Zancudo  \nLDAM = Land Act Dam  \nLEGSQU = Legion Square  \nLMESA = La Mesa  \nLOSPUER = La Puerta  \nMIRR = Mirror Park  \nMORN = Morningwood  \nMOVIE = Richards Majestic  \nMTCHIL = Mount Chiliad  \nMTGORDO = Mount Gordo  \nMTJOSE = Mount Josiah  \nMURRI = Murrieta Heights  \nNCHU = North Chumash  \nNOOSE = N.O.O.S.E  \nOCEANA = Pacific Ocean  \nPALCOV = Paleto Cove  \nPALETO = Paleto Bay  \nPALFOR = Paleto Forest  \nPALHIGH = Palomino Highlands  \nPALMPOW = Palmer-Taylor Power Station  \nPBLUFF = Pacific Bluffs  \nPBOX = Pillbox Hill  \nPROCOB = Procopio Beach  \nRANCHO = Rancho  \nRGLEN = Richman Glen  \nRICHM = Richman  \nROCKF = Rockford Hills  \nRTRAK = Redwood Lights Track  \nSANAND = San Andreas  \nSANCHIA = San Chianski Mountain Range  \nSANDY = Sandy Shores  \nSKID = Mission Row  \nSLAB = Stab City  \nSTAD = Maze Bank Arena  \nSTRAW = Strawberry  \nTATAMO = Tataviam Mountains  \nTERMINA = Terminal  \nTEXTI = Textile City  \nTONGVAH = Tongva Hills  \nTONGVAV = Tongva Valley  \nVCANA = Vespucci Canals  \nVESP = Vespucci  \nVINE = Vinewood  \nWINDF = Ron Alternates Wind Farm  \nWVINE = West Vinewood  \nZANCUDO = Zancudo River  \nZP_ORT = Port of South Los Santos  \nZQ_UAR = Davis Quartz  \n```"
  },
  "4962": {
      "prefix": "GetZonePopschedule",
      "body": [
          "GetZonePopschedule(${1:int* zoneId})${0}"
      ],
      "description": ""
  },
  "4963": {
      "prefix": "GetZoneScumminess",
      "body": [
          "GetZoneScumminess(${1:int* zoneId})${0}"
      ],
      "description": "```\ncellphone range 1- 5 used for signal bar in iFruit phone  \n```"
  },
  "4964": {
      "prefix": "GetZoneFromNameId",
      "body": [
          "GetZoneFromNameId(${1:char* zoneName})${0}"
      ],
      "description": "```\n'zoneName' corresponds to an entry in 'popzone.ipl'.  \nAIRP = Los Santos International Airport  \nALAMO = Alamo Sea  \nALTA = Alta  \nARMYB = Fort Zancudo  \nBANHAMC = Banham Canyon Dr  \nBANNING = Banning  \nBEACH = Vespucci Beach  \nBHAMCA = Banham Canyon  \nBRADP = Braddock Pass  \nBRADT = Braddock Tunnel  \nBURTON = Burton  \nCALAFB = Calafia Bridge  \nCANNY = Raton Canyon  \nCCREAK = Cassidy Creek  \nCHAMH = Chamberlain Hills  \nCHIL = Vinewood Hills  \nCHU = Chumash  \nCMSW = Chiliad Mountain State Wilderness  \nCYPRE = Cypress Flats  \nDAVIS = Davis  \nDELBE = Del Perro Beach  \nDELPE = Del Perro  \nDELSOL = La Puerta  \nDESRT = Grand Senora Desert  \nDOWNT = Downtown  \nDTVINE = Downtown Vinewood  \nEAST_V = East Vinewood  \nEBURO = El Burro Heights  \nELGORL = El Gordo Lighthouse  \nELYSIAN = Elysian Island  \nGALFISH = Galilee  \nGOLF = GWC and Golfing Society  \nGRAPES = Grapeseed  \nGREATC = Great Chaparral  \nHARMO = Harmony  \nHAWICK = Hawick  \nHORS = Vinewood Racetrack  \nHUMLAB = Humane Labs and Research  \nJAIL = Bolingbroke Penitentiary  \nKOREAT = Little Seoul  \nLACT = Land Act Reservoir  \nLAGO = Lago Zancudo  \nLDAM = Land Act Dam  \nLEGSQU = Legion Square  \nLMESA = La Mesa  \nLOSPUER = La Puerta  \nMIRR = Mirror Park  \nMORN = Morningwood  \nMOVIE = Richards Majestic  \nMTCHIL = Mount Chiliad  \nMTGORDO = Mount Gordo  \nMTJOSE = Mount Josiah  \nMURRI = Murrieta Heights  \nNCHU = North Chumash  \nNOOSE = N.O.O.S.E  \nOCEANA = Pacific Ocean  \nPALCOV = Paleto Cove  \nPALETO = Paleto Bay  \nPALFOR = Paleto Forest  \nPALHIGH = Palomino Highlands  \nPALMPOW = Palmer-Taylor Power Station  \nPBLUFF = Pacific Bluffs  \nPBOX = Pillbox Hill  \nPROCOB = Procopio Beach  \nRANCHO = Rancho  \nRGLEN = Richman Glen  \nRICHM = Richman  \nROCKF = Rockford Hills  \nRTRAK = Redwood Lights Track  \nSANAND = San Andreas  \nSANCHIA = San Chianski Mountain Range  \nSANDY = Sandy Shores  \nSKID = Mission Row  \nSLAB = Stab City  \nSTAD = Maze Bank Arena  \nSTRAW = Strawberry  \nTATAMO = Tataviam Mountains  \nTERMINA = Terminal  \nTEXTI = Textile City  \nTONGVAH = Tongva Hills  \nTONGVAV = Tongva Valley  \nVCANA = Vespucci Canals  \nVESP = Vespucci  \nVINE = Vinewood  \nWINDF = Ron Alternates Wind Farm  \nWVINE = West Vinewood  \nZANCUDO = Zancudo River  \nZP_ORT = Port of South Los Santos  \nZQ_UAR = Davis Quartz  \n```"
  },
  "4965": {
      "prefix": "OverridePopscheduleVehicleModel",
      "body": [
          "OverridePopscheduleVehicleModel(${1:int* scheduleId}, ${2:Hash* vehicleHash})${0}"
      ],
      "description": "```\nOnly used once in the decompiled scripts. Seems to be related to scripted vehicle generators.  \nModified example from \"am_imp_exp.c4\", line 6406:  \n/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));  \netc.  \n*/  \nZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);  \nSTREAMING::REQUEST_MODEL(vehicleHash);  \n```"
  },
  "4966": {
      "prefix": "SetZoneEnabled",
      "body": [
          "SetZoneEnabled(${1:int* zoneId}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "4967": {
      "prefix": "AddRoadNodeSpeedZone",
      "body": [
          "AddRoadNodeSpeedZone(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:float* speed}, ${6:BOOL* p5})${0}"
      ],
      "description": ""
  },
  "4968": {
      "prefix": "AddVehicleStuckCheckWithWarp",
      "body": [
          "AddVehicleStuckCheckWithWarp(${1:Any* p0}, ${2:float* p1}, ${3:Any* p2}, ${4:BOOL* p3}, ${5:BOOL* p4}, ${6:BOOL* p5}, ${7:Any* p6})${0}"
      ],
      "description": ""
  },
  "4969": {
      "prefix": "AreAllVehicleWindowsIntact",
      "body": [
          "AreAllVehicleWindowsIntact(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nAppears to return false if any window is broken.  \n```"
  },
  "4970": {
      "prefix": "AddVehicleCombatAngledAvoidanceArea",
      "body": [
          "AddVehicleCombatAngledAvoidanceArea(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6})${0}"
      ],
      "description": ""
  },
  "4971": {
      "prefix": "AreBombBayDoorsOpen",
      "body": [
          "AreBombBayDoorsOpen(${1:Vehicle* aircraft})${0}"
      ],
      "description": "Returns true when the bomb bay doors of this plane are open. False if they're closed."
  },
  "4972": {
      "prefix": "AddVehiclePhoneExplosiveDevice",
      "body": [
          "AddVehiclePhoneExplosiveDevice(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4973": {
      "prefix": "AddVehicleUpsidedownCheck",
      "body": [
          "AddVehicleUpsidedownCheck(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4974": {
      "prefix": "AreHeliStubWingsDeployed",
      "body": [
          "AreHeliStubWingsDeployed(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Only used with the \"akula\" in the decompiled native scripts.\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "4975": {
      "prefix": "AreAnyVehicleSeatsFree",
      "body": [
          "AreAnyVehicleSeatsFree(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns false if every seat is occupied.  \n```"
  },
  "4976": {
      "prefix": "AreOutriggerLegsDeployed",
      "body": [
          "AreOutriggerLegsDeployed(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns whether the outrigger legs are deployed for the vehicle.\nThe Chernobog is one of the few vehicles with outrigger legs.\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "4977": {
      "prefix": "ArePlanePropellersIntact",
      "body": [
          "ArePlanePropellersIntact(${1:Vehicle* plane})${0}"
      ],
      "description": ""
  },
  "4978": {
      "prefix": "ArePlaneWingsIntact",
      "body": [
          "ArePlaneWingsIntact(${1:Vehicle* plane})${0}"
      ],
      "description": ""
  },
  "4979": {
      "prefix": "AttachVehicleOnToTrailer",
      "body": [
          "AttachVehicleOnToTrailer(${1:Vehicle* vehicle}, ${2:Vehicle* trailer}, ${3:float* offsetX}, ${4:float* offsetY}, ${5:float* offsetZ}, ${6:float* coordsX}, ${7:float* coordsY}, ${8:float* coordsZ}, ${9:float* rotationX}, ${10:float* rotationY}, ${11:float* rotationZ}, ${12:float* disableColls})${0}"
      ],
      "description": ""
  },
  "4980": {
      "prefix": "AttachVehicleToTowTruck",
      "body": [
          "AttachVehicleToTowTruck(${1:Vehicle* towTruck}, ${2:Vehicle* vehicle}, ${3:BOOL* rear}, ${4:float* hookOffsetX}, ${5:float* hookOffsetY}, ${6:float* hookOffsetZ})${0}"
      ],
      "description": "```\nHookOffset defines where the hook is attached. leave at 0 for default attachment.\n```"
  },
  "4981": {
      "prefix": "AttachEntityToCargobob",
      "body": [
          "AttachEntityToCargobob(${1:Vehicle* vehicle}, ${2:Entity* entity}, ${3:int* p2}, ${4:float* x}, ${5:float* y}, ${6:float* z})${0}"
      ],
      "description": ""
  },
  "4982": {
      "prefix": "AttachVehicleToCargobob",
      "body": [
          "AttachVehicleToCargobob(${1:Vehicle* vehicle}, ${2:Vehicle* cargobob}, ${3:int* p2}, ${4:float* x}, ${5:float* y}, ${6:float* z})${0}"
      ],
      "description": "```\np2 is unknown and is always -1 in the script natives.\n```"
  },
  "4983": {
      "prefix": "CanAnchorBoatHere",
      "body": [
          "CanAnchorBoatHere(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4984": {
      "prefix": "AttachVehicleToTrailer",
      "body": [
          "AttachVehicleToTrailer(${1:Vehicle* vehicle}, ${2:Vehicle* trailer}, ${3:float* radius})${0}"
      ],
      "description": ""
  },
  "4985": {
      "prefix": "CanAnchorBoatHere2",
      "body": [
          "CanAnchorBoatHere2(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nDiffers from 0x26C10ECBDA5D043B in that 0x140EFCC10 (1604 retail) is called with a2 = true.\n\nNativeDB Introduced: v678\n```"
  },
  "4986": {
      "prefix": "BringVehicleToHalt",
      "body": [
          "BringVehicleToHalt(${1:Vehicle* vehicle}, ${2:float* distance}, ${3:int* duration}, ${4:BOOL* unknown})${0}"
      ],
      "description": "```\nThis native makes the vehicle stop immediately, as happens when we enter a MP garage.  \n. distance defines how far it will travel until stopping. Garage doors use 3.0.  \n. If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.  \n```"
  },
  "4987": {
      "prefix": "ClearLastDrivenVehicle",
      "body": [
          "ClearLastDrivenVehicle()${0}"
      ],
      "description": ""
  },
  "4988": {
      "prefix": "ClearVehicleCustomSecondaryColour",
      "body": [
          "ClearVehicleCustomSecondaryColour(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4989": {
      "prefix": "CanShuffleSeat",
      "body": [
          "CanShuffleSeat(${1:Vehicle* vehicle}, ${2:int* seatIndex})${0}"
      ],
      "description": ""
  },
  "4990": {
      "prefix": "ClearVehicleRouteHistory",
      "body": [
          "ClearVehicleRouteHistory(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4991": {
      "prefix": "CloseBombBayDoors",
      "body": [
          "CloseBombBayDoors(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4992": {
      "prefix": "ClearVehicleCustomPrimaryColour",
      "body": [
          "ClearVehicleCustomPrimaryColour(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "4993": {
      "prefix": "ClearVehiclePhoneExplosiveDevice",
      "body": [
          "ClearVehiclePhoneExplosiveDevice()${0}"
      ],
      "description": ""
  },
  "4994": {
      "prefix": "CopyVehicleDamages",
      "body": [
          "CopyVehicleDamages(${1:Vehicle* sourceVehicle}, ${2:Vehicle* targetVehicle})${0}"
      ],
      "description": "Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle."
  },
  "4995": {
      "prefix": "ControlLandingGear",
      "body": [
          "ControlLandingGear(${1:Vehicle* vehicle}, ${2:int* state})${0}"
      ],
      "description": "```\nWorks for vehicles with a retractable landing gear  \nlanding gear states:  \n0: Deployed  \n1: Closing  \n2: Opening  \n3: Retracted  \n```"
  },
  "4996": {
      "prefix": "CreateMissionTrain",
      "body": [
          "CreateMissionTrain(${1:int* variation}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:BOOL* direction})${0}"
      ],
      "description": "Train models must be [requested](#\\_0x963D27A58DF860AC) before use. See trains.xml for freight and metro variations.\n\n```\nNativeDB Added Parameter 6: Any p5\nNativeDB Added Parameter 7: Any p6\n```\n\n### Train Models:\n\n*   freight\n*   freightcar\n*   freightcar2 (Added v2372)\n*   freightcont1\n*   freightcont2\n*   freightgrain\n*   metrotrain\n*   tankercar"
  },
  "4997": {
      "prefix": "CreatePickUpRopeForCargobob",
      "body": [
          "CreatePickUpRopeForCargobob(${1:Vehicle* cargobob}, ${2:int* state})${0}"
      ],
      "description": "```\nDrops the Hook/Magnet on a cargobob  \nstate  \nenum eCargobobHook  \n{  \n\tCARGOBOB_HOOK = 0,  \n\tCARGOBOB_MAGNET = 1,  \n};  \n```"
  },
  "4998": {
      "prefix": "CreateScriptVehicleGenerator",
      "body": [
          "CreateScriptVehicleGenerator(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* heading}, ${5:float* p4}, ${6:float* p5}, ${7:Hash* modelHash}, ${8:int* p7}, ${9:int* p8}, ${10:int* p9}, ${11:int* p10}, ${12:BOOL* p11}, ${13:BOOL* p12}, ${14:BOOL* p13}, ${15:BOOL* p14}, ${16:BOOL* p15}, ${17:int* p16})${0}"
      ],
      "description": "```\nCreates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.  \nParameters:  \na/w/s - Generator position  \nheading - Generator heading  \np4 - Unknown (always 5.0)  \np5 - Unknown (always 3.0)  \nmodelHash - Vehicle model hash  \np7/8/9/10 - Unknown (always -1)  \np11 - Unknown (usually TRUE, only one instance of FALSE)  \np12/13 - Unknown (always FALSE)  \np14 - Unknown (usally FALSE, only two instances of TRUE)  \np15 - Unknown (always TRUE)  \np16 - Unknown (always -1)  \nVector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);\tCREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY(\"adder\"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);  \n```"
  },
  "4999": {
      "prefix": "DeleteMissionTrain",
      "body": [
          "DeleteMissionTrain(${1:Vehicle* train})${0}"
      ],
      "description": ""
  },
  "5000": {
      "prefix": "CreateVehicle",
      "body": [
          "CreateVehicle(${1:Hash* modelHash}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading}, ${6:BOOL* isNetwork}, ${7:BOOL* netMissionEntity})${0}"
      ],
      "description": "Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating\nscript as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n```\nNativeDB Added Parameter 8: BOOL p7\n```"
  },
  "5001": {
      "prefix": "DeleteScriptVehicleGenerator",
      "body": [
          "DeleteScriptVehicleGenerator(${1:int* vehicleGenerator})${0}"
      ],
      "description": ""
  },
  "5002": {
      "prefix": "DeleteAllTrains",
      "body": [
          "DeleteAllTrains()${0}"
      ],
      "description": ""
  },
  "5003": {
      "prefix": "DetachContainerFromHandlerFrame",
      "body": [
          "DetachContainerFromHandlerFrame(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5004": {
      "prefix": "DetachVehicleFromAnyCargobob",
      "body": [
          "DetachVehicleFromAnyCargobob(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5005": {
      "prefix": "DeleteVehicle",
      "body": [
          "DeleteVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nDeletes a vehicle.  \nThe vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);  \neg how to use:  \nSET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);  \nDELETE_VEHICLE(&vehicle);  \nDeletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.  \n```"
  },
  "5006": {
      "prefix": "DetachEntityFromCargobob",
      "body": [
          "DetachEntityFromCargobob(${1:Vehicle* vehicle}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "5007": {
      "prefix": "DetachVehicleFromTowTruck",
      "body": [
          "DetachVehicleFromTowTruck(${1:Vehicle* towTruck}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": "```\nFirst two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.  \n```"
  },
  "5008": {
      "prefix": "DetachVehicleFromAnyTowTruck",
      "body": [
          "DetachVehicleFromAnyTowTruck(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5009": {
      "prefix": "DisablePlaneAileron",
      "body": [
          "DisablePlaneAileron(${1:Vehicle* vehicle}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "5010": {
      "prefix": "DetachVehicleFromCargobob",
      "body": [
          "DetachVehicleFromCargobob(${1:Vehicle* vehicle}, ${2:Vehicle* cargobob})${0}"
      ],
      "description": ""
  },
  "5011": {
      "prefix": "DisablePlanePropeller",
      "body": [
          "DisablePlanePropeller(${1:Vehicle* vehicle}, ${2:int* propeller})${0}"
      ],
      "description": ""
  },
  "5012": {
      "prefix": "DetachVehicleFromTrailer",
      "body": [
          "DetachVehicleFromTrailer(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5013": {
      "prefix": "DisableVehicleTurretMovementThisFrame",
      "body": [
          "DisableVehicleTurretMovementThisFrame(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5014": {
      "prefix": "DetonateVehiclePhoneExplosiveDevice",
      "body": [
          "DetonateVehiclePhoneExplosiveDevice()${0}"
      ],
      "description": ""
  },
  "5015": {
      "prefix": "DisableVehicleWeapon",
      "body": [
          "DisableVehicleWeapon(${1:BOOL* disabled}, ${2:Hash* weaponHash}, ${3:Vehicle* vehicle}, ${4:Ped* owner})${0}"
      ],
      "description": "```\nhow does this work?  \n```"
  },
  "5016": {
      "prefix": "DisableVehicleNeonLights",
      "body": [
          "DisableVehicleNeonLights(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5017": {
      "prefix": "DisableVehicleWorldCollision",
      "body": [
          "DisableVehicleWorldCollision(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Disables collision for this vehicle (maybe it also supports other entities, not sure).\nOnly world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.\n\n[Example video](https://streamable.com/6n45d5)\n\nNot sure if there is a native (and if so, which one) that resets the collisions."
  },
  "5018": {
      "prefix": "DoesExtraExist",
      "body": [
          "DoesExtraExist(${1:Vehicle* vehicle}, ${2:int* extraId})${0}"
      ],
      "description": "```\nChecks via CVehicleModelInfo  \n```"
  },
  "5019": {
      "prefix": "DoesVehicleAllowRappel",
      "body": [
          "DoesVehicleAllowRappel(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.\n```"
  },
  "5020": {
      "prefix": "DoesCargobobHavePickUpRope",
      "body": [
          "DoesCargobobHavePickUpRope(${1:Vehicle* cargobob})${0}"
      ],
      "description": "```\nReturns true only when the hook is active, will return false if the magnet is active  \n```"
  },
  "5021": {
      "prefix": "DoesVehicleExistWithDecorator",
      "body": [
          "DoesVehicleExistWithDecorator(${1:char* decorator})${0}"
      ],
      "description": ""
  },
  "5022": {
      "prefix": "DoesVehicleHaveLandingGear",
      "body": [
          "DoesVehicleHaveLandingGear(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "5023": {
      "prefix": "DoesCargobobHavePickupMagnet",
      "body": [
          "DoesCargobobHavePickupMagnet(${1:Vehicle* cargobob})${0}"
      ],
      "description": "```\nReturns true only when the magnet is active, will return false if the hook is active  \n```"
  },
  "5024": {
      "prefix": "DoesScriptVehicleGeneratorExist",
      "body": [
          "DoesScriptVehicleGeneratorExist(${1:int* vehicleGenerator})${0}"
      ],
      "description": ""
  },
  "5025": {
      "prefix": "DoesVehicleHaveRoof",
      "body": [
          "DoesVehicleHaveRoof(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5026": {
      "prefix": "DoesVehicleHaveStuckVehicleCheck",
      "body": [
          "DoesVehicleHaveStuckVehicleCheck(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nMaximum amount of vehicles with vehicle stuck check appears to be 16.  \n```"
  },
  "5027": {
      "prefix": "DoesVehicleTyreExist",
      "body": [
          "DoesVehicleTyreExist(${1:Vehicle* vehicle}, ${2:int* tyreIndex})${0}"
      ],
      "description": "```\nChecks if vehicle tyre at index exists. Also returns false if tyre was removed.\n```\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "5028": {
      "prefix": "DoesVehicleHaveSearchlight",
      "body": [
          "DoesVehicleHaveSearchlight(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "5029": {
      "prefix": "ExplodeVehicle",
      "body": [
          "ExplodeVehicle(${1:Vehicle* vehicle}, ${2:BOOL* isAudible}, ${3:BOOL* isInvisible})${0}"
      ],
      "description": "```\nExplodes a selected vehicle.  \nVehicle vehicle = Vehicle you want to explode.  \nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.  \nFirst BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.  \n```"
  },
  "5030": {
      "prefix": "DoesVehicleHaveWeapons",
      "body": [
          "DoesVehicleHaveWeapons(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5031": {
      "prefix": "FindRandomPointInSpace",
      "body": [
          "FindRandomPointInSpace(${1:Ped* ped})${0}"
      ],
      "description": "Native is significantly more complicated than simply generating a random vector & length.\n\nThe 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport\\_\\__IsSphereVisible.\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "5032": {
      "prefix": "EjectJb700Roof",
      "body": [
          "EjectJb700Roof(${1:Vehicle* vehicle}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "5033": {
      "prefix": "FixVehicleWindow",
      "body": [
          "FixVehicleWindow(${1:Vehicle* vehicle}, ${2:int* windowIndex})${0}"
      ],
      "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1).\n\nThis function is coded to not work on vehicles of type: `CBike`, `Bmx`, `CBoat`, `CTrain`, and `CSubmarine`."
  },
  "5034": {
      "prefix": "ExplodeVehicleInCutscene",
      "body": [
          "ExplodeVehicleInCutscene(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5035": {
      "prefix": "ForceSubmarineSurfaceMode",
      "body": [
          "ForceSubmarineSurfaceMode(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5036": {
      "prefix": "FindVehicleCarryingThisEntity",
      "body": [
          "FindVehicleCarryingThisEntity(${1:Entity* entity})${0}"
      ],
      "description": "```\nFinds the vehicle that is carrying this entity with a handler frame.\nThe model of the entity must be prop_contr_03b_ld or the function will return 0.\n```"
  },
  "5037": {
      "prefix": "GetAllVehicles",
      "body": [
          "GetAllVehicles(${1:int* vehArray})${0}"
      ],
      "description": ""
  },
  "5038": {
      "prefix": "ForcePlaybackRecordedVehicleUpdate",
      "body": [
          "ForcePlaybackRecordedVehicleUpdate(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nOften called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.\n```"
  },
  "5039": {
      "prefix": "GetBoatBoomPositionRatio",
      "body": [
          "GetBoatBoomPositionRatio(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5040": {
      "prefix": "GetBoatBoomPositionRatio3",
      "body": [
          "GetBoatBoomPositionRatio3(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5041": {
      "prefix": "GetCanVehicleJump",
      "body": [
          "GetCanVehicleJump(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns true if the vehicle has the FLAG_JUMPING_CAR flag set.\n```"
  },
  "5042": {
      "prefix": "GetBoatBoomPositionRatio2",
      "body": [
          "GetBoatBoomPositionRatio2(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nSame call as VEHICLE::_0x0F3B4D4E43177236\n```"
  },
  "5043": {
      "prefix": "GetCargobobHookPosition",
      "body": [
          "GetCargobobHookPosition(${1:Vehicle* cargobob})${0}"
      ],
      "description": "```\nGets the position of the cargobob hook, in world coords.  \n```"
  },
  "5044": {
      "prefix": "GetClosestVehicle",
      "body": [
          "GetClosestVehicle(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* modelHash}, ${6:int* flags})${0}"
      ],
      "description": "```\nExample usage  \nVEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)   \nx, y, z: Position to get closest vehicle to.  \nradius: Max radius to get a vehicle.  \nmodelHash: Limit to vehicles with this model. 0 for any.  \nflags: The bitwise flags altering the function's behaviour.  \nDoes not return police cars or helicopters.  \nIt seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason  \nOnly returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.   \nThese flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.  \nConverted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles  \nConversion of found flags to binary: pastebin.com/kghNFkRi  \nAt exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.   \nIt's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT  \n-------------------------------------------------------------------------  \nConclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h\nUse flag 127 to return police cars\n```"
  },
  "5045": {
      "prefix": "GetCurrentPlaybackForVehicle",
      "body": [
          "GetCurrentPlaybackForVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5046": {
      "prefix": "GetDisplayNameFromVehicleModel",
      "body": [
          "GetDisplayNameFromVehicleModel(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nReturns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.\n-----------------------------------------------------------------------------------------------------------------------------------------\nWhile often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.\n-----------------------------------------------------------------------------------------------------------------------------------------\nReturns \"CARNOTFOUND\" if the hash doesn't match a vehicle hash.\nUsing HUD::_GET_LABEL_TEXT, you can get the localized name.\n```"
  },
  "5047": {
      "prefix": "GetConvertibleRoofState",
      "body": [
          "GetConvertibleRoofState(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\n0 -> up  \n1 -> lowering down  \n2 -> down  \n3 -> raising up  \nenum RoofState  \n{  \n     ROOFSTATE_UP = 0;  \n     ROOFSTATE_LOWERING,  \n     ROOFSTATE_DOWN,  \n     ROOFSTATE_RAISING  \n};  \n```"
  },
  "5048": {
      "prefix": "GetDriftTyresEnabled",
      "body": [
          "GetDriftTyresEnabled(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5049": {
      "prefix": "GetDoesVehicleHaveTombstone",
      "body": [
          "GetDoesVehicleHaveTombstone(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "5050": {
      "prefix": "GetEntityAttachedToCargobob",
      "body": [
          "GetEntityAttachedToCargobob(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5051": {
      "prefix": "GetEntityAttachedToTowTruck",
      "body": [
          "GetEntityAttachedToTowTruck(${1:Vehicle* towTruck})${0}"
      ],
      "description": ""
  },
  "5052": {
      "prefix": "GetEntryPositionOfDoor",
      "body": [
          "GetEntryPositionOfDoor(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5053": {
      "prefix": "GetHasRetractableWheels",
      "body": [
          "GetHasRetractableWheels(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5054": {
      "prefix": "GetHasRocketBoost",
      "body": [
          "GetHasRocketBoost(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5055": {
      "prefix": "GetHeliTailBoomHealth",
      "body": [
          "GetHeliTailBoomHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nMax 1000.\nAt -100 both helicopter rotors will stall.\n```"
  },
  "5056": {
      "prefix": "GetHeliMainRotorHealth",
      "body": [
          "GetHeliMainRotorHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nMax 1000.  \nAt 0 the main rotor will stall.  \n```"
  },
  "5057": {
      "prefix": "GetHydraulicWheelValue",
      "body": [
          "GetHydraulicWheelValue(${1:Vehicle* vehicle}, ${2:int* wheelId})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5058": {
      "prefix": "GetHeliTailRotorHealth",
      "body": [
          "GetHeliTailRotorHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nMax 1000.  \nAt 0 the tail rotor will stall.  \n```"
  },
  "5059": {
      "prefix": "GetIsDoorValid",
      "body": [
          "GetIsDoorValid(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5060": {
      "prefix": "GetIsLeftVehicleHeadlightDamaged",
      "body": [
          "GetIsLeftVehicleHeadlightDamaged(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nFrom the driver's perspective, is the left headlight broken.  \n```"
  },
  "5061": {
      "prefix": "GetIsSubmarineVehicleTransformed",
      "body": [
          "GetIsSubmarineVehicleTransformed(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "5062": {
      "prefix": "GetIsRightVehicleHeadlightDamaged",
      "body": [
          "GetIsRightVehicleHeadlightDamaged(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nFrom the driver's perspective, is the right headlight broken.  \n```"
  },
  "5063": {
      "prefix": "GetIsVehicleEmpDisabled",
      "body": [
          "GetIsVehicleEmpDisabled(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns whether this vehicle is currently disabled by an EMP mine.\n\nNativeDB Introduced: v1604\n```"
  },
  "5064": {
      "prefix": "GetIsVehicleEngineRunning",
      "body": [
          "GetIsVehicleEngineRunning(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns true when in a vehicle, false whilst entering/exiting.  \n```"
  },
  "5065": {
      "prefix": "GetIsVehicleShuntBoostActive",
      "body": [
          "GetIsVehicleShuntBoostActive(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "5066": {
      "prefix": "GetIsVehiclePrimaryColourCustom",
      "body": [
          "GetIsVehiclePrimaryColourCustom(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5067": {
      "prefix": "GetLandingGearState",
      "body": [
          "GetLandingGearState(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nLanding gear states:  \n0: Deployed  \n1: Closing (Retracting)\n3: Opening (Deploying)\n4: Retracted  \n5: Broken\n```\n\nLanding gear state 2 is never used."
  },
  "5068": {
      "prefix": "GetLastDrivenVehicle",
      "body": [
          "GetLastDrivenVehicle()${0}"
      ],
      "description": ""
  },
  "5069": {
      "prefix": "GetIsVehicleSecondaryColourCustom",
      "body": [
          "GetIsVehicleSecondaryColourCustom(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nCheck if Vehicle Secondary is avaliable for customize  \n```"
  },
  "5070": {
      "prefix": "GetLastRammedVehicle",
      "body": [
          "GetLastRammedVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns last vehicle that was rammed by the given vehicle using the shunt boost.\n\nNativeDB Introduced: v1604\n```"
  },
  "5071": {
      "prefix": "GetIsWheelsLoweredStateActive",
      "body": [
          "GetIsWheelsLoweredStateActive(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5072": {
      "prefix": "GetLastPedInVehicleSeat",
      "body": [
          "GetLastPedInVehicleSeat(${1:Vehicle* vehicle}, ${2:int* seatIndex})${0}"
      ],
      "description": ""
  },
  "5073": {
      "prefix": "GetMakeNameFromVehicleModel",
      "body": [
          "GetMakeNameFromVehicleModel(${1:Hash* modelHash})${0}"
      ],
      "description": "Will return a vehicle's manufacturer display label.\nReturns \"CARNOTFOUND\" if the hash doesn't match a vehicle hash.\n\n```\nNativeDB Introduced: v1868\n```"
  },
  "5074": {
      "prefix": "GetModSlotName",
      "body": [
          "GetModSlotName(${1:Vehicle* vehicle}, ${2:int* modType})${0}"
      ],
      "description": "```\nReturns the name for the type of vehicle mod(Armour, engine etc)\n```"
  },
  "5075": {
      "prefix": "GetLiveryName",
      "body": [
          "GetLiveryName(${1:Vehicle* vehicle}, ${2:int* liveryIndex})${0}"
      ],
      "description": "```\nSecond Param = LiveryIndex  \nexample   \nint count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);  \nfor (int i = 0; i < count; i++)    \n\t{  \nchar* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);  \n\t}  \nthis example will work fine to fetch all names   \nfor example for Sanchez we get   \nSANC_LV1  \nSANC_LV2  \nSANC_LV3  \nSANC_LV4  \nSANC_LV5  \nUse _GET_LABEL_TEXT, to get the localized livery name.  \n-----------  \nNOTE: You may need to set the vehicle's modKit to 0 by using this function: SET_VEHICLE_MOD_KIT() before getting the name, otherwise this native may return NULL.  \ndev-c.com/nativedb/func/info/1f2aa07f00b3217a  \n```"
  },
  "5076": {
      "prefix": "GetNumModColors",
      "body": [
          "GetNumModColors(${1:int* paintType}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\npaintType:\n0: Normal\n1: Metallic\n2: Pearl\n3: Matte\n4: Metal\n5: Chrome\n```"
  },
  "5077": {
      "prefix": "GetModTextLabel",
      "body": [
          "GetModTextLabel(${1:Vehicle* vehicle}, ${2:int* modType}, ${3:int* modValue})${0}"
      ],
      "description": "```\nReturns the text label of a mod type for a given vehicle  \nUse _GET_LABEL_TEXT to get the part name in the game's language  \n```"
  },
  "5078": {
      "prefix": "GetNumModKits",
      "body": [
          "GetNumModKits(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5079": {
      "prefix": "GetNumVehicleMods",
      "body": [
          "GetNumVehicleMods(${1:Vehicle* vehicle}, ${2:int* modType})${0}"
      ],
      "description": "```\nReturns how many possible mods a vehicle has for a given mod type  \n```"
  },
  "5080": {
      "prefix": "GetNumVehicleWindowTints",
      "body": [
          "GetNumVehicleWindowTints()${0}"
      ],
      "description": ""
  },
  "5081": {
      "prefix": "GetNumberOfVehicleColours",
      "body": [
          "GetNumberOfVehicleColours(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nActually number of color combinations  \n```"
  },
  "5082": {
      "prefix": "GetNumberOfVehicleNumberPlates",
      "body": [
          "GetNumberOfVehicleNumberPlates()${0}"
      ],
      "description": "```\nReturns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.  \n```"
  },
  "5083": {
      "prefix": "GetNumberOfVehicleDoors",
      "body": [
          "GetNumberOfVehicleDoors(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5084": {
      "prefix": "GetPedInVehicleSeat",
      "body": [
          "GetPedInVehicleSeat(${1:Vehicle* vehicle}, ${2:int* index})${0}"
      ],
      "description": "Gets the ped in the specified seat of the passed vehicle.\n\nIf there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.\n\nSeat indexes:\n\n*   \\-1 = Driver\n*   0 = Front Right Passenger\n*   1 = Back Left Passenger\n*   2 = Back Right Passenger\n*   3 = Further Back Left Passenger (vehicles > 4 seats)\n*   4 = Further Back Right Passenger (vehicles > 4 seats)\n*   etc.\n\nOne can use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) to get the amount of seats in a vehicle.\n\n**NativeDB Added Parameter 3**: BOOL p2 (uses a different GetOccupant function)"
  },
  "5085": {
      "prefix": "GetPositionInRecording",
      "body": [
          "GetPositionInRecording(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nDistance traveled in the vehicles current recording.\n```"
  },
  "5086": {
      "prefix": "GetRandomVehicleBackBumperInSphere",
      "body": [
          "GetRandomVehicleBackBumperInSphere(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:int* p4}, ${6:int* p5}, ${7:int* p6})${0}"
      ],
      "description": ""
  },
  "5087": {
      "prefix": "GetPedUsingVehicleDoor",
      "body": [
          "GetPedUsingVehicleDoor(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5088": {
      "prefix": "GetRandomVehicleInSphere",
      "body": [
          "GetRandomVehicleInSphere(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius}, ${5:Hash* modelHash}, ${6:int* flags})${0}"
      ],
      "description": "```\nGets a random vehicle in a sphere at the specified position, of the specified radius.  \nx: The X-component of the position of the sphere.  \ny: The Y-component of the position of the sphere.  \nz: The Z-component of the position of the sphere.  \nradius: The radius of the sphere. Max is 9999.9004.  \nmodelHash: The vehicle model to limit the selection to. Pass 0 for any model.  \nflags: The bitwise flags that modifies the behaviour of this function.  \n```"
  },
  "5089": {
      "prefix": "GetPositionOfVehicleRecordingAtTime",
      "body": [
          "GetPositionOfVehicleRecordingAtTime(${1:int* recording}, ${2:float* time}, ${3:char* script})${0}"
      ],
      "description": "This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.\n\nSee [`REQUEST_VEHICLE_RECORDING`](#\\_0xAF514CABE74CBF15)."
  },
  "5090": {
      "prefix": "GetPositionOfVehicleRecordingIdAtTime",
      "body": [
          "GetPositionOfVehicleRecordingIdAtTime(${1:int* id}, ${2:float* time})${0}"
      ],
      "description": ""
  },
  "5091": {
      "prefix": "GetRandomVehicleModelInMemory",
      "body": [
          "GetRandomVehicleModelInMemory(${1:BOOL* p0}, ${2:Hash* modelHash}, ${3:int* successIndicator})${0}"
      ],
      "description": "```\nNot present in the retail version! It's just a nullsub.  \np0 always true (except in one case)  \np1 a random vehicle hash loaded in memory  \nsuccessIndicator: 0 if success, -1 if failed\n```"
  },
  "5092": {
      "prefix": "GetRandomVehicleFrontBumperInSphere",
      "body": [
          "GetRandomVehicleFrontBumperInSphere(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:int* p4}, ${6:int* p5}, ${7:int* p6})${0}"
      ],
      "description": ""
  },
  "5093": {
      "prefix": "GetSubmarineCrushDepthWarningState",
      "body": [
          "GetSubmarineCrushDepthWarningState(${1:Vehicle* submarine})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "5094": {
      "prefix": "GetRotationOfVehicleRecordingAtTime",
      "body": [
          "GetRotationOfVehicleRecordingAtTime(${1:int* recording}, ${2:float* time}, ${3:char* script})${0}"
      ],
      "description": ""
  },
  "5095": {
      "prefix": "GetTimePositionInRecording",
      "body": [
          "GetTimePositionInRecording(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nCan be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.\n```"
  },
  "5096": {
      "prefix": "GetTotalDurationOfVehicleRecording",
      "body": [
          "GetTotalDurationOfVehicleRecording(${1:int* recording}, ${2:char* script})${0}"
      ],
      "description": ""
  },
  "5097": {
      "prefix": "GetRotationOfVehicleRecordingIdAtTime",
      "body": [
          "GetRotationOfVehicleRecordingIdAtTime(${1:int* id}, ${2:float* time})${0}"
      ],
      "description": ""
  },
  "5098": {
      "prefix": "GetTotalDurationOfVehicleRecordingId",
      "body": [
          "GetTotalDurationOfVehicleRecordingId(${1:int* id})${0}"
      ],
      "description": ""
  },
  "5099": {
      "prefix": "GetSubmarineIsBelowFirstCrushDepth",
      "body": [
          "GetSubmarineIsBelowFirstCrushDepth(${1:Vehicle* submarine})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2189\n```"
  },
  "5100": {
      "prefix": "GetTrainCarriage",
      "body": [
          "GetTrainCarriage(${1:Vehicle* train}, ${2:int* trailerNumber})${0}"
      ],
      "description": "```\nCorrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.  \n```"
  },
  "5101": {
      "prefix": "GetVehicleAcceleration",
      "body": [
          "GetVehicleAcceleration(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nstatic - max acceleration  \n```"
  },
  "5102": {
      "prefix": "GetTyreHealth",
      "body": [
          "GetTyreHealth(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "5103": {
      "prefix": "GetTyreWearMultiplier",
      "body": [
          "GetTyreWearMultiplier(${1:Vehicle* vehicle}, ${2:int* wheelIndex})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2060\n```"
  },
  "5104": {
      "prefix": "GetVehicleBodyHealth",
      "body": [
          "GetVehicleBodyHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nSeems related to vehicle health, like the one in IV.  \nMax 1000, min 0.  \nVehicle does not necessarily explode or become undrivable at 0.  \n```"
  },
  "5105": {
      "prefix": "GetVehicleAttachedToCargobob",
      "body": [
          "GetVehicleAttachedToCargobob(${1:Vehicle* cargobob})${0}"
      ],
      "description": "```\nReturns attached vehicle (Vehicle in parameter must be cargobob)  \n```"
  },
  "5106": {
      "prefix": "GetVehicleBombCount",
      "body": [
          "GetVehicleBombCount(${1:Vehicle* aircraft})${0}"
      ],
      "description": "Gets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.\n\nIn decompiled scripts this is used to check if the vehicle has enough bombs before a bomb can be dropped (bombs are dropped by using [`_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS`](#\\_0xBFE5756E7407064A)).\n\nUse [`_SET_AIRCRAFT_BOMB_COUNT`](#\\_0xF4B2ED59DEB5D774) to set the amount of bombs on that vehicle."
  },
  "5107": {
      "prefix": "GetVehicleBodyHealth2",
      "body": [
          "GetVehicleBodyHealth2(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: float maxEngineHealth\nNativeDB Added Parameter 3: float maxPetrolTankHealth\nNativeDB Added Parameter 4: float maxBodyHealth\nNativeDB Added Parameter 5: float maxMainRotorHealth\nNativeDB Added Parameter 6: float maxTailRotorHealth\nNativeDB Added Parameter 7: float maxUnkHealth\n```"
  },
  "5108": {
      "prefix": "GetVehicleCanActivateParachute",
      "body": [
          "GetVehicleCanActivateParachute(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5109": {
      "prefix": "GetVehicleCauseOfDestruction",
      "body": [
          "GetVehicleCauseOfDestruction(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\niVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);  \nif (iVar3 == joaat(\"weapon_stickybomb\"))  \n{  \n     func_171(726);  \n     iLocal_260 = 1;  \n}  \n```"
  },
  "5110": {
      "prefix": "GetVehicleClassEstimatedMaxSpeed",
      "body": [
          "GetVehicleClassEstimatedMaxSpeed(${1:int* vehicleClass})${0}"
      ],
      "description": ""
  },
  "5111": {
      "prefix": "GetVehicleClass",
      "body": [
          "GetVehicleClass(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns an int  \nVehicle Classes:  \n0: Compacts  \n1: Sedans  \n2: SUVs  \n3: Coupes  \n4: Muscle  \n5: Sports Classics  \n6: Sports  \n7: Super  \n8: Motorcycles  \n9: Off-road  \n10: Industrial  \n11: Utility  \n12: Vans  \n13: Cycles  \n14: Boats  \n15: Helicopters  \n16: Planes  \n17: Service  \n18: Emergency  \n19: Military  \n20: Commercial  \n21: Trains  \nchar buffer[128];  \nstd::sprintf(buffer, \"VEH_CLASS_%i\", VEHICLE::GET_VEHICLE_CLASS(vehicle));  \nchar* className = UI::_GET_LABEL_TEXT(buffer);  \n```"
  },
  "5112": {
      "prefix": "GetVehicleClassFromName",
      "body": [
          "GetVehicleClassFromName(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nFor a full enum, see here : pastebin.com/i2GGAjY0\nchar buffer[128];\nstd::sprintf(buffer, \"VEH_CLASS_%i\", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));\nconst char* className = HUD::_GET_LABEL_TEXT(buffer);\n```"
  },
  "5113": {
      "prefix": "GetVehicleClassMaxAcceleration",
      "body": [
          "GetVehicleClassMaxAcceleration(${1:int* vehicleClass})${0}"
      ],
      "description": ""
  },
  "5114": {
      "prefix": "GetVehicleClassMaxBraking",
      "body": [
          "GetVehicleClassMaxBraking(${1:int* vehicleClass})${0}"
      ],
      "description": ""
  },
  "5115": {
      "prefix": "GetVehicleClassMaxAgility",
      "body": [
          "GetVehicleClassMaxAgility(${1:int* vehicleClass})${0}"
      ],
      "description": ""
  },
  "5116": {
      "prefix": "GetVehicleClassMaxTraction",
      "body": [
          "GetVehicleClassMaxTraction(${1:int* vehicleClass})${0}"
      ],
      "description": ""
  },
  "5117": {
      "prefix": "GetVehicleColor",
      "body": [
          "GetVehicleColor(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "See [`SET_VEHICLE_CUSTOM_PRIMARY_COLOUR`](#\\_0x7141766F91D15BEA) and [`SET_VEHICLE_CUSTOM_SECONDARY_COLOUR`](#\\_0x36CED73BFED89754)."
  },
  "5118": {
      "prefix": "GetVehicleColourCombination",
      "body": [
          "GetVehicleColourCombination(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5119": {
      "prefix": "GetVehicleColours",
      "body": [
          "GetVehicleColours(${1:Vehicle* vehicle}, ${2:int* colorPrimary}, ${3:int* colorSecondary})${0}"
      ],
      "description": ""
  },
  "5120": {
      "prefix": "GetVehicleCountermeasureCount",
      "body": [
          "GetVehicleCountermeasureCount(${1:Vehicle* aircraft})${0}"
      ],
      "description": "Similar to [`_GET_AIRCRAFT_BOMB_COUNT`](#\\_0xEA12BD130D7569A1), this gets the amount of countermeasures that are present on this vehicle.\n\nUse [`_SET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\\_0x9BDA23BF666F0855) to set the current amount."
  },
  "5121": {
      "prefix": "GetVehicleCurrentSlipstreamDraft",
      "body": [
          "GetVehicleCurrentSlipstreamDraft(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).\nGET_VEHICLE_*\n```"
  },
  "5122": {
      "prefix": "GetVehicleCustomPrimaryColour",
      "body": [
          "GetVehicleCustomPrimaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "5123": {
      "prefix": "GetVehicleCustomSecondaryColour",
      "body": [
          "GetVehicleCustomSecondaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "5124": {
      "prefix": "GetVehicleDeformationAtPos",
      "body": [
          "GetVehicleDeformationAtPos(${1:Vehicle* vehicle}, ${2:float* offsetX}, ${3:float* offsetY}, ${4:float* offsetZ})${0}"
      ],
      "description": "```\nThe only example I can find of this function in the scripts, is this:  \nstruct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);  \n-----------------------------------------------------------------------------------------------------------------------------------------  \nPC scripts:  \nv_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);  \n```"
  },
  "5125": {
      "prefix": "GetVehicleDashboardColor",
      "body": [
          "GetVehicleDashboardColor(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": ""
  },
  "5126": {
      "prefix": "GetVehicleDoorAngleRatio",
      "body": [
          "GetVehicleDoorAngleRatio(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5127": {
      "prefix": "GetVehicleDirtLevel",
      "body": [
          "GetVehicleDirtLevel(${1:Vehicle* vehicle})${0}"
      ],
      "description": "A getter for [`SET_VEHICLE_DIRT_LEVEL`](#\\_0x79D3B596FE44EE8B)."
  },
  "5128": {
      "prefix": "GetVehicleDoorDestroyType",
      "body": [
          "GetVehicleDoorDestroyType(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)\n\nReturns vehicle door destroy type previously set with \\_SET_VEHICLE_DOOR_DESTROY_TYPE"
  },
  "5129": {
      "prefix": "GetVehicleDoorLockStatus",
      "body": [
          "GetVehicleDoorLockStatus(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nenum VehicleLockStatus = {\n    None = 0,\n    Unlocked = 1,\n    Locked = 2,\n    LockedForPlayer = 3,\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\n}\n```"
  },
  "5130": {
      "prefix": "GetVehicleDoorsLockedForPlayer",
      "body": [
          "GetVehicleDoorsLockedForPlayer(${1:Vehicle* vehicle}, ${2:Player* player})${0}"
      ],
      "description": ""
  },
  "5131": {
      "prefix": "GetVehicleEngineHealth",
      "body": [
          "GetVehicleEngineHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.  \nMinimum: -4000  \nMaximum: 1000  \n-4000: Engine is destroyed  \n0 and below: Engine catches fire and health rapidly declines  \n300: Engine is smoking and losing functionality  \n1000: Engine is perfect  \n```"
  },
  "5132": {
      "prefix": "GetVehicleEnveffScale",
      "body": [
          "GetVehicleEnveffScale(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nformerly known as _GET_VEHICLE_PAINT_FADE\nThe result is a value from 0-1, where 0 is fresh paint.\n```"
  },
  "5133": {
      "prefix": "GetVehicleFlightNozzlePosition",
      "body": [
          "GetVehicleFlightNozzlePosition(${1:Vehicle* aircraft})${0}"
      ],
      "description": ""
  },
  "5134": {
      "prefix": "GetVehicleEstimatedMaxSpeed",
      "body": [
          "GetVehicleEstimatedMaxSpeed(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5135": {
      "prefix": "GetVehicleExtraColours",
      "body": [
          "GetVehicleExtraColours(${1:Vehicle* vehicle}, ${2:int* pearlescentColor}, ${3:int* wheelColor})${0}"
      ],
      "description": ""
  },
  "5136": {
      "prefix": "GetVehicleHasParachute",
      "body": [
          "GetVehicleHasParachute(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5137": {
      "prefix": "GetVehicleInteriorColor",
      "body": [
          "GetVehicleInteriorColor(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": ""
  },
  "5138": {
      "prefix": "GetVehicleHasKers",
      "body": [
          "GetVehicleHasKers(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5139": {
      "prefix": "GetVehicleHomingLockonState",
      "body": [
          "GetVehicleHomingLockonState(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns a value depending on the lock-on state of vehicle weapons.\n0: not locked on\n1: locking on\n2: locked on\n```"
  },
  "5140": {
      "prefix": "GetVehicleLayoutHash",
      "body": [
          "GetVehicleLayoutHash(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5141": {
      "prefix": "GetVehicleLivery",
      "body": [
          "GetVehicleLivery(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\n-1 = no livery  \n```"
  },
  "5142": {
      "prefix": "GetVehicleLightsState",
      "body": [
          "GetVehicleLightsState(${1:Vehicle* vehicle}, ${2:BOOL* lightsOn}, ${3:BOOL* highbeamsOn})${0}"
      ],
      "description": ""
  },
  "5143": {
      "prefix": "GetVehicleLiveryCount",
      "body": [
          "GetVehicleLiveryCount(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns -1 if the vehicle has no livery  \n```"
  },
  "5144": {
      "prefix": "GetVehicleLockOnTarget",
      "body": [
          "GetVehicleLockOnTarget(${1:Vehicle* vehicle}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "5145": {
      "prefix": "GetVehicleMaxTraction",
      "body": [
          "GetVehicleMaxTraction(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5146": {
      "prefix": "GetVehicleMaxBraking",
      "body": [
          "GetVehicleMaxBraking(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5147": {
      "prefix": "GetVehicleModColor1",
      "body": [
          "GetVehicleModColor1(${1:Vehicle* vehicle}, ${2:int* paintType}, ${3:int* color}, ${4:int* pearlescentColor})${0}"
      ],
      "description": ""
  },
  "5148": {
      "prefix": "GetVehicleModColor2",
      "body": [
          "GetVehicleModColor2(${1:Vehicle* vehicle}, ${2:int* paintType}, ${3:int* color})${0}"
      ],
      "description": ""
  },
  "5149": {
      "prefix": "GetVehicleMaxNumberOfPassengers",
      "body": [
          "GetVehicleMaxNumberOfPassengers(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5150": {
      "prefix": "GetVehicleMod",
      "body": [
          "GetVehicleMod(${1:Vehicle* vehicle}, ${2:int* modType})${0}"
      ],
      "description": "```\nIn b944, there are 50 (0 - 49) mod types.  \nReturns -1 if the vehicle mod is stock  \n```"
  },
  "5151": {
      "prefix": "GetVehicleModColor2Name",
      "body": [
          "GetVehicleModColor2Name(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nreturns a string which is the codename of the vehicle's currently selected secondary color  \n```"
  },
  "5152": {
      "prefix": "GetVehicleModColor1Name",
      "body": [
          "GetVehicleModColor1Name(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nreturns a string which is the codename of the vehicle's currently selected primary color  \np1 is always 0  \n```"
  },
  "5153": {
      "prefix": "GetVehicleModIdentifierHash",
      "body": [
          "GetVehicleModIdentifierHash(${1:Vehicle* vehicle}, ${2:int* modType}, ${3:int* modIndex})${0}"
      ],
      "description": "```\nCan be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF\n```"
  },
  "5154": {
      "prefix": "GetVehicleModModifierValue",
      "body": [
          "GetVehicleModModifierValue(${1:Vehicle* vehicle}, ${2:int* modType}, ${3:int* modIndex})${0}"
      ],
      "description": ""
  },
  "5155": {
      "prefix": "GetVehicleModKit",
      "body": [
          "GetVehicleModKit(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5156": {
      "prefix": "GetVehicleModKitType",
      "body": [
          "GetVehicleModKitType(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5157": {
      "prefix": "GetVehicleModVariation",
      "body": [
          "GetVehicleModVariation(${1:Vehicle* vehicle}, ${2:int* modType})${0}"
      ],
      "description": "```\nOnly used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels\n```"
  },
  "5158": {
      "prefix": "GetVehicleModelAcceleration",
      "body": [
          "GetVehicleModelAcceleration(${1:Hash* modelHash})${0}"
      ],
      "description": "Returns the acceleration of the specified model."
  },
  "5159": {
      "prefix": "GetVehicleModelEstimatedAgility",
      "body": [
          "GetVehicleModelEstimatedAgility(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nGET_VEHICLE_MODEL_*\n9.8 * thrust if air vehicle, else 0.38 + drive force?\n```"
  },
  "5160": {
      "prefix": "GetVehicleModelEstimatedMaxSpeed",
      "body": [
          "GetVehicleModelEstimatedMaxSpeed(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nReturns max speed (without mods) of the specified vehicle model in m/s.\n```"
  },
  "5161": {
      "prefix": "GetVehicleModelMaxBraking",
      "body": [
          "GetVehicleModelMaxBraking(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nReturns max braking of the specified vehicle model.\n```"
  },
  "5162": {
      "prefix": "GetVehicleModelMaxKnots",
      "body": [
          "GetVehicleModelMaxKnots(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nGET_VEHICLE_MODEL_*\nFunction pertains only to aviation vehicles.\n```"
  },
  "5163": {
      "prefix": "GetVehicleModelMaxBrakingMaxMods",
      "body": [
          "GetVehicleModelMaxBrakingMaxMods(${1:Hash* modelHash})${0}"
      ],
      "description": ""
  },
  "5164": {
      "prefix": "GetVehicleModelMaxTraction",
      "body": [
          "GetVehicleModelMaxTraction(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nReturns max traction of the specified vehicle model.\n```"
  },
  "5165": {
      "prefix": "GetVehicleModelMonetaryValue",
      "body": [
          "GetVehicleModelMonetaryValue(${1:Hash* vehicleModel})${0}"
      ],
      "description": "```\nReturns `nMonetaryValue` from handling.meta for specific model.\n```"
  },
  "5166": {
      "prefix": "GetVehicleModelNumberOfSeats",
      "body": [
          "GetVehicleModelNumberOfSeats(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nReturns max number of passengers (including the driver) for the specified vehicle model.\n```"
  },
  "5167": {
      "prefix": "GetVehicleModelMoveResistance",
      "body": [
          "GetVehicleModelMoveResistance(${1:Hash* modelHash})${0}"
      ],
      "description": "```\nGET_VEHICLE_MODEL_*\ncalled if the vehicle is a boat -- returns vecMoveResistanceX?\n```"
  },
  "5168": {
      "prefix": "GetVehicleNeonLightsColour",
      "body": [
          "GetVehicleNeonLightsColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "Gets the color of the neon lights of the specified vehicle.\n\nSee [`_SET_VEHICLE_NEON_LIGHTS_COLOUR`](#\\_0x8E0A582209A62695) for more information"
  },
  "5169": {
      "prefix": "GetVehicleNumberOfBrokenBones",
      "body": [
          "GetVehicleNumberOfBrokenBones(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5170": {
      "prefix": "GetVehicleNumberOfBrokenOffBones",
      "body": [
          "GetVehicleNumberOfBrokenOffBones(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nAlso includes some \"turnOffBones\" when vehicle mods are installed.\n```"
  },
  "5171": {
      "prefix": "GetVehicleNumberOfPassengers",
      "body": [
          "GetVehicleNumberOfPassengers(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nGets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver  \n```"
  },
  "5172": {
      "prefix": "GetVehicleNumberPlateText",
      "body": [
          "GetVehicleNumberPlateText(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns the license plate text from a vehicle.  8 chars maximum.  \n```"
  },
  "5173": {
      "prefix": "GetVehicleNumberPlateTextIndex",
      "body": [
          "GetVehicleNumberPlateTextIndex(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns the PlateType of a vehicle  \nBlue_on_White_1 = 3,  \nBlue_on_White_2 = 0,  \nBlue_on_White_3 = 4,  \nYellow_on_Blue = 2,  \nYellow_on_Black = 1,  \nNorth_Yankton = 5,  \n```"
  },
  "5174": {
      "prefix": "GetVehiclePetrolTankHealth",
      "body": [
          "GetVehiclePetrolTankHealth(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\n1000 is max health  \nBegins leaking gas at around 650 health  \n```"
  },
  "5175": {
      "prefix": "GetVehiclePlateType",
      "body": [
          "GetVehiclePlateType(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5176": {
      "prefix": "GetVehicleRoofLivery",
      "body": [
          "GetVehicleRoofLivery(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns index of the current vehicle's rooftop livery.\nA getter for [\\_SET_VEHICLE_ROOF_LIVERY](#\\_0xA6D3A8750DC73270)."
  },
  "5177": {
      "prefix": "GetVehicleRecordingId",
      "body": [
          "GetVehicleRecordingId(${1:int* recording}, ${2:char* script})${0}"
      ],
      "description": "See [`REQUEST_VEHICLE_RECORDING`](#\\_0xAF514CABE74CBF15)."
  },
  "5178": {
      "prefix": "GetVehicleTrailerVehicle",
      "body": [
          "GetVehicleTrailerVehicle(${1:Vehicle* vehicle}, ${2:Vehicle* trailer})${0}"
      ],
      "description": "```\nGets the trailer of a vehicle and puts it into the trailer parameter.  \n```"
  },
  "5179": {
      "prefix": "GetVehicleRoofLiveryCount",
      "body": [
          "GetVehicleRoofLiveryCount(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available."
  },
  "5180": {
      "prefix": "GetVehicleSuspensionBounds",
      "body": [
          "GetVehicleSuspensionBounds(${1:Vehicle* vehicle}, ${2:Vector3* out1}, ${3:Vector3* out2})${0}"
      ],
      "description": "```\nOutputs 2 Vector3's.\nScripts check if out2.x - out1.x > something.x\nCould be suspension related, as in max suspension height and min suspension height, considering the natives location.\n```"
  },
  "5181": {
      "prefix": "GetVehicleTyreSmokeColor",
      "body": [
          "GetVehicleTyreSmokeColor(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "5182": {
      "prefix": "GetVehicleSuspensionHeight",
      "body": [
          "GetVehicleSuspensionHeight(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nGets the height of the vehicle's suspension.  \nThe higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.  \n0.000 is the stock suspension.  \n0.008 is Ultra Suspension.  \n```"
  },
  "5183": {
      "prefix": "GetVehicleWeaponCapacity",
      "body": [
          "GetVehicleWeaponCapacity(${1:Vehicle* vehicle}, ${2:int* weaponIndex})${0}"
      ],
      "description": ""
  },
  "5184": {
      "prefix": "GetVehicleWheelType",
      "body": [
          "GetVehicleWheelType(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns an int  \nWheel Types:  \n0: Sport  \n1: Muscle  \n2: Lowrider  \n3: SUV  \n4: Offroad  \n5: Tuner  \n6: Bike Wheels  \n7: High End\n8: Benny's Original\n9: Benny's Bespoke\n10: Open Wheel\n11: Street\nTested in Los Santos Customs  \n```"
  },
  "5185": {
      "prefix": "GetVehicleTyresCanBurst",
      "body": [
          "GetVehicleTyresCanBurst(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5186": {
      "prefix": "GetVehicleWindowTint",
      "body": [
          "GetVehicleWindowTint(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5187": {
      "prefix": "HasFilledVehiclePopulation",
      "body": [
          "HasFilledVehiclePopulation()${0}"
      ],
      "description": "```\nHAS_*\n```"
  },
  "5188": {
      "prefix": "HasVehiclePhoneExplosiveDevice",
      "body": [
          "HasVehiclePhoneExplosiveDevice()${0}"
      ],
      "description": ""
  },
  "5189": {
      "prefix": "GetVehicleXenonLightsColor",
      "body": [
          "GetVehicleXenonLightsColor(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Returns the headlight color index from the vehicle. Value between 0, 12.\nUse [\\_SET_VEHICLE_HEADLIGHTS_COLOUR](#\\_0xE41033B25D003A07) to set the headlights color for the vehicle.\nMust enable xenon headlights before it'll take affect.\n\nList of colors and ids:\n\n```\nenum headlightColors {\n    Default = -1,\n    White = 0,\n    Blue = 1,\n    Electric_Blue = 2,\n    Mint_Green = 3,\n    Lime_Green = 4,\n    Yellow = 5,\n    Golden_Shower = 6,\n    Orange = 7,\n    Red = 8,\n    Pony_Pink = 9,\n    Hot_Pink = 10,\n    Purple = 11,\n    Blacklight = 12\n}\n```"
  },
  "5190": {
      "prefix": "HaveVehicleModsStreamedIn",
      "body": [
          "HaveVehicleModsStreamedIn(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5191": {
      "prefix": "HasPreloadModsFinished",
      "body": [
          "HasPreloadModsFinished(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "5192": {
      "prefix": "HideVehicleTombstone",
      "body": [
          "HideVehicleTombstone(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "5193": {
      "prefix": "HasVehicleAssetLoaded",
      "body": [
          "HasVehicleAssetLoaded(${1:int* vehicleAsset})${0}"
      ],
      "description": ""
  },
  "5194": {
      "prefix": "IsAnyEntityAttachedToHandlerFrame",
      "body": [
          "IsAnyEntityAttachedToHandlerFrame(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5195": {
      "prefix": "HasVehicleRecordingBeenLoaded",
      "body": [
          "HasVehicleRecordingBeenLoaded(${1:int* recording}, ${2:char* script})${0}"
      ],
      "description": ""
  },
  "5196": {
      "prefix": "InstantlyFillVehiclePopulation",
      "body": [
          "InstantlyFillVehiclePopulation()${0}"
      ],
      "description": ""
  },
  "5197": {
      "prefix": "IsAnyPedRappellingFromHeli",
      "body": [
          "IsAnyPedRappellingFromHeli(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5198": {
      "prefix": "IsBigVehicle",
      "body": [
          "IsBigVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5199": {
      "prefix": "IsAnyVehicleNearPoint",
      "body": [
          "IsAnyVehicleNearPoint(${1:float* x}, ${2:float* y}, ${3:float* z}, ${4:float* radius})${0}"
      ],
      "description": ""
  },
  "5200": {
      "prefix": "IsCopVehicleInArea3d",
      "body": [
          "IsCopVehicleInArea3d(${1:float* x1}, ${2:float* x2}, ${3:float* y1}, ${4:float* y2}, ${5:float* z1}, ${6:float* z2})${0}"
      ],
      "description": "```\nUsage:  \npublic bool isCopInRange(Vector3 Location, float Range)  \n        {  \n            return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);  \n        }  \n```"
  },
  "5201": {
      "prefix": "IsBoatAnchoredAndFrozen",
      "body": [
          "IsBoatAnchoredAndFrozen(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nIS_*\n```"
  },
  "5202": {
      "prefix": "IsHandlerFrameAboveContainer",
      "body": [
          "IsHandlerFrameAboveContainer(${1:Vehicle* handler}, ${2:Entity* container})${0}"
      ],
      "description": ""
  },
  "5203": {
      "prefix": "IsEntityAttachedToHandlerFrame",
      "body": [
          "IsEntityAttachedToHandlerFrame(${1:Vehicle* vehicle}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "5204": {
      "prefix": "IsHeliLandingAreaBlocked",
      "body": [
          "IsHeliLandingAreaBlocked(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5205": {
      "prefix": "IsHeliPartBroken",
      "body": [
          "IsHeliPartBroken(${1:Vehicle* vehicle}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "5206": {
      "prefix": "IsMissionTrain",
      "body": [
          "IsMissionTrain(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5207": {
      "prefix": "IsPedExclusiveDriverOfVehicle",
      "body": [
          "IsPedExclusiveDriverOfVehicle(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* outIndex})${0}"
      ],
      "description": ""
  },
  "5208": {
      "prefix": "IsPlaneLandingGearIntact",
      "body": [
          "IsPlaneLandingGearIntact(${1:Vehicle* plane})${0}"
      ],
      "description": ""
  },
  "5209": {
      "prefix": "IsPlaybackGoingOnForVehicle",
      "body": [
          "IsPlaybackGoingOnForVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5210": {
      "prefix": "IsPlaybackUsingAiGoingOnForVehicle",
      "body": [
          "IsPlaybackUsingAiGoingOnForVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5211": {
      "prefix": "IsSeatWarpOnly",
      "body": [
          "IsSeatWarpOnly(${1:Vehicle* vehicle}, ${2:int* seatIndex})${0}"
      ],
      "description": ""
  },
  "5212": {
      "prefix": "IsTaxiLightOn",
      "body": [
          "IsTaxiLightOn(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5213": {
      "prefix": "IsThisModelABicycle",
      "body": [
          "IsThisModelABicycle(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5214": {
      "prefix": "IsThisModelABoat",
      "body": [
          "IsThisModelABoat(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5215": {
      "prefix": "IsThisModelABike",
      "body": [
          "IsThisModelABike(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5216": {
      "prefix": "IsThisModelACar",
      "body": [
          "IsThisModelACar(${1:Hash* model})${0}"
      ],
      "description": "```\nTo check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)  \n```"
  },
  "5217": {
      "prefix": "IsThisModelAPlane",
      "body": [
          "IsThisModelAPlane(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5218": {
      "prefix": "IsThisModelAHeli",
      "body": [
          "IsThisModelAHeli(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5219": {
      "prefix": "IsThisModelAQuadbike",
      "body": [
          "IsThisModelAQuadbike(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5220": {
      "prefix": "IsThisModelAJetski",
      "body": [
          "IsThisModelAJetski(${1:Hash* model})${0}"
      ],
      "description": "```\nChecks if model is a boat, then checks for FLAG_IS_JETSKI.\n```"
  },
  "5221": {
      "prefix": "IsThisModelAnAmphibiousCar",
      "body": [
          "IsThisModelAnAmphibiousCar(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5222": {
      "prefix": "IsThisModelATrain",
      "body": [
          "IsThisModelATrain(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5223": {
      "prefix": "IsToggleModOn",
      "body": [
          "IsToggleModOn(${1:Vehicle* vehicle}, ${2:int* modType})${0}"
      ],
      "description": ""
  },
  "5224": {
      "prefix": "IsThisModelAnAmphibiousQuadbike",
      "body": [
          "IsThisModelAnAmphibiousQuadbike(${1:Hash* model})${0}"
      ],
      "description": ""
  },
  "5225": {
      "prefix": "IsVehicleAConvertible",
      "body": [
          "IsVehicleAConvertible(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np1 is false almost always.  \nHowever, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF  \n```"
  },
  "5226": {
      "prefix": "IsVehicleAlarmActivated",
      "body": [
          "IsVehicleAlarmActivated(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5227": {
      "prefix": "IsTurretSeat",
      "body": [
          "IsTurretSeat(${1:Vehicle* vehicle}, ${2:int* seatIndex})${0}"
      ],
      "description": ""
  },
  "5228": {
      "prefix": "IsVehicleAttachedToCargobob",
      "body": [
          "IsVehicleAttachedToCargobob(${1:Vehicle* cargobob}, ${2:Vehicle* vehicleAttached})${0}"
      ],
      "description": ""
  },
  "5229": {
      "prefix": "IsVehicleAttachedToTrailer",
      "body": [
          "IsVehicleAttachedToTrailer(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5230": {
      "prefix": "IsVehicleBumperBouncing",
      "body": [
          "IsVehicleBumperBouncing(${1:Vehicle* vehicle}, ${2:BOOL* frontBumper})${0}"
      ],
      "description": ""
  },
  "5231": {
      "prefix": "IsVehicleAttachedToTowTruck",
      "body": [
          "IsVehicleAttachedToTowTruck(${1:Vehicle* towTruck}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": "```\nScripts verify that towTruck is the first parameter, not the second.  \n```"
  },
  "5232": {
      "prefix": "IsVehicleDoorDamaged",
      "body": [
          "IsVehicleDoorDamaged(${1:Vehicle* veh}, ${2:int* doorID})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5233": {
      "prefix": "IsVehicleBeingHalted",
      "body": [
          "IsVehicleBeingHalted(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns true if vehicle is halted by BRING_VEHICLE_TO_HALT\n_IS_VEHICLE_*\n```\n\n```\nNativeDB Introduced: v1493\n```"
  },
  "5234": {
      "prefix": "IsVehicleBumperBrokenOff",
      "body": [
          "IsVehicleBumperBrokenOff(${1:Vehicle* vehicle}, ${2:BOOL* front})${0}"
      ],
      "description": ""
  },
  "5235": {
      "prefix": "IsVehicleDamaged",
      "body": [
          "IsVehicleDamaged(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nAppears to return true if the vehicle has any damage, including cosmetically.\nGET_*\n```"
  },
  "5236": {
      "prefix": "IsVehicleDriveable",
      "body": [
          "IsVehicleDriveable(${1:Vehicle* vehicle}, ${2:BOOL* isOnFireCheck})${0}"
      ],
      "description": "```\np1 is always 0 in the scripts.  \np1 = check if vehicle is on fire  \n```"
  },
  "5237": {
      "prefix": "IsVehicleDoorFullyOpen",
      "body": [
          "IsVehicleDoorFullyOpen(${1:Vehicle* vehicle}, ${2:int* doorIndex})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5238": {
      "prefix": "IsVehicleExtraTurnedOn",
      "body": [
          "IsVehicleExtraTurnedOn(${1:Vehicle* vehicle}, ${2:int* extraId})${0}"
      ],
      "description": ""
  },
  "5239": {
      "prefix": "IsVehicleInBurnout",
      "body": [
          "IsVehicleInBurnout(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns whether the specified vehicle is currently in a burnout.  \nvb.net  \nPublic Function isVehicleInBurnout(vh As Vehicle) As Boolean  \n        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)  \n    End Function  \n```"
  },
  "5240": {
      "prefix": "IsVehicleEngineOnFire",
      "body": [
          "IsVehicleEngineOnFire(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Only ever used once in decompiled scripts: **am_pi_menu**:\nReturns true if the engine is on fire, or if the vehicle engine health is < 0 and it **has been** on fire.\n\nIt sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are.\n\nThis usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true."
  },
  "5241": {
      "prefix": "IsVehicleModel",
      "body": [
          "IsVehicleModel(${1:Vehicle* vehicle}, ${2:Hash* model})${0}"
      ],
      "description": ""
  },
  "5242": {
      "prefix": "IsVehicleHighDetail",
      "body": [
          "IsVehicleHighDetail(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5243": {
      "prefix": "IsVehicleInGarageArea",
      "body": [
          "IsVehicleInGarageArea(${1:char* garageName}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": "```\ngarageName example \"Michael - Beverly Hills\"\n```"
  },
  "5244": {
      "prefix": "IsVehicleOnAllWheels",
      "body": [
          "IsVehicleOnAllWheels(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nPublic Function isVehicleOnAllWheels(vh As Vehicle) As Boolean  \nReturn Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)  \n\t\t    End Function  \n```"
  },
  "5245": {
      "prefix": "IsVehicleNeonLightEnabled",
      "body": [
          "IsVehicleNeonLightEnabled(${1:Vehicle* vehicle}, ${2:int* index})${0}"
      ],
      "description": "```\nindices:  \n0 = Left  \n1 = Right  \n2 = Front  \n3 = Back  \n```"
  },
  "5246": {
      "prefix": "IsVehicleParachuteActive",
      "body": [
          "IsVehicleParachuteActive(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Does not work for vehicle of type: CBike, CBmx, CBoat, CTrain, CSubmarine."
  },
  "5247": {
      "prefix": "IsVehicleRocketBoostActive",
      "body": [
          "IsVehicleRocketBoostActive(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5248": {
      "prefix": "IsVehicleSearchlightOn",
      "body": [
          "IsVehicleSearchlightOn(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nPossibly: Returns whether the searchlight (found on police vehicles) is toggled on.  \n```"
  },
  "5249": {
      "prefix": "IsVehicleSeatAccessible",
      "body": [
          "IsVehicleSeatAccessible(${1:Ped* ped}, ${2:Vehicle* vehicle}, ${3:int* seatIndex}, ${4:BOOL* side}, ${5:BOOL* onEnter})${0}"
      ],
      "description": "```\nCheck if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).\nseatIndex  = -1 being the driver seat.\nUse GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.\nside = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.\nonEnter = check if you can enter (true) or exit (false) a vehicle.\n```"
  },
  "5250": {
      "prefix": "IsVehicleSeatFree",
      "body": [
          "IsVehicleSeatFree(${1:Vehicle* vehicle}, ${2:int* seatIndex})${0}"
      ],
      "description": "```\nUse GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.\nisTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.\n```\n\n```\nNativeDB Added Parameter 3: BOOL isTaskRunning\n```"
  },
  "5251": {
      "prefix": "IsVehicleSirenOn",
      "body": [
          "IsVehicleSirenOn(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5252": {
      "prefix": "IsVehicleSirenAudioOn",
      "body": [
          "IsVehicleSirenAudioOn(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5253": {
      "prefix": "IsVehicleSlipstreamLeader",
      "body": [
          "IsVehicleSlipstreamLeader(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5254": {
      "prefix": "IsVehicleSprayable",
      "body": [
          "IsVehicleSprayable(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns false if the vehicle has the FLAG_NO_RESPRAY flag set.\n```"
  },
  "5255": {
      "prefix": "IsVehicleStopped",
      "body": [
          "IsVehicleStopped(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nReturns true if the vehicle's current speed is less than, or equal to 0.0025f.\nFor some vehicles it returns true if the current speed is <= 0.00039999999.\n```"
  },
  "5256": {
      "prefix": "IsVehicleStolen",
      "body": [
          "IsVehicleStolen(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5257": {
      "prefix": "IsVehicleStuckOnRoof",
      "body": [
          "IsVehicleStuckOnRoof(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5258": {
      "prefix": "IsVehicleStoppedAtTrafficLights",
      "body": [
          "IsVehicleStoppedAtTrafficLights(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nIs this for red lights only?  more testing required.\n```"
  },
  "5259": {
      "prefix": "IsVehicleStuckTimerUp",
      "body": [
          "IsVehicleStuckTimerUp(${1:Vehicle* vehicle}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\np1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.  \n```"
  },
  "5260": {
      "prefix": "IsVehicleTyreBurst",
      "body": [
          "IsVehicleTyreBurst(${1:Vehicle* vehicle}, ${2:int* wheelID}, ${3:BOOL* completely})${0}"
      ],
      "description": "```\nwheelID used for 4 wheelers seem to be (0, 1, 4, 5)  \ncompletely - is to check if tire completely gone from rim.  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n```"
  },
  "5261": {
      "prefix": "IsVehicleVisible",
      "body": [
          "IsVehicleVisible(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5262": {
      "prefix": "LowerConvertibleRoof",
      "body": [
          "LowerConvertibleRoof(${1:Vehicle* vehicle}, ${2:BOOL* instantlyLower})${0}"
      ],
      "description": ""
  },
  "5263": {
      "prefix": "IsVehicleWeaponDisabled",
      "body": [
          "IsVehicleWeaponDisabled(${1:Hash* weaponHash}, ${2:Vehicle* vehicle}, ${3:Ped* owner})${0}"
      ],
      "description": ""
  },
  "5264": {
      "prefix": "ModifyVehicleTopSpeed",
      "body": [
          "ModifyVehicleTopSpeed(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "5265": {
      "prefix": "IsVehicleWindowIntact",
      "body": [
          "IsVehicleWindowIntact(${1:Vehicle* vehicle}, ${2:int* windowIndex})${0}"
      ],
      "description": "```cpp\nenum eWindowId {\n\tVEH_EXT_WINDSCREEN = 0,\n\tVEH_EXT_WINDSCREEN_R = 1,\n\tVEH_EXT_WINDOW_LF = 2,\n\tVEH_EXT_WINDOW_RF = 3,\n\tVEH_EXT_WINDOW_LR = 4,\n\tVEH_EXT_WINDOW_RR = 5,\n\tVEH_EXT_WINDOW_LM = 6,\n\tVEH_EXT_WINDOW_RM = 7,\n}\n```"
  },
  "5266": {
      "prefix": "LowerRetractableWheels",
      "body": [
          "LowerRetractableWheels(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5267": {
      "prefix": "OpenBombBayDoors",
      "body": [
          "OpenBombBayDoors(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5268": {
      "prefix": "NetworkUseHighPrecisionVehicleBlending",
      "body": [
          "NetworkUseHighPrecisionVehicleBlending(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nImplemented only for Trains.\n```\n\n```\nNativeDB Introduced: v2372\n```"
  },
  "5269": {
      "prefix": "PopOutVehicleWindscreen",
      "body": [
          "PopOutVehicleWindscreen(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Detaches the vehicle's windscreen."
  },
  "5270": {
      "prefix": "PausePlaybackRecordedVehicle",
      "body": [
          "PausePlaybackRecordedVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5271": {
      "prefix": "RaiseConvertibleRoof",
      "body": [
          "RaiseConvertibleRoof(${1:Vehicle* vehicle}, ${2:BOOL* instantlyRaise})${0}"
      ],
      "description": ""
  },
  "5272": {
      "prefix": "PreloadVehicleMod",
      "body": [
          "PreloadVehicleMod(${1:Any* p0}, ${2:int* modType}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "5273": {
      "prefix": "ReleasePreloadMods",
      "body": [
          "ReleasePreloadMods(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5274": {
      "prefix": "RaiseRetractableWheels",
      "body": [
          "RaiseRetractableWheels(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5275": {
      "prefix": "RemoveRoadNodeSpeedZone",
      "body": [
          "RemoveRoadNodeSpeedZone(${1:int* speedzone})${0}"
      ],
      "description": ""
  },
  "5276": {
      "prefix": "RemovePickUpRopeForCargobob",
      "body": [
          "RemovePickUpRopeForCargobob(${1:Vehicle* cargobob})${0}"
      ],
      "description": "```\nRetracts the hook on the cargobob.  \nNote: after you retract it the natives for dropping the hook no longer work  \n```"
  },
  "5277": {
      "prefix": "RemoveVehicleCombatAvoidanceArea",
      "body": [
          "RemoveVehicleCombatAvoidanceArea(${1:Any* p0})${0}"
      ],
      "description": ""
  },
  "5278": {
      "prefix": "RemoveVehicleAsset",
      "body": [
          "RemoveVehicleAsset(${1:int* vehicleAsset})${0}"
      ],
      "description": ""
  },
  "5279": {
      "prefix": "RemoveVehicleMod",
      "body": [
          "RemoveVehicleMod(${1:Vehicle* vehicle}, ${2:int* modType})${0}"
      ],
      "description": ""
  },
  "5280": {
      "prefix": "RemoveVehicleHighDetailModel",
      "body": [
          "RemoveVehicleHighDetailModel(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5281": {
      "prefix": "RemoveVehicleShadowEffect",
      "body": [
          "RemoveVehicleShadowEffect(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Remove the weird shadow applied by [\\_SET_VEHICLE_SHADOW_EFFECT](#\\_0x2A70BAE8883E4C81)"
  },
  "5282": {
      "prefix": "RemoveVehicleRecording",
      "body": [
          "RemoveVehicleRecording(${1:int* recording}, ${2:char* script})${0}"
      ],
      "description": "See [REQUEST_VEHICLE_RECORDING](#\\_0xAF514CABE74CBF15)"
  },
  "5283": {
      "prefix": "RemoveVehicleStuckCheck",
      "body": [
          "RemoveVehicleStuckCheck(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5284": {
      "prefix": "RemoveVehicleUpsidedownCheck",
      "body": [
          "RemoveVehicleUpsidedownCheck(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5285": {
      "prefix": "RemoveVehiclesFromGeneratorsInArea",
      "body": [
          "RemoveVehiclesFromGeneratorsInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:Any* unk})${0}"
      ],
      "description": ""
  },
  "5286": {
      "prefix": "RemoveVehicleWindow",
      "body": [
          "RemoveVehicleWindow(${1:Vehicle* vehicle}, ${2:int* windowIndex})${0}"
      ],
      "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1)."
  },
  "5287": {
      "prefix": "RequestVehicleAsset",
      "body": [
          "RequestVehicleAsset(${1:Hash* vehicleHash}, ${2:int* vehicleAsset})${0}"
      ],
      "description": "```\nREQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);  \nvehicle found that have asset's:  \ncargobob3  \nsubmersible  \nblazer  \n```"
  },
  "5288": {
      "prefix": "RequestVehicleDashboardScaleformMovie",
      "body": [
          "RequestVehicleDashboardScaleformMovie(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nREQUEST_VEHICLE_*  \n```"
  },
  "5289": {
      "prefix": "RequestVehicleHighDetailModel",
      "body": [
          "RequestVehicleHighDetailModel(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5290": {
      "prefix": "RequestVehicleRecording",
      "body": [
          "RequestVehicleRecording(${1:int* recording}, ${2:char* script})${0}"
      ],
      "description": "```\nRequest the vehicle recording defined by the lowercase format string \"%s%03d.yvr\". For example, REQUEST_VEHICLE_RECORDING(1, \"FBIs1UBER\") corresponds to fbis1uber001.yvr.\nFor all vehicle recording/playback natives, \"script\" is a common prefix that usually corresponds to the script/mission the recording is used in, \"recording\" is its int suffix, and \"id\" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.\nNote that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.\n```"
  },
  "5291": {
      "prefix": "ResetVehicleStuckTimer",
      "body": [
          "ResetVehicleStuckTimer(${1:Vehicle* vehicle}, ${2:int* nullAttributes})${0}"
      ],
      "description": "```\nThe inner function has a switch on the second parameter. It's the stuck timer index.  \nHere's some pseudo code I wrote for the inner function:  \nvoid __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)  \n{  \n\tswitch (timerIndex)  \n\t{  \n\tcase 0:  \nunknownClassInVehicle->FirstStuckTimer = (WORD)0u;  \n\tcase 1:  \nunknownClassInVehicle->SecondStuckTimer = (WORD)0u;  \n\tcase 2:  \nunknownClassInVehicle->ThirdStuckTimer = (WORD)0u;  \n\tcase 3:  \nunknownClassInVehicle->FourthStuckTimer = (WORD)0u;  \n\tcase 4:  \nunknownClassInVehicle->FirstStuckTimer = (WORD)0u;  \nunknownClassInVehicle->SecondStuckTimer = (WORD)0u;  \nunknownClassInVehicle->ThirdStuckTimer = (WORD)0u;  \nunknownClassInVehicle->FourthStuckTimer = (WORD)0u;  \nbreak;  \n\t};  \n}  \n```"
  },
  "5292": {
      "prefix": "ResetVehicleWheels",
      "body": [
          "ResetVehicleWheels(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5293": {
      "prefix": "RollDownWindow",
      "body": [
          "RollDownWindow(${1:Vehicle* vehicle}, ${2:int* windowIndex})${0}"
      ],
      "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1)."
  },
  "5294": {
      "prefix": "RollUpWindow",
      "body": [
          "RollUpWindow(${1:Vehicle* vehicle}, ${2:int* windowIndex})${0}"
      ],
      "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1)."
  },
  "5295": {
      "prefix": "RollDownWindows",
      "body": [
          "RollDownWindows(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nRoll down all the windows of the vehicle passed through the first parameter.  \n```"
  },
  "5296": {
      "prefix": "SetAllLowPriorityVehicleGeneratorsActive",
      "body": [
          "SetAllLowPriorityVehicleGeneratorsActive(${1:BOOL* active})${0}"
      ],
      "description": ""
  },
  "5297": {
      "prefix": "SetAllVehicleGeneratorsActiveInArea",
      "body": [
          "SetAllVehicleGeneratorsActiveInArea(${1:float* x1}, ${2:float* y1}, ${3:float* z1}, ${4:float* x2}, ${5:float* y2}, ${6:float* z2}, ${7:BOOL* p6}, ${8:BOOL* p7})${0}"
      ],
      "description": ""
  },
  "5298": {
      "prefix": "SetAmbientVehicleRangeMultiplierThisFrame",
      "body": [
          "SetAmbientVehicleRangeMultiplierThisFrame(${1:float* range})${0}"
      ],
      "description": ""
  },
  "5299": {
      "prefix": "SetAllVehicleGeneratorsActive",
      "body": [
          "SetAllVehicleGeneratorsActive()${0}"
      ],
      "description": ""
  },
  "5300": {
      "prefix": "SetBoatAnchor",
      "body": [
          "SetBoatAnchor(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5301": {
      "prefix": "SetBikeOnStand",
      "body": [
          "SetBikeOnStand(${1:Vehicle* vehicle}, ${2:float* x}, ${3:float* y})${0}"
      ],
      "description": "```\nOnly works on bikes, both X and Y work in the -1 - 1 range.\nX forces the bike to turn left or right (-1, 1)\nY forces the bike to lean to the left or to the right (-1, 1)\nExample with X -1/Y 1\nhttp://i.imgur.com/TgIuAPJ.jpg\n```"
  },
  "5302": {
      "prefix": "SetBoatBoomPositionRatio",
      "body": [
          "SetBoatBoomPositionRatio(${1:Vehicle* vehicle}, ${2:float* ratio})${0}"
      ],
      "description": "Sets the boat boom position for the `TR3` trailer.\n\nRatio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.\n\nTo get the current boom position ratio, use [GET_BOAT_BOOM_POSITION_RATIO](#\\_0x6636C535F6CC2725)."
  },
  "5303": {
      "prefix": "SetBoatDisableAvoidance",
      "body": [
          "SetBoatDisableAvoidance(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5304": {
      "prefix": "SetBoatFrozenWhenAnchored",
      "body": [
          "SetBoatFrozenWhenAnchored(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5305": {
      "prefix": "SetBoatIsSinking",
      "body": [
          "SetBoatIsSinking(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5306": {
      "prefix": "SetBoatSinksWhenWrecked",
      "body": [
          "SetBoatSinksWhenWrecked(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5307": {
      "prefix": "SetBoatMovementResistance",
      "body": [
          "SetBoatMovementResistance(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "5308": {
      "prefix": "SetCanResprayVehicle",
      "body": [
          "SetCanResprayVehicle(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": "```\nHardcoded to not work in multiplayer.  \n```"
  },
  "5309": {
      "prefix": "SetCarHighSpeedBumpSeverityMultiplier",
      "body": [
          "SetCarHighSpeedBumpSeverityMultiplier(${1:float* multiplier})${0}"
      ],
      "description": "```\nSomething to do with \"high speed bump severity\"?  \nif (!sub_87a46(\"SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER\")) {  \n    VEHICLE::_84FD40F56075E816(0.0);  \n    sub_8795b(\"SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER\", 1);  \n}  \n```"
  },
  "5310": {
      "prefix": "SetCamberedWheelsDisabled",
      "body": [
          "SetCamberedWheelsDisabled(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5311": {
      "prefix": "SetCarBootOpen",
      "body": [
          "SetCarBootOpen(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5312": {
      "prefix": "SetCargobobHookCanAttach",
      "body": [
          "SetCargobobHookCanAttach(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nStops the cargobob from being able to attach any vehicle\n```\n\n```\nNativeDB Introduced: v1180\n```"
  },
  "5313": {
      "prefix": "SetCargobobHookCanDetach",
      "body": [
          "SetCargobobHookCanDetach(${1:Vehicle* cargobob}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nStops cargobob from beeing able to detach the attached vehicle.\n```"
  },
  "5314": {
      "prefix": "SetCargobobPickupMagnetActive",
      "body": [
          "SetCargobobPickupMagnetActive(${1:Vehicle* cargobob}, ${2:BOOL* isActive})${0}"
      ],
      "description": "```\nWon't attract or magnetize to any helicopters or planes of course, but that's common sense.  \n```"
  },
  "5315": {
      "prefix": "SetCargobobPickupMagnetEffectRadius",
      "body": [
          "SetCargobobPickupMagnetEffectRadius(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5316": {
      "prefix": "SetCargobobPickupMagnetFalloff",
      "body": [
          "SetCargobobPickupMagnetFalloff(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5317": {
      "prefix": "SetCargobobPickupMagnetReducedFalloff",
      "body": [
          "SetCargobobPickupMagnetReducedFalloff(${1:Vehicle* cargobob}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5318": {
      "prefix": "SetCargobobPickupMagnetPullRopeLength",
      "body": [
          "SetCargobobPickupMagnetPullRopeLength(${1:Vehicle* cargobob}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5319": {
      "prefix": "SetCargobobPickupMagnetPullStrength",
      "body": [
          "SetCargobobPickupMagnetPullStrength(${1:Vehicle* cargobob}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5320": {
      "prefix": "SetCargobobPickupMagnetReducedStrength",
      "body": [
          "SetCargobobPickupMagnetReducedStrength(${1:Vehicle* cargobob}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5321": {
      "prefix": "SetCargobobPickupMagnetStrength",
      "body": [
          "SetCargobobPickupMagnetStrength(${1:Vehicle* cargobob}, ${2:float* strength})${0}"
      ],
      "description": ""
  },
  "5322": {
      "prefix": "SetCargobobPickupRopeDampingMultiplier",
      "body": [
          "SetCargobobPickupRopeDampingMultiplier(${1:Vehicle* cargobob}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5323": {
      "prefix": "SetCargobobPickupRopeType",
      "body": [
          "SetCargobobPickupRopeType(${1:Vehicle* vehicle}, ${2:int* state})${0}"
      ],
      "description": ""
  },
  "5324": {
      "prefix": "SetConvertibleRoof",
      "body": [
          "SetConvertibleRoof(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5325": {
      "prefix": "SetConvertibleRoofLatchState",
      "body": [
          "SetConvertibleRoofLatchState(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": ""
  },
  "5326": {
      "prefix": "SetDeployHeliStubWings",
      "body": [
          "SetDeployHeliStubWings(${1:Vehicle* vehicle}, ${2:BOOL* deploy}, ${3:BOOL* p2})${0}"
      ],
      "description": "Only used with the \"akula\" and \"annihilator2\" in the decompiled native scripts.\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "5327": {
      "prefix": "SetDisablePretendOccupants",
      "body": [
          "SetDisablePretendOccupants(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5328": {
      "prefix": "SetDisableRandomTrainsThisFrame",
      "body": [
          "SetDisableRandomTrainsThisFrame(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5329": {
      "prefix": "SetDisableTurretMovementThisFrame",
      "body": [
          "SetDisableTurretMovementThisFrame(${1:Vehicle* vehicle}, ${2:int* turretIdx})${0}"
      ],
      "description": "Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.\n\n```\nNativeDB Introduced: v1365\n```"
  },
  "5330": {
      "prefix": "SetDisableSuperdummyMode",
      "body": [
          "SetDisableSuperdummyMode(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5331": {
      "prefix": "SetDisableVehicleEngineFires",
      "body": [
          "SetDisableVehicleEngineFires(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5332": {
      "prefix": "SetDisableVehicleFlightNozzlePosition",
      "body": [
          "SetDisableVehicleFlightNozzlePosition(${1:Vehicle* vehicle}, ${2:BOOL* direction})${0}"
      ],
      "description": "```\nTrue stops vtols from switching modes. Doesn't stop the sound though.\n```\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "5333": {
      "prefix": "SetDisableVehiclePetrolTankDamage",
      "body": [
          "SetDisableVehiclePetrolTankDamage(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5334": {
      "prefix": "SetDisableVehiclePetrolTankFires",
      "body": [
          "SetDisableVehiclePetrolTankFires(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5335": {
      "prefix": "SetDistantCarsEnabled",
      "body": [
          "SetDistantCarsEnabled(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles to render distant vehicles. They may not be vehicles but images to look like vehicles.  \n```"
  },
  "5336": {
      "prefix": "SetDisableVehicleUnk",
      "body": [
          "SetDisableVehicleUnk(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "5337": {
      "prefix": "SetDisableVehicleUnk2",
      "body": [
          "SetDisableVehicleUnk2(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\n```"
  },
  "5338": {
      "prefix": "SetDriftTyresEnabled",
      "body": [
          "SetDriftTyresEnabled(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5339": {
      "prefix": "SetEnableVehicleSlipstreaming",
      "body": [
          "SetEnableVehicleSlipstreaming(${1:BOOL* toggle})${0}"
      ],
      "description": "Enable/Disables global slipstream physics"
  },
  "5340": {
      "prefix": "SetDisableVehicleWindowCollisions",
      "body": [
          "SetDisableVehicleWindowCollisions(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "R\\* used it to \"remove\" vehicle windows when \"nightshark\" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)"
  },
  "5341": {
      "prefix": "SetFarDrawVehicles",
      "body": [
          "SetFarDrawVehicles(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5342": {
      "prefix": "SetForcedBoatLocationWhenAnchored",
      "body": [
          "SetForcedBoatLocationWhenAnchored(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nX,Y position of boat is frozen in place when anchored and its engine disabled, only the Z value changes. Requires 0xE3EBAAE484798530 to be set to true.\nSET_FORCED_ZENITH_QUADTREE?\n```"
  },
  "5343": {
      "prefix": "SetForceHdVehicle",
      "body": [
          "SetForceHdVehicle(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5344": {
      "prefix": "SetForkliftForkHeight",
      "body": [
          "SetForkliftForkHeight(${1:Vehicle* vehicle}, ${2:float* height})${0}"
      ],
      "description": "```\n0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol\n```"
  },
  "5345": {
      "prefix": "SetGarbageTrucks",
      "body": [
          "SetGarbageTrucks(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5346": {
      "prefix": "SetHeliBladesFullSpeed",
      "body": [
          "SetHeliBladesFullSpeed(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nEquivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);  \nthis native works on planes to?  \n```"
  },
  "5347": {
      "prefix": "SetHeliBladesSpeed",
      "body": [
          "SetHeliBladesSpeed(${1:Vehicle* vehicle}, ${2:float* speed})${0}"
      ],
      "description": "```\nSets the speed of the helicopter blades in percentage of the full speed.  \nvehicleHandle: The helicopter.  \nspeed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.  \n```"
  },
  "5348": {
      "prefix": "SetHeliMainRotorHealth",
      "body": [
          "SetHeliMainRotorHealth(${1:Vehicle* vehicle}, ${2:float* health})${0}"
      ],
      "description": ""
  },
  "5349": {
      "prefix": "SetHeliTailRotorHealth",
      "body": [
          "SetHeliTailRotorHealth(${1:Vehicle* vehicle}, ${2:float* health})${0}"
      ],
      "description": ""
  },
  "5350": {
      "prefix": "SetHeliTailExplodeThrowDashboard",
      "body": [
          "SetHeliTailExplodeThrowDashboard(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5351": {
      "prefix": "SetHeliTurbulenceScalar",
      "body": [
          "SetHeliTurbulenceScalar(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5352": {
      "prefix": "SetHelicopterRollPitchYawMult",
      "body": [
          "SetHelicopterRollPitchYawMult(${1:Vehicle* helicopter}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nvalue between 0.0 and 1.0  \n```"
  },
  "5353": {
      "prefix": "SetHydraulicRaised",
      "body": [
          "SetHydraulicRaised(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5354": {
      "prefix": "SetHydraulicWheelState",
      "body": [
          "SetHydraulicWheelState(${1:Vehicle* vehicle}, ${2:int* state})${0}"
      ],
      "description": ""
  },
  "5355": {
      "prefix": "SetHydraulicWheelValue",
      "body": [
          "SetHydraulicWheelValue(${1:Vehicle* vehicle}, ${2:int* wheelId}, ${3:float* value})${0}"
      ],
      "description": "```\nWorks only on vehicles that support hydraulic.\n```"
  },
  "5356": {
      "prefix": "SetLastDrivenVehicle",
      "body": [
          "SetLastDrivenVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5357": {
      "prefix": "SetHydraulicWheelStateTransition",
      "body": [
          "SetHydraulicWheelStateTransition(${1:Vehicle* vehicle}, ${2:int* wheelId}, ${3:int* state}, ${4:float* value}, ${5:float* p4})${0}"
      ],
      "description": "```\nSets vehicle wheel hydraulic states transition. Known states:\n0 - reset\n1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)\n2 - jump using wheel\n```"
  },
  "5358": {
      "prefix": "SetMissionTrainCoords",
      "body": [
          "SetMissionTrainCoords(${1:Vehicle* train}, ${2:float* x}, ${3:float* y}, ${4:float* z})${0}"
      ],
      "description": ""
  },
  "5359": {
      "prefix": "SetLightsCutoffDistanceTweak",
      "body": [
          "SetLightsCutoffDistanceTweak(${1:float* distance})${0}"
      ],
      "description": ""
  },
  "5360": {
      "prefix": "SetMissionTrainAsNoLongerNeeded",
      "body": [
          "SetMissionTrainAsNoLongerNeeded(${1:Vehicle* train}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np1 is always 0  \n```"
  },
  "5361": {
      "prefix": "SetNumberOfParkedVehicles",
      "body": [
          "SetNumberOfParkedVehicles(${1:int* value})${0}"
      ],
      "description": ""
  },
  "5362": {
      "prefix": "SetParkedVehicleDensityMultiplierThisFrame",
      "body": [
          "SetParkedVehicleDensityMultiplierThisFrame(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5363": {
      "prefix": "SetOppressorTransformState",
      "body": [
          "SetOppressorTransformState(${1:Vehicle* vehicle}, ${2:BOOL* extend})${0}"
      ],
      "description": "Set state to true to extend the wings, false to retract them."
  },
  "5364": {
      "prefix": "SetPickupRopeLengthForCargobob",
      "body": [
          "SetPickupRopeLengthForCargobob(${1:Vehicle* cargobob}, ${2:float* length1}, ${3:float* length2}, ${4:BOOL* state})${0}"
      ],
      "description": "```\nmin: 1.9f, max: 100.0f\n```"
  },
  "5365": {
      "prefix": "SetPlaneEngineHealth",
      "body": [
          "SetPlaneEngineHealth(${1:Vehicle* vehicle}, ${2:float* health})${0}"
      ],
      "description": "```\nWorks just like SET_VEHICLE_ENGINE_HEALTH, didn't saw any difference. But this native works only for planes.\n```"
  },
  "5366": {
      "prefix": "SetPlaneTurbulenceMultiplier",
      "body": [
          "SetPlaneTurbulenceMultiplier(${1:Vehicle* vehicle}, ${2:float* multiplier})${0}"
      ],
      "description": "This native sets the turbulence multiplier. It only works for planes.\n0.0 = no turbulence at all.\n1.0 = heavy turbulence.\n\nWorks by just calling it once, does not need to be called every tick."
  },
  "5367": {
      "prefix": "SetPlanePropellersHealth",
      "body": [
          "SetPlanePropellersHealth(${1:Vehicle* plane}, ${2:float* health})${0}"
      ],
      "description": ""
  },
  "5368": {
      "prefix": "SetPlaybackSpeed",
      "body": [
          "SetPlaybackSpeed(${1:Vehicle* vehicle}, ${2:float* speed})${0}"
      ],
      "description": ""
  },
  "5369": {
      "prefix": "SetPlaybackToUseAiTryToRevertBackLater",
      "body": [
          "SetPlaybackToUseAiTryToRevertBackLater(${1:Vehicle* vehicle}, ${2:int* time}, ${3:int* drivingStyle}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\nTime is number of milliseconds before reverting, zero for indefinitely.\n```"
  },
  "5370": {
      "prefix": "SetPlaybackToUseAi",
      "body": [
          "SetPlaybackToUseAi(${1:Vehicle* vehicle}, ${2:int* drivingStyle})${0}"
      ],
      "description": "Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3."
  },
  "5371": {
      "prefix": "SetPlayersLastVehicle",
      "body": [
          "SetPlayersLastVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5372": {
      "prefix": "SetRandomBoats",
      "body": [
          "SetRandomBoats(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5373": {
      "prefix": "SetRandomBoatsInMp",
      "body": [
          "SetRandomBoatsInMp(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5374": {
      "prefix": "SetRandomTrains",
      "body": [
          "SetRandomTrains(${1:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5375": {
      "prefix": "SetRenderTrainAsDerailed",
      "body": [
          "SetRenderTrainAsDerailed(${1:Vehicle* train}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nmakes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)  \n```"
  },
  "5376": {
      "prefix": "SetRandomVehicleDensityMultiplierThisFrame",
      "body": [
          "SetRandomVehicleDensityMultiplierThisFrame(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5377": {
      "prefix": "SetSpecialflightWingRatio",
      "body": [
          "SetSpecialflightWingRatio(${1:Vehicle* vehicle}, ${2:float* ratio})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "5378": {
      "prefix": "SetReduceDriftVehicleSuspension",
      "body": [
          "SetReduceDriftVehicleSuspension(${1:Vehicle* vehicle}, ${2:BOOL* enable})${0}"
      ],
      "description": "Lowers the vehicle's stance. Only works for vehicles that support this feature.\n\n```\nNativeDB Introduced: v2372\n```"
  },
  "5379": {
      "prefix": "SetSubmarineCrushDepths",
      "body": [
          "SetSubmarineCrushDepths(${1:Vehicle* vehicle}, ${2:BOOL* toggle}, ${3:float* depth1}, ${4:float* depth2}, ${5:float* depth3})${0}"
      ],
      "description": ""
  },
  "5380": {
      "prefix": "SetScriptVehicleGenerator",
      "body": [
          "SetScriptVehicleGenerator(${1:int* vehicleGenerator}, ${2:BOOL* enabled})${0}"
      ],
      "description": "```\nOnly called once in the decompiled scripts. Presumably activates the specified generator.  \n```"
  },
  "5381": {
      "prefix": "SetTrailerInverseMassScale",
      "body": [
          "SetTrailerInverseMassScale(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5382": {
      "prefix": "SetTaskVehicleGotoPlaneMinHeightAboveTerrain",
      "body": [
          "SetTaskVehicleGotoPlaneMinHeightAboveTerrain(${1:Vehicle* plane}, ${2:int* height})${0}"
      ],
      "description": ""
  },
  "5383": {
      "prefix": "SetTaxiLights",
      "body": [
          "SetTaxiLights(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": "```\nThis is not tested - it's just an assumption.  \nDoesn't seem to work.  I'll try with an int instead. --JT  \nRead the scripts, im dumpass.   \nDoesn't work at all, wether with an bool neither an int  \n                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {  \n                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);  \n                            }  \n```"
  },
  "5384": {
      "prefix": "SetTrailerLegsLowered",
      "body": [
          "SetTrailerLegsLowered()${0}"
      ],
      "description": "```\nInverse of 0x95CF53B3D687F9FA\n```\n\n```\nNativeDB Added Parameter 1: Vehicle vehicle\n```"
  },
  "5385": {
      "prefix": "SetTrailerLegsRaised",
      "body": [
          "SetTrailerLegsRaised(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nin the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.\n```"
  },
  "5386": {
      "prefix": "SetTrainSpeed",
      "body": [
          "SetTrainSpeed(${1:Vehicle* train}, ${2:float* speed})${0}"
      ],
      "description": ""
  },
  "5387": {
      "prefix": "SetTrainTrackSpawnFrequency",
      "body": [
          "SetTrainTrackSpawnFrequency(${1:int* trackIndex}, ${2:int* frequency})${0}"
      ],
      "description": "```\nOnly called once inside main_persitant with the parameters, 0  \n```"
  },
  "5388": {
      "prefix": "SetTrainCruiseSpeed",
      "body": [
          "SetTrainCruiseSpeed(${1:Vehicle* train}, ${2:float* speed})${0}"
      ],
      "description": ""
  },
  "5389": {
      "prefix": "SetTyreSoftnessMultiplier",
      "body": [
          "SetTyreSoftnessMultiplier(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* multiplier})${0}"
      ],
      "description": "```\nControls how fast the tires wear out.\nDefault values from Rockstar's Open Wheel Race JSON's:\n\"owrtss\" (Soft): 2.2\n\"owrtsm\" (Medium): 1.7\n\"owrtsh\" (Hard): 1.2\nUsable wheels:\n0: wheel_lf\n1: wheel_rf\n2: wheel_lm1\n3: wheel_rm1\n4: wheel_lr\n5: wheel_rr\n```\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "5390": {
      "prefix": "SetTyreHealth",
      "body": [
          "SetTyreHealth(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* health})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "5391": {
      "prefix": "SetTyreTractionLossMultiplier",
      "body": [
          "SetTyreTractionLossMultiplier(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* multiplier})${0}"
      ],
      "description": "```\nControls how much traction the wheel loses.\nDefault values from Rockstar's Open Wheel Race JSON's:\n\"owrtds\" (Soft): 0.05\n\"owrtdm\" (Medium): 0.45\n\"owrtdh\" (Hard): 0.8\nUsable wheels:\n0: wheel_lf\n1: wheel_rf\n2: wheel_lm1\n3: wheel_rm1\n4: wheel_lr\n5: wheel_rr\n```\n\n```\nNativeDB Introduced: v2060\n```"
  },
  "5392": {
      "prefix": "SetUnkBool0x102ForSubmarineVehicleTask",
      "body": [
          "SetUnkBool0x102ForSubmarineVehicleTask(${1:Vehicle* vehicle}, ${2:BOOL* value})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "5393": {
      "prefix": "SetTyreWearMultiplier",
      "body": [
          "SetTyreWearMultiplier(${1:Vehicle* vehicle}, ${2:int* wheelIndex}, ${3:float* multiplier})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1868\n```"
  },
  "5394": {
      "prefix": "SetUnkFloat0x104ForSubmarineVehicleTask",
      "body": [
          "SetUnkFloat0x104ForSubmarineVehicleTask(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "5395": {
      "prefix": "SetVehicleActiveDuringPlayback",
      "body": [
          "SetVehicleActiveDuringPlayback(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5396": {
      "prefix": "SetUseHigherVehicleJumpForce",
      "body": [
          "SetUseHigherVehicleJumpForce(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000)."
  },
  "5397": {
      "prefix": "SetVehicleAlarm",
      "body": [
          "SetVehicleAlarm(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": ""
  },
  "5398": {
      "prefix": "SetVehicleActiveForPedNavigation",
      "body": [
          "SetVehicleActiveForPedNavigation(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5399": {
      "prefix": "SetVehicleAllowNoPassengersLockon",
      "body": [
          "SetVehicleAllowNoPassengersLockon(${1:Vehicle* veh}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nMakes the vehicle accept no passengers.  \n```"
  },
  "5400": {
      "prefix": "SetVehicleAutomaticallyAttaches",
      "body": [
          "SetVehicleAutomaticallyAttaches(${1:Vehicle* vehicle}, ${2:BOOL* p1}, ${3:Any* p2})${0}"
      ],
      "description": ""
  },
  "5401": {
      "prefix": "SetVehicleBodyHealth",
      "body": [
          "SetVehicleBodyHealth(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": "```\np2 often set to 1000.0 in the decompiled scripts.  \n```"
  },
  "5402": {
      "prefix": "SetVehicleBombCount",
      "body": [
          "SetVehicleBombCount(${1:Vehicle* aircraft}, ${2:int* bombCount})${0}"
      ],
      "description": "Sets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.\n\nIn decompiled scripts this is used to deduct from or add to the count whenever bombs are dropped or purchased/restocked.\n\nUse [`_GET_AIRCRAFT_BOMB_COUNT`](#\\_0xEA12BD130D7569A1) to get the amount of bombs on that vehicle."
  },
  "5403": {
      "prefix": "SetVehicleBrake",
      "body": [
          "SetVehicleBrake(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5404": {
      "prefix": "SetVehicleBrakeLights",
      "body": [
          "SetVehicleBrakeLights(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5405": {
      "prefix": "SetVehicleBulldozerArmPosition",
      "body": [
          "SetVehicleBulldozerArmPosition(${1:Vehicle* vehicle}, ${2:float* position}, ${3:BOOL* p2})${0}"
      ],
      "description": "Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%)."
  },
  "5406": {
      "prefix": "SetVehicleBurnout",
      "body": [
          "SetVehicleBurnout(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nOn accelerating, spins the driven wheels with the others braked, so you don't go anywhere.  \n```"
  },
  "5407": {
      "prefix": "SetVehicleCanBeLockedOn",
      "body": [
          "SetVehicleCanBeLockedOn(${1:Vehicle* vehicle}, ${2:BOOL* canBeLockedOn}, ${3:BOOL* unk})${0}"
      ],
      "description": "```\nSET_VEHICLE_AL*\n```"
  },
  "5408": {
      "prefix": "SetVehicleCanBeTargetted",
      "body": [
          "SetVehicleCanBeTargetted(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": "```\nThis has not yet been tested - it's just an assumption of what the types could be.  \n```"
  },
  "5409": {
      "prefix": "SetVehicleCanBeUsedByFleeingPeds",
      "body": [
          "SetVehicleCanBeUsedByFleeingPeds(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5410": {
      "prefix": "SetVehicleCanBeVisiblyDamaged",
      "body": [
          "SetVehicleCanBeVisiblyDamaged(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": ""
  },
  "5411": {
      "prefix": "SetVehicleCanBreak",
      "body": [
          "SetVehicleCanBreak(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5412": {
      "prefix": "SetVehicleCanDeformWheels",
      "body": [
          "SetVehicleCanDeformWheels(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5413": {
      "prefix": "SetVehicleCanLeakOil",
      "body": [
          "SetVehicleCanLeakOil(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5414": {
      "prefix": "SetVehicleCanEngineOperateOnFire",
      "body": [
          "SetVehicleCanEngineOperateOnFire(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5415": {
      "prefix": "SetVehicleCanSaveInGarage",
      "body": [
          "SetVehicleCanSaveInGarage(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5416": {
      "prefix": "SetVehicleColourCombination",
      "body": [
          "SetVehicleColourCombination(${1:Vehicle* vehicle}, ${2:int* colorCombination})${0}"
      ],
      "description": "Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\n\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)"
  },
  "5417": {
      "prefix": "SetVehicleColours",
      "body": [
          "SetVehicleColours(${1:Vehicle* vehicle}, ${2:int* colorPrimary}, ${3:int* colorSecondary})${0}"
      ],
      "description": "```\ncolorPrimary & colorSecondary are the paint index for the vehicle.  \nFor a list of valid paint indexes, view: pastebin.com/pwHci0xK  \n-------------------------------------------------------------------------  \nUse this to get the number of color indices: pastebin.com/RQEeqTSM  \nNote: minimum color index is 0, maximum color index is (numColorIndices - 1)  \n```"
  },
  "5418": {
      "prefix": "SetVehicleCanLeakPetrol",
      "body": [
          "SetVehicleCanLeakPetrol(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5419": {
      "prefix": "SetVehicleCeilingHeight",
      "body": [
          "SetVehicleCeilingHeight(${1:Vehicle* vehicle}, ${2:float* height})${0}"
      ],
      "description": "```\nPreviously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)\nfrom Decrypted Scripts I found\nVEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2/*2*/], 420.0);\n```"
  },
  "5420": {
      "prefix": "SetVehicleCountermeasureCount",
      "body": [
          "SetVehicleCountermeasureCount(${1:Vehicle* aircraft}, ${2:int* count})${0}"
      ],
      "description": "Similar to [`_SET_AIRCRAFT_BOMB_COUNT`](#\\_0xF4B2ED59DEB5D774), this sets the amount of countermeasures that are present on this vehicle.\n\nUse [`_GET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\\_0xF846AA63DF56B804) to get the current amount."
  },
  "5421": {
      "prefix": "SetVehicleControlsInverted",
      "body": [
          "SetVehicleControlsInverted(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": "```\nInverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)\nDoesn't work for planes/helis.\n```"
  },
  "5422": {
      "prefix": "SetVehicleCustomPrimaryColour",
      "body": [
          "SetVehicleCustomPrimaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n```"
  },
  "5423": {
      "prefix": "SetVehicleCustomSecondaryColour",
      "body": [
          "SetVehicleCustomSecondaryColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n```"
  },
  "5424": {
      "prefix": "SetVehicleDamageModifier",
      "body": [
          "SetVehicleDamageModifier(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": "```\nSET_VEHICLE_D*\n```"
  },
  "5425": {
      "prefix": "SetVehicleDamage",
      "body": [
          "SetVehicleDamage(${1:Vehicle* vehicle}, ${2:float* xOffset}, ${3:float* yOffset}, ${4:float* zOffset}, ${5:float* damage}, ${6:float* radius}, ${7:BOOL* focusOnModel})${0}"
      ],
      "description": "Apply damage to vehicle at a location. Location is relative to vehicle model (not world).\nRadius of effect damage applied in a sphere at impact location\nWhen `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact"
  },
  "5426": {
      "prefix": "SetVehicleDashboardColor",
      "body": [
          "SetVehicleDashboardColor(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": ""
  },
  "5427": {
      "prefix": "SetVehicleDeformationFixed",
      "body": [
          "SetVehicleDeformationFixed(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nThis fixes the deformation of a vehicle but the vehicle health doesn't improve  \n```"
  },
  "5428": {
      "prefix": "SetVehicleDirtLevel",
      "body": [
          "SetVehicleDirtLevel(${1:Vehicle* vehicle}, ${2:float* dirtLevel})${0}"
      ],
      "description": "Sets the dirt level of the passed vehicle."
  },
  "5429": {
      "prefix": "SetVehicleDensityMultiplierThisFrame",
      "body": [
          "SetVehicleDensityMultiplierThisFrame(${1:float* multiplier})${0}"
      ],
      "description": "**Usage:**\n\n*   Use this native inside a looped function.\n*   Values:\n    *   `0.0` = no vehicles on streets\n    *   `1.0` = normal vehicles on streets\n\n`1.0` Seems to be the maximum."
  },
  "5430": {
      "prefix": "SetVehicleDoorCanBreak",
      "body": [
          "SetVehicleDoorCanBreak(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:BOOL* isBreakable})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5431": {
      "prefix": "SetVehicleDisableTowing",
      "body": [
          "SetVehicleDisableTowing(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5432": {
      "prefix": "SetVehicleDoorControl",
      "body": [
          "SetVehicleDoorControl(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:int* speed}, ${4:float* angle})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5433": {
      "prefix": "SetVehicleDoorBroken",
      "body": [
          "SetVehicleDoorBroken(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:BOOL* deleteDoor})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5434": {
      "prefix": "SetVehicleDoorLatched",
      "body": [
          "SetVehicleDoorLatched(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:BOOL* forceClose}, ${4:BOOL* lock}, ${5:BOOL* p4})${0}"
      ],
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
  },
  "5435": {
      "prefix": "SetVehicleDoorOpen",
      "body": [
          "SetVehicleDoorOpen(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:BOOL* loose}, ${4:BOOL* openInstantly})${0}"
      ],
      "description": "Sets the specified door index open on the passed vehicle. See [`IS_VEHICLE_DOOR_FULLY_OPEN`](#\\_0x3E933CFF7B111C22)."
  },
  "5436": {
      "prefix": "SetVehicleDoorShut",
      "body": [
          "SetVehicleDoorShut(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:BOOL* closeInstantly})${0}"
      ],
      "description": "Sets the specified door index shut on the passed vehicle.\n\n```cpp\nenum eDoorId\n{\n\tVEH_EXT_DOOR_DSIDE_F = 0,\n\tVEH_EXT_DOOR_DSIDE_R = 1,\n\tVEH_EXT_DOOR_PSIDE_F = 2,\n\tVEH_EXT_DOOR_PSIDE_R = 3,\n\tVEH_EXT_BONNET = 4,\n\tVEH_EXT_BOOT = 5,\n\t// 0x872E72B8 = 0xFFFFFFFF,\n}\n```"
  },
  "5437": {
      "prefix": "SetVehicleDoorsLockedForAllPlayers",
      "body": [
          "SetVehicleDoorsLockedForAllPlayers(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5438": {
      "prefix": "SetVehicleDoorsLocked",
      "body": [
          "SetVehicleDoorsLocked(${1:Vehicle* vehicle}, ${2:int* doorLockStatus})${0}"
      ],
      "description": "```\n// Source GTA VC miss2 leak, matching constants for 0/2/4, testing\n// They use 10 in am_mp_property_int, don't know what it does atm.\nenum eCarLock {\n    CARLOCK_NONE = 0,\n    CARLOCK_UNLOCKED = 1,\n    CARLOCK_LOCKED = 2,\n    CARLOCK_LOCKOUT_PLAYER_ONLY = 3,\n    CARLOCK_LOCKED_PLAYER_INSIDE = 4,\n    CARLOCK_LOCKED_INITIALLY = 5,\n    CARLOCK_FORCE_SHUT_DOORS = 6,\n    CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7\n};\n```"
  },
  "5439": {
      "prefix": "SetVehicleDoorsLockedForNonScriptPlayers",
      "body": [
          "SetVehicleDoorsLockedForNonScriptPlayers(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5440": {
      "prefix": "SetVehicleDoorsLockedForPlayer",
      "body": [
          "SetVehicleDoorsLockedForPlayer(${1:Vehicle* vehicle}, ${2:Player* player}, ${3:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5441": {
      "prefix": "SetVehicleDoorsLockedForTeam",
      "body": [
          "SetVehicleDoorsLockedForTeam(${1:Vehicle* vehicle}, ${2:int* team}, ${3:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5442": {
      "prefix": "SetVehicleDoorsLockedForUnk",
      "body": [
          "SetVehicleDoorsLockedForUnk(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1365\n```"
  },
  "5443": {
      "prefix": "SetVehicleDropsMoneyWhenBlownUp",
      "body": [
          "SetVehicleDropsMoneyWhenBlownUp(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nMoney pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.\nyoutu.be/3arlUxzHl5Y\ni.imgur.com/WrNpYFs.jpg\n```"
  },
  "5444": {
      "prefix": "SetVehicleDoorsShut",
      "body": [
          "SetVehicleDoorsShut(${1:Vehicle* vehicle}, ${2:BOOL* closeInstantly})${0}"
      ],
      "description": "```\nCloses all doors of a vehicle:  \n```"
  },
  "5445": {
      "prefix": "SetVehicleEngineHealth",
      "body": [
          "SetVehicleEngineHealth(${1:Vehicle* vehicle}, ${2:float* health})${0}"
      ],
      "description": "```\n1000 is max health\nBegins leaking gas at around 650 health\n-999.90002441406 appears to be minimum health, although nothing special occurs <- false statement\n-------------------------\nMinimum: -4000\nMaximum: 1000\n-4000: Engine is destroyed\n0 and below: Engine catches fire and health rapidly declines\n300: Engine is smoking and losing functionality\n1000: Engine is perfect\n```"
  },
  "5446": {
      "prefix": "SetVehicleEngineCanDegrade",
      "body": [
          "SetVehicleEngineCanDegrade(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5447": {
      "prefix": "SetVehicleEngineOn",
      "body": [
          "SetVehicleEngineOn(${1:Vehicle* vehicle}, ${2:BOOL* value}, ${3:BOOL* instantly}, ${4:BOOL* disableAutoStart})${0}"
      ],
      "description": "Starts or stops the engine on the specified vehicle.\nFrom what I've tested when I do this to a helicopter the propellers turn off after the engine has started."
  },
  "5448": {
      "prefix": "SetVehicleEnveffScale",
      "body": [
          "SetVehicleEnveffScale(${1:Vehicle* vehicle}, ${2:float* fade})${0}"
      ],
      "description": "Examples with a besra:\n\n*   [fade value `0.0`](https://i.imgur.com/DXNk63e.jpg)\n*   [fade value `0.5`](https://i.imgur.com/2Vb35fq.jpg)\n*   [fade value `1.0`](https://i.imgur.com/aa8cxaD.jpg)\n\nThe parameter fade is a value from 0-1, where 0 is fresh paint."
  },
  "5449": {
      "prefix": "SetVehicleExclusiveDriver2",
      "body": [
          "SetVehicleExclusiveDriver2(${1:Vehicle* vehicle}, ${2:Ped* ped}, ${3:int* index})${0}"
      ],
      "description": "The **actual** [`SET_VEHICLE_EXCLUSIVE_DRIVER`](#\\_0x41062318F23ED854) native."
  },
  "5450": {
      "prefix": "SetVehicleExclusiveDriver",
      "body": [
          "SetVehicleExclusiveDriver(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Incorrectly named `SET_VEHICLE_EXCLUSIVE_DRIVER`; likely `SET_VEHICLE_ALLOW_*`.\n\nToggles a flag related to `SET_VEHICLE_EXCLUSIVE_DRIVER`, however, doesn't enable that feature (or trigger script events related to it).\n\nSee [`_SET_VEHICLE_EXCLUSIVE_DRIVER_2`](#\\_0xB5C51B5502E85E83).\n\n```\nNativeDB Removed Parameter 2: int index\n```"
  },
  "5451": {
      "prefix": "SetVehicleExtendedRemovalRange",
      "body": [
          "SetVehicleExtendedRemovalRange(${1:Vehicle* vehicle}, ${2:int* range})${0}"
      ],
      "description": "```\nMax value is 32767\n```"
  },
  "5452": {
      "prefix": "SetVehicleFixed",
      "body": [
          "SetVehicleFixed(${1:Vehicle* vehicle})${0}"
      ],
      "description": "Fix a given vehicle.\nIf the vehicle's engine's broken then you cannot fix it with this native."
  },
  "5453": {
      "prefix": "SetVehicleExplodesOnHighExplosionDamage",
      "body": [
          "SetVehicleExplodesOnHighExplosionDamage(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.  \n```"
  },
  "5454": {
      "prefix": "SetVehicleFlightNozzlePosition",
      "body": [
          "SetVehicleFlightNozzlePosition(${1:Vehicle* vehicle}, ${2:float* angleRatio})${0}"
      ],
      "description": ""
  },
  "5455": {
      "prefix": "SetVehicleExtra",
      "body": [
          "SetVehicleExtra(${1:Vehicle* vehicle}, ${2:int* extraId}, ${3:BOOL* disable})${0}"
      ],
      "description": "```\nNote: only some vehicle have extras  \nextra ids are from 1 - 9 depending on the vehicle  \n-------------------------------------------------  \n^ not sure if outdated or simply wrong. Max extra ID for b944 is 14  \n-------------------------------------------------  \np2 is not a on/off toggle. mostly 0 means on and 1 means off.  \nnot sure if it really should be a BOOL.  \n-------------------------------------------------  \nConfirmed p2 does not work as a bool. Changed to int. [0=on, 1=off]  \n```"
  },
  "5456": {
      "prefix": "SetVehicleForceAfterburner",
      "body": [
          "SetVehicleForceAfterburner(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5457": {
      "prefix": "SetVehicleFrictionOverride",
      "body": [
          "SetVehicleFrictionOverride(${1:Vehicle* vehicle}, ${2:float* friction})${0}"
      ],
      "description": "```\nSeems to be related to the metal parts, not tyres (like i was expecting lol)  \nMust be called every tick.  \n```"
  },
  "5458": {
      "prefix": "SetVehicleExtraColours",
      "body": [
          "SetVehicleExtraColours(${1:Vehicle* vehicle}, ${2:int* pearlescentColor}, ${3:int* wheelColor})${0}"
      ],
      "description": "```\nThey use the same color indexs as SET_VEHICLE_COLOURS.  \n```"
  },
  "5459": {
      "prefix": "SetVehicleFlightNozzlePositionImmediate",
      "body": [
          "SetVehicleFlightNozzlePositionImmediate(${1:Vehicle* vehicle}, ${2:float* angle})${0}"
      ],
      "description": ""
  },
  "5460": {
      "prefix": "SetVehicleForwardSpeed",
      "body": [
          "SetVehicleForwardSpeed(${1:Vehicle* vehicle}, ${2:float* speed})${0}"
      ],
      "description": "```\nSCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.  \nSpeed is in meters per second  \nYou can convert meters/s to mph here:  \nhttp://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm  \n```"
  },
  "5461": {
      "prefix": "SetVehicleGravity",
      "body": [
          "SetVehicleGravity(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5462": {
      "prefix": "SetVehicleFullbeam",
      "body": [
          "SetVehicleFullbeam(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nIt switch to highbeam when p1 is set to true.  \n```"
  },
  "5463": {
      "prefix": "SetVehicleHandlingHashForAi",
      "body": [
          "SetVehicleHandlingHashForAi(${1:Vehicle* vehicle}, ${2:Hash* hash})${0}"
      ],
      "description": ""
  },
  "5464": {
      "prefix": "SetVehicleGeneratesEngineShockingEvents",
      "body": [
          "SetVehicleGeneratesEngineShockingEvents(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nAllows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events\n```"
  },
  "5465": {
      "prefix": "SetVehicleHasBeenOwnedByPlayer",
      "body": [
          "SetVehicleHasBeenOwnedByPlayer(${1:Vehicle* vehicle}, ${2:BOOL* owned})${0}"
      ],
      "description": ""
  },
  "5466": {
      "prefix": "SetVehicleHandbrake",
      "body": [
          "SetVehicleHandbrake(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5467": {
      "prefix": "SetVehicleHasMutedSirens",
      "body": [
          "SetVehicleHasMutedSirens(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5468": {
      "prefix": "SetVehicleHasBeenDrivenFlag",
      "body": [
          "SetVehicleHasBeenDrivenFlag(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5469": {
      "prefix": "SetVehicleHasStrongAxles",
      "body": [
          "SetVehicleHasStrongAxles(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nif true, axles won't bend.  \n```"
  },
  "5470": {
      "prefix": "SetVehicleHoverTransformActive",
      "body": [
          "SetVehicleHoverTransformActive(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "5471": {
      "prefix": "SetVehicleHasUnbreakableLights",
      "body": [
          "SetVehicleHasUnbreakableLights(${1:Vehicle* vehicle}, ${2:BOOL* p1})${0}"
      ],
      "description": ""
  },
  "5472": {
      "prefix": "SetVehicleHoverTransformEnabled",
      "body": [
          "SetVehicleHoverTransformEnabled(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nIf false, anything related to INPUT_VEH_TRANSFORM are ignored (changing hover state through script natives still possible).\n```\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "5473": {
      "prefix": "SetVehicleHoverTransformRatio",
      "body": [
          "SetVehicleHoverTransformRatio(${1:Vehicle* vehicle}, ${2:float* ratio})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1290\n```"
  },
  "5474": {
      "prefix": "SetVehicleHoverTransformPercentage",
      "body": [
          "SetVehicleHoverTransformPercentage(${1:Vehicle* vehicle}, ${2:float* state})${0}"
      ],
      "description": "According to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles.\nI've only seen this work for `deluxo` though, can't figure out what it's supposed to do on `oppressor2`.\n\nFor the deluxo:\n\n*   Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode).\n*   Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode).\n\nIf you set it to something like 0.5, then something [weird happens](https://streamable.com/p6wmr), you end up in some 50% hover mode, 50% not hover mode.\n\nThis doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided.\n\nOnce this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key."
  },
  "5475": {
      "prefix": "SetVehicleIndicatorLights",
      "body": [
          "SetVehicleIndicatorLights(${1:Vehicle* vehicle}, ${2:int* turnSignal}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```\nSets the turn signal enabled for a vehicle.  \nSet turnSignal to 1 for left light, 0 for right light.  \n```"
  },
  "5476": {
      "prefix": "SetVehicleInactiveDuringPlayback",
      "body": [
          "SetVehicleInactiveDuringPlayback(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5477": {
      "prefix": "SetVehicleInteriorColor",
      "body": [
          "SetVehicleInteriorColor(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": ""
  },
  "5478": {
      "prefix": "SetVehicleIndividualDoorsLocked",
      "body": [
          "SetVehicleIndividualDoorsLocked(${1:Vehicle* vehicle}, ${2:int* doorIndex}, ${3:int* doorLockStatus})${0}"
      ],
      "description": ""
  },
  "5479": {
      "prefix": "SetVehicleInteriorlight",
      "body": [
          "SetVehicleInteriorlight(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5480": {
      "prefix": "SetVehicleIsConsideredByPlayer",
      "body": [
          "SetVehicleIsConsideredByPlayer(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSetting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.  \n```"
  },
  "5481": {
      "prefix": "SetVehicleIsRacing",
      "body": [
          "SetVehicleIsRacing(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\np1 (toggle) was always 1 (true) except in one case in the b678 scripts.  \n```"
  },
  "5482": {
      "prefix": "SetVehicleIsWanted",
      "body": [
          "SetVehicleIsWanted(${1:Vehicle* vehicle}, ${2:BOOL* state})${0}"
      ],
      "description": "```\nSets the wanted state of this vehicle.  \n```"
  },
  "5483": {
      "prefix": "SetVehicleIsStolen",
      "body": [
          "SetVehicleIsStolen(${1:Vehicle* vehicle}, ${2:BOOL* isStolen})${0}"
      ],
      "description": ""
  },
  "5484": {
      "prefix": "SetVehicleKersAllowed",
      "body": [
          "SetVehicleKersAllowed(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5485": {
      "prefix": "SetVehicleJetEngineOn",
      "body": [
          "SetVehicleJetEngineOn(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5486": {
      "prefix": "SetVehicleLights",
      "body": [
          "SetVehicleLights(${1:Vehicle* vehicle}, ${2:int* state})${0}"
      ],
      "description": "```\nset's if the vehicle has lights or not.  \nnot an on off toggle.  \np1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams  \np1 = 1 ;vehicle doesn't have lights, always off  \np1 = 2 ;vehicle has always on lights  \np1 = 3 ;or even larger like 4,5,... normal lights like =1  \nnote1: when using =2 on day it's lowbeam,highbeam  \nbut at night it's lowbeam,lowbeam,highbeam  \nnote2: when using =0 it's affected by day or night for highbeams don't exist in daytime.  \n```"
  },
  "5487": {
      "prefix": "SetVehicleLightMultiplier",
      "body": [
          "SetVehicleLightMultiplier(${1:Vehicle* vehicle}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nmultiplier = brightness of head lights.  \nthis value isn't capped afaik.  \nmultiplier = 0.0 no lights  \nmultiplier = 1.0 default game value  \n```"
  },
  "5488": {
      "prefix": "SetVehicleLivery",
      "body": [
          "SetVehicleLivery(${1:Vehicle* vehicle}, ${2:int* livery})${0}"
      ],
      "description": ""
  },
  "5489": {
      "prefix": "SetVehicleLodMultiplier",
      "body": [
          "SetVehicleLodMultiplier(${1:Vehicle* vehicle}, ${2:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5490": {
      "prefix": "SetVehicleLightsMode",
      "body": [
          "SetVehicleLightsMode(${1:Vehicle* vehicle}, ${2:int* p1})${0}"
      ],
      "description": "```\np1 can be either 0, 1 or 2.  \nDetermines how vehicle lights behave when toggled.  \n0 = Default (Lights can be toggled between off, normal and high beams)  \n1 = Lights Disabled (Lights are fully disabled, cannot be toggled)  \n2 = Always On (Lights can be toggled between normal and high beams)  \n```"
  },
  "5491": {
      "prefix": "SetVehicleMod",
      "body": [
          "SetVehicleMod(${1:Vehicle* vehicle}, ${2:int* modType}, ${3:int* modIndex}, ${4:BOOL* customTires})${0}"
      ],
      "description": "```\nIn b944, there are 50 (0 - 49) mod types.  \nSets the vehicle mod.  \nThe vehicle must have a mod kit first.  \nAny out of range ModIndex is stock.  \n#Mod Type  \nSpoilers   \nFront Bumper   \nRear Bumper   \nSide Skirt   \nExhaust   \nFrame   \nGrille   \nHood   \nFender   \nRight Fender   \nRoof   \nEngine   \nBrakes   \nTransmission   \nHorns - 14 (modIndex from 0 to 51)  \nSuspension   \nArmor   \nFront Wheels   \nBack Wheels - 24 //only for motocycles  \nPlate holders   \nTrim Design   \nOrnaments   \nDial Design   \nSteering Wheel   \nShifter Leavers   \nPlaques   \nHydraulics   \nLivery   \nENUMS: pastebin.com/QzEAn02v  \n```"
  },
  "5492": {
      "prefix": "SetVehicleModColor1",
      "body": [
          "SetVehicleModColor1(${1:Vehicle* vehicle}, ${2:int* paintType}, ${3:int* color}, ${4:int* pearlescentColor})${0}"
      ],
      "description": "```\npaintType:  \n0: Normal  \n1: Metallic  \n2: Pearl  \n3: Matte  \n4: Metal  \n5: Chrome  \ncolor: number of the color.  \np3 seems to always be 0.  \n```"
  },
  "5493": {
      "prefix": "SetVehicleModKit",
      "body": [
          "SetVehicleModKit(${1:Vehicle* vehicle}, ${2:int* modKit})${0}"
      ],
      "description": "```\nSet modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.\n```"
  },
  "5494": {
      "prefix": "SetVehicleMaxSpeed",
      "body": [
          "SetVehicleMaxSpeed(${1:Vehicle* vehicle}, ${2:float* speed})${0}"
      ],
      "description": "To reset the max speed, set the `speed` value to `0.0` or lower."
  },
  "5495": {
      "prefix": "SetVehicleNeedsToBeHotwired",
      "body": [
          "SetVehicleNeedsToBeHotwired(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5496": {
      "prefix": "SetVehicleModColor2",
      "body": [
          "SetVehicleModColor2(${1:Vehicle* vehicle}, ${2:int* paintType}, ${3:int* color})${0}"
      ],
      "description": "```\nChanges the secondary paint type and color  \npaintType:  \n0: Normal  \n1: Metallic  \n2: Pearl  \n3: Matte  \n4: Metal  \n5: Chrome  \ncolor: number of the color  \n```"
  },
  "5497": {
      "prefix": "SetVehicleModelIsSuppressed",
      "body": [
          "SetVehicleModelIsSuppressed(${1:Hash* model}, ${2:BOOL* suppressed})${0}"
      ],
      "description": "```\nseems to make the vehicle stop spawning naturally in traffic. Here's an essential example:  \nVEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY(\"taco\"), true);  \n```"
  },
  "5498": {
      "prefix": "SetVehicleNameDebug",
      "body": [
          "SetVehicleNameDebug(${1:Vehicle* vehicle}, ${2:char* name})${0}"
      ],
      "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```"
  },
  "5499": {
      "prefix": "SetVehicleNeonLightsColour",
      "body": [
          "SetVehicleNeonLightsColour(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "Sets the color of the neon lights on the specified vehicle.\n\nRGB values and colour names taken from the decompiled scripts:\n\n| Colour         |  R  |  G  |  B  |\n|---------------|:---:|:---:|:---:|\n| White         | 222 | 222 | 255 |\n| Blue          | 2   | 21  | 255 |\n| Electric Blue | 3   | 83  | 255 |\n| Mint Green    | 0   | 255 | 140 |\n| Lime Green    | 94  | 255 | 1   |\n| Yellow        | 255 | 255 | 0   |\n| Golden Shower | 255 | 150 | 0   |\n| Orange        | 255 | 62  | 0   |\n| Red           | 255 | 1   | 1   |\n| Pony Pink     | 255 | 50  | 100 |\n| Hot Pink      | 255 | 5   | 190 |\n| Purple        | 35  | 1   | 255 |\n| Blacklight    | 15  | 3   | 255 |"
  },
  "5500": {
      "prefix": "SetVehicleNitroEnabled",
      "body": [
          "SetVehicleNitroEnabled(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1604\nNativeDB Added Parameter 2 (2060): float level\nNativeDB Added Parameter 3 (2060): float power\nNativeDB Added Parameter 4 (2060): float rechargeTime\nNativeDB Added Parameter 5 (2060): BOOL disableSound\n```"
  },
  "5501": {
      "prefix": "SetVehicleNeonLightEnabled",
      "body": [
          "SetVehicleNeonLightEnabled(${1:Vehicle* vehicle}, ${2:int* index}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```\nSets the neon lights of the specified vehicle on/off.  \nIndices:  \n0 = Left  \n1 = Right  \n2 = Front  \n3 = Back  \n```"
  },
  "5502": {
      "prefix": "SetVehicleNumberPlateTextIndex",
      "body": [
          "SetVehicleNumberPlateTextIndex(${1:Vehicle* vehicle}, ${2:int* plateIndex})${0}"
      ],
      "description": "```\nPlates:\nBlue/White - 0\nYellow/black - 1\nYellow/Blue - 2\nBlue/White2 - 3\nBlue/White3 - 4\nYankton - 5\n```"
  },
  "5503": {
      "prefix": "SetVehicleNeonLightsColor2",
      "body": [
          "SetVehicleNeonLightsColor2(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1493\n```"
  },
  "5504": {
      "prefix": "SetVehicleNumberPlateText",
      "body": [
          "SetVehicleNumberPlateText(${1:Vehicle* vehicle}, ${2:char* plateText})${0}"
      ],
      "description": "```\nSets a vehicle's license plate text.  8 chars maximum.  \nExample:  \nPed playerPed = PLAYER::PLAYER_PED_ID();  \nVehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);  \nchar *plateText = \"KING\";  \nVEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);  \n```"
  },
  "5505": {
      "prefix": "SetVehicleOutOfControl",
      "body": [
          "SetVehicleOutOfControl(${1:Vehicle* vehicle}, ${2:BOOL* killDriver}, ${3:BOOL* explodeOnImpact})${0}"
      ],
      "description": "```\nTested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.  \n```"
  },
  "5506": {
      "prefix": "SetVehicleOnGroundProperly",
      "body": [
          "SetVehicleOnGroundProperly(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nSets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.  \n```\n\n```\nNativeDB Added Parameter 2: float p1\n```"
  },
  "5507": {
      "prefix": "SetVehicleParachuteModel",
      "body": [
          "SetVehicleParachuteModel(${1:Vehicle* vehicle}, ${2:Hash* modelHash})${0}"
      ],
      "description": "```\nparachuteModel = 230075693  \n```"
  },
  "5508": {
      "prefix": "SetVehicleParachuteActive",
      "body": [
          "SetVehicleParachuteActive(${1:Vehicle* vehicle}, ${2:BOOL* active})${0}"
      ],
      "description": ""
  },
  "5509": {
      "prefix": "SetVehicleParachuteTextureVariation",
      "body": [
          "SetVehicleParachuteTextureVariation(${1:Vehicle* vehicle}, ${2:int* textureVariation})${0}"
      ],
      "description": "```\ncolorIndex = 0 - 7\n```"
  },
  "5510": {
      "prefix": "SetVehiclePetrolTankHealth",
      "body": [
          "SetVehiclePetrolTankHealth(${1:Vehicle* vehicle}, ${2:float* health})${0}"
      ],
      "description": "```\n1000 is max health  \nBegins leaking gas at around 650 health  \n```"
  },
  "5511": {
      "prefix": "SetVehicleProvidesCover",
      "body": [
          "SetVehicleProvidesCover(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5512": {
      "prefix": "SetVehicleRampLaunchModifier",
      "body": [
          "SetVehicleRampLaunchModifier(${1:Vehicle* vehicle}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5513": {
      "prefix": "SetVehicleRampSidewaysLaunchMotion",
      "body": [
          "SetVehicleRampSidewaysLaunchMotion(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5514": {
      "prefix": "SetVehicleRampUpwardsLaunchMotion",
      "body": [
          "SetVehicleRampUpwardsLaunchMotion(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5515": {
      "prefix": "SetVehicleReceivesRampDamage",
      "body": [
          "SetVehicleReceivesRampDamage(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5516": {
      "prefix": "SetVehicleReduceGrip",
      "body": [
          "SetVehicleReduceGrip(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nReduces grip significantly so it's hard to go anywhere.  \n```"
  },
  "5517": {
      "prefix": "SetVehicleReduceTraction",
      "body": [
          "SetVehicleReduceTraction(${1:Vehicle* vehicle}, ${2:int* val})${0}"
      ],
      "description": "Often used in conjunction with: [SET_VEHICLE_REDUCE_GRIP](#\\_0x222FF6A823D122E2).\n\n```\nNativeDB Introduced: v1604\n```"
  },
  "5518": {
      "prefix": "SetVehicleRocketBoostActive",
      "body": [
          "SetVehicleRocketBoostActive(${1:Vehicle* vehicle}, ${2:BOOL* active})${0}"
      ],
      "description": ""
  },
  "5519": {
      "prefix": "SetVehicleRocketBoostPercentage",
      "body": [
          "SetVehicleRocketBoostPercentage(${1:Vehicle* vehicle}, ${2:float* percentage})${0}"
      ],
      "description": ""
  },
  "5520": {
      "prefix": "SetVehicleRocketBoostRefillTime",
      "body": [
          "SetVehicleRocketBoostRefillTime(${1:Vehicle* vehicle}, ${2:float* time})${0}"
      ],
      "description": ""
  },
  "5521": {
      "prefix": "SetVehicleRoofLivery",
      "body": [
          "SetVehicleRoofLivery(${1:Vehicle* vehicle}, ${2:int* livery})${0}"
      ],
      "description": "Used to set the tornado custom (convertible) rooftop livery.\n\nLivery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.\n\nMight work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom."
  },
  "5522": {
      "prefix": "SetVehicleRudderBroken",
      "body": [
          "SetVehicleRudderBroken(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5523": {
      "prefix": "SetVehicleSearchlight",
      "body": [
          "SetVehicleSearchlight(${1:Vehicle* heli}, ${2:BOOL* toggle}, ${3:BOOL* canBeUsedByAI})${0}"
      ],
      "description": "```\nOnly works during nighttime.\n```"
  },
  "5524": {
      "prefix": "SetVehicleShootAtTarget",
      "body": [
          "SetVehicleShootAtTarget(${1:Ped* driver}, ${2:Entity* entity}, ${3:float* xTarget}, ${4:float* yTarget}, ${5:float* zTarget})${0}"
      ],
      "description": "```\nCommands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:  \nWEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY(\"VEHICLE_WEAPON_PLANE_ROCKET\"));VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);  \n```"
  },
  "5525": {
      "prefix": "SetVehicleShadowEffect",
      "body": [
          "SetVehicleShadowEffect(${1:Vehicle* vehicle}, ${2:int* p1}, ${3:int* p2})${0}"
      ],
      "description": "```\nAdds some kind of shadow to the vehicle.\n-1 disables the effect.\nDISABLE_*\n```"
  },
  "5526": {
      "prefix": "SetVehicleSiren",
      "body": [
          "SetVehicleSiren(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nActivate siren on vehicle (Only works if the vehicle has a siren).  \n```"
  },
  "5527": {
      "prefix": "SetVehicleSteerBias",
      "body": [
          "SetVehicleSteerBias(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": "```\nLocks the vehicle's steering to the desired angle, explained below.  \nRequires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.  \nSteer bias:  \n-1.0 = full right  \n0.0 = centered steering  \n1.0 = full left  \n```"
  },
  "5528": {
      "prefix": "SetVehicleSilent",
      "body": [
          "SetVehicleSilent(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nIf set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.  \n```"
  },
  "5529": {
      "prefix": "SetVehicleSt",
      "body": [
          "SetVehicleSt(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nHas something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.  \n============================================  \nMay be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.  \nBtw, func_1333 ends up calling this func which uses this native,  \nvoid func_1338(int iParam0)//Position   \n{  \n\tENTITY::FREEZE_ENTITY_POSITION(iParam0, true);  \n\tENTITY::SET_ENTITY_COLLISION(iParam0, false, 0);  \n\tENTITY::SET_ENTITY_INVINCIBLE(iParam0, true);  \n\tVEHICLE::_0xDF594D8D(iParam0, true);  \n}  \n```"
  },
  "5530": {
      "prefix": "SetVehicleStrong",
      "body": [
          "SetVehicleStrong(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nIf set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives  \n```"
  },
  "5531": {
      "prefix": "SetVehicleSteeringBiasScalar",
      "body": [
          "SetVehicleSteeringBiasScalar(${1:Vehicle* vehicle}, ${2:float* scalar})${0}"
      ],
      "description": ""
  },
  "5532": {
      "prefix": "SetVehicleTankTurretPosition",
      "body": [
          "SetVehicleTankTurretPosition(${1:Vehicle* vehicle}, ${2:float* position}, ${3:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "5533": {
      "prefix": "SetVehicleTimedExplosion",
      "body": [
          "SetVehicleTimedExplosion(${1:Vehicle* vehicle}, ${2:Ped* ped}, ${3:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5534": {
      "prefix": "SetVehicleTurretSpeedThisFrame",
      "body": [
          "SetVehicleTurretSpeedThisFrame(${1:Vehicle* vehicle}, ${2:float* speed})${0}"
      ],
      "description": ""
  },
  "5535": {
      "prefix": "SetVehicleTowTruckArmPosition",
      "body": [
          "SetVehicleTowTruckArmPosition(${1:Vehicle* vehicle}, ${2:float* position})${0}"
      ],
      "description": "```\nSets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.  \n```"
  },
  "5536": {
      "prefix": "SetVehicleTurretUnk",
      "body": [
          "SetVehicleTurretUnk(${1:Vehicle* vehicle}, ${2:int* index}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles specific flag on turret\n```\n\n```\nNativeDB Introduced: v1290\n```"
  },
  "5537": {
      "prefix": "SetVehicleTyreBurst",
      "body": [
          "SetVehicleTyreBurst(${1:Vehicle* vehicle}, ${2:int* index}, ${3:BOOL* onRim}, ${4:float* p3})${0}"
      ],
      "description": "```\n\"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)  \nto burst all tyres type it 8 times where p1 = 0 to 7.  \np3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n```"
  },
  "5538": {
      "prefix": "SetVehicleTyreSmokeColor",
      "body": [
          "SetVehicleTyreSmokeColor(${1:Vehicle* vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": "```\nSets the tire smoke's color of this vehicle.  \nvehicle: The vehicle that is the target of this method.  \nr: The red level in the RGB color code.  \ng: The green level in the RGB color code.  \nb: The blue level in the RGB color code.  \nNote:  \nsetting r,g,b to 0 will give the car independance day tyre smoke  \n```"
  },
  "5539": {
      "prefix": "SetVehicleTyresCanBurst",
      "body": [
          "SetVehicleTyresCanBurst(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nAllows you to toggle bulletproof tires.  \n```"
  },
  "5540": {
      "prefix": "SetVehicleTyreFixed",
      "body": [
          "SetVehicleTyreFixed(${1:Vehicle* vehicle}, ${2:int* tyreIndex})${0}"
      ],
      "description": "```\ntyreIndex = 0 to 4 on normal vehicles  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n```"
  },
  "5541": {
      "prefix": "SetVehicleUnkDamageMultiplier",
      "body": [
          "SetVehicleUnkDamageMultiplier(${1:Vehicle* vehicle}, ${2:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5542": {
      "prefix": "SetVehicleUndriveable",
      "body": [
          "SetVehicleUndriveable(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5543": {
      "prefix": "SetVehicleUseAlternateHandling",
      "body": [
          "SetVehicleUseAlternateHandling(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5544": {
      "prefix": "SetVehicleUseCutsceneWheelCompression",
      "body": [
          "SetVehicleUseCutsceneWheelCompression(${1:Vehicle* p0}, ${2:BOOL* p1}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": ""
  },
  "5545": {
      "prefix": "SetVehicleUsePlayerLightSettings",
      "body": [
          "SetVehicleUsePlayerLightSettings(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5546": {
      "prefix": "SetVehicleUsesLargeRearRamp",
      "body": [
          "SetVehicleUsesLargeRearRamp(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nvehicle must be a plane\n```"
  },
  "5547": {
      "prefix": "SetVehicleWeaponsDisabled",
      "body": [
          "SetVehicleWeaponsDisabled(${1:Vehicle* vehicle}, ${2:int* weaponSlot})${0}"
      ],
      "description": ""
  },
  "5548": {
      "prefix": "SetVehicleWheelType",
      "body": [
          "SetVehicleWheelType(${1:Vehicle* vehicle}, ${2:int* WheelType})${0}"
      ],
      "description": "```\n0: Sport  \n1: Muscle  \n2: Lowrider  \n3: SUV  \n4: Offroad  \n5: Tuner  \n6: Bike Wheels  \n7: High End\n8: Benny's Wheels\n9: Bespoke Wheels\n```"
  },
  "5549": {
      "prefix": "SetVehicleWeaponCapacity",
      "body": [
          "SetVehicleWeaponCapacity(${1:Vehicle* vehicle}, ${2:int* weaponIndex}, ${3:int* capacity})${0}"
      ],
      "description": ""
  },
  "5550": {
      "prefix": "SetVehicleWheelsCanBreakOffWhenBlowUp",
      "body": [
          "SetVehicleWheelsCanBreakOffWhenBlowUp(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5551": {
      "prefix": "SetVehicleWheelsCanBreak",
      "body": [
          "SetVehicleWheelsCanBreak(${1:Vehicle* vehicle}, ${2:BOOL* enabled})${0}"
      ],
      "description": ""
  },
  "5552": {
      "prefix": "SetVehicleWheelsDealDamage",
      "body": [
          "SetVehicleWheelsDealDamage(${1:Vehicle* vehicle}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nRelated to monster trucks in native scripts.\n```\n\n```\nNativeDB Introduced: v1604\n```"
  },
  "5553": {
      "prefix": "SetVehicleWindowTint",
      "body": [
          "SetVehicleWindowTint(${1:Vehicle* vehicle}, ${2:int* tint})${0}"
      ],
      "description": "```\nenum WindowTints  \n{  \n\tWINDOWTINT_NONE,  \n\tWINDOWTINT_PURE_BLACK,  \n\tWINDOWTINT_DARKSMOKE,  \n\tWINDOWTINT_LIGHTSMOKE,  \n\tWINDOWTINT_STOCK,  \n\tWINDOWTINT_LIMO,  \n\tWINDOWTINT_GREEN  \n};  \n```"
  },
  "5554": {
      "prefix": "SkipTimeInPlaybackRecordedVehicle",
      "body": [
          "SkipTimeInPlaybackRecordedVehicle(${1:Vehicle* vehicle}, ${2:float* time})${0}"
      ],
      "description": "```\nSET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)\n```"
  },
  "5555": {
      "prefix": "SetVehicleXenonLightsColor",
      "body": [
          "SetVehicleXenonLightsColor(${1:Vehicle* vehicle}, ${2:int* color})${0}"
      ],
      "description": "Paint index goes from 0 to 12.\n\nYou can find the list of colors and ids here: [\\_GET_VEHICLE_HEADLIGHTS_COLOUR](#\\_0x3DFF319A831E0CDB)"
  },
  "5556": {
      "prefix": "SkipToEndAndStopPlaybackRecordedVehicle",
      "body": [
          "SkipToEndAndStopPlaybackRecordedVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5557": {
      "prefix": "StabiliseEntityAttachedToHeli",
      "body": [
          "StabiliseEntityAttachedToHeli(${1:Vehicle* vehicle}, ${2:Entity* entity}, ${3:float* p2})${0}"
      ],
      "description": ""
  },
  "5558": {
      "prefix": "SmashVehicleWindow",
      "body": [
          "SmashVehicleWindow(${1:Vehicle* vehicle}, ${2:int* windowIndex})${0}"
      ],
      "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1)."
  },
  "5559": {
      "prefix": "StartPlaybackRecordedVehicle",
      "body": [
          "StartPlaybackRecordedVehicle(${1:Vehicle* vehicle}, ${2:int* recording}, ${3:char* script}, ${4:BOOL* p3})${0}"
      ],
      "description": "p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).\n\nSee [`REQUEST_VEHICLE_RECORDING`](#\\_0xAF514CABE74CBF15)."
  },
  "5560": {
      "prefix": "StartPlaybackRecordedVehicleUsingAi",
      "body": [
          "StartPlaybackRecordedVehicleUsingAi(${1:Vehicle* vehicle}, ${2:int* recording}, ${3:char* script}, ${4:float* speed}, ${5:int* drivingStyle})${0}"
      ],
      "description": "```\nAI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.\n\n0x1F2E4E06DEA8992B is a related native that deals with the AI physics for such recordings.\n```"
  },
  "5561": {
      "prefix": "StartPlaybackRecordedVehicleWithFlags",
      "body": [
          "StartPlaybackRecordedVehicleWithFlags(${1:Vehicle* vehicle}, ${2:int* recording}, ${3:char* script}, ${4:int* flags}, ${5:int* time}, ${6:int* drivingStyle})${0}"
      ],
      "description": "```\nflags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.\ntime, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER\n```"
  },
  "5562": {
      "prefix": "StartVehicleAlarm",
      "body": [
          "StartVehicleAlarm(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5563": {
      "prefix": "StopAllGarageActivity",
      "body": [
          "StopAllGarageActivity()${0}"
      ],
      "description": ""
  },
  "5564": {
      "prefix": "StartVehicleHorn",
      "body": [
          "StartVehicleHorn(${1:Vehicle* vehicle}, ${2:int* duration}, ${3:Hash* mode}, ${4:BOOL* forever})${0}"
      ],
      "description": "```\nSounds the horn for the specified vehicle.  \nvehicle: The vehicle to activate the horn for.  \nmode: The hash of \"NORMAL\" or \"HELDDOWN\". Can be 0.  \nduration: The duration to sound the horn, in milliseconds.  \nNote: If a player is in the vehicle, it will only sound briefly.  \n```"
  },
  "5565": {
      "prefix": "StopPlaybackRecordedVehicle",
      "body": [
          "StopPlaybackRecordedVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5566": {
      "prefix": "TrackVehicleVisibility",
      "body": [
          "TrackVehicleVisibility(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nin script hook .net   \nVehicle v = ...;  \nFunction.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);  \n```"
  },
  "5567": {
      "prefix": "StopBringVehicleToHalt",
      "body": [
          "StopBringVehicleToHalt(${1:Vehicle* vehicle})${0}"
      ],
      "description": "```\nStops CTaskBringVehicleToHalt\n```"
  },
  "5568": {
      "prefix": "SwitchTrainTrack",
      "body": [
          "SwitchTrainTrack(${1:int* trackId}, ${2:BOOL* state})${0}"
      ],
      "description": "Toggles whether ambient trains can spawn on the specified track or not.\n\n| trackId | File | Description |\n| --- | --- | --- |\n| 0 | `trains1.dat` | Main track around SA |\n| 1 | `trains2.dat` | Davis Quartz Quarry branch |\n| 2 | `trains3.dat` | Second track alongside live track along Roy Lewenstein Blv. |\n| 3 | `trains4.dat` | Metro track circuit |\n| 4 | `trains5.dat` | Branch in Mirror Park Railyard |\n| 5 | `trains6.dat` | Branch in Mirror Park Railyard |\n| 6 | `trains7.dat` | LS branch to Mirror Park Railyard |\n| 7 | `trains8.dat` | Overground part of metro track along Forum Dr. |\n| 8 | `trains9.dat` | Branch to Mirror Park Railyard |\n| 9 | `trains10.dat` | Yankton train |\n| 10 | `trains11.dat` | Part of metro track near mission row |\n| 11 | `trains12.dat` | Yankton prologue mission train |\n\nTracks IDs `0` and `3` are the main tracks you find trains on during normal gameplay, all the others are used during missions and are not complete tracks."
  },
  "5569": {
      "prefix": "TransformVehicleToSubmarine",
      "body": [
          "TransformVehicleToSubmarine(${1:Vehicle* vehicle}, ${2:BOOL* instantly})${0}"
      ],
      "description": "Transforms the `stormberg` to its \"water vehicle\" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all."
  },
  "5570": {
      "prefix": "ToggleVehicleMod",
      "body": [
          "ToggleVehicleMod(${1:Vehicle* vehicle}, ${2:int* modType}, ${3:BOOL* toggle})${0}"
      ],
      "description": "```\nToggles:\nUNK17 - 17\nTurbo - 18\nUNK19 - 19\nTire Smoke - 20\nUNK21 - 21\nXenon Headlights - 22\n```"
  },
  "5571": {
      "prefix": "UnpausePlaybackRecordedVehicle",
      "body": [
          "UnpausePlaybackRecordedVehicle(${1:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5572": {
      "prefix": "TransformSubmarineToVehicle",
      "body": [
          "TransformSubmarineToVehicle(${1:Vehicle* vehicle}, ${2:BOOL* instantly})${0}"
      ],
      "description": "Transforms the `stormberg` to its \"road vehicle\" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all."
  },
  "5573": {
      "prefix": "SetVehicleCheatPowerIncrease",
      "body": [
          "SetVehicleCheatPowerIncrease(${1:Vehicle* vehicle}, ${2:float* value})${0}"
      ],
      "description": "```\n<1.0 - Decreased torque\n=1.0 - Default torque\n>1.0 - Increased torque\nNegative values will cause the vehicle to go backwards instead of forwards while accelerating.\nvalue - is between 0.2 and 1.8 in the decompiled scripts.\nThis needs to be called every frame to take effect.\n```"
  },
  "5574": {
      "prefix": "ArePlayerStarsGreyedOut",
      "body": [
          "ArePlayerStarsGreyedOut(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5575": {
      "prefix": "ArePlayerFlashingStarsAboutToDrop",
      "body": [
          "ArePlayerFlashingStarsAboutToDrop(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5576": {
      "prefix": "AssistedMovementFlushRoute",
      "body": [
          "AssistedMovementFlushRoute()${0}"
      ],
      "description": ""
  },
  "5577": {
      "prefix": "CanPlayerStartMission",
      "body": [
          "CanPlayerStartMission(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5578": {
      "prefix": "AssistedMovementCloseRoute",
      "body": [
          "AssistedMovementCloseRoute()${0}"
      ],
      "description": ""
  },
  "5579": {
      "prefix": "ClearPlayerHasDamagedAtLeastOneNonAnimalPed",
      "body": [
          "ClearPlayerHasDamagedAtLeastOneNonAnimalPed(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5580": {
      "prefix": "CanPedHearPlayer",
      "body": [
          "CanPedHearPlayer(${1:Player* player}, ${2:Ped* ped})${0}"
      ],
      "description": ""
  },
  "5581": {
      "prefix": "ClearPlayerParachuteModelOverride",
      "body": [
          "ClearPlayerParachuteModelOverride(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5582": {
      "prefix": "ChangePlayerPed",
      "body": [
          "ChangePlayerPed(${1:Player* player}, ${2:Ped* ped}, ${3:BOOL* b2}, ${4:BOOL* resetDamage})${0}"
      ],
      "description": ""
  },
  "5583": {
      "prefix": "ClearPlayerHasDamagedAtLeastOnePed",
      "body": [
          "ClearPlayerHasDamagedAtLeastOnePed(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5584": {
      "prefix": "ClearPlayerParachuteVariationOverride",
      "body": [
          "ClearPlayerParachuteVariationOverride(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5585": {
      "prefix": "ClearPlayerParachutePackModelOverride",
      "body": [
          "ClearPlayerParachutePackModelOverride(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5586": {
      "prefix": "ClearPlayerReserveParachuteModelOverride",
      "body": [
          "ClearPlayerReserveParachuteModelOverride(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5587": {
      "prefix": "DisablePlayerVehicleRewards",
      "body": [
          "DisablePlayerVehicleRewards(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5588": {
      "prefix": "ClearPlayerWantedLevel",
      "body": [
          "ClearPlayerWantedLevel(${1:Player* player})${0}"
      ],
      "description": "```\nThis executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);  \nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.  \n```"
  },
  "5589": {
      "prefix": "EnableSpecialAbility",
      "body": [
          "EnableSpecialAbility(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "5590": {
      "prefix": "DisablePlayerFiring",
      "body": [
          "DisablePlayerFiring(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nInhibits the player from using any method of combat including melee and firearms.  \nNOTE: Only disables the firing for one frame  \n```"
  },
  "5591": {
      "prefix": "ForceCleanup",
      "body": [
          "ForceCleanup(${1:int* cleanupFlags})${0}"
      ],
      "description": "```\nused with 1,2,8,64,128 in the scripts  \n```"
  },
  "5592": {
      "prefix": "DisplaySystemSigninUi",
      "body": [
          "DisplaySystemSigninUi(${1:BOOL* unk})${0}"
      ],
      "description": "```\nPurpose of the BOOL currently unknown.  \nBoth, true and false, work  \n```"
  },
  "5593": {
      "prefix": "ForceCleanupForAllThreadsWithThisName",
      "body": [
          "ForceCleanupForAllThreadsWithThisName(${1:char* name}, ${2:int* cleanupFlags})${0}"
      ],
      "description": "```\nPLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(\"pb_prostitute\", 1); // Found in decompilation  \n```"
  },
  "5594": {
      "prefix": "ExtendWorldBoundaryForPlayer",
      "body": [
          "ExtendWorldBoundaryForPlayer(${1:float* x}, ${2:float* y}, ${3:float* z})${0}"
      ],
      "description": "```\nAppears only 3 times in the scripts, more specifically in michael1.ysc\n-\nThis can be used to prevent dying if you are \"out of the world\"\n```"
  },
  "5595": {
      "prefix": "GetAchievementProgress",
      "body": [
          "GetAchievementProgress(${1:int* achievement})${0}"
      ],
      "description": "```\nFor Steam.\nAlways returns 0 in retail version of the game.\n```"
  },
  "5596": {
      "prefix": "ForceCleanupForThreadWithThisId",
      "body": [
          "ForceCleanupForThreadWithThisId(${1:int* id}, ${2:int* cleanupFlags})${0}"
      ],
      "description": ""
  },
  "5597": {
      "prefix": "GetEntityPlayerIsFreeAimingAt",
      "body": [
          "GetEntityPlayerIsFreeAimingAt(${1:Player* player}, ${2:Entity* entity})${0}"
      ],
      "description": "```\nReturns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.  \nReturns false if no entity found.  \n```"
  },
  "5598": {
      "prefix": "GetCauseOfMostRecentForceCleanup",
      "body": [
          "GetCauseOfMostRecentForceCleanup()${0}"
      ],
      "description": ""
  },
  "5599": {
      "prefix": "GetNumberOfPlayers",
      "body": [
          "GetNumberOfPlayers()${0}"
      ],
      "description": "```\nGets the number of players in the current session.\nIf not multiplayer, always returns 1.\n```"
  },
  "5600": {
      "prefix": "GetPlayerCurrentStealthNoise",
      "body": [
          "GetPlayerCurrentStealthNoise(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5601": {
      "prefix": "GetMaxWantedLevel",
      "body": [
          "GetMaxWantedLevel()${0}"
      ],
      "description": "```\nGets the maximum wanted level the player can get.  \nRanges from 0 to 5.  \n```"
  },
  "5602": {
      "prefix": "GetNumberOfPlayersInTeam",
      "body": [
          "GetNumberOfPlayersInTeam(${1:int* team})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "5603": {
      "prefix": "GetPlayerFakeWantedLevel",
      "body": [
          "GetPlayerFakeWantedLevel(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5604": {
      "prefix": "GetPlayerGroup",
      "body": [
          "GetPlayerGroup(${1:Player* player})${0}"
      ],
      "description": "```\nReturns the group ID the player is member of.  \n```"
  },
  "5605": {
      "prefix": "GetPlayerHasReserveParachute",
      "body": [
          "GetPlayerHasReserveParachute(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5606": {
      "prefix": "GetPlayerHealthRechargeLimit",
      "body": [
          "GetPlayerHealthRechargeLimit(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5607": {
      "prefix": "GetPlayerInvincible",
      "body": [
          "GetPlayerInvincible(${1:Player* player})${0}"
      ],
      "description": "```\nReturns the Player's Invincible status.  \nThis function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:  \n\tbool IsPlayerInvincible(Player player)  \n\t{  \nauto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));\t  \nif (addr)  \n{  \n\tDWORD flag = *(DWORD *)(addr + 0x188);  \n\treturn ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);  \n}  \nreturn false;  \n\t}  \n============================================================  \nThis has bothered me for too long, whoever may come across this, where did anyone ever come up with this made up hash? 0x733A643B5B0C53C1 I've looked all over old hash list, and this nativedb I can not find that PC hash anywhere. What native name is it now or was it?  \n```"
  },
  "5608": {
      "prefix": "GetPlayerIndex",
      "body": [
          "GetPlayerIndex()${0}"
      ],
      "description": "```\nReturns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT  \n```"
  },
  "5609": {
      "prefix": "GetPlayerMaxArmour",
      "body": [
          "GetPlayerMaxArmour(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5610": {
      "prefix": "GetPlayerName",
      "body": [
          "GetPlayerName(${1:Player* player})${0}"
      ],
      "description": "Returns the players name from a specified player index"
  },
  "5611": {
      "prefix": "GetPlayerParachuteModelOverride",
      "body": [
          "GetPlayerParachuteModelOverride(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5612": {
      "prefix": "GetPlayerParachutePackTintIndex",
      "body": [
          "GetPlayerParachutePackTintIndex(${1:Player* player}, ${2:int* tintIndex})${0}"
      ],
      "description": ""
  },
  "5613": {
      "prefix": "GetPlayerParachuteSmokeTrailColor",
      "body": [
          "GetPlayerParachuteSmokeTrailColor(${1:Player* player}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "5614": {
      "prefix": "GetPlayerParachuteTintIndex",
      "body": [
          "GetPlayerParachuteTintIndex(${1:Player* player}, ${2:int* tintIndex})${0}"
      ],
      "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```"
  },
  "5615": {
      "prefix": "GetPlayerPed",
      "body": [
          "GetPlayerPed(${1:Player* playerId})${0}"
      ],
      "description": "Gets the ped for a specified player index."
  },
  "5616": {
      "prefix": "GetPlayerReserveParachuteTintIndex",
      "body": [
          "GetPlayerReserveParachuteTintIndex(${1:Player* player}, ${2:int* index})${0}"
      ],
      "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```"
  },
  "5617": {
      "prefix": "GetPlayerSprintTimeRemaining",
      "body": [
          "GetPlayerSprintTimeRemaining(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5618": {
      "prefix": "GetPlayerPedScriptIndex",
      "body": [
          "GetPlayerPedScriptIndex(${1:Player* player})${0}"
      ],
      "description": "```\nDoes the same like PLAYER::GET_PLAYER_PED\n```"
  },
  "5619": {
      "prefix": "GetPlayerReserveParachuteModelOverride",
      "body": [
          "GetPlayerReserveParachuteModelOverride(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5620": {
      "prefix": "GetPlayerTargetEntity",
      "body": [
          "GetPlayerTargetEntity(${1:Player* player}, ${2:Entity* entity})${0}"
      ],
      "description": "```\nAssigns the handle of locked-on melee target to *entity that you pass it.  \nReturns false if no entity found.  \n```"
  },
  "5621": {
      "prefix": "GetPlayerRgbColour",
      "body": [
          "GetPlayerRgbColour(${1:Player* player}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "5622": {
      "prefix": "GetPlayerUnderwaterTimeRemaining",
      "body": [
          "GetPlayerUnderwaterTimeRemaining(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5623": {
      "prefix": "GetPlayerSprintStaminaRemaining",
      "body": [
          "GetPlayerSprintStaminaRemaining(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5624": {
      "prefix": "GetPlayerWantedLevel",
      "body": [
          "GetPlayerWantedLevel(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5625": {
      "prefix": "GetTimeSinceLastArrest",
      "body": [
          "GetTimeSinceLastArrest()${0}"
      ],
      "description": "```\nReturns the time since the character was arrested in (ms) milliseconds.  \nexample  \nvar time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();  \nUI.DrawSubtitle(time.ToString());  \nif player has not been arrested, the int returned will be -1.  \n```"
  },
  "5626": {
      "prefix": "GetPlayerTeam",
      "body": [
          "GetPlayerTeam(${1:Player* player})${0}"
      ],
      "description": "```\nGets the player's team.  \nDoes nothing in singleplayer.  \n```"
  },
  "5627": {
      "prefix": "GetTimeSinceLastDeath",
      "body": [
          "GetTimeSinceLastDeath()${0}"
      ],
      "description": "```\nReturns the time since the character died in (ms) milliseconds.  \nexample  \nvar time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();  \nUI.DrawSubtitle(time.ToString());  \nif player has not died, the int returned will be -1.  \n```"
  },
  "5628": {
      "prefix": "GetTimeSincePlayerDroveOnPavement",
      "body": [
          "GetTimeSincePlayerDroveOnPavement(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5629": {
      "prefix": "GetPlayerWantedCentrePosition",
      "body": [
          "GetPlayerWantedCentrePosition(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5630": {
      "prefix": "GetTimeSincePlayerHitVehicle",
      "body": [
          "GetTimeSincePlayerHitVehicle(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5631": {
      "prefix": "GetPlayersLastVehicle",
      "body": [
          "GetPlayersLastVehicle()${0}"
      ],
      "description": "```\nAlternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);  \n```"
  },
  "5632": {
      "prefix": "GetTimeSincePlayerDroveAgainstTraffic",
      "body": [
          "GetTimeSincePlayerDroveAgainstTraffic(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5633": {
      "prefix": "GetTimeSincePlayerHitPed",
      "body": [
          "GetTimeSincePlayerHitPed(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5634": {
      "prefix": "GetWantedLevelThreshold",
      "body": [
          "GetWantedLevelThreshold(${1:int* wantedLevel})${0}"
      ],
      "description": "```\nDrft  \n```"
  },
  "5635": {
      "prefix": "GiveAchievementToPlayer",
      "body": [
          "GiveAchievementToPlayer(${1:int* achievement})${0}"
      ],
      "description": "```\nAchievements from 0-57\nmore achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.\n```"
  },
  "5636": {
      "prefix": "GetWantedLevelRadius",
      "body": [
          "GetWantedLevelRadius(${1:Player* player})${0}"
      ],
      "description": "```\nRemnant from GTA IV. Does nothing in GTA V.\n```"
  },
  "5637": {
      "prefix": "GivePlayerRagdollControl",
      "body": [
          "GivePlayerRagdollControl(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5638": {
      "prefix": "HasPlayerBeenSpottedInStolenVehicle",
      "body": [
          "HasPlayerBeenSpottedInStolenVehicle(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5639": {
      "prefix": "HasPlayerDamagedAtLeastOnePed",
      "body": [
          "HasPlayerDamagedAtLeastOnePed(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5640": {
      "prefix": "HasAchievementBeenPassed",
      "body": [
          "HasAchievementBeenPassed(${1:int* achievement})${0}"
      ],
      "description": ""
  },
  "5641": {
      "prefix": "IntToParticipantindex",
      "body": [
          "IntToParticipantindex(${1:int* value})${0}"
      ],
      "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n--------------------------------------------------------  \nif (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))  \n```"
  },
  "5642": {
      "prefix": "IntToPlayerindex",
      "body": [
          "IntToPlayerindex(${1:int* value})${0}"
      ],
      "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```"
  },
  "5643": {
      "prefix": "HasForceCleanupOccurred",
      "body": [
          "HasForceCleanupOccurred(${1:int* cleanupFlags})${0}"
      ],
      "description": ""
  },
  "5644": {
      "prefix": "HasPlayerDamagedAtLeastOneNonAnimalPed",
      "body": [
          "HasPlayerDamagedAtLeastOneNonAnimalPed(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5645": {
      "prefix": "HasPlayerLeftTheWorld",
      "body": [
          "HasPlayerLeftTheWorld(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5646": {
      "prefix": "IsPlayerBeingArrested",
      "body": [
          "IsPlayerBeingArrested(${1:Player* player}, ${2:BOOL* atArresting})${0}"
      ],
      "description": "```\nReturn true while player is being arrested / busted.  \nIf atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)  \nIf atArresting is set to 0, this function will return 1 only when the busted screen is shown.  \n```"
  },
  "5647": {
      "prefix": "IsPlayerBluetoothEnable",
      "body": [
          "IsPlayerBluetoothEnable(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5648": {
      "prefix": "IsPlayerBattleAware",
      "body": [
          "IsPlayerBattleAware(${1:Player* player})${0}"
      ],
      "description": "```\nReturns true if an unk value is greater than 0.0f  \n```"
  },
  "5649": {
      "prefix": "IsPlayerClimbing",
      "body": [
          "IsPlayerClimbing(${1:Player* player})${0}"
      ],
      "description": "```\nReturns TRUE if the player ('s ped) is climbing at the moment.  \n```"
  },
  "5650": {
      "prefix": "IsPlayerCamControlDisabled",
      "body": [
          "IsPlayerCamControlDisabled()${0}"
      ],
      "description": "```\nReturns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.  \nNote: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.  \n```"
  },
  "5651": {
      "prefix": "IsPlayerControlOn",
      "body": [
          "IsPlayerControlOn(${1:Player* player})${0}"
      ],
      "description": "```\nCan the player control himself, used to disable controls for player for things like a cutscene.  \n---  \nYou can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.  \n```"
  },
  "5652": {
      "prefix": "IsPlayerFreeAimingAtEntity",
      "body": [
          "IsPlayerFreeAimingAtEntity(${1:Player* player}, ${2:Entity* entity})${0}"
      ],
      "description": "```\nGets a value indicating whether the specified player is currently aiming freely at the specified entity.  \n```"
  },
  "5653": {
      "prefix": "IsPlayerDead",
      "body": [
          "IsPlayerDead(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5654": {
      "prefix": "IsPlayerFreeForAmbientTask",
      "body": [
          "IsPlayerFreeForAmbientTask(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5655": {
      "prefix": "IsPlayerFreeAiming",
      "body": [
          "IsPlayerFreeAiming(${1:Player* player})${0}"
      ],
      "description": "```\nGets a value indicating whether the specified player is currently aiming freely.  \n```"
  },
  "5656": {
      "prefix": "IsPlayerOnline",
      "body": [
          "IsPlayerOnline()${0}"
      ],
      "description": "```\nReturns TRUE if the game is in online mode and FALSE if in offline mode.  \nThis is an alias for NETWORK_IS_SIGNED_ONLINE.  \n```"
  },
  "5657": {
      "prefix": "IsPlayerLoggingInNp",
      "body": [
          "IsPlayerLoggingInNp()${0}"
      ],
      "description": "```\nthis function is hard-coded to always return 0.  \n```"
  },
  "5658": {
      "prefix": "IsPlayerPlaying",
      "body": [
          "IsPlayerPlaying(${1:Player* player})${0}"
      ],
      "description": "```\nChecks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.  \n```"
  },
  "5659": {
      "prefix": "IsPlayerReadyForCutscene",
      "body": [
          "IsPlayerReadyForCutscene(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5660": {
      "prefix": "IsPlayerTargettingAnything",
      "body": [
          "IsPlayerTargettingAnything(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5661": {
      "prefix": "IsPlayerPressingHorn",
      "body": [
          "IsPlayerPressingHorn(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5662": {
      "prefix": "IsPlayerRidingTrain",
      "body": [
          "IsPlayerRidingTrain(${1:Player* player})${0}"
      ],
      "description": "```\nReturns true if the player is riding a train.  \n```"
  },
  "5663": {
      "prefix": "IsPlayerTargettingEntity",
      "body": [
          "IsPlayerTargettingEntity(${1:Player* player}, ${2:Entity* entity})${0}"
      ],
      "description": ""
  },
  "5664": {
      "prefix": "IsPlayerTeleportActive",
      "body": [
          "IsPlayerTeleportActive()${0}"
      ],
      "description": ""
  },
  "5665": {
      "prefix": "IsPlayerScriptControlOn",
      "body": [
          "IsPlayerScriptControlOn(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5666": {
      "prefix": "IsSpecialAbilityEnabled",
      "body": [
          "IsSpecialAbilityEnabled(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5667": {
      "prefix": "IsPlayerWantedLevelGreater",
      "body": [
          "IsPlayerWantedLevelGreater(${1:Player* player}, ${2:int* wantedLevel})${0}"
      ],
      "description": ""
  },
  "5668": {
      "prefix": "IsSpecialAbilityActive",
      "body": [
          "IsSpecialAbilityActive(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5669": {
      "prefix": "IsSpecialAbilityMeterFull",
      "body": [
          "IsSpecialAbilityMeterFull(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5670": {
      "prefix": "IsSpecialAbilityUnlocked",
      "body": [
          "IsSpecialAbilityUnlocked(${1:Hash* playerModel})${0}"
      ],
      "description": ""
  },
  "5671": {
      "prefix": "IsSystemUiBeingDisplayed",
      "body": [
          "IsSystemUiBeingDisplayed()${0}"
      ],
      "description": ""
  },
  "5672": {
      "prefix": "NetworkPlayerIdToInt",
      "body": [
          "NetworkPlayerIdToInt()${0}"
      ],
      "description": "```\nDoes exactly the same thing as PLAYER_ID()  \n```"
  },
  "5673": {
      "prefix": "PlayerDetachVirtualBound",
      "body": [
          "PlayerDetachVirtualBound()${0}"
      ],
      "description": "```\n1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n```"
  },
  "5674": {
      "prefix": "PlayerAttachVirtualBound",
      "body": [
          "PlayerAttachVirtualBound(${1:float* p0}, ${2:float* p1}, ${3:float* p2}, ${4:float* p3}, ${5:float* p4}, ${6:float* p5}, ${7:float* p6}, ${8:float* p7})${0}"
      ],
      "description": "```\nOnly 1 match. ob_sofa_michael.  \nPLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n```"
  },
  "5675": {
      "prefix": "PlayerId",
      "body": [
          "PlayerId()${0}"
      ],
      "description": "```\nThis returns YOUR 'identity' as a Player type.  \nAlways returns 0 in story mode.  \n```"
  },
  "5676": {
      "prefix": "PlayerPedId",
      "body": [
          "PlayerPedId()${0}"
      ],
      "description": "```\nReturns current player ped  \n```"
  },
  "5677": {
      "prefix": "RemovePlayerHelmet",
      "body": [
          "RemovePlayerHelmet(${1:Player* player}, ${2:BOOL* p2})${0}"
      ],
      "description": ""
  },
  "5678": {
      "prefix": "ResetPlayerInputGait",
      "body": [
          "ResetPlayerInputGait(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5679": {
      "prefix": "ReportCrime",
      "body": [
          "ReportCrime(${1:Player* player}, ${2:int* crimeType}, ${3:int* wantedLvlThresh})${0}"
      ],
      "description": "```\nPLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));  \nFrom am_armybase.ysc.c4:  \nPLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));  \n-----  \nThis was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7   \n-----  \ncrimeType:  \n1: Firearms possession  \n2: Person running a red light (\"5-0-5\")  \n3: Reckless driver  \n4: Speeding vehicle (a \"5-10\")  \n5: Traffic violation (a \"5-0-5\")  \n6: Motorcycle rider without a helmet  \n7: Vehicle theft (a \"5-0-3\")  \n8: Grand Theft Auto  \n9: ???  \n10: ???  \n11: Assault on a civilian (a \"2-40\")  \n12: Assault on an officer  \n13: Assault with a deadly weapon (a \"2-45\")  \n14: Officer shot (a \"2-45\")  \n15: Pedestrian struck by a vehicle  \n16: Officer struck by a vehicle  \n17: Helicopter down (an \"AC\"?)  \n18: Civilian on fire (a \"2-40\")  \n19: Officer set on fire (a \"10-99\")  \n20: Car on fire  \n21: Air unit down (an \"AC\"?)  \n22: An explosion (a \"9-96\")  \n23: A stabbing (a \"2-45\") (also something else I couldn't understand)  \n24: Officer stabbed (also something else I couldn't understand)  \n25: Attack on a vehicle (\"MDV\"?)  \n26: Damage to property  \n27: Suspect threatening officer with a firearm  \n28: Shots fired  \n29: ???  \n30: ???  \n31: ???  \n32: ???  \n33: ???  \n34: A \"2-45\"  \n35: ???  \n36: A \"9-25\"  \n37: ???  \n38: ???  \n39: ???  \n40: ???  \n41: ???  \n42: ???  \n43: Possible disturbance  \n44: Civilian in need of assistance  \n45: ???  \n46: ???  \n```"
  },
  "5680": {
      "prefix": "ReportPoliceSpottedPlayer",
      "body": [
          "ReportPoliceSpottedPlayer(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5681": {
      "prefix": "ResetPlayerStamina",
      "body": [
          "ResetPlayerStamina(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5682": {
      "prefix": "ResetWorldBoundaryForPlayer",
      "body": [
          "ResetWorldBoundaryForPlayer()${0}"
      ],
      "description": "```\nNativeDB Introduced: v323\n```"
  },
  "5683": {
      "prefix": "ResetPlayerArrestState",
      "body": [
          "ResetPlayerArrestState(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5684": {
      "prefix": "SetAirDragMultiplierForPlayersVehicle",
      "body": [
          "SetAirDragMultiplierForPlayersVehicle(${1:Player* player}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nThis can be between 1.0f - 14.9f   \nYou can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.  \nOn PC the multiplier can be between 0.0f and 50.0f (inclusive).  \n```"
  },
  "5685": {
      "prefix": "ResetWantedLevelDifficulty",
      "body": [
          "ResetWantedLevelDifficulty(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5686": {
      "prefix": "RestorePlayerStamina",
      "body": [
          "RestorePlayerStamina(${1:Player* player}, ${2:float* p1})${0}"
      ],
      "description": ""
  },
  "5687": {
      "prefix": "SetAchievementProgress",
      "body": [
          "SetAchievementProgress(${1:int* achievement}, ${2:int* progress})${0}"
      ],
      "description": "For Steam.\nDoes nothing and always returns false in the retail version of the game."
  },
  "5688": {
      "prefix": "SetAllRandomPedsFleeThisFrame",
      "body": [
          "SetAllRandomPedsFleeThisFrame(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5689": {
      "prefix": "SetAllRandomPedsFlee",
      "body": [
          "SetAllRandomPedsFlee(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5690": {
      "prefix": "SetAutoGiveScubaGearWhenExitVehicle",
      "body": [
          "SetAutoGiveScubaGearWhenExitVehicle(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5691": {
      "prefix": "SetAutoGiveParachuteWhenEnterPlane",
      "body": [
          "SetAutoGiveParachuteWhenEnterPlane(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5692": {
      "prefix": "SetDispatchCopsForPlayer",
      "body": [
          "SetDispatchCopsForPlayer(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5693": {
      "prefix": "SetDisableAmbientMeleeMove",
      "body": [
          "SetDisableAmbientMeleeMove(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5694": {
      "prefix": "SetEveryoneIgnorePlayer",
      "body": [
          "SetEveryoneIgnorePlayer(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5695": {
      "prefix": "SetMaxWantedLevel",
      "body": [
          "SetMaxWantedLevel(${1:int* maxWantedLevel})${0}"
      ],
      "description": ""
  },
  "5696": {
      "prefix": "SetPlayerCanDoDriveBy",
      "body": [
          "SetPlayerCanDoDriveBy(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "Sets whether the player is able to do drive-bys in vehicle (shooting & aiming in vehicles), this also includes middle finger taunts.\n\nThis is a toggle, it does not have to be ran every frame.\n\nExample:\n\n```lua\nSetPlayerCanDoDriveBy(PlayerId(), false)\n```"
  },
  "5697": {
      "prefix": "SetPlayerCanLeaveParachuteSmokeTrail",
      "body": [
          "SetPlayerCanLeaveParachuteSmokeTrail(${1:Player* player}, ${2:BOOL* enabled})${0}"
      ],
      "description": ""
  },
  "5698": {
      "prefix": "SetIgnoreLowPriorityShockingEvents",
      "body": [
          "SetIgnoreLowPriorityShockingEvents(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5699": {
      "prefix": "SetPlayerBluetoothState",
      "body": [
          "SetPlayerBluetoothState(${1:Player* player}, ${2:BOOL* state})${0}"
      ],
      "description": ""
  },
  "5700": {
      "prefix": "SetPlayerClothPackageIndex",
      "body": [
          "SetPlayerClothPackageIndex(${1:int* index})${0}"
      ],
      "description": "```\nEvery occurrence was either 0 or 2.  \n```"
  },
  "5701": {
      "prefix": "SetPlayerCanBeHassledByGangs",
      "body": [
          "SetPlayerCanBeHassledByGangs(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSets whether this player can be hassled by gangs.  \n```"
  },
  "5702": {
      "prefix": "SetPlayerCanUseCover",
      "body": [
          "SetPlayerCanUseCover(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSets whether this player can take cover.\n```"
  },
  "5703": {
      "prefix": "SetPlayerControl",
      "body": [
          "SetPlayerControl(${1:Player* player}, ${2:BOOL* bHasControl}, ${3:int* flags})${0}"
      ],
      "description": "```\nFlags:\nSPC_AMBIENT_SCRIPT = (1 << 1),\nSPC_CLEAR_TASKS = (1 << 2),\nSPC_REMOVE_FIRES = (1 << 3),\nSPC_REMOVE_EXPLOSIONS = (1 << 4),\nSPC_REMOVE_PROJECTILES = (1 << 5),\nSPC_DEACTIVATE_GADGETS = (1 << 6),\nSPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),\nSPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),\nSPC_ALLOW_PLAYER_DAMAGE = (1 << 9),\nSPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),\nSPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),\nSPC_ALLOW_PAD_SHAKE = (1 << 12)\nSee: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt\n```"
  },
  "5704": {
      "prefix": "SetPlayerFallDistance",
      "body": [
          "SetPlayerFallDistance(${1:Player* player}, ${2:float* distance})${0}"
      ],
      "description": ""
  },
  "5705": {
      "prefix": "SetPlayerClothLockCounter",
      "body": [
          "SetPlayerClothLockCounter(${1:int* value})${0}"
      ],
      "description": "```\n6 matches across 4 scripts. 5 occurrences were 240. The other was 255.  \n```"
  },
  "5706": {
      "prefix": "SetPlayerClothPinFrames",
      "body": [
          "SetPlayerClothPinFrames(${1:Player* player}, ${2:int* p1})${0}"
      ],
      "description": ""
  },
  "5707": {
      "prefix": "SetPlayerForceSkipAimIntro",
      "body": [
          "SetPlayerForceSkipAimIntro(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5708": {
      "prefix": "SetPlayerForcedAim",
      "body": [
          "SetPlayerForcedAim(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5709": {
      "prefix": "SetPlayerForcedZoom",
      "body": [
          "SetPlayerForcedZoom(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5710": {
      "prefix": "SetPlayerHasReserveParachute",
      "body": [
          "SetPlayerHasReserveParachute(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5711": {
      "prefix": "SetPlayerHealthRechargeMultiplier",
      "body": [
          "SetPlayerHealthRechargeMultiplier(${1:Player* player}, ${2:float* regenRate})${0}"
      ],
      "description": ""
  },
  "5712": {
      "prefix": "SetPlayerHealthRechargeLimit",
      "body": [
          "SetPlayerHealthRechargeLimit(${1:Player* player}, ${2:float* limit})${0}"
      ],
      "description": ""
  },
  "5713": {
      "prefix": "SetPlayerInvincible",
      "body": [
          "SetPlayerInvincible(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nSimply sets you as invincible (Health will not deplete).  \nUse 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:  \n*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);  \n```"
  },
  "5714": {
      "prefix": "SetPlayerHomingRocketDisabled",
      "body": [
          "SetPlayerHomingRocketDisabled(${1:Player* player}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nNativeDB Introduced: v1180\n```"
  },
  "5715": {
      "prefix": "SetPlayerLockonRangeOverride",
      "body": [
          "SetPlayerLockonRangeOverride(${1:Player* player}, ${2:float* range})${0}"
      ],
      "description": "```\nAffects the range of auto aim target.  \n```"
  },
  "5716": {
      "prefix": "SetPlayerMaxArmour",
      "body": [
          "SetPlayerMaxArmour(${1:Player* player}, ${2:int* value})${0}"
      ],
      "description": "```\nDefault is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4  \n```"
  },
  "5717": {
      "prefix": "SetPlayerMayOnlyEnterThisVehicle",
      "body": [
          "SetPlayerMayOnlyEnterThisVehicle(${1:Player* player}, ${2:Vehicle* vehicle})${0}"
      ],
      "description": ""
  },
  "5718": {
      "prefix": "SetPlayerInvincibleKeepRagdollEnabled",
      "body": [
          "SetPlayerInvincibleKeepRagdollEnabled(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5719": {
      "prefix": "SetPlayerMeleeWeaponDamageModifier",
      "body": [
          "SetPlayerMeleeWeaponDamageModifier(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: BOOL p2\n```"
  },
  "5720": {
      "prefix": "SetPlayerLeavePedBehind",
      "body": [
          "SetPlayerLeavePedBehind(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5721": {
      "prefix": "SetPlayerNoiseMultiplier",
      "body": [
          "SetPlayerNoiseMultiplier(${1:Player* player}, ${2:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5722": {
      "prefix": "SetPlayerLockon",
      "body": [
          "SetPlayerLockon(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nExample from fm_mission_controler.ysc.c4:  \nPLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);  \nAll other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.  \nNo need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.  \n```"
  },
  "5723": {
      "prefix": "SetPlayerMayNotEnterAnyVehicle",
      "body": [
          "SetPlayerMayNotEnterAnyVehicle(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5724": {
      "prefix": "SetPlayerParachuteModelOverride",
      "body": [
          "SetPlayerParachuteModelOverride(${1:Player* player}, ${2:Hash* model})${0}"
      ],
      "description": "```\nexample:  \nPLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);  \n```"
  },
  "5725": {
      "prefix": "SetPlayerMeleeWeaponDefenseModifier",
      "body": [
          "SetPlayerMeleeWeaponDefenseModifier(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": "```\nmodifier's min value is 0.1\n```"
  },
  "5726": {
      "prefix": "SetPlayerParachutePackTintIndex",
      "body": [
          "SetPlayerParachutePackTintIndex(${1:Player* player}, ${2:int* tintIndex})${0}"
      ],
      "description": "```\ntints 0- 13\n0 - unkown\n1 - unkown\n2 - unkown\n3 - unkown\n4 - unkown\n```"
  },
  "5727": {
      "prefix": "SetPlayerModel",
      "body": [
          "SetPlayerModel(${1:Player* player}, ${2:Hash* model})${0}"
      ],
      "description": "Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset\nMake sure to request the model first and wait until it has loaded."
  },
  "5728": {
      "prefix": "SetPlayerParachuteTintIndex",
      "body": [
          "SetPlayerParachuteTintIndex(${1:Player* player}, ${2:int* tintIndex})${0}"
      ],
      "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```"
  },
  "5729": {
      "prefix": "SetPlayerParachutePackModelOverride",
      "body": [
          "SetPlayerParachutePackModelOverride(${1:Player* player}, ${2:Hash* model})${0}"
      ],
      "description": ""
  },
  "5730": {
      "prefix": "SetPlayerParachuteSmokeTrailColor",
      "body": [
          "SetPlayerParachuteSmokeTrailColor(${1:Player* player}, ${2:int* r}, ${3:int* g}, ${4:int* b})${0}"
      ],
      "description": ""
  },
  "5731": {
      "prefix": "SetPlayerParachuteVariationOverride",
      "body": [
          "SetPlayerParachuteVariationOverride(${1:Player* player}, ${2:int* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:BOOL* p4})${0}"
      ],
      "description": "```\np1 was always 5.  \np4 was always false.  \n```"
  },
  "5732": {
      "prefix": "SetPlayerReserveParachuteModelOverride",
      "body": [
          "SetPlayerReserveParachuteModelOverride(${1:Player* player}, ${2:Hash* model})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5733": {
      "prefix": "SetPlayerReserveParachuteTintIndex",
      "body": [
          "SetPlayerReserveParachuteTintIndex(${1:Player* player}, ${2:int* index})${0}"
      ],
      "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```"
  },
  "5734": {
      "prefix": "SetPlayerResetFlagPreferRearSeats",
      "body": [
          "SetPlayerResetFlagPreferRearSeats(${1:Player* player}, ${2:int* flags})${0}"
      ],
      "description": "```\nexample:  \nflags: 0-6  \nPLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);  \nwouldnt the flag be the seatIndex?  \n```"
  },
  "5735": {
      "prefix": "SetPlayerSimulateAiming",
      "body": [
          "SetPlayerSimulateAiming(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5736": {
      "prefix": "SetPlayerSneakingNoiseMultiplier",
      "body": [
          "SetPlayerSneakingNoiseMultiplier(${1:Player* player}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nValues around 1.0f to 2.0f used in game scripts.  \n```"
  },
  "5737": {
      "prefix": "SetPlayerSprint",
      "body": [
          "SetPlayerSprint(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": ""
  },
  "5738": {
      "prefix": "SetPlayerStealthPerceptionModifier",
      "body": [
          "SetPlayerStealthPerceptionModifier(${1:Player* player}, ${2:float* value})${0}"
      ],
      "description": ""
  },
  "5739": {
      "prefix": "SetPlayerTargetingMode",
      "body": [
          "SetPlayerTargetingMode(${1:int* targetMode})${0}"
      ],
      "description": "```\nSets your targeting mode.\n0 = Assisted Aim - Full\n1 = Assisted Aim - Partial\n2 = Free Aim - Assisted\n3 = Free Aim\n```"
  },
  "5740": {
      "prefix": "SetPlayerUnderwaterTimeRemaining",
      "body": [
          "SetPlayerUnderwaterTimeRemaining(${1:Player* player}, ${2:float* time})${0}"
      ],
      "description": ""
  },
  "5741": {
      "prefix": "SetPlayerVehicleDamageModifier",
      "body": [
          "SetPlayerVehicleDamageModifier(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": "```\nmodifier's min value is 0.1\n```"
  },
  "5742": {
      "prefix": "SetPlayerTargetLevel",
      "body": [
          "SetPlayerTargetLevel(${1:int* targetLevel})${0}"
      ],
      "description": ""
  },
  "5743": {
      "prefix": "SetPlayerTeam",
      "body": [
          "SetPlayerTeam(${1:Player* player}, ${2:int* team})${0}"
      ],
      "description": "```\nSet player team on deathmatch and last team standing..  \n```"
  },
  "5744": {
      "prefix": "SetPlayerVehicleDefenseModifier",
      "body": [
          "SetPlayerVehicleDefenseModifier(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": "```\nmodifier's min value is 0.1\n```"
  },
  "5745": {
      "prefix": "SetPlayerWantedCentrePosition",
      "body": [
          "SetPlayerWantedCentrePosition(${1:Player* player}, ${2:Vector3* position}, ${3:BOOL* p2}, ${4:BOOL* p3})${0}"
      ],
      "description": "```\n# Predominant call signatures  \nPLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));  \n# Parameter value ranges  \nP0: PLAYER::PLAYER_ID()  \nP1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)  \nP2: Not set by any call  \n```"
  },
  "5746": {
      "prefix": "SetPlayerWantedLevel",
      "body": [
          "SetPlayerWantedLevel(${1:Player* player}, ${2:int* wantedLevel}, ${3:BOOL* disableNoMission})${0}"
      ],
      "description": "```\nCall SET_PLAYER_WANTED_LEVEL_NOW for immediate effect  \nwantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files  \ndisableNoMission-  Disables When Off Mission- appears to always be false  \n```"
  },
  "5747": {
      "prefix": "SetPlayerWantedLevelNoDrop",
      "body": [
          "SetPlayerWantedLevelNoDrop(${1:Player* player}, ${2:int* wantedLevel}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np2 is always false in R* scripts  \n```"
  },
  "5748": {
      "prefix": "SetPlayerWeaponDamageModifier",
      "body": [
          "SetPlayerWeaponDamageModifier(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": "The native ensures the 'modifier' parameter is 0.1 or greater."
  },
  "5749": {
      "prefix": "SetPlayerWeaponDefenseModifier",
      "body": [
          "SetPlayerWeaponDefenseModifier(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": ""
  },
  "5750": {
      "prefix": "SetPlayerWantedLevelNow",
      "body": [
          "SetPlayerWantedLevelNow(${1:Player* player}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nForces any pending wanted level to be applied to the specified player immediately.  \nCall SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.  \nSecond parameter is unknown (always false).  \n```"
  },
  "5751": {
      "prefix": "SetPoliceIgnorePlayer",
      "body": [
          "SetPoliceIgnorePlayer(${1:Player* player}, ${2:BOOL* toggle})${0}"
      ],
      "description": "```\nThe player will be ignored by the police if toggle is set to true  \n```"
  },
  "5752": {
      "prefix": "SetPlayerWeaponDefenseModifier2",
      "body": [
          "SetPlayerWeaponDefenseModifier2(${1:Player* player}, ${2:float* modifier})${0}"
      ],
      "description": ""
  },
  "5753": {
      "prefix": "SetRunSprintMultiplierForPlayer",
      "body": [
          "SetRunSprintMultiplierForPlayer(${1:Player* player}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nMultiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.  \nJust call it one time, it is not required to be called once every tick.  \nNote: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.  \nIt is not possible to \"decrease\" speed. Anything below 1 will be ignored.  \n```"
  },
  "5754": {
      "prefix": "SetPoliceRadarBlips",
      "body": [
          "SetPoliceRadarBlips(${1:BOOL* toggle})${0}"
      ],
      "description": "```\nIf toggle is set to false:\n The police won't be shown on the (mini)map\nIf toggle is set to true:\n The police will be shown on the (mini)map\n```"
  },
  "5755": {
      "prefix": "SetWantedLevelDifficulty",
      "body": [
          "SetWantedLevelDifficulty(${1:Player* player}, ${2:float* difficulty})${0}"
      ],
      "description": "```\nMax value is 1.0  \n```"
  },
  "5756": {
      "prefix": "SetWantedLevelHiddenEvasionTime",
      "body": [
          "SetWantedLevelHiddenEvasionTime(${1:Player* player}, ${2:int* wantedLevel}, ${3:int* lossTime})${0}"
      ],
      "description": "```\nNativeDB Introduced: v2060\n```"
  },
  "5757": {
      "prefix": "SetSpecialAbility",
      "body": [
          "SetSpecialAbility(${1:Player* player}, ${2:int* p1})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "5758": {
      "prefix": "SetWantedLevelMultiplier",
      "body": [
          "SetWantedLevelMultiplier(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5759": {
      "prefix": "SetSpecialAbilityMultiplier",
      "body": [
          "SetSpecialAbilityMultiplier(${1:float* multiplier})${0}"
      ],
      "description": ""
  },
  "5760": {
      "prefix": "SimulatePlayerInputGait",
      "body": [
          "SimulatePlayerInputGait(${1:Player* player}, ${2:float* amount}, ${3:int* gaitType}, ${4:float* speed}, ${5:BOOL* p4}, ${6:BOOL* p5})${0}"
      ],
      "description": "```\nThis is to make the player walk without accepting input from INPUT.  \ngaitType is in increments of 100s. 2000, 500, 300, 200, etc.  \np4 is always 1 and p5 is always 0.  \nC# Example :  \nFunction.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms  \n```"
  },
  "5761": {
      "prefix": "SpecialAbilityChargeLarge",
      "body": [
          "SpecialAbilityChargeLarge(${1:Player* player}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\n2 matches. p1 was always true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "5762": {
      "prefix": "SetSwimMultiplierForPlayer",
      "body": [
          "SetSwimMultiplierForPlayer(${1:Player* player}, ${2:float* multiplier})${0}"
      ],
      "description": "```\nSwim speed multiplier.  \nMultiplier goes up to 1.49  \nJust call it one time, it is not required to be called once every tick. - Note copied from below native.  \nNote: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.  \n```"
  },
  "5763": {
      "prefix": "SpecialAbilityChargeNormalized",
      "body": [
          "SpecialAbilityChargeNormalized(${1:Player* player}, ${2:float* normalizedValue}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nnormalizedValue is from 0.0 - 1.0\np2 is always 1\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "5764": {
      "prefix": "SpecialAbilityActivate",
      "body": [
          "SpecialAbilityActivate(${1:Any* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5765": {
      "prefix": "SpecialAbilityChargeAbsolute",
      "body": [
          "SpecialAbilityChargeAbsolute(${1:Player* player}, ${2:int* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\np1 appears as 5, 10, 15, 25, or 30. p2 is always true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "5766": {
      "prefix": "SpecialAbilityChargeOnMissionFailed",
      "body": [
          "SpecialAbilityChargeOnMissionFailed(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5767": {
      "prefix": "SpecialAbilityChargeContinuous",
      "body": [
          "SpecialAbilityChargeContinuous(${1:Player* player}, ${2:Ped* p2})${0}"
      ],
      "description": "```\np1 appears to always be 1 (only comes up twice)\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "5768": {
      "prefix": "SpecialAbilityChargeSmall",
      "body": [
          "SpecialAbilityChargeSmall(${1:Player* player}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nEvery occurrence of p1 & p2 were both true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "5769": {
      "prefix": "SpecialAbilityChargeMedium",
      "body": [
          "SpecialAbilityChargeMedium(${1:Player* player}, ${2:BOOL* p1}, ${3:BOOL* p2})${0}"
      ],
      "description": "```\nOnly 1 match. Both p1 & p2 were true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```"
  },
  "5770": {
      "prefix": "SpecialAbilityDeactivateFast",
      "body": [
          "SpecialAbilityDeactivateFast(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5771": {
      "prefix": "SpecialAbilityDeactivate",
      "body": [
          "SpecialAbilityDeactivate(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5772": {
      "prefix": "SpecialAbilityDeplete",
      "body": [
          "SpecialAbilityDeplete(${1:Any* p0})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5773": {
      "prefix": "SpecialAbilityDepleteMeter",
      "body": [
          "SpecialAbilityDepleteMeter(${1:Player* player}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\np1 was always true.\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "5774": {
      "prefix": "SpecialAbilityFillMeter",
      "body": [
          "SpecialAbilityFillMeter(${1:Player* player}, ${2:BOOL* p1})${0}"
      ],
      "description": "```\nAlso known as _RECHARGE_SPECIAL_ABILITY\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```"
  },
  "5775": {
      "prefix": "SpecialAbilityLock",
      "body": [
          "SpecialAbilityLock(${1:Hash* playerModel})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5776": {
      "prefix": "SpecialAbilityUnlock",
      "body": [
          "SpecialAbilityUnlock(${1:Hash* playerModel})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5777": {
      "prefix": "SpecialAbilityReset",
      "body": [
          "SpecialAbilityReset(${1:Player* player})${0}"
      ],
      "description": "```\nNativeDB Added Parameter 2: Any p1\n```"
  },
  "5778": {
      "prefix": "StartPlayerTeleport",
      "body": [
          "StartPlayerTeleport(${1:Player* player}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* heading}, ${6:BOOL* p5}, ${7:BOOL* findCollisionLand}, ${8:BOOL* p7})${0}"
      ],
      "description": "```\n`findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.\n```"
  },
  "5779": {
      "prefix": "StartFiringAmnesty",
      "body": [
          "StartFiringAmnesty(${1:int* duration})${0}"
      ],
      "description": ""
  },
  "5780": {
      "prefix": "UpdatePlayerTeleport",
      "body": [
          "UpdatePlayerTeleport(${1:Player* player})${0}"
      ],
      "description": ""
  },
  "5781": {
      "prefix": "StopPlayerTeleport",
      "body": [
          "StopPlayerTeleport()${0}"
      ],
      "description": "```\nDisables the player's teleportation  \n```"
  },
  "5782": {
      "prefix": "SwitchCrimeType",
      "body": [
          "SwitchCrimeType(${1:Player* player}, ${2:int* p1})${0}"
      ],
      "description": "```\nThis was previously named as \"RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO\"  \nwhich is obviously incorrect.  \nSeems to only appear in scripts used in Singleplayer. p1 ranges from 2 - 46.  \nI assume this switches the crime type  \n```"
  },
  "5783": {
      "prefix": "GetWantedLevelParoleDuration",
      "body": [
          "GetWantedLevelParoleDuration()${0}"
      ],
      "description": "```\nNativeDB Introduced: v2372\n```"
  },
  "5784": {
      "prefix": "AddEventHandler",
      "body": [
          "AddEventHandler(${1:string* eventName}, function()",
          "\t${0}",
          "end)"
      ],
      "description": "Register an event locally on either the client or the server"
  },
  "5785": {
      "prefix": "RegisterNetEventHandler",
      "body": [
          "RegisterNetEvent(${1:eventName})",
          "AddEventHandler(${1:eventName}, function()",
          "\t${0}",
          "end)"
      ]
  },
  "5786": {
      "prefix": "RegisterNetEvent",
      "body": [
          "RegisterNetEvent(${1:string* eventName})${0}"
      ]
  },
  "5787": {
      "prefix": "Citizen.CreateThread",
      "body": [
          "Citizen.CreateThread(function()",
          "\t${0}",
          "end)"
      ]
  },
  "5788": {
      "prefix": "Citizen.CreateLoopedThread",
      "body": [
          "Citizen.CreateThread(function()",
          "\twhile true do",
          "\t\tCitizen.Wait(${1:int* msTime})${0}",
          "\tend",
          "end)"
      ]
  },
  "5789": {
      "prefix": "Citizen.Wait",
      "body": [
          "Citizen.Wait(${1:int* msTime})${0}"
      ]
  },
  "5790": {
      "prefix": "Citizen.Await",
      "body": [
          "Citizen.Await(${1:int* promiseHandle})${0}"
      ]
  },
  "5791": {
      "prefix": "promise.new",
      "body": [
          "promise.new()${0}"
      ]
  },
  "5792": {
      "prefix": "TriggerEvent",
      "body": [
          "TriggerEvent(${1:string* eventName})${0}"
      ]
  },
  "5793": {
      "prefix": "TriggerClientEvent",
      "body": [
          "TriggerClientEvent(${1:string* eventName}, ${2:int* playerSource})${0}"
      ]
  },
  "5794": {
      "prefix": "TriggerServerEvent",
      "body": [
          "TriggerServerEvent(${1:string* eventName})${0}"
      ]
  }
}